diff --git a/src/ReactVersion.js b/src/ReactVersion.js
index 1ecc489a8..cf91b4c58 100644
--- a/src/ReactVersion.js
+++ b/src/ReactVersion.js
@@ -13,2 +13,2 @@
 
-module.exports = '15.0.0';
+module.exports = '15.6.1';
diff --git a/src/addons/ReactAddonsDOMDependencies.js b/src/addons/ReactAddonsDOMDependencies.js
new file mode 100644
index 000000000..70856ec6c
--- /dev/null
+++ b/src/addons/ReactAddonsDOMDependencies.js
@@ -0,0 +1,37 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactAddonsDOMDependencies
+ */
+
+'use strict';
+
+var ReactDOM = require('ReactDOM');
+
+exports.getReactDOM = function() {
+  return ReactDOM;
+};
+
+if (__DEV__) {
+  var ReactPerf;
+  var ReactTestUtils;
+
+  exports.getReactPerf = function() {
+    if (!ReactPerf) {
+      ReactPerf = require('ReactPerf');
+    }
+    return ReactPerf;
+  };
+
+  exports.getReactTestUtils = function() {
+    if (!ReactTestUtils) {
+      ReactTestUtils = require('ReactTestUtils');
+    }
+    return ReactTestUtils;
+  };
+}
diff --git a/src/addons/ReactComponentWithPureRenderMixin.js b/src/addons/ReactComponentWithPureRenderMixin.js
index afafbdaa7..cf00d7cb3 100644
--- a/src/addons/ReactComponentWithPureRenderMixin.js
+++ b/src/addons/ReactComponentWithPureRenderMixin.js
@@ -38,2 +38,4 @@ var shallowCompare = require('shallowCompare');
  * use `forceUpdate()` when you know deep data structures have changed.
+ *
+ * See https://facebook.github.io/react/docs/pure-render-mixin.html
  */
diff --git a/src/addons/ReactDOMFactories.js b/src/addons/ReactDOMFactories.js
new file mode 100644
index 000000000..f1f82c3a0
--- /dev/null
+++ b/src/addons/ReactDOMFactories.js
@@ -0,0 +1,169 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactDOMFactories
+ */
+
+'use strict';
+
+var ReactElement = require('ReactElement');
+
+/**
+ * Create a factory that creates HTML tag elements.
+ *
+ * @private
+ */
+var createDOMFactory = ReactElement.createFactory;
+if (__DEV__) {
+  var ReactElementValidator = require('ReactElementValidator');
+  createDOMFactory = ReactElementValidator.createFactory;
+}
+
+/**
+ * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
+ *
+ * @public
+ */
+var ReactDOMFactories = {
+  a: createDOMFactory('a'),
+  abbr: createDOMFactory('abbr'),
+  address: createDOMFactory('address'),
+  area: createDOMFactory('area'),
+  article: createDOMFactory('article'),
+  aside: createDOMFactory('aside'),
+  audio: createDOMFactory('audio'),
+  b: createDOMFactory('b'),
+  base: createDOMFactory('base'),
+  bdi: createDOMFactory('bdi'),
+  bdo: createDOMFactory('bdo'),
+  big: createDOMFactory('big'),
+  blockquote: createDOMFactory('blockquote'),
+  body: createDOMFactory('body'),
+  br: createDOMFactory('br'),
+  button: createDOMFactory('button'),
+  canvas: createDOMFactory('canvas'),
+  caption: createDOMFactory('caption'),
+  cite: createDOMFactory('cite'),
+  code: createDOMFactory('code'),
+  col: createDOMFactory('col'),
+  colgroup: createDOMFactory('colgroup'),
+  data: createDOMFactory('data'),
+  datalist: createDOMFactory('datalist'),
+  dd: createDOMFactory('dd'),
+  del: createDOMFactory('del'),
+  details: createDOMFactory('details'),
+  dfn: createDOMFactory('dfn'),
+  dialog: createDOMFactory('dialog'),
+  div: createDOMFactory('div'),
+  dl: createDOMFactory('dl'),
+  dt: createDOMFactory('dt'),
+  em: createDOMFactory('em'),
+  embed: createDOMFactory('embed'),
+  fieldset: createDOMFactory('fieldset'),
+  figcaption: createDOMFactory('figcaption'),
+  figure: createDOMFactory('figure'),
+  footer: createDOMFactory('footer'),
+  form: createDOMFactory('form'),
+  h1: createDOMFactory('h1'),
+  h2: createDOMFactory('h2'),
+  h3: createDOMFactory('h3'),
+  h4: createDOMFactory('h4'),
+  h5: createDOMFactory('h5'),
+  h6: createDOMFactory('h6'),
+  head: createDOMFactory('head'),
+  header: createDOMFactory('header'),
+  hgroup: createDOMFactory('hgroup'),
+  hr: createDOMFactory('hr'),
+  html: createDOMFactory('html'),
+  i: createDOMFactory('i'),
+  iframe: createDOMFactory('iframe'),
+  img: createDOMFactory('img'),
+  input: createDOMFactory('input'),
+  ins: createDOMFactory('ins'),
+  kbd: createDOMFactory('kbd'),
+  keygen: createDOMFactory('keygen'),
+  label: createDOMFactory('label'),
+  legend: createDOMFactory('legend'),
+  li: createDOMFactory('li'),
+  link: createDOMFactory('link'),
+  main: createDOMFactory('main'),
+  map: createDOMFactory('map'),
+  mark: createDOMFactory('mark'),
+  menu: createDOMFactory('menu'),
+  menuitem: createDOMFactory('menuitem'),
+  meta: createDOMFactory('meta'),
+  meter: createDOMFactory('meter'),
+  nav: createDOMFactory('nav'),
+  noscript: createDOMFactory('noscript'),
+  object: createDOMFactory('object'),
+  ol: createDOMFactory('ol'),
+  optgroup: createDOMFactory('optgroup'),
+  option: createDOMFactory('option'),
+  output: createDOMFactory('output'),
+  p: createDOMFactory('p'),
+  param: createDOMFactory('param'),
+  picture: createDOMFactory('picture'),
+  pre: createDOMFactory('pre'),
+  progress: createDOMFactory('progress'),
+  q: createDOMFactory('q'),
+  rp: createDOMFactory('rp'),
+  rt: createDOMFactory('rt'),
+  ruby: createDOMFactory('ruby'),
+  s: createDOMFactory('s'),
+  samp: createDOMFactory('samp'),
+  script: createDOMFactory('script'),
+  section: createDOMFactory('section'),
+  select: createDOMFactory('select'),
+  small: createDOMFactory('small'),
+  source: createDOMFactory('source'),
+  span: createDOMFactory('span'),
+  strong: createDOMFactory('strong'),
+  style: createDOMFactory('style'),
+  sub: createDOMFactory('sub'),
+  summary: createDOMFactory('summary'),
+  sup: createDOMFactory('sup'),
+  table: createDOMFactory('table'),
+  tbody: createDOMFactory('tbody'),
+  td: createDOMFactory('td'),
+  textarea: createDOMFactory('textarea'),
+  tfoot: createDOMFactory('tfoot'),
+  th: createDOMFactory('th'),
+  thead: createDOMFactory('thead'),
+  time: createDOMFactory('time'),
+  title: createDOMFactory('title'),
+  tr: createDOMFactory('tr'),
+  track: createDOMFactory('track'),
+  u: createDOMFactory('u'),
+  ul: createDOMFactory('ul'),
+  var: createDOMFactory('var'),
+  video: createDOMFactory('video'),
+  wbr: createDOMFactory('wbr'),
+
+  // SVG
+  circle: createDOMFactory('circle'),
+  clipPath: createDOMFactory('clipPath'),
+  defs: createDOMFactory('defs'),
+  ellipse: createDOMFactory('ellipse'),
+  g: createDOMFactory('g'),
+  image: createDOMFactory('image'),
+  line: createDOMFactory('line'),
+  linearGradient: createDOMFactory('linearGradient'),
+  mask: createDOMFactory('mask'),
+  path: createDOMFactory('path'),
+  pattern: createDOMFactory('pattern'),
+  polygon: createDOMFactory('polygon'),
+  polyline: createDOMFactory('polyline'),
+  radialGradient: createDOMFactory('radialGradient'),
+  rect: createDOMFactory('rect'),
+  stop: createDOMFactory('stop'),
+  svg: createDOMFactory('svg'),
+  text: createDOMFactory('text'),
+  tspan: createDOMFactory('tspan'),
+};
+
+module.exports = ReactDOMFactories;
diff --git a/src/addons/ReactFragment.js b/src/addons/ReactFragment.js
index f16ccf8bc..0ed35d4ae 100644
--- a/src/addons/ReactFragment.js
+++ b/src/addons/ReactFragment.js
@@ -33,4 +33,7 @@ var warnedAboutNumeric = false;
 var ReactFragment = {
-  // Wrap a keyed object in an opaque proxy that warns you if you access any
-  // of its properties.
+  /**
+   * Wrap a keyed object in an opaque proxy that warns you if you access any
+   * of its properties.
+   * See https://facebook.github.io/react/docs/create-fragment.html
+   */
   create: function(object) {
@@ -40,3 +43,3 @@ var ReactFragment = {
         'React.addons.createFragment only accepts a single object. Got: %s',
-        object
+        object,
       );
@@ -48,3 +51,3 @@ var ReactFragment = {
         'React.addons.createFragment does not accept a ReactElement ' +
-        'without a wrapper object.'
+          'without a wrapper object.',
       );
@@ -56,3 +59,3 @@ var ReactFragment = {
       'React.addons.createFragment(...): Encountered an invalid child; DOM ' +
-      'elements are not valid children of React components.'
+        'elements are not valid children of React components.',
     );
@@ -67,3 +70,3 @@ var ReactFragment = {
             'React.addons.createFragment(...): Child objects should have ' +
-            'non-numeric keys so ordering is preserved.'
+              'non-numeric keys so ordering is preserved.',
           );
@@ -76,3 +79,3 @@ var ReactFragment = {
         key,
-        emptyFunction.thatReturnsArgument
+        emptyFunction.thatReturnsArgument,
       );
diff --git a/src/addons/ReactWithAddons.js b/src/addons/ReactWithAddons.js
index bd13ea495..8cf081c98 100644
--- a/src/addons/ReactWithAddons.js
+++ b/src/addons/ReactWithAddons.js
@@ -15,4 +15,4 @@ var LinkedStateMixin = require('LinkedStateMixin');
 var React = require('React');
-var ReactComponentWithPureRenderMixin =
-  require('ReactComponentWithPureRenderMixin');
+var ReactAddonsDOMDependencies = require('ReactAddonsDOMDependencies');
+var ReactComponentWithPureRenderMixin = require('ReactComponentWithPureRenderMixin');
 var ReactCSSTransitionGroup = require('ReactCSSTransitionGroup');
@@ -36,4 +36,16 @@ React.addons = {
 if (__DEV__) {
-  React.addons.Perf = require('ReactDefaultPerf');
-  React.addons.TestUtils = require('ReactTestUtils');
+  // For the UMD build we get these lazily from the global since they're tied
+  // to the DOM renderer and it hasn't loaded yet.
+  Object.defineProperty(React.addons, 'Perf', {
+    enumerable: true,
+    get: function() {
+      return ReactAddonsDOMDependencies.getReactPerf();
+    },
+  });
+  Object.defineProperty(React.addons, 'TestUtils', {
+    enumerable: true,
+    get: function() {
+      return ReactAddonsDOMDependencies.getReactTestUtils();
+    },
+  });
 }
diff --git a/src/addons/__tests__/ReactComponentWithPureRenderMixin-test.js b/src/addons/__tests__/ReactComponentWithPureRenderMixin-test.js
deleted file mode 100644
index 2c9581994..000000000
--- a/src/addons/__tests__/ReactComponentWithPureRenderMixin-test.js
+++ /dev/null
@@ -1,145 +0,0 @@
-/**
- * Copyright 2015-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
- */
-
-'use strict';
-
-var React;
-var ReactComponentWithPureRenderMixin;
-var ReactTestUtils;
-
-describe('ReactComponentWithPureRenderMixin', function() {
-
-  beforeEach(function() {
-    React = require('React');
-    ReactComponentWithPureRenderMixin =
-      require('ReactComponentWithPureRenderMixin');
-    ReactTestUtils = require('ReactTestUtils');
-  });
-
-  it('provides a default shouldComponentUpdate implementation', function() {
-    var renderCalls = 0;
-    class PlasticWrap extends React.Component {
-      constructor(props, context) {
-        super(props, context);
-        this.state = {
-          color: 'green',
-        };
-      }
-
-      render() {
-        return (
-          <Apple
-            color={this.state.color}
-            ref="apple"
-          />
-        );
-      }
-    }
-
-    var Apple = React.createClass({
-      mixins: [ReactComponentWithPureRenderMixin],
-
-      getInitialState: function() {
-        return {
-          cut: false,
-          slices: 1,
-        };
-      },
-
-      cut: function() {
-        this.setState({
-          cut: true,
-          slices: 10,
-        });
-      },
-
-      eatSlice: function() {
-        this.setState({
-          slices: this.state.slices - 1,
-        });
-      },
-
-      render: function() {
-        renderCalls++;
-        return <div />;
-      },
-    });
-
-    var instance = ReactTestUtils.renderIntoDocument(<PlasticWrap />);
-    expect(renderCalls).toBe(1);
-
-    // Do not re-render based on props
-    instance.setState({color: 'green'});
-    expect(renderCalls).toBe(1);
-
-    // Re-render based on props
-    instance.setState({color: 'red'});
-    expect(renderCalls).toBe(2);
-
-    // Re-render base on state
-    instance.refs.apple.cut();
-    expect(renderCalls).toBe(3);
-
-    // No re-render based on state
-    instance.refs.apple.cut();
-    expect(renderCalls).toBe(3);
-
-    // Re-render based on state again
-    instance.refs.apple.eatSlice();
-    expect(renderCalls).toBe(4);
-  });
-
-  it('does not do a deep comparison', function() {
-    function getInitialState() {
-      return {
-        foo: [1, 2, 3],
-        bar: {a: 4, b: 5, c: 6},
-      };
-    }
-
-    var renderCalls = 0;
-    var initialSettings = getInitialState();
-
-    var Component = React.createClass({
-      mixins: [ReactComponentWithPureRenderMixin],
-
-      getInitialState: function() {
-        return initialSettings;
-      },
-
-      render: function() {
-        renderCalls++;
-        return <div />;
-      },
-    });
-
-    var instance = ReactTestUtils.renderIntoDocument(<Component />);
-    expect(renderCalls).toBe(1);
-
-    // Do not re-render if state is equal
-    var settings = {
-      foo: initialSettings.foo,
-      bar: initialSettings.bar,
-    };
-    instance.setState(settings);
-    expect(renderCalls).toBe(1);
-
-    // Re-render because one field changed
-    initialSettings.foo = [1, 2, 3];
-    instance.setState(initialSettings);
-    expect(renderCalls).toBe(2);
-
-    // Re-render because the object changed
-    instance.setState(getInitialState());
-    expect(renderCalls).toBe(3);
-  });
-
-});
diff --git a/src/addons/__tests__/ReactDOMFactories-test.js b/src/addons/__tests__/ReactDOMFactories-test.js
new file mode 100644
index 000000000..641faa3f0
--- /dev/null
+++ b/src/addons/__tests__/ReactDOMFactories-test.js
@@ -0,0 +1,41 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+var React = require('React');
+var {div} = require('ReactDOMFactories');
+
+describe('ReactDOMFactories', () => {
+  it('allow factories to be called without warnings', () => {
+    spyOn(console, 'error');
+    spyOn(console, 'warn');
+    var element = div();
+    expect(element.type).toBe('div');
+    expect(console.error).not.toHaveBeenCalled();
+    expect(console.warn).not.toHaveBeenCalled();
+  });
+
+  it('warns once when accessing React.DOM methods', () => {
+    spyOn(console, 'warn');
+
+    var a = React.DOM.a();
+    var p = React.DOM.p();
+
+    expect(a.type).toBe('a');
+    expect(p.type).toBe('p');
+
+    expect(console.warn).toHaveBeenCalledTimes(1);
+    expect(console.warn.calls.first().args[0]).toContain(
+      'Warning: Accessing factories like React.DOM.a has been deprecated',
+    );
+  });
+});
diff --git a/src/addons/__tests__/ReactFragment-test.js b/src/addons/__tests__/ReactFragment-test.js
index 4a1b9775d..1fc6f03d2 100644
--- a/src/addons/__tests__/ReactFragment-test.js
+++ b/src/addons/__tests__/ReactFragment-test.js
@@ -17,5 +17,4 @@ var ReactFragment;
 
-describe('ReactFragment', function() {
-
-  beforeEach(function() {
+describe('ReactFragment', () => {
+  beforeEach(() => {
     React = require('React');
@@ -25,3 +24,3 @@ describe('ReactFragment', function() {
 
-  it('should throw if a plain object is used as a child', function() {
+  it('should throw if a plain object is used as a child', () => {
     var children = {
@@ -33,7 +32,7 @@ describe('ReactFragment', function() {
     var container = document.createElement('div');
-    expect(() => ReactDOM.render(element, container)).toThrow(
+    expect(() => ReactDOM.render(element, container)).toThrowError(
       'Objects are not valid as a React child (found: object with keys ' +
-      '{x, y, z}). If you meant to render a collection of children, use an ' +
-      'array instead or wrap the object using createFragment(object) from ' +
-      'the React add-ons.'
+        '{x, y, z}). If you meant to render a collection of children, use an ' +
+        'array instead or wrap the object using createFragment(object) from ' +
+        'the React add-ons.',
     );
@@ -41,3 +40,3 @@ describe('ReactFragment', function() {
 
-  it('should throw if a plain object even if it is in an owner', function() {
+  it('should throw if a plain object even if it is in an owner', () => {
     class Foo extends React.Component {
@@ -53,7 +52,7 @@ describe('ReactFragment', function() {
     var container = document.createElement('div');
-    expect(() => ReactDOM.render(<Foo />, container)).toThrow(
+    expect(() => ReactDOM.render(<Foo />, container)).toThrowError(
       'Objects are not valid as a React child (found: object with keys ' +
-      '{a, b, c}). If you meant to render a collection of children, use an ' +
-      'array instead or wrap the object using createFragment(object) from ' +
-      'the React add-ons. Check the render method of `Foo`.'
+        '{a, b, c}). If you meant to render a collection of children, use an ' +
+        'array instead or wrap the object using createFragment(object) from ' +
+        'the React add-ons. Check the render method of `Foo`.',
     );
@@ -61,10 +60,10 @@ describe('ReactFragment', function() {
 
-  it('should throw if a plain object looks like an old element', function() {
+  it('should throw if a plain object looks like an old element', () => {
     var oldEl = {_isReactElement: true, type: 'span', props: {}};
     var container = document.createElement('div');
-    expect(() => ReactDOM.render(<div>{oldEl}</div>, container)).toThrow(
+    expect(() => ReactDOM.render(<div>{oldEl}</div>, container)).toThrowError(
       'Objects are not valid as a React child (found: object with keys ' +
-      '{_isReactElement, type, props}). It looks like you\'re using an ' +
-      'element created by a different version of React. Make sure to use ' +
-      'only one copy of React.'
+        "{_isReactElement, type, props}). It looks like you're using an " +
+        'element created by a different version of React. Make sure to use ' +
+        'only one copy of React.',
     );
@@ -72,3 +71,3 @@ describe('ReactFragment', function() {
 
-  it('warns for numeric keys on objects as children', function() {
+  it('warns for numeric keys on objects as children', () => {
     spyOn(console, 'error');
@@ -77,5 +76,5 @@ describe('ReactFragment', function() {
 
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'Child objects should have non-numeric keys so ordering is preserved.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'Child objects should have non-numeric keys so ordering is preserved.',
     );
@@ -83,8 +82,8 @@ describe('ReactFragment', function() {
 
-  it('should warn if passing null to createFragment', function() {
+  it('should warn if passing null to createFragment', () => {
     spyOn(console, 'error');
     ReactFragment.create(null);
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'React.addons.createFragment only accepts a single object.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'React.addons.createFragment only accepts a single object.',
     );
@@ -92,8 +91,8 @@ describe('ReactFragment', function() {
 
-  it('should warn if passing an array to createFragment', function() {
+  it('should warn if passing an array to createFragment', () => {
     spyOn(console, 'error');
     ReactFragment.create([]);
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'React.addons.createFragment only accepts a single object.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'React.addons.createFragment only accepts a single object.',
     );
@@ -101,12 +100,11 @@ describe('ReactFragment', function() {
 
-  it('should warn if passing a ReactElement to createFragment', function() {
+  it('should warn if passing a ReactElement to createFragment', () => {
     spyOn(console, 'error');
     ReactFragment.create(<div />);
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'React.addons.createFragment does not accept a ReactElement without a ' +
-      'wrapper object.'
+        'wrapper object.',
     );
   });
-
 });
diff --git a/src/addons/__tests__/renderSubtreeIntoContainer-test.js b/src/addons/__tests__/renderSubtreeIntoContainer-test.js
index de67b7ee4..0af5d7962 100644
--- a/src/addons/__tests__/renderSubtreeIntoContainer-test.js
+++ b/src/addons/__tests__/renderSubtreeIntoContainer-test.js
@@ -13,3 +13,5 @@
 
+var PropTypes = require('prop-types');
 var React = require('React');
+var ReactDOM = require('ReactDOM');
 var ReactTestUtils = require('ReactTestUtils');
@@ -17,24 +19,22 @@ var renderSubtreeIntoContainer = require('renderSubtreeIntoContainer');
 
-describe('renderSubtreeIntoContainer', function() {
-
-  it('should pass context when rendering subtree elsewhere', function() {
-
+describe('renderSubtreeIntoContainer', () => {
+  it('should pass context when rendering subtree elsewhere', () => {
     var portal = document.createElement('div');
 
-    var Component = React.createClass({
-      contextTypes: {
-        foo: React.PropTypes.string.isRequired,
-      },
+    class Component extends React.Component {
+      static contextTypes = {
+        foo: PropTypes.string.isRequired,
+      };
 
-      render: function() {
+      render() {
         return <div>{this.context.foo}</div>;
-      },
-    });
+      }
+    }
 
-    var Parent = React.createClass({
-      childContextTypes: {
-        foo: React.PropTypes.string.isRequired,
-      },
+    class Parent extends React.Component {
+      static childContextTypes = {
+        foo: PropTypes.string.isRequired,
+      };
 
-      getChildContext: function() {
+      getChildContext() {
         return {
@@ -42,14 +42,16 @@ describe('renderSubtreeIntoContainer', function() {
         };
-      },
+      }
 
-      render: function() {
+      render() {
         return null;
-      },
+      }
 
-      componentDidMount: function() {
-        expect(function() {
-          renderSubtreeIntoContainer(this, <Component />, portal);
-        }.bind(this)).not.toThrow();
-      },
-    });
+      componentDidMount() {
+        expect(
+          function() {
+            renderSubtreeIntoContainer(this, <Component />, portal);
+          }.bind(this),
+        ).not.toThrow();
+      }
+    }
 
@@ -59,21 +61,24 @@ describe('renderSubtreeIntoContainer', function() {
 
-  it('should throw if parentComponent is invalid', function() {
+  it('should throw if parentComponent is invalid', () => {
     var portal = document.createElement('div');
 
-    var Component = React.createClass({
-      contextTypes: {
-        foo: React.PropTypes.string.isRequired,
-      },
+    class Component extends React.Component {
+      static contextTypes = {
+        foo: PropTypes.string.isRequired,
+      };
 
-      render: function() {
+      render() {
         return <div>{this.context.foo}</div>;
-      },
-    });
-
-    var Parent = React.createClass({
-      childContextTypes: {
-        foo: React.PropTypes.string.isRequired,
-      },
-
-      getChildContext: function() {
+      }
+    }
+
+    // ESLint is confused here and thinks Parent is unused, presumably because
+    // it is only used inside of the class body?
+    // eslint-disable-next-line no-unused-vars
+    class Parent extends React.Component {
+      static childContextTypes = {
+        foo: PropTypes.string.isRequired,
+      };
+
+      getChildContext() {
         return {
@@ -81,14 +86,114 @@ describe('renderSubtreeIntoContainer', function() {
         };
-      },
+      }
 
-      render: function() {
+      render() {
         return null;
-      },
+      }
 
-      componentDidMount: function() {
+      componentDidMount() {
         expect(function() {
           renderSubtreeIntoContainer(<Parent />, <Component />, portal);
-        }).toThrow('parentComponentmust be a valid React Component');
-      },
-    });
+        }).toThrowError('parentComponentmust be a valid React Component');
+      }
+    }
+  });
+
+  it('should update context if it changes due to setState', () => {
+    var container = document.createElement('div');
+    document.body.appendChild(container);
+    var portal = document.createElement('div');
+
+    class Component extends React.Component {
+      static contextTypes = {
+        foo: PropTypes.string.isRequired,
+        getFoo: PropTypes.func.isRequired,
+      };
+
+      render() {
+        return <div>{this.context.foo + '-' + this.context.getFoo()}</div>;
+      }
+    }
+
+    class Parent extends React.Component {
+      static childContextTypes = {
+        foo: PropTypes.string.isRequired,
+        getFoo: PropTypes.func.isRequired,
+      };
+
+      state = {
+        bar: 'initial',
+      };
+
+      getChildContext() {
+        return {
+          foo: this.state.bar,
+          getFoo: () => this.state.bar,
+        };
+      }
+
+      render() {
+        return null;
+      }
+
+      componentDidMount() {
+        renderSubtreeIntoContainer(this, <Component />, portal);
+      }
+
+      componentDidUpdate() {
+        renderSubtreeIntoContainer(this, <Component />, portal);
+      }
+    }
+
+    var instance = ReactDOM.render(<Parent />, container);
+    expect(portal.firstChild.innerHTML).toBe('initial-initial');
+    instance.setState({bar: 'changed'});
+    expect(portal.firstChild.innerHTML).toBe('changed-changed');
+  });
+
+  it('should update context if it changes due to re-render', () => {
+    var container = document.createElement('div');
+    document.body.appendChild(container);
+    var portal = document.createElement('div');
+
+    class Component extends React.Component {
+      static contextTypes = {
+        foo: PropTypes.string.isRequired,
+        getFoo: PropTypes.func.isRequired,
+      };
+
+      render() {
+        return <div>{this.context.foo + '-' + this.context.getFoo()}</div>;
+      }
+    }
+
+    class Parent extends React.Component {
+      static childContextTypes = {
+        foo: PropTypes.string.isRequired,
+        getFoo: PropTypes.func.isRequired,
+      };
+
+      getChildContext() {
+        return {
+          foo: this.props.bar,
+          getFoo: () => this.props.bar,
+        };
+      }
+
+      render() {
+        return null;
+      }
+
+      componentDidMount() {
+        renderSubtreeIntoContainer(this, <Component />, portal);
+      }
+
+      componentDidUpdate() {
+        renderSubtreeIntoContainer(this, <Component />, portal);
+      }
+    }
+
+    ReactDOM.render(<Parent bar="initial" />, container);
+    expect(portal.firstChild.innerHTML).toBe('initial-initial');
+    ReactDOM.render(<Parent bar="changed" />, container);
+    expect(portal.firstChild.innerHTML).toBe('changed-changed');
   });
diff --git a/src/addons/__tests__/update-test.js b/src/addons/__tests__/update-test.js
index 05a6578ee..15cf7ff75 100644
--- a/src/addons/__tests__/update-test.js
+++ b/src/addons/__tests__/update-test.js
@@ -15,9 +15,8 @@ var update = require('update');
 
-describe('update', function() {
-
-  describe('$push', function() {
-    it('pushes', function() {
+describe('update', () => {
+  describe('$push', () => {
+    it('pushes', () => {
       expect(update([1], {$push: [7]})).toEqual([1, 7]);
     });
-    it('does not mutate the original object', function() {
+    it('does not mutate the original object', () => {
       var obj = [1];
@@ -26,11 +25,11 @@ describe('update', function() {
     });
-    it('only pushes an array', function() {
-      expect(update.bind(null, [], {$push: 7})).toThrow(
+    it('only pushes an array', () => {
+      expect(update.bind(null, [], {$push: 7})).toThrowError(
         'update(): expected spec of $push to be an array; got 7. Did you ' +
-        'forget to wrap your parameter in an array?'
+          'forget to wrap your parameter in an array?',
       );
     });
-    it('only pushes unto an array', function() {
-      expect(update.bind(null, 1, {$push: 7})).toThrow(
-        'update(): expected target of $push to be an array; got 1.'
+    it('only pushes unto an array', () => {
+      expect(update.bind(null, 1, {$push: 7})).toThrowError(
+        'update(): expected target of $push to be an array; got 1.',
       );
@@ -39,7 +38,7 @@ describe('update', function() {
 
-  describe('$unshift', function() {
-    it('unshifts', function() {
+  describe('$unshift', () => {
+    it('unshifts', () => {
       expect(update([1], {$unshift: [7]})).toEqual([7, 1]);
     });
-    it('does not mutate the original object', function() {
+    it('does not mutate the original object', () => {
       var obj = [1];
@@ -48,11 +47,11 @@ describe('update', function() {
     });
-    it('only unshifts an array', function() {
-      expect(update.bind(null, [], {$unshift: 7})).toThrow(
+    it('only unshifts an array', () => {
+      expect(update.bind(null, [], {$unshift: 7})).toThrowError(
         'update(): expected spec of $unshift to be an array; got 7. Did you ' +
-        'forget to wrap your parameter in an array?'
+          'forget to wrap your parameter in an array?',
       );
     });
-    it('only unshifts unto an array', function() {
-      expect(update.bind(null, 1, {$unshift: 7})).toThrow(
-        'update(): expected target of $unshift to be an array; got 1.'
+    it('only unshifts unto an array', () => {
+      expect(update.bind(null, 1, {$unshift: 7})).toThrowError(
+        'update(): expected target of $unshift to be an array; got 1.',
       );
@@ -61,7 +60,7 @@ describe('update', function() {
 
-  describe('$splice', function() {
-    it('splices', function() {
+  describe('$splice', () => {
+    it('splices', () => {
       expect(update([1, 4, 3], {$splice: [[1, 1, 2]]})).toEqual([1, 2, 3]);
     });
-    it('does not mutate the original object', function() {
+    it('does not mutate the original object', () => {
       var obj = [1, 4, 3];
@@ -70,15 +69,15 @@ describe('update', function() {
     });
-    it('only splices an array of arrays', function() {
-      expect(update.bind(null, [], {$splice: 1})).toThrow(
+    it('only splices an array of arrays', () => {
+      expect(update.bind(null, [], {$splice: 1})).toThrowError(
         'update(): expected spec of $splice to be an array of arrays; got 1. ' +
-        'Did you forget to wrap your parameters in an array?'
+          'Did you forget to wrap your parameters in an array?',
       );
-      expect(update.bind(null, [], {$splice: [1]})).toThrow(
+      expect(update.bind(null, [], {$splice: [1]})).toThrowError(
         'update(): expected spec of $splice to be an array of arrays; got 1. ' +
-        'Did you forget to wrap your parameters in an array?'
+          'Did you forget to wrap your parameters in an array?',
       );
     });
-    it('only splices unto an array', function() {
-      expect(update.bind(null, 1, {$splice: 7})).toThrow(
-        'Expected $splice target to be an array; got 1'
+    it('only splices unto an array', () => {
+      expect(update.bind(null, 1, {$splice: 7})).toThrowError(
+        'Expected $splice target to be an array; got 1',
       );
@@ -87,7 +86,7 @@ describe('update', function() {
 
-  describe('$merge', function() {
-    it('merges', function() {
+  describe('$merge', () => {
+    it('merges', () => {
       expect(update({a: 'b'}, {$merge: {c: 'd'}})).toEqual({a: 'b', c: 'd'});
     });
-    it('does not mutate the original object', function() {
+    it('does not mutate the original object', () => {
       var obj = {a: 'b'};
@@ -96,10 +95,10 @@ describe('update', function() {
     });
-    it('only merges with an object', function() {
-      expect(update.bind(null, {}, {$merge: 7})).toThrow(
-        'update(): $merge expects a spec of type \'object\'; got 7'
+    it('only merges with an object', () => {
+      expect(update.bind(null, {}, {$merge: 7})).toThrowError(
+        "update(): $merge expects a spec of type 'object'; got 7",
       );
     });
-    it('only merges with an object', function() {
-      expect(update.bind(null, 7, {$merge: {a: 'b'}})).toThrow(
-        'update(): $merge expects a target of type \'object\'; got 7'
+    it('only merges with an object', () => {
+      expect(update.bind(null, 7, {$merge: {a: 'b'}})).toThrowError(
+        "update(): $merge expects a target of type 'object'; got 7",
       );
@@ -108,7 +107,7 @@ describe('update', function() {
 
-  describe('$set', function() {
-    it('sets', function() {
+  describe('$set', () => {
+    it('sets', () => {
       expect(update({a: 'b'}, {$set: {c: 'd'}})).toEqual({c: 'd'});
     });
-    it('does not mutate the original object', function() {
+    it('does not mutate the original object', () => {
       var obj = {a: 'b'};
@@ -119,3 +118,3 @@ describe('update', function() {
 
-  describe('$apply', function() {
+  describe('$apply', () => {
     var applier = function(node) {
@@ -123,6 +122,6 @@ describe('update', function() {
     };
-    it('applies', function() {
+    it('applies', () => {
       expect(update({v: 2}, {$apply: applier})).toEqual({v: 4});
     });
-    it('does not mutate the original object', function() {
+    it('does not mutate the original object', () => {
       var obj = {v: 2};
@@ -131,5 +130,5 @@ describe('update', function() {
     });
-    it('only applies a function', function() {
-      expect(update.bind(null, 2, {$apply: 123})).toThrow(
-        'update(): expected spec of $apply to be a function; got 123.'
+    it('only applies a function', () => {
+      expect(update.bind(null, 2, {$apply: 123})).toThrowError(
+        'update(): expected spec of $apply to be a function; got 123.',
       );
@@ -138,23 +137,28 @@ describe('update', function() {
 
-  it('should support deep updates', function() {
-    expect(update({
-      a: 'b',
-      c: {
-        d: 'e',
-        f: [1],
-        g: [2],
-        h: [3],
-        i: {j: 'k'},
-        l: 4,
-      },
-    }, {
-      c: {
-        d: {$set: 'm'},
-        f: {$push: [5]},
-        g: {$unshift: [6]},
-        h: {$splice: [[0, 1, 7]]},
-        i: {$merge: {n: 'o'}},
-        l: {$apply: (x) => x * 2},
-      },
-    })).toEqual({
+  it('should support deep updates', () => {
+    expect(
+      update(
+        {
+          a: 'b',
+          c: {
+            d: 'e',
+            f: [1],
+            g: [2],
+            h: [3],
+            i: {j: 'k'},
+            l: 4,
+          },
+        },
+        {
+          c: {
+            d: {$set: 'm'},
+            f: {$push: [5]},
+            g: {$unshift: [6]},
+            h: {$splice: [[0, 1, 7]]},
+            i: {$merge: {n: 'o'}},
+            l: {$apply: x => x * 2},
+          },
+        },
+      ),
+    ).toEqual({
       a: 'b',
@@ -171,7 +175,7 @@ describe('update', function() {
 
-  it('should require a command', function() {
-    expect(update.bind(null, {a: 'b'}, {a: 'c'})).toThrow(
+  it('should require a command', () => {
+    expect(update.bind(null, {a: 'b'}, {a: 'c'})).toThrowError(
       'update(): You provided a key path to update() that did not contain ' +
-      'one of $push, $unshift, $splice, $set, $merge, $apply. Did you ' +
-      'forget to include {$set: ...}?'
+        'one of $push, $unshift, $splice, $set, $merge, $apply. Did you ' +
+        'forget to include {$set: ...}?',
     );
@@ -179,5 +183,5 @@ describe('update', function() {
 
-  it('should perform safe hasOwnProperty check', function() {
-    expect(update({}, {'hasOwnProperty': {$set: 'a'}})).toEqual({
-      'hasOwnProperty': 'a',
+  it('should perform safe hasOwnProperty check', () => {
+    expect(update({}, {hasOwnProperty: {$set: 'a'}})).toEqual({
+      hasOwnProperty: 'a',
     });
diff --git a/src/addons/link/LinkedStateMixin.js b/src/addons/link/LinkedStateMixin.js
index c45a79faa..4a646095d 100644
--- a/src/addons/link/LinkedStateMixin.js
+++ b/src/addons/link/LinkedStateMixin.js
@@ -18,2 +18,3 @@ var ReactStateSetters = require('ReactStateSetters');
  * A simple mixin around ReactLink.forState().
+ * See https://facebook.github.io/react/docs/two-way-binding-helpers.html
  */
@@ -25,4 +26,3 @@ var LinkedStateMixin = {
    *
-   * @param {string} key state key to update. Note: you may want to use keyOf()
-   * if you're using Google Closure Compiler advanced mode.
+   * @param {string} key state key to update.
    * @return {ReactLink} ReactLink instance linking to the state.
@@ -32,3 +32,3 @@ var LinkedStateMixin = {
       this.state[key],
-      ReactStateSetters.createStateKeySetter(this, key)
+      ReactStateSetters.createStateKeySetter(this, key),
     );
diff --git a/src/addons/link/ReactLink.js b/src/addons/link/ReactLink.js
index ea6435c92..d91345e69 100644
--- a/src/addons/link/ReactLink.js
+++ b/src/addons/link/ReactLink.js
@@ -36,5 +36,6 @@
 
-var React = require('React');
-
 /**
+ * Deprecated: An an easy way to express two-way binding with React. 
+ * See https://facebook.github.io/react/docs/two-way-binding-helpers.html
+ *
  * @param {*} value current value of the link
@@ -47,24 +48,2 @@ function ReactLink(value, requestChange) {
 
-/**
- * Creates a PropType that enforces the ReactLink API and optionally checks the
- * type of the value being passed inside the link. Example:
- *
- * MyComponent.propTypes = {
- *   tabIndexLink: ReactLink.PropTypes.link(React.PropTypes.number)
- * }
- */
-function createLinkTypeChecker(linkType) {
-  var shapes = {
-    value: linkType === undefined ?
-      React.PropTypes.any.isRequired :
-      linkType.isRequired,
-    requestChange: React.PropTypes.func.isRequired,
-  };
-  return React.PropTypes.shape(shapes);
-}
-
-ReactLink.PropTypes = {
-  link: createLinkTypeChecker,
-};
-
 module.exports = ReactLink;
diff --git a/src/renderers/shared/reconciler/ReactStateSetters.js b/src/addons/link/ReactStateSetters.js
similarity index 100%
rename from src/renderers/shared/reconciler/ReactStateSetters.js
rename to src/addons/link/ReactStateSetters.js
diff --git a/src/addons/link/__tests__/LinkedStateMixin-test.js b/src/addons/link/__tests__/LinkedStateMixin-test.js
deleted file mode 100644
index 01b82351c..000000000
--- a/src/addons/link/__tests__/LinkedStateMixin-test.js
+++ /dev/null
@@ -1,46 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
- */
-
-'use strict';
-
-
-describe('LinkedStateMixin', function() {
-  var LinkedStateMixin;
-  var React;
-  var ReactTestUtils;
-
-  beforeEach(function() {
-    LinkedStateMixin = require('LinkedStateMixin');
-    React = require('React');
-    ReactTestUtils = require('ReactTestUtils');
-  });
-
-  it('should create a ReactLink for state', function() {
-    var Component = React.createClass({
-      mixins: [LinkedStateMixin],
-
-      getInitialState: function() {
-        return {value: 'initial value'};
-      },
-
-      render: function() {
-        return <span>value is {this.state.value}</span>;
-      },
-    });
-    var component = ReactTestUtils.renderIntoDocument(<Component />);
-    var link = component.linkState('value');
-    expect(component.state.value).toBe('initial value');
-    expect(link.value).toBe('initial value');
-    link.requestChange('new value');
-    expect(component.state.value).toBe('new value');
-    expect(component.linkState('value').value).toBe('new value');
-  });
-});
diff --git a/src/addons/link/__tests__/ReactLinkPropTypes-test.js b/src/addons/link/__tests__/ReactLinkPropTypes-test.js
deleted file mode 100644
index 6ade13777..000000000
--- a/src/addons/link/__tests__/ReactLinkPropTypes-test.js
+++ /dev/null
@@ -1,154 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
- */
-
-'use strict';
-
-var emptyFunction = require('emptyFunction');
-var LinkPropTypes = require('ReactLink').PropTypes;
-var React = require('React');
-var ReactPropTypeLocations = require('ReactPropTypeLocations');
-
-var invalidMessage = 'Invalid prop `testProp` supplied to `testComponent`.';
-var requiredMessage =
-  'Required prop `testProp` was not specified in `testComponent`.';
-
-function typeCheckFail(declaration, value, message) {
-  var props = {testProp: value};
-  var error = declaration(
-    props,
-    'testProp',
-    'testComponent',
-    ReactPropTypeLocations.prop
-  );
-  expect(error instanceof Error).toBe(true);
-  expect(error.message).toBe(message);
-}
-
-function typeCheckPass(declaration, value) {
-  var props = {testProp: value};
-  var error = declaration(
-    props,
-    'testProp',
-    'testComponent',
-    ReactPropTypeLocations.prop
-  );
-  expect(error).toBe(null);
-}
-
-describe('ReactLink', function() {
-  it('should fail if the argument does not implement the Link API', function() {
-    typeCheckFail(
-      LinkPropTypes.link(React.PropTypes.any),
-      {},
-      'Required prop `testProp.value` was not specified in `testComponent`.'
-    );
-    typeCheckFail(
-      LinkPropTypes.link(React.PropTypes.any),
-      {value: 123},
-      'Required prop `testProp.requestChange` was not specified in `testComponent`.'
-    );
-    typeCheckFail(
-      LinkPropTypes.link(React.PropTypes.any),
-      {requestChange: emptyFunction},
-      'Required prop `testProp.value` was not specified in `testComponent`.'
-    );
-    typeCheckFail(
-      LinkPropTypes.link(React.PropTypes.any),
-      {value: null, requestChange: null},
-      'Required prop `testProp.value` was not specified in `testComponent`.'
-    );
-  });
-
-  it('should allow valid links even if no type was specified', function() {
-    typeCheckPass(
-      LinkPropTypes.link(),
-      {value: 42, requestChange: emptyFunction}
-    );
-    typeCheckPass(
-      LinkPropTypes.link(),
-      {value: {}, requestChange: emptyFunction,
-    });
-  });
-
-  it('should allow no link to be passed at all', function() {
-    typeCheckPass(
-      LinkPropTypes.link(React.PropTypes.string),
-      undefined
-    );
-  });
-
-  it('should allow valid links with correct value format', function() {
-    typeCheckPass(
-      LinkPropTypes.link(React.PropTypes.any),
-      {value: 42, requestChange: emptyFunction}
-    );
-    typeCheckPass(
-      LinkPropTypes.link(React.PropTypes.number),
-      {value: 42, requestChange: emptyFunction}
-    );
-    typeCheckPass(
-      LinkPropTypes.link(React.PropTypes.node),
-      {value: 42, requestChange: emptyFunction}
-    );
-  });
-
-  it('should fail if the link`s value type does not match', function() {
-    typeCheckFail(
-      LinkPropTypes.link(React.PropTypes.string),
-      {value: 123, requestChange: emptyFunction},
-      'Invalid prop `testProp.value` of type `number` supplied to `testComponent`,' +
-      ' expected `string`.'
-    );
-  });
-
-  it('should be implicitly optional and not warn without values', function() {
-    typeCheckPass(LinkPropTypes.link(), null);
-    typeCheckPass(LinkPropTypes.link(), undefined);
-    typeCheckPass(LinkPropTypes.link(React.PropTypes.string), null);
-    typeCheckPass(LinkPropTypes.link(React.PropTypes.string), undefined);
-  });
-
-  it('should warn for missing required values', function() {
-    typeCheckFail(LinkPropTypes.link().isRequired, null, requiredMessage);
-    typeCheckFail(LinkPropTypes.link().isRequired, undefined, requiredMessage);
-    typeCheckFail(
-      LinkPropTypes.link(React.PropTypes.string).isRequired,
-      null,
-      requiredMessage
-    );
-    typeCheckFail(
-      LinkPropTypes.link(React.PropTypes.string).isRequired,
-      undefined,
-      requiredMessage
-    );
-  });
-
-  it('should be compatible with React.PropTypes.oneOfType', function() {
-    typeCheckPass(
-      React.PropTypes.oneOfType([LinkPropTypes.link(React.PropTypes.number)]),
-      {value: 123, requestChange: emptyFunction}
-    );
-    typeCheckFail(
-      React.PropTypes.oneOfType([LinkPropTypes.link(React.PropTypes.number)]),
-      123,
-      invalidMessage
-    );
-    typeCheckPass(
-      LinkPropTypes.link(React.PropTypes.oneOfType([React.PropTypes.number])),
-      {value: 123, requestChange: emptyFunction}
-    );
-    typeCheckFail(
-      LinkPropTypes.link(React.PropTypes.oneOfType([React.PropTypes.number])),
-      {value: 'imastring', requestChange: emptyFunction},
-      'Invalid prop `testProp.value` supplied to `testComponent`.'
-    );
-  });
-});
diff --git a/src/addons/shallowCompare.js b/src/addons/shallowCompare.js
index 33e4591ba..334f7a2db 100644
--- a/src/addons/shallowCompare.js
+++ b/src/addons/shallowCompare.js
@@ -8,4 +8,4 @@
  *
-* @providesModule shallowCompare
-*/
+ * @providesModule shallowCompare
+ */
 
@@ -18,2 +18,3 @@ var shallowEqual = require('shallowEqual');
  * See ReactComponentWithPureRenderMixin
+ * See also https://facebook.github.io/react/docs/shallow-compare.html
  */
diff --git a/src/addons/transitions/ReactCSSTransitionGroup.js b/src/addons/transitions/ReactCSSTransitionGroup.js
index 4177ec790..4c1fb3b6e 100644
--- a/src/addons/transitions/ReactCSSTransitionGroup.js
+++ b/src/addons/transitions/ReactCSSTransitionGroup.js
@@ -14,2 +14,4 @@
 var React = require('React');
+var propTypesFactory = require('prop-types/factory');
+var PropTypes = propTypesFactory(React.isValidElement);
 
@@ -28,12 +30,15 @@ function createTransitionTimeoutPropValidator(transitionType) {
         return new Error(
-          timeoutPropName + ' wasn\'t supplied to ReactCSSTransitionGroup: ' +
-          'this can cause unreliable animations and won\'t be supported in ' +
-          'a future version of React. See ' +
-          'https://fb.me/react-animation-transition-group-timeout for more ' +
-          'information.'
+          timeoutPropName +
+            " wasn't supplied to ReactCSSTransitionGroup: " +
+            "this can cause unreliable animations and won't be supported in " +
+            'a future version of React. See ' +
+            'https://fb.me/react-animation-transition-group-timeout for more ' +
+            'information.',
         );
 
-      // If the duration isn't a number
+        // If the duration isn't a number
       } else if (typeof props[timeoutPropName] !== 'number') {
-        return new Error(timeoutPropName + ' must be a number (in milliseconds)');
+        return new Error(
+          timeoutPropName + ' must be a number (in milliseconds)',
+        );
       }
@@ -43,11 +48,16 @@ function createTransitionTimeoutPropValidator(transitionType) {
 
-var ReactCSSTransitionGroup = React.createClass({
-  displayName: 'ReactCSSTransitionGroup',
+/**
+ * An easy way to perform CSS transitions and animations when a React component
+ * enters or leaves the DOM.
+ * See https://facebook.github.io/react/docs/animation.html#high-level-api-reactcsstransitiongroup
+ */
+class ReactCSSTransitionGroup extends React.Component {
+  static displayName = 'ReactCSSTransitionGroup';
 
-  propTypes: {
+  static propTypes = {
     transitionName: ReactCSSTransitionGroupChild.propTypes.name,
 
-    transitionAppear: React.PropTypes.bool,
-    transitionEnter: React.PropTypes.bool,
-    transitionLeave: React.PropTypes.bool,
+    transitionAppear: PropTypes.bool,
+    transitionEnter: PropTypes.bool,
+    transitionLeave: PropTypes.bool,
     transitionAppearTimeout: createTransitionTimeoutPropValidator('Appear'),
@@ -55,13 +65,11 @@ var ReactCSSTransitionGroup = React.createClass({
     transitionLeaveTimeout: createTransitionTimeoutPropValidator('Leave'),
-  },
+  };
 
-  getDefaultProps: function() {
-    return {
-      transitionAppear: false,
-      transitionEnter: true,
-      transitionLeave: true,
-    };
-  },
+  static defaultProps = {
+    transitionAppear: false,
+    transitionEnter: true,
+    transitionLeave: true,
+  };
 
-  _wrapChild: function(child) {
+  _wrapChild = child => {
     // We need to provide this childFactory so that
@@ -80,13 +88,13 @@ var ReactCSSTransitionGroup = React.createClass({
       },
-      child
+      child,
     );
-  },
+  };
 
-  render: function() {
+  render() {
     return React.createElement(
       ReactTransitionGroup,
-      Object.assign({}, this.props, {childFactory: this._wrapChild})
+      Object.assign({}, this.props, {childFactory: this._wrapChild}),
     );
-  },
-});
+  }
+}
 
diff --git a/src/addons/transitions/ReactCSSTransitionGroupChild.js b/src/addons/transitions/ReactCSSTransitionGroupChild.js
index 170cb9d87..94bf1fd6f 100644
--- a/src/addons/transitions/ReactCSSTransitionGroupChild.js
+++ b/src/addons/transitions/ReactCSSTransitionGroupChild.js
@@ -14,3 +14,6 @@
 var React = require('React');
-var ReactDOM = require('ReactDOM');
+var ReactAddonsDOMDependencies = require('ReactAddonsDOMDependencies');
+
+var propTypesFactory = require('prop-types/factory');
+var PropTypes = propTypesFactory(React.isValidElement);
 
@@ -23,20 +26,18 @@ var TICK = 17;
 
-var ReactCSSTransitionGroupChild = React.createClass({
-  displayName: 'ReactCSSTransitionGroupChild',
-
-  propTypes: {
-    name: React.PropTypes.oneOfType([
-      React.PropTypes.string,
-      React.PropTypes.shape({
-        enter: React.PropTypes.string,
-        leave: React.PropTypes.string,
-        active: React.PropTypes.string,
+class ReactCSSTransitionGroupChild extends React.Component {
+  static propTypes = {
+    name: PropTypes.oneOfType([
+      PropTypes.string,
+      PropTypes.shape({
+        enter: PropTypes.string,
+        leave: PropTypes.string,
+        active: PropTypes.string,
       }),
-      React.PropTypes.shape({
-        enter: React.PropTypes.string,
-        enterActive: React.PropTypes.string,
-        leave: React.PropTypes.string,
-        leaveActive: React.PropTypes.string,
-        appear: React.PropTypes.string,
-        appearActive: React.PropTypes.string,
+      PropTypes.shape({
+        enter: PropTypes.string,
+        enterActive: PropTypes.string,
+        leave: PropTypes.string,
+        leaveActive: PropTypes.string,
+        appear: PropTypes.string,
+        appearActive: PropTypes.string,
       }),
@@ -47,12 +48,14 @@ var ReactCSSTransitionGroupChild = React.createClass({
     // or a bool for the timeout flags (appearTimeout etc.)
-    appear: React.PropTypes.bool,
-    enter: React.PropTypes.bool,
-    leave: React.PropTypes.bool,
-    appearTimeout: React.PropTypes.number,
-    enterTimeout: React.PropTypes.number,
-    leaveTimeout: React.PropTypes.number,
-  },
+    appear: PropTypes.bool,
+    enter: PropTypes.bool,
+    leave: PropTypes.bool,
+    appearTimeout: PropTypes.number,
+    enterTimeout: PropTypes.number,
+    leaveTimeout: PropTypes.number,
+  };
 
-  transition: function(animationType, finishCallback, userSpecifiedDelay) {
-    var node = ReactDOM.findDOMNode(this);
+  _isMounted = false;
+
+  transition = (animationType, finishCallback, userSpecifiedDelay) => {
+    var node = ReactAddonsDOMDependencies.getReactDOM().findDOMNode(this);
 
@@ -65,4 +68,6 @@ var ReactCSSTransitionGroupChild = React.createClass({
 
-    var className = this.props.name[animationType] || this.props.name + '-' + animationType;
-    var activeClassName = this.props.name[animationType + 'Active'] || className + '-active';
+    var className =
+      this.props.name[animationType] || this.props.name + '-' + animationType;
+    var activeClassName =
+      this.props.name[animationType + 'Active'] || className + '-active';
     var timeout = null;
@@ -91,3 +96,3 @@ var ReactCSSTransitionGroupChild = React.createClass({
     // Need to do this to actually trigger a transition.
-    this.queueClass(activeClassName);
+    this.queueClassAndNode(activeClassName, node);
 
@@ -102,28 +107,37 @@ var ReactCSSTransitionGroupChild = React.createClass({
     }
-  },
+  };
 
-  queueClass: function(className) {
-    this.classNameQueue.push(className);
+  queueClassAndNode = (className, node) => {
+    this.classNameAndNodeQueue.push({
+      className: className,
+      node: node,
+    });
 
     if (!this.timeout) {
-      this.timeout = setTimeout(this.flushClassNameQueue, TICK);
+      this.timeout = setTimeout(this.flushClassNameAndNodeQueue, TICK);
     }
-  },
+  };
 
-  flushClassNameQueue: function() {
-    if (this.isMounted()) {
-      this.classNameQueue.forEach(
-        CSSCore.addClass.bind(CSSCore, ReactDOM.findDOMNode(this))
-      );
+  flushClassNameAndNodeQueue = () => {
+    if (this._isMounted) {
+      this.classNameAndNodeQueue.forEach(function(obj) {
+        CSSCore.addClass(obj.node, obj.className);
+      });
     }
-    this.classNameQueue.length = 0;
+    this.classNameAndNodeQueue.length = 0;
     this.timeout = null;
-  },
+  };
 
-  componentWillMount: function() {
-    this.classNameQueue = [];
+  componentWillMount() {
+    this.classNameAndNodeQueue = [];
     this.transitionTimeouts = [];
-  },
+  }
+
+  componentDidMount() {
+    this._isMounted = true;
+  }
+
+  componentWillUnmount() {
+    this._isMounted = false;
 
-  componentWillUnmount: function() {
     if (this.timeout) {
@@ -134,5 +148,7 @@ var ReactCSSTransitionGroupChild = React.createClass({
     });
-  },
 
-  componentWillAppear: function(done) {
+    this.classNameAndNodeQueue.length = 0;
+  }
+
+  componentWillAppear = done => {
     if (this.props.appear) {
@@ -142,5 +158,5 @@ var ReactCSSTransitionGroupChild = React.createClass({
     }
-  },
+  };
 
-  componentWillEnter: function(done) {
+  componentWillEnter = done => {
     if (this.props.enter) {
@@ -150,5 +166,5 @@ var ReactCSSTransitionGroupChild = React.createClass({
     }
-  },
+  };
 
-  componentWillLeave: function(done) {
+  componentWillLeave = done => {
     if (this.props.leave) {
@@ -158,8 +174,8 @@ var ReactCSSTransitionGroupChild = React.createClass({
     }
-  },
+  };
 
-  render: function() {
+  render() {
     return onlyChild(this.props.children);
-  },
-});
+  }
+}
 
diff --git a/src/addons/transitions/ReactTransitionChildMapping.js b/src/addons/transitions/ReactTransitionChildMapping.js
index 285834324..4ba6795df 100644
--- a/src/addons/transitions/ReactTransitionChildMapping.js
+++ b/src/addons/transitions/ReactTransitionChildMapping.js
@@ -21,5 +21,6 @@ var ReactTransitionChildMapping = {
    * @param {*} children `this.props.children`
+   * @param {number=} selfDebugID Optional debugID of the current internal instance.
    * @return {object} Mapping of key to child
    */
-  getChildMapping: function(children) {
+  getChildMapping: function(children, selfDebugID) {
     if (!children) {
@@ -27,2 +28,7 @@ var ReactTransitionChildMapping = {
     }
+
+    if (__DEV__) {
+      return flattenChildren(children, selfDebugID);
+    }
+
     return flattenChildren(children);
@@ -82,3 +88,3 @@ var ReactTransitionChildMapping = {
           childMapping[nextKeysPending[nextKey][i]] = getValueForKey(
-            pendingNextKey
+            pendingNextKey,
           );
diff --git a/src/addons/transitions/ReactTransitionGroup.js b/src/addons/transitions/ReactTransitionGroup.js
index 6d6df1a80..cd576aa85 100644
--- a/src/addons/transitions/ReactTransitionGroup.js
+++ b/src/addons/transitions/ReactTransitionGroup.js
@@ -16,26 +16,31 @@ var ReactTransitionChildMapping = require('ReactTransitionChildMapping');
 
+var propTypesFactory = require('prop-types/factory');
+var PropTypes = propTypesFactory(React.isValidElement);
+
 var emptyFunction = require('emptyFunction');
 
-var ReactTransitionGroup = React.createClass({
-  displayName: 'ReactTransitionGroup',
+/**
+ * A basis for animations. When children are declaratively added or removed,
+ * special lifecycle hooks are called.
+ * See https://facebook.github.io/react/docs/animation.html#low-level-api-reacttransitiongroup
+ */
+class ReactTransitionGroup extends React.Component {
+  static displayName = 'ReactTransitionGroup';
 
-  propTypes: {
-    component: React.PropTypes.any,
-    childFactory: React.PropTypes.func,
-  },
+  static propTypes = {
+    component: PropTypes.any,
+    childFactory: PropTypes.func,
+  };
 
-  getDefaultProps: function() {
-    return {
-      component: 'span',
-      childFactory: emptyFunction.thatReturnsArgument,
-    };
-  },
+  static defaultProps = {
+    component: 'span',
+    childFactory: emptyFunction.thatReturnsArgument,
+  };
 
-  getInitialState: function() {
-    return {
-      children: ReactTransitionChildMapping.getChildMapping(this.props.children),
-    };
-  },
+  state = {
+    // TODO: can we get useful debug information to show at this point?
+    children: ReactTransitionChildMapping.getChildMapping(this.props.children),
+  };
 
-  componentWillMount: function() {
+  componentWillMount() {
     this.currentlyTransitioningKeys = {};
@@ -43,5 +48,5 @@ var ReactTransitionGroup = React.createClass({
     this.keysToLeave = [];
-  },
+  }
 
-  componentDidMount: function() {
+  componentDidMount() {
     var initialChildMapping = this.state.children;
@@ -52,7 +57,7 @@ var ReactTransitionGroup = React.createClass({
     }
-  },
+  }
 
-  componentWillReceiveProps: function(nextProps) {
+  componentWillReceiveProps(nextProps) {
     var nextChildMapping = ReactTransitionChildMapping.getChildMapping(
-      nextProps.children
+      nextProps.children,
     );
@@ -63,3 +68,3 @@ var ReactTransitionGroup = React.createClass({
         prevChildMapping,
-        nextChildMapping
+        nextChildMapping,
       ),
@@ -71,4 +76,7 @@ var ReactTransitionGroup = React.createClass({
       var hasPrev = prevChildMapping && prevChildMapping.hasOwnProperty(key);
-      if (nextChildMapping[key] && !hasPrev &&
-          !this.currentlyTransitioningKeys[key]) {
+      if (
+        nextChildMapping[key] &&
+        !hasPrev &&
+        !this.currentlyTransitioningKeys[key]
+      ) {
         this.keysToEnter.push(key);
@@ -79,4 +87,7 @@ var ReactTransitionGroup = React.createClass({
       var hasNext = nextChildMapping && nextChildMapping.hasOwnProperty(key);
-      if (prevChildMapping[key] && !hasNext &&
-          !this.currentlyTransitioningKeys[key]) {
+      if (
+        prevChildMapping[key] &&
+        !hasNext &&
+        !this.currentlyTransitioningKeys[key]
+      ) {
         this.keysToLeave.push(key);
@@ -86,5 +97,5 @@ var ReactTransitionGroup = React.createClass({
     // If we want to someday check for reordering, we could do it here.
-  },
+  }
 
-  componentDidUpdate: function() {
+  componentDidUpdate() {
     var keysToEnter = this.keysToEnter;
@@ -96,5 +107,5 @@ var ReactTransitionGroup = React.createClass({
     keysToLeave.forEach(this.performLeave);
-  },
+  }
 
-  performAppear: function(key) {
+  performAppear = key => {
     this.currentlyTransitioningKeys[key] = true;
@@ -104,5 +115,3 @@ var ReactTransitionGroup = React.createClass({
     if (component.componentWillAppear) {
-      component.componentWillAppear(
-        this._handleDoneAppearing.bind(this, key)
-      );
+      component.componentWillAppear(this._handleDoneAppearing.bind(this, key));
     } else {
@@ -110,5 +119,5 @@ var ReactTransitionGroup = React.createClass({
     }
-  },
+  };
 
-  _handleDoneAppearing: function(key) {
+  _handleDoneAppearing = key => {
     var component = this.refs[key];
@@ -121,3 +130,3 @@ var ReactTransitionGroup = React.createClass({
     var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
-      this.props.children
+      this.props.children,
     );
@@ -128,5 +137,5 @@ var ReactTransitionGroup = React.createClass({
     }
-  },
+  };
 
-  performEnter: function(key) {
+  performEnter = key => {
     this.currentlyTransitioningKeys[key] = true;
@@ -136,5 +145,3 @@ var ReactTransitionGroup = React.createClass({
     if (component.componentWillEnter) {
-      component.componentWillEnter(
-        this._handleDoneEntering.bind(this, key)
-      );
+      component.componentWillEnter(this._handleDoneEntering.bind(this, key));
     } else {
@@ -142,5 +149,5 @@ var ReactTransitionGroup = React.createClass({
     }
-  },
+  };
 
-  _handleDoneEntering: function(key) {
+  _handleDoneEntering = key => {
     var component = this.refs[key];
@@ -153,3 +160,3 @@ var ReactTransitionGroup = React.createClass({
     var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
-      this.props.children
+      this.props.children,
     );
@@ -160,5 +167,5 @@ var ReactTransitionGroup = React.createClass({
     }
-  },
+  };
 
-  performLeave: function(key) {
+  performLeave = key => {
     this.currentlyTransitioningKeys[key] = true;
@@ -174,5 +181,5 @@ var ReactTransitionGroup = React.createClass({
     }
-  },
+  };
 
-  _handleDoneLeaving: function(key) {
+  _handleDoneLeaving = key => {
     var component = this.refs[key];
@@ -186,3 +193,3 @@ var ReactTransitionGroup = React.createClass({
     var currentChildMapping = ReactTransitionChildMapping.getChildMapping(
-      this.props.children
+      this.props.children,
     );
@@ -199,5 +206,5 @@ var ReactTransitionGroup = React.createClass({
     }
-  },
+  };
 
-  render: function() {
+  render() {
     // TODO: we could get rid of the need for the wrapper node
@@ -213,15 +220,26 @@ var ReactTransitionGroup = React.createClass({
         // leaving.
-        childrenToRender.push(React.cloneElement(
-          this.props.childFactory(child),
-          {ref: key, key: key}
-        ));
+        childrenToRender.push(
+          React.cloneElement(this.props.childFactory(child), {
+            ref: key,
+            key: key,
+          }),
+        );
       }
     }
-    return React.createElement(
-      this.props.component,
-      this.props,
-      childrenToRender
-    );
-  },
-});
+
+    // Do not forward ReactTransitionGroup props to primitive DOM nodes
+    var props = Object.assign({}, this.props);
+    delete props.transitionLeave;
+    delete props.transitionName;
+    delete props.transitionAppear;
+    delete props.transitionEnter;
+    delete props.childFactory;
+    delete props.transitionLeaveTimeout;
+    delete props.transitionEnterTimeout;
+    delete props.transitionAppearTimeout;
+    delete props.component;
+
+    return React.createElement(this.props.component, props, childrenToRender);
+  }
+}
 
diff --git a/src/addons/transitions/__tests__/ReactCSSTransitionGroup-test.js b/src/addons/transitions/__tests__/ReactCSSTransitionGroup-test.js
deleted file mode 100644
index 0bf8c6bb2..000000000
--- a/src/addons/transitions/__tests__/ReactCSSTransitionGroup-test.js
+++ /dev/null
@@ -1,294 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
- */
-
-'use strict';
-
-var CSSCore = require('CSSCore');
-
-var React;
-var ReactDOM;
-var ReactCSSTransitionGroup;
-
-// Most of the real functionality is covered in other unit tests, this just
-// makes sure we're wired up correctly.
-describe('ReactCSSTransitionGroup', function() {
-  var container;
-
-  beforeEach(function() {
-    jest.resetModuleRegistry();
-    React = require('React');
-    ReactDOM = require('ReactDOM');
-    ReactCSSTransitionGroup = require('ReactCSSTransitionGroup');
-
-    container = document.createElement('div');
-    spyOn(console, 'error');
-  });
-
-  it('should warn if timeouts aren\'t specified', function() {
-    ReactDOM.render(
-      <ReactCSSTransitionGroup
-        transitionName="yolo"
-        transitionEnter={false}
-        transitionLeave={true}
-      >
-        <span key="one" id="one" />
-      </ReactCSSTransitionGroup>,
-      container
-    );
-
-    // Warning about the missing transitionLeaveTimeout prop
-    expect(console.error.argsForCall.length).toBe(1);
-  });
-
-  it('should not warn if timeouts is zero', function() {
-    ReactDOM.render(
-      <ReactCSSTransitionGroup
-        transitionName="yolo"
-        transitionEnter={false}
-        transitionLeave={true}
-        transitionLeaveTimeout={0}
-      >
-        <span key="one" id="one" />
-      </ReactCSSTransitionGroup>,
-      container
-    );
-
-    expect(console.error.argsForCall.length).toBe(0);
-  });
-
-  it('should clean-up silently after the timeout elapses', function() {
-    var a = ReactDOM.render(
-      <ReactCSSTransitionGroup
-        transitionName="yolo"
-        transitionEnter={false}
-        transitionLeaveTimeout={200}
-      >
-        <span key="one" id="one" />
-      </ReactCSSTransitionGroup>,
-      container
-    );
-    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);
-
-    setTimeout.mock.calls.length = 0;
-
-    ReactDOM.render(
-      <ReactCSSTransitionGroup
-        transitionName="yolo"
-        transitionEnter={false}
-        transitionLeaveTimeout={200}
-      >
-        <span key="two" id="two" />
-      </ReactCSSTransitionGroup>,
-      container
-    );
-    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(2);
-    expect(ReactDOM.findDOMNode(a).childNodes[0].id).toBe('two');
-    expect(ReactDOM.findDOMNode(a).childNodes[1].id).toBe('one');
-
-    // For some reason jst is adding extra setTimeout()s and grunt test isn't,
-    // so we need to do this disgusting hack.
-    for (var i = 0; i < setTimeout.mock.calls.length; i++) {
-      if (setTimeout.mock.calls[i][1] === 200) {
-        setTimeout.mock.calls[i][0]();
-        break;
-      }
-    }
-
-    // No warnings
-    expect(console.error.argsForCall.length).toBe(0);
-
-    // The leaving child has been removed
-    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);
-    expect(ReactDOM.findDOMNode(a).childNodes[0].id).toBe('two');
-  });
-
-  it('should keep both sets of DOM nodes around', function() {
-    var a = ReactDOM.render(
-      <ReactCSSTransitionGroup transitionName="yolo">
-        <span key="one" id="one" />
-      </ReactCSSTransitionGroup>,
-      container
-    );
-    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);
-    ReactDOM.render(
-      <ReactCSSTransitionGroup transitionName="yolo">
-        <span key="two" id="two" />
-      </ReactCSSTransitionGroup>,
-      container
-    );
-    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(2);
-    expect(ReactDOM.findDOMNode(a).childNodes[0].id).toBe('two');
-    expect(ReactDOM.findDOMNode(a).childNodes[1].id).toBe('one');
-  });
-
-  it('should switch transitionLeave from false to true', function() {
-    var a = ReactDOM.render(
-      <ReactCSSTransitionGroup
-          transitionName="yolo"
-          transitionEnter={false}
-          transitionLeave={false}>
-        <span key="one" id="one" />
-      </ReactCSSTransitionGroup>,
-      container
-    );
-    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);
-    ReactDOM.render(
-      <ReactCSSTransitionGroup
-          transitionName="yolo"
-          transitionEnter={false}
-          transitionLeave={false}>
-        <span key="two" id="two" />
-      </ReactCSSTransitionGroup>,
-      container
-    );
-    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);
-    ReactDOM.render(
-      <ReactCSSTransitionGroup
-          transitionName="yolo"
-          transitionEnter={false}
-          transitionLeave={true}>
-        <span key="three" id="three" />
-      </ReactCSSTransitionGroup>,
-      container
-    );
-    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(2);
-    expect(ReactDOM.findDOMNode(a).childNodes[0].id).toBe('three');
-    expect(ReactDOM.findDOMNode(a).childNodes[1].id).toBe('two');
-  });
-
-  it('should work with no children', function() {
-    ReactDOM.render(
-      <ReactCSSTransitionGroup transitionName="yolo" />,
-      container
-    );
-  });
-
-  it('should work with a null child', function() {
-    ReactDOM.render(
-      <ReactCSSTransitionGroup transitionName="yolo">
-        {[null]}
-      </ReactCSSTransitionGroup>,
-      container
-    );
-  });
-
-  it('should transition from one to null', function() {
-    var a = ReactDOM.render(
-      <ReactCSSTransitionGroup transitionName="yolo">
-        <span key="one" id="one" />
-      </ReactCSSTransitionGroup>,
-      container
-    );
-    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);
-    ReactDOM.render(
-      <ReactCSSTransitionGroup transitionName="yolo">
-        {null}
-      </ReactCSSTransitionGroup>,
-      container
-    );
-    // (Here, we expect the original child to stick around but test that no
-    // exception is thrown)
-    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);
-    expect(ReactDOM.findDOMNode(a).childNodes[0].id).toBe('one');
-  });
-
-  it('should transition from false to one', function() {
-    var a = ReactDOM.render(
-      <ReactCSSTransitionGroup transitionName="yolo">
-        {false}
-      </ReactCSSTransitionGroup>,
-      container
-    );
-    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(0);
-    ReactDOM.render(
-      <ReactCSSTransitionGroup transitionName="yolo">
-        <span key="one" id="one" />
-      </ReactCSSTransitionGroup>,
-      container
-    );
-    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);
-    expect(ReactDOM.findDOMNode(a).childNodes[0].id).toBe('one');
-  });
-
-  it('should use transition-type specific names when they\'re provided', function() {
-    var customTransitionNames = {
-      enter: 'custom-entering',
-      leave: 'custom-leaving',
-    };
-
-    var a = ReactDOM.render(
-      <ReactCSSTransitionGroup
-        transitionName={customTransitionNames}
-        transitionEnterTimeout={1}
-        transitionLeaveTimeout={1}
-      >
-        <span key="one" id="one" />
-      </ReactCSSTransitionGroup>,
-      container
-    );
-    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(1);
-
-    // Add an element
-    ReactDOM.render(
-      <ReactCSSTransitionGroup
-        transitionName={customTransitionNames}
-        transitionEnterTimeout={1}
-        transitionLeaveTimeout={1}
-      >
-        <span key="one" id="one" />
-        <span key="two" id="two" />
-      </ReactCSSTransitionGroup>,
-      container
-    );
-    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(2);
-
-    var enteringNode = ReactDOM.findDOMNode(a).childNodes[1];
-    expect(CSSCore.hasClass(enteringNode, 'custom-entering')).toBe(true);
-
-    // Remove an element
-    ReactDOM.render(
-      <ReactCSSTransitionGroup
-        transitionName={customTransitionNames}
-        transitionEnterTimeout={1}
-        transitionLeaveTimeout={1}
-      >
-        <span key="two" id="two" />
-      </ReactCSSTransitionGroup>,
-      container
-    );
-    expect(ReactDOM.findDOMNode(a).childNodes.length).toBe(2);
-
-    var leavingNode = ReactDOM.findDOMNode(a).childNodes[0];
-    expect(CSSCore.hasClass(leavingNode, 'custom-leaving')).toBe(true);
-  });
-
-  it('should clear transition timeouts when unmounted', function() {
-    var Component = React.createClass({
-      render: function() {
-        return (
-          <ReactCSSTransitionGroup
-            transitionName="yolo"
-            transitionEnterTimeout={500}>
-            {this.props.children}
-          </ReactCSSTransitionGroup>
-        );
-      },
-    });
-
-    ReactDOM.render(<Component/>, container);
-    ReactDOM.render(<Component><span key="yolo" id="yolo"/></Component>, container);
-
-    ReactDOM.unmountComponentAtNode(container);
-
-    // Testing that no exception is thrown here, as the timeout has been cleared.
-    jest.runAllTimers();
-  });
-});
diff --git a/src/addons/transitions/__tests__/ReactTransitionChildMapping-test.js b/src/addons/transitions/__tests__/ReactTransitionChildMapping-test.js
index 7cc3c63a6..b6c705898 100644
--- a/src/addons/transitions/__tests__/ReactTransitionChildMapping-test.js
+++ b/src/addons/transitions/__tests__/ReactTransitionChildMapping-test.js
@@ -16,4 +16,4 @@ var ReactTransitionChildMapping;
 
-describe('ReactTransitionChildMapping', function() {
-  beforeEach(function() {
+describe('ReactTransitionChildMapping', () => {
+  beforeEach(() => {
     React = require('React');
@@ -22,3 +22,3 @@ describe('ReactTransitionChildMapping', function() {
 
-  it('should support getChildMapping', function() {
+  it('should support getChildMapping', () => {
     var oneone = <div key="oneone" />;
@@ -29,3 +29,3 @@ describe('ReactTransitionChildMapping', function() {
     expect(
-      ReactTransitionChildMapping.getChildMapping(component.props.children)
+      ReactTransitionChildMapping.getChildMapping(component.props.children),
     ).toEqual({
@@ -36,3 +36,3 @@ describe('ReactTransitionChildMapping', function() {
 
-  it('should support mergeChildMappings for adding keys', function() {
+  it('should support mergeChildMappings for adding keys', () => {
     var prev = {
@@ -53,3 +53,3 @@ describe('ReactTransitionChildMapping', function() {
 
-  it('should support mergeChildMappings for removing keys', function() {
+  it('should support mergeChildMappings for removing keys', () => {
     var prev = {
@@ -70,3 +70,3 @@ describe('ReactTransitionChildMapping', function() {
 
-  it('should support mergeChildMappings for adding and removing', function() {
+  it('should support mergeChildMappings for adding and removing', () => {
     var prev = {
@@ -89,3 +89,3 @@ describe('ReactTransitionChildMapping', function() {
 
-  it('should reconcile overlapping insertions and deletions', function() {
+  it('should reconcile overlapping insertions and deletions', () => {
     var prev = {
@@ -111,3 +111,3 @@ describe('ReactTransitionChildMapping', function() {
 
-  it('should support mergeChildMappings with undefined input', function() {
+  it('should support mergeChildMappings with undefined input', () => {
     var prev = {
diff --git a/src/addons/transitions/__tests__/ReactTransitionGroup-test.js b/src/addons/transitions/__tests__/ReactTransitionGroup-test.js
deleted file mode 100644
index f98302be1..000000000
--- a/src/addons/transitions/__tests__/ReactTransitionGroup-test.js
+++ /dev/null
@@ -1,272 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
- */
-
-'use strict';
-
-var React;
-var ReactDOM;
-var ReactTransitionGroup;
-
-// Most of the real functionality is covered in other unit tests, this just
-// makes sure we're wired up correctly.
-describe('ReactTransitionGroup', function() {
-  var container;
-
-  beforeEach(function() {
-    React = require('React');
-    ReactDOM = require('ReactDOM');
-    ReactTransitionGroup = require('ReactTransitionGroup');
-
-    container = document.createElement('div');
-  });
-
-
-  it('should handle willEnter correctly', function() {
-    var log = [];
-
-    var Child = React.createClass({
-      componentDidMount: function() {
-        log.push('didMount');
-      },
-      componentWillAppear: function(cb) {
-        log.push('willAppear');
-        cb();
-      },
-      componentDidAppear: function() {
-        log.push('didAppear');
-      },
-      componentWillEnter: function(cb) {
-        log.push('willEnter');
-        cb();
-      },
-      componentDidEnter: function() {
-        log.push('didEnter');
-      },
-      componentWillLeave: function(cb) {
-        log.push('willLeave');
-        cb();
-      },
-      componentDidLeave: function() {
-        log.push('didLeave');
-      },
-      componentWillUnmount: function() {
-        log.push('willUnmount');
-      },
-      render: function() {
-        return <span />;
-      },
-    });
-
-    var Component = React.createClass({
-      getInitialState: function() {
-        return {count: 1};
-      },
-      render: function() {
-        var children = [];
-        for (var i = 0; i < this.state.count; i++) {
-          children.push(<Child key={i} />);
-        }
-        return <ReactTransitionGroup>{children}</ReactTransitionGroup>;
-      },
-    });
-
-    var instance = ReactDOM.render(<Component />, container);
-    expect(log).toEqual(['didMount', 'willAppear', 'didAppear']);
-
-    log = [];
-    instance.setState({count: 2}, function() {
-      expect(log).toEqual(['didMount', 'willEnter', 'didEnter']);
-
-      log = [];
-      instance.setState({count: 1}, function() {
-        expect(log).toEqual(['willLeave', 'didLeave', 'willUnmount']);
-      });
-    });
-  });
-
-  it('should handle enter/leave/enter/leave correctly', function() {
-    var log = [];
-    var willEnterCb;
-
-    var Child = React.createClass({
-      componentDidMount: function() {
-        log.push('didMount');
-      },
-      componentWillEnter: function(cb) {
-        log.push('willEnter');
-        willEnterCb = cb;
-      },
-      componentDidEnter: function() {
-        log.push('didEnter');
-      },
-      componentWillLeave: function(cb) {
-        log.push('willLeave');
-        cb();
-      },
-      componentDidLeave: function() {
-        log.push('didLeave');
-      },
-      componentWillUnmount: function() {
-        log.push('willUnmount');
-      },
-      render: function() {
-        return <span />;
-      },
-    });
-
-    var Component = React.createClass({
-      getInitialState: function() {
-        return {count: 1};
-      },
-      render: function() {
-        var children = [];
-        for (var i = 0; i < this.state.count; i++) {
-          children.push(<Child key={i} />);
-        }
-        return <ReactTransitionGroup>{children}</ReactTransitionGroup>;
-      },
-    });
-
-    var instance = ReactDOM.render(<Component />, container);
-    expect(log).toEqual(['didMount']);
-    instance.setState({count: 2});
-    expect(log).toEqual(['didMount', 'didMount', 'willEnter']);
-    for (var k = 0; k < 5; k++) {
-      instance.setState({count: 2});
-      expect(log).toEqual(['didMount', 'didMount', 'willEnter']);
-      instance.setState({count: 1});
-    }
-    // other animations are blocked until willEnterCb is called
-    willEnterCb();
-    expect(log).toEqual([
-      'didMount', 'didMount', 'willEnter',
-      'didEnter', 'willLeave', 'didLeave', 'willUnmount',
-    ]);
-  });
-
-  it('should handle enter/leave/enter correctly', function() {
-    var log = [];
-    var willEnterCb;
-
-    var Child = React.createClass({
-      componentDidMount: function() {
-        log.push('didMount');
-      },
-      componentWillEnter: function(cb) {
-        log.push('willEnter');
-        willEnterCb = cb;
-      },
-      componentDidEnter: function() {
-        log.push('didEnter');
-      },
-      componentWillLeave: function(cb) {
-        log.push('willLeave');
-        cb();
-      },
-      componentDidLeave: function() {
-        log.push('didLeave');
-      },
-      componentWillUnmount: function() {
-        log.push('willUnmount');
-      },
-      render: function() {
-        return <span />;
-      },
-    });
-
-    var Component = React.createClass({
-      getInitialState: function() {
-        return {count: 1};
-      },
-      render: function() {
-        var children = [];
-        for (var i = 0; i < this.state.count; i++) {
-          children.push(<Child key={i} />);
-        }
-        return <ReactTransitionGroup>{children}</ReactTransitionGroup>;
-      },
-    });
-
-    var instance = ReactDOM.render(<Component />, container);
-    expect(log).toEqual(['didMount']);
-    instance.setState({count: 2});
-    expect(log).toEqual(['didMount', 'didMount', 'willEnter']);
-    for (var k = 0; k < 5; k++) {
-      instance.setState({count: 1});
-      expect(log).toEqual(['didMount', 'didMount', 'willEnter']);
-      instance.setState({count: 2});
-    }
-    willEnterCb();
-    expect(log).toEqual([
-      'didMount', 'didMount', 'willEnter', 'didEnter',
-    ]);
-  });
-
-  it('should handle entering/leaving several elements at once', function() {
-    var log = [];
-
-    var Child = React.createClass({
-      componentDidMount: function() {
-        log.push('didMount' + this.props.id);
-      },
-      componentWillEnter: function(cb) {
-        log.push('willEnter' + this.props.id);
-        cb();
-      },
-      componentDidEnter: function() {
-        log.push('didEnter' + this.props.id);
-      },
-      componentWillLeave: function(cb) {
-        log.push('willLeave' + this.props.id);
-        cb();
-      },
-      componentDidLeave: function() {
-        log.push('didLeave' + this.props.id);
-      },
-      componentWillUnmount: function() {
-        log.push('willUnmount' + this.props.id);
-      },
-      render: function() {
-        return <span />;
-      },
-    });
-
-    var Component = React.createClass({
-      getInitialState: function() {
-        return {count: 1};
-      },
-      render: function() {
-        var children = [];
-        for (var i = 0; i < this.state.count; i++) {
-          children.push(<Child key={i} id={i} />);
-        }
-        return <ReactTransitionGroup>{children}</ReactTransitionGroup>;
-      },
-    });
-
-    var instance = ReactDOM.render(<Component />, container);
-    expect(log).toEqual(['didMount0']);
-    log = [];
-
-    instance.setState({count: 3});
-    expect(log).toEqual([
-      'didMount1', 'didMount2', 'willEnter1', 'didEnter1',
-      'willEnter2', 'didEnter2',
-    ]);
-    log = [];
-
-    instance.setState({count: 0});
-    expect(log).toEqual([
-      'willLeave0', 'didLeave0', 'willLeave1', 'didLeave1',
-      'willLeave2', 'didLeave2', 'willUnmount0', 'willUnmount1', 'willUnmount2',
-    ]);
-  });
-});
diff --git a/src/addons/update.js b/src/addons/update.js
index cc2434e2b..ce5fa018d 100644
--- a/src/addons/update.js
+++ b/src/addons/update.js
@@ -11,3 +11,3 @@
 
- /* global hasOwnProperty:true */
+/* global hasOwnProperty:true */
 
@@ -15,3 +15,2 @@
 
-var keyOf = require('keyOf');
 var invariant = require('invariant');
@@ -29,8 +28,8 @@ function shallowCopy(x) {
 
-var COMMAND_PUSH = keyOf({$push: null});
-var COMMAND_UNSHIFT = keyOf({$unshift: null});
-var COMMAND_SPLICE = keyOf({$splice: null});
-var COMMAND_SET = keyOf({$set: null});
-var COMMAND_MERGE = keyOf({$merge: null});
-var COMMAND_APPLY = keyOf({$apply: null});
+var COMMAND_PUSH = '$push';
+var COMMAND_UNSHIFT = '$unshift';
+var COMMAND_SPLICE = '$splice';
+var COMMAND_SET = '$set';
+var COMMAND_MERGE = '$merge';
+var COMMAND_APPLY = '$apply';
 
@@ -56,3 +55,3 @@ function invariantArrayCase(value, spec, command) {
     command,
-    value
+    value,
   );
@@ -62,5 +61,5 @@ function invariantArrayCase(value, spec, command) {
     'update(): expected spec of %s to be an array; got %s. ' +
-    'Did you forget to wrap your parameter in an array?',
+      'Did you forget to wrap your parameter in an array?',
     command,
-    specValue
+    specValue,
   );
@@ -68,2 +67,6 @@ function invariantArrayCase(value, spec, command) {
 
+/**
+ * Returns a updated shallow copy of an object without mutating the original.
+ * See https://facebook.github.io/react/docs/update.html for details.
+ */
 function update(value, spec) {
@@ -72,5 +75,5 @@ function update(value, spec) {
     'update(): You provided a key path to update() that did not contain one ' +
-    'of %s. Did you forget to include {%s: ...}?',
+      'of %s. Did you forget to include {%s: ...}?',
     ALL_COMMANDS_LIST.join(', '),
-    COMMAND_SET
+    COMMAND_SET,
   );
@@ -81,3 +84,3 @@ function update(value, spec) {
       'Cannot have more than one key in an object with %s',
-      COMMAND_SET
+      COMMAND_SET,
     );
@@ -93,5 +96,5 @@ function update(value, spec) {
       mergeObj && typeof mergeObj === 'object',
-      'update(): %s expects a spec of type \'object\'; got %s',
+      "update(): %s expects a spec of type 'object'; got %s",
       COMMAND_MERGE,
-      mergeObj
+      mergeObj,
     );
@@ -99,5 +102,5 @@ function update(value, spec) {
       nextValue && typeof nextValue === 'object',
-      'update(): %s expects a target of type \'object\'; got %s',
+      "update(): %s expects a target of type 'object'; got %s",
       COMMAND_MERGE,
-      nextValue
+      nextValue,
     );
@@ -125,3 +128,3 @@ function update(value, spec) {
       COMMAND_SPLICE,
-      value
+      value,
     );
@@ -130,5 +133,5 @@ function update(value, spec) {
       'update(): expected spec of %s to be an array of arrays; got %s. ' +
-      'Did you forget to wrap your parameters in an array?',
+        'Did you forget to wrap your parameters in an array?',
       COMMAND_SPLICE,
-      spec[COMMAND_SPLICE]
+      spec[COMMAND_SPLICE],
     );
@@ -138,5 +141,5 @@ function update(value, spec) {
         'update(): expected spec of %s to be an array of arrays; got %s. ' +
-        'Did you forget to wrap your parameters in an array?',
+          'Did you forget to wrap your parameters in an array?',
         COMMAND_SPLICE,
-        spec[COMMAND_SPLICE]
+        spec[COMMAND_SPLICE],
       );
@@ -151,3 +154,3 @@ function update(value, spec) {
       COMMAND_APPLY,
-      spec[COMMAND_APPLY]
+      spec[COMMAND_APPLY],
     );
diff --git a/src/isomorphic/React.js b/src/isomorphic/React.js
index 551e0a608..29cfea6da 100644
--- a/src/isomorphic/React.js
+++ b/src/isomorphic/React.js
@@ -13,8 +13,6 @@
 
+var ReactBaseClasses = require('ReactBaseClasses');
 var ReactChildren = require('ReactChildren');
-var ReactComponent = require('ReactComponent');
-var ReactClass = require('ReactClass');
 var ReactDOMFactories = require('ReactDOMFactories');
 var ReactElement = require('ReactElement');
-var ReactElementValidator = require('ReactElementValidator');
 var ReactPropTypes = require('ReactPropTypes');
@@ -22,2 +20,3 @@ var ReactVersion = require('ReactVersion');
 
+var createReactClass = require('createClass');
 var onlyChild = require('onlyChild');
@@ -29,2 +28,6 @@ var cloneElement = ReactElement.cloneElement;
 if (__DEV__) {
+  var lowPriorityWarning = require('lowPriorityWarning');
+  var canDefineProperty = require('canDefineProperty');
+  var ReactElementValidator = require('ReactElementValidator');
+  var didWarnPropTypesDeprecated = false;
   createElement = ReactElementValidator.createElement;
@@ -34,4 +37,36 @@ if (__DEV__) {
 
-var React = {
+var __spread = Object.assign;
+var createMixin = function(mixin) {
+  return mixin;
+};
+
+if (__DEV__) {
+  var warnedForSpread = false;
+  var warnedForCreateMixin = false;
+  __spread = function() {
+    lowPriorityWarning(
+      warnedForSpread,
+      'React.__spread is deprecated and should not be used. Use ' +
+        'Object.assign directly or another helper function with similar ' +
+        'semantics. You may be seeing this warning due to your compiler. ' +
+        'See https://fb.me/react-spread-deprecation for more details.',
+    );
+    warnedForSpread = true;
+    return Object.assign.apply(null, arguments);
+  };
 
+  createMixin = function(mixin) {
+    lowPriorityWarning(
+      warnedForCreateMixin,
+      'React.createMixin is deprecated and should not be used. ' +
+        'In React v16.0, it will be removed. ' +
+        'You can use this mixin directly instead. ' +
+        'See https://fb.me/createmixin-was-never-implemented for more info.',
+    );
+    warnedForCreateMixin = true;
+    return mixin;
+  };
+}
+
+var React = {
   // Modern
@@ -46,3 +81,4 @@ var React = {
 
-  Component: ReactComponent,
+  Component: ReactBaseClasses.Component,
+  PureComponent: ReactBaseClasses.PureComponent,
 
@@ -55,8 +91,5 @@ var React = {
   PropTypes: ReactPropTypes,
-  createClass: ReactClass.createClass,
+  createClass: createReactClass,
   createFactory: createFactory,
-  createMixin: function(mixin) {
-    // Currently a noop. Will be used to validate and trace mixins.
-    return mixin;
-  },
+  createMixin: createMixin,
 
@@ -67,4 +100,66 @@ var React = {
   version: ReactVersion,
+
+  // Deprecated hook for JSX spread, don't use this for anything.
+  __spread: __spread,
 };
 
+if (__DEV__) {
+  let warnedForCreateClass = false;
+  if (canDefineProperty) {
+    Object.defineProperty(React, 'PropTypes', {
+      get() {
+        lowPriorityWarning(
+          didWarnPropTypesDeprecated,
+          'Accessing PropTypes via the main React package is deprecated,' +
+            ' and will be removed in  React v16.0.' +
+            ' Use the latest available v15.* prop-types package from npm instead.' +
+            ' For info on usage, compatibility, migration and more, see ' +
+            'https://fb.me/prop-types-docs',
+        );
+        didWarnPropTypesDeprecated = true;
+        return ReactPropTypes;
+      },
+    });
+
+    Object.defineProperty(React, 'createClass', {
+      get: function() {
+        lowPriorityWarning(
+          warnedForCreateClass,
+          'Accessing createClass via the main React package is deprecated,' +
+            ' and will be removed in React v16.0.' +
+            " Use a plain JavaScript class instead. If you're not yet " +
+            'ready to migrate, create-react-class v15.* is available ' +
+            'on npm as a temporary, drop-in replacement. ' +
+            'For more info see https://fb.me/react-create-class',
+        );
+        warnedForCreateClass = true;
+        return createReactClass;
+      },
+    });
+  }
+
+  // React.DOM factories are deprecated. Wrap these methods so that
+  // invocations of the React.DOM namespace and alert users to switch
+  // to the `react-dom-factories` package.
+  React.DOM = {};
+  var warnedForFactories = false;
+  Object.keys(ReactDOMFactories).forEach(function(factory) {
+    React.DOM[factory] = function(...args) {
+      if (!warnedForFactories) {
+        lowPriorityWarning(
+          false,
+          'Accessing factories like React.DOM.%s has been deprecated ' +
+            'and will be removed in v16.0+. Use the ' +
+            'react-dom-factories package instead. ' +
+            ' Version 1.0 provides a drop-in replacement.' +
+            ' For more info, see https://fb.me/react-dom-factories',
+          factory,
+        );
+        warnedForFactories = true;
+      }
+      return ReactDOMFactories[factory](...args);
+    };
+  });
+}
+
 module.exports = React;
diff --git a/src/isomorphic/ReactDebugInstanceMap.js b/src/isomorphic/ReactDebugInstanceMap.js
deleted file mode 100644
index 50dddf4ad..000000000
--- a/src/isomorphic/ReactDebugInstanceMap.js
+++ /dev/null
@@ -1,124 +0,0 @@
-/**
- * Copyright 2016-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @providesModule ReactDebugInstanceMap
- */
-
-'use strict';
-
-var warning = require('warning');
-
-function checkValidInstance(internalInstance) {
-  if (!internalInstance) {
-    warning(
-      false,
-      'There is an internal error in the React developer tools integration. ' +
-      'Instead of an internal instance, received %s. ' +
-      'Please report this as a bug in React.',
-      internalInstance
-    );
-    return false;
-  }
-  var isValid = typeof internalInstance.mountComponent === 'function';
-  warning(
-    isValid,
-    'There is an internal error in the React developer tools integration. ' +
-    'Instead of an internal instance, received an object with the following ' +
-    'keys: %s. Please report this as a bug in React.',
-    Object.keys(internalInstance).join(', ')
-  );
-  return isValid;
-}
-
-var idCounter = 1;
-var instancesByIDs = {};
-var instancesToIDs;
-
-function getIDForInstance(internalInstance) {
-  if (!instancesToIDs) {
-    instancesToIDs = new WeakMap();
-  }
-  if (instancesToIDs.has(internalInstance)) {
-    return instancesToIDs.get(internalInstance);
-  } else {
-    var instanceID = (idCounter++).toString();
-    instancesToIDs.set(internalInstance, instanceID);
-    return instanceID;
-  }
-}
-
-function getInstanceByID(instanceID) {
-  return instancesByIDs[instanceID] || null;
-}
-
-function isRegisteredInstance(internalInstance) {
-  var instanceID = getIDForInstance(internalInstance);
-  if (instanceID) {
-    return instancesByIDs.hasOwnProperty(instanceID);
-  } else {
-    return false;
-  }
-}
-
-function registerInstance(internalInstance) {
-  var instanceID = getIDForInstance(internalInstance);
-  if (instanceID) {
-    instancesByIDs[instanceID] = internalInstance;
-  }
-}
-
-function unregisterInstance(internalInstance) {
-  var instanceID = getIDForInstance(internalInstance);
-  if (instanceID) {
-    delete instancesByIDs[instanceID];
-  }
-}
-
-var ReactDebugInstanceMap = {
-  getIDForInstance(internalInstance) {
-    if (!checkValidInstance(internalInstance)) {
-      return null;
-    }
-    return getIDForInstance(internalInstance);
-  },
-  getInstanceByID(instanceID) {
-    return getInstanceByID(instanceID);
-  },
-  isRegisteredInstance(internalInstance) {
-    if (!checkValidInstance(internalInstance)) {
-      return false;
-    }
-    return isRegisteredInstance(internalInstance);
-  },
-  registerInstance(internalInstance) {
-    if (!checkValidInstance(internalInstance)) {
-      return;
-    }
-    warning(
-      !isRegisteredInstance(internalInstance),
-      'There is an internal error in the React developer tools integration. ' +
-      'A registered instance should not be registered again. ' +
-      'Please report this as a bug in React.'
-    );
-    registerInstance(internalInstance);
-  },
-  unregisterInstance(internalInstance) {
-    if (!checkValidInstance(internalInstance)) {
-      return;
-    }
-    warning(
-      isRegisteredInstance(internalInstance),
-      'There is an internal error in the React developer tools integration. ' +
-      'An unregistered instance should not be unregistered again. ' +
-      'Please report this as a bug in React.'
-    );
-    unregisterInstance(internalInstance);
-  },
-};
-
-module.exports = ReactDebugInstanceMap;
diff --git a/src/isomorphic/ReactDebugTool.js b/src/isomorphic/ReactDebugTool.js
deleted file mode 100644
index 4d2c2a353..000000000
--- a/src/isomorphic/ReactDebugTool.js
+++ /dev/null
@@ -1,77 +0,0 @@
-/**
- * Copyright 2016-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @providesModule ReactDebugTool
- */
-
-'use strict';
-
-var ReactInvalidSetStateWarningDevTool = require('ReactInvalidSetStateWarningDevTool');
-var warning = require('warning');
-
-var eventHandlers = [];
-var handlerDoesThrowForEvent = {};
-
-function emitEvent(handlerFunctionName, arg1, arg2, arg3, arg4, arg5) {
-  if (__DEV__) {
-    eventHandlers.forEach(function(handler) {
-      try {
-        if (handler[handlerFunctionName]) {
-          handler[handlerFunctionName](arg1, arg2, arg3, arg4, arg5);
-        }
-      } catch (e) {
-        warning(
-          !handlerDoesThrowForEvent[handlerFunctionName],
-          'exception thrown by devtool while handling %s: %s',
-          handlerFunctionName,
-          e.message
-        );
-        handlerDoesThrowForEvent[handlerFunctionName] = true;
-      }
-    });
-  }
-}
-
-var ReactDebugTool = {
-  addDevtool(devtool) {
-    eventHandlers.push(devtool);
-  },
-  removeDevtool(devtool) {
-    for (var i = 0; i < eventHandlers.length; i++) {
-      if (eventHandlers[i] === devtool) {
-        eventHandlers.splice(i, 1);
-        i--;
-      }
-    }
-  },
-  onBeginProcessingChildContext() {
-    emitEvent('onBeginProcessingChildContext');
-  },
-  onEndProcessingChildContext() {
-    emitEvent('onEndProcessingChildContext');
-  },
-  onSetState() {
-    emitEvent('onSetState');
-  },
-  onMountRootComponent(internalInstance) {
-    emitEvent('onMountRootComponent', internalInstance);
-  },
-  onMountComponent(internalInstance) {
-    emitEvent('onMountComponent', internalInstance);
-  },
-  onUpdateComponent(internalInstance) {
-    emitEvent('onUpdateComponent', internalInstance);
-  },
-  onUnmountComponent(internalInstance) {
-    emitEvent('onUnmountComponent', internalInstance);
-  },
-};
-
-ReactDebugTool.addDevtool(ReactInvalidSetStateWarningDevTool);
-
-module.exports = ReactDebugTool;
diff --git a/src/isomorphic/__tests__/React-test.js b/src/isomorphic/__tests__/React-test.js
new file mode 100644
index 000000000..7a2d0c9ac
--- /dev/null
+++ b/src/isomorphic/__tests__/React-test.js
@@ -0,0 +1,71 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+describe('React', () => {
+  var React;
+
+  beforeEach(() => {
+    React = require('React');
+  });
+
+  it('should log a deprecation warning once when using React.__spread', () => {
+    spyOn(console, 'warn');
+    React.__spread({});
+    React.__spread({});
+    expect(console.warn.calls.count()).toBe(1);
+    expect(console.warn.calls.argsFor(0)[0]).toContain(
+      'React.__spread is deprecated and should not be used',
+    );
+  });
+
+  it('should log a deprecation warning once when using React.createMixin', () => {
+    spyOn(console, 'warn');
+    React.createMixin();
+    React.createMixin();
+    expect(console.warn.calls.count()).toBe(1);
+    expect(console.warn.calls.argsFor(0)[0]).toContain(
+      'React.createMixin is deprecated and should not be used',
+    );
+  });
+
+  it('should warn once when attempting to access React.createClass', () => {
+    spyOn(console, 'warn');
+    let createClass = React.createClass;
+    createClass = React.createClass;
+    expect(createClass).not.toBe(undefined);
+    expect(console.warn.calls.count()).toBe(1);
+    expect(console.warn.calls.argsFor(0)[0]).toContain(
+      'Warning: Accessing createClass via the main React package is ' +
+        'deprecated, and will be removed in React v16.0. ' +
+        "Use a plain JavaScript class instead. If you're not yet ready " +
+        'to migrate, create-react-class v15.* is available on npm as ' +
+        'a temporary, drop-in replacement. ' +
+        'For more info see https://fb.me/react-create-class',
+    );
+  });
+
+  it('should warn once when attempting to access React.PropTypes', () => {
+    spyOn(console, 'warn');
+    let PropTypes = React.PropTypes;
+    PropTypes = React.PropTypes;
+    expect(PropTypes).not.toBe(undefined);
+    expect(console.warn.calls.count()).toBe(1);
+    expect(console.warn.calls.argsFor(0)[0]).toContain(
+      'Warning: Accessing PropTypes via the main React package is ' +
+        'deprecated, and will be removed in  React v16.0. ' +
+        'Use the latest available v15.* prop-types package from ' +
+        'npm instead. For info on usage, compatibility, migration ' +
+        'and more, see https://fb.me/prop-types-docs',
+    );
+  });
+});
diff --git a/src/isomorphic/__tests__/ReactDebugInstanceMap-test.js b/src/isomorphic/__tests__/ReactDebugInstanceMap-test.js
deleted file mode 100644
index d9a063e2c..000000000
--- a/src/isomorphic/__tests__/ReactDebugInstanceMap-test.js
+++ /dev/null
@@ -1,173 +0,0 @@
-/**
- * Copyright 2016-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
- */
-
-'use strict';
-
-describe('ReactDebugInstanceMap', function() {
-  var React;
-  var ReactDebugInstanceMap;
-  var ReactDOM;
-
-  beforeEach(function() {
-    jest.resetModuleRegistry();
-    React = require('React');
-    ReactDebugInstanceMap = require('ReactDebugInstanceMap');
-    ReactDOM = require('ReactDOM');
-  });
-
-  function createStubInstance() {
-    return { mountComponent: () => {} };
-  }
-
-  it('should register and unregister instances', function() {
-    var inst1 = createStubInstance();
-    var inst2 = createStubInstance();
-
-    expect(ReactDebugInstanceMap.isRegisteredInstance(inst1)).toBe(false);
-    expect(ReactDebugInstanceMap.isRegisteredInstance(inst2)).toBe(false);
-
-    ReactDebugInstanceMap.registerInstance(inst1);
-    expect(ReactDebugInstanceMap.isRegisteredInstance(inst1)).toBe(true);
-    expect(ReactDebugInstanceMap.isRegisteredInstance(inst2)).toBe(false);
-
-    ReactDebugInstanceMap.registerInstance(inst2);
-    expect(ReactDebugInstanceMap.isRegisteredInstance(inst1)).toBe(true);
-    expect(ReactDebugInstanceMap.isRegisteredInstance(inst2)).toBe(true);
-
-    ReactDebugInstanceMap.unregisterInstance(inst2);
-    expect(ReactDebugInstanceMap.isRegisteredInstance(inst1)).toBe(true);
-    expect(ReactDebugInstanceMap.isRegisteredInstance(inst2)).toBe(false);
-
-    ReactDebugInstanceMap.unregisterInstance(inst1);
-    expect(ReactDebugInstanceMap.isRegisteredInstance(inst1)).toBe(false);
-    expect(ReactDebugInstanceMap.isRegisteredInstance(inst2)).toBe(false);
-  });
-
-  it('should assign stable IDs', function() {
-    var inst1 = createStubInstance();
-    var inst2 = createStubInstance();
-
-    var inst1ID = ReactDebugInstanceMap.getIDForInstance(inst1);
-    var inst2ID = ReactDebugInstanceMap.getIDForInstance(inst2);
-    expect(typeof inst1ID).toBe('string');
-    expect(typeof inst2ID).toBe('string');
-    expect(inst1ID).not.toBe(inst2ID);
-
-    ReactDebugInstanceMap.registerInstance(inst1);
-    ReactDebugInstanceMap.registerInstance(inst2);
-    expect(ReactDebugInstanceMap.getIDForInstance(inst1)).toBe(inst1ID);
-    expect(ReactDebugInstanceMap.getIDForInstance(inst2)).toBe(inst2ID);
-
-    ReactDebugInstanceMap.unregisterInstance(inst1);
-    ReactDebugInstanceMap.unregisterInstance(inst2);
-    expect(ReactDebugInstanceMap.getIDForInstance(inst1)).toBe(inst1ID);
-    expect(ReactDebugInstanceMap.getIDForInstance(inst2)).toBe(inst2ID);
-  });
-
-  it('should retrieve registered instance by its ID', function() {
-    var inst1 = createStubInstance();
-    var inst2 = createStubInstance();
-
-    var inst1ID = ReactDebugInstanceMap.getIDForInstance(inst1);
-    var inst2ID = ReactDebugInstanceMap.getIDForInstance(inst2);
-    expect(ReactDebugInstanceMap.getInstanceByID(inst1ID)).toBe(null);
-    expect(ReactDebugInstanceMap.getInstanceByID(inst2ID)).toBe(null);
-
-    ReactDebugInstanceMap.registerInstance(inst1);
-    ReactDebugInstanceMap.registerInstance(inst2);
-    expect(ReactDebugInstanceMap.getInstanceByID(inst1ID)).toBe(inst1);
-    expect(ReactDebugInstanceMap.getInstanceByID(inst2ID)).toBe(inst2);
-
-    ReactDebugInstanceMap.unregisterInstance(inst1);
-    ReactDebugInstanceMap.unregisterInstance(inst2);
-    expect(ReactDebugInstanceMap.getInstanceByID(inst1ID)).toBe(null);
-    expect(ReactDebugInstanceMap.getInstanceByID(inst2ID)).toBe(null);
-  });
-
-  it('should warn when registering an instance twice', function() {
-    spyOn(console, 'error');
-
-    var inst = createStubInstance();
-    ReactDebugInstanceMap.registerInstance(inst);
-    expect(console.error.argsForCall.length).toBe(0);
-
-    ReactDebugInstanceMap.registerInstance(inst);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'There is an internal error in the React developer tools integration. ' +
-      'A registered instance should not be registered again. ' +
-      'Please report this as a bug in React.'
-    );
-
-    ReactDebugInstanceMap.unregisterInstance(inst);
-    ReactDebugInstanceMap.registerInstance(inst);
-    expect(console.error.argsForCall.length).toBe(1);
-  });
-
-  it('should warn when unregistering an instance twice', function() {
-    spyOn(console, 'error');
-    var inst = createStubInstance();
-
-    ReactDebugInstanceMap.unregisterInstance(inst);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'There is an internal error in the React developer tools integration. ' +
-      'An unregistered instance should not be unregistered again. ' +
-      'Please report this as a bug in React.'
-    );
-
-    ReactDebugInstanceMap.registerInstance(inst);
-    ReactDebugInstanceMap.unregisterInstance(inst);
-    expect(console.error.argsForCall.length).toBe(1);
-
-    ReactDebugInstanceMap.unregisterInstance(inst);
-    expect(console.error.argsForCall.length).toBe(2);
-    expect(console.error.argsForCall[1][0]).toContain(
-      'There is an internal error in the React developer tools integration. ' +
-      'An unregistered instance should not be unregistered again. ' +
-      'Please report this as a bug in React.'
-    );
-  });
-
-  it('should warn about anything than is not an internal instance', function() {
-    class Foo extends React.Component {
-      render() {
-        return <div />;
-      }
-    }
-
-    spyOn(console, 'error');
-    var warningCount = 0;
-    var div = document.createElement('div');
-    var publicInst = ReactDOM.render(<Foo />, div);
-
-    [false, null, undefined, {}, div, publicInst].forEach(falsyValue => {
-      ReactDebugInstanceMap.registerInstance(falsyValue);
-      warningCount++;
-      expect(ReactDebugInstanceMap.getIDForInstance(falsyValue)).toBe(null);
-      warningCount++;
-      expect(ReactDebugInstanceMap.isRegisteredInstance(falsyValue)).toBe(false);
-      warningCount++;
-      ReactDebugInstanceMap.unregisterInstance(falsyValue);
-      warningCount++;
-    });
-
-    expect(console.error.argsForCall.length).toBe(warningCount);
-    for (var i = 0; i < warningCount.length; i++) {
-      // Ideally we could check for the more detailed error message here
-      // but it depends on the input type and is meant for internal bugs
-      // anyway so I don't think it's worth complicating the test with it.
-      expect(console.error.argsForCall[i][0]).toContain(
-        'There is an internal error in the React developer tools integration.'
-      );
-    }
-  });
-});
diff --git a/src/isomorphic/children/ReactChildren.js b/src/isomorphic/children/ReactChildren.js
index da8848d22..645c361ff 100644
--- a/src/isomorphic/children/ReactChildren.js
+++ b/src/isomorphic/children/ReactChildren.js
@@ -22,3 +22,2 @@ var fourArgumentPooler = PooledClass.fourArgumentPooler;
 
-
 var userProvidedKeyEscapeRegex = /\/+/g;
@@ -28,3 +27,2 @@ function escapeUserProvidedKey(text) {
 
-
 /**
@@ -57,2 +55,4 @@ function forEachSingleChild(bookKeeping, child, name) {
  *
+ * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
+ *
  * The provided forEachFunc(child, index) will be called for each
@@ -68,4 +68,6 @@ function forEachChildren(children, forEachFunc, forEachContext) {
   }
-  var traverseContext =
-    ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
+  var traverseContext = ForEachBookKeeping.getPooled(
+    forEachFunc,
+    forEachContext,
+  );
   traverseAllChildren(children, forEachSingleChild, traverseContext);
@@ -74,3 +76,2 @@ function forEachChildren(children, forEachFunc, forEachContext) {
 
-
 /**
@@ -109,3 +110,3 @@ function mapSingleChildIntoContext(bookKeeping, child, childKey) {
       childKey,
-      emptyFunction.thatReturnsArgument
+      emptyFunction.thatReturnsArgument,
     );
@@ -118,8 +119,6 @@ function mapSingleChildIntoContext(bookKeeping, child, childKey) {
         keyPrefix +
-        (
-          (mappedChild.key && (!child || (child.key !== mappedChild.key))) ?
-          escapeUserProvidedKey(mappedChild.key) + '/' :
-          ''
-        ) +
-        childKey
+          (mappedChild.key && (!child || child.key !== mappedChild.key)
+            ? escapeUserProvidedKey(mappedChild.key) + '/'
+            : '') +
+          childKey,
       );
@@ -139,3 +138,3 @@ function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
     func,
-    context
+    context,
   );
@@ -148,2 +147,4 @@ function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  *
+ * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
+ *
  * The provided mapFunction(child, key, index) will be called for each
@@ -165,4 +166,2 @@ function mapChildren(children, func, context) {
 
-
-
 function forEachSingleChildDummy(traverseContext, child, name) {
@@ -175,2 +174,4 @@ function forEachSingleChildDummy(traverseContext, child, name) {
  *
+ * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
+ *
  * @param {?*} children Children tree container.
@@ -182,3 +183,2 @@ function countChildren(children, context) {
 
-
 /**
@@ -186,2 +186,4 @@ function countChildren(children, context) {
  * return an array with appropriately re-keyed children.
+ *
+ * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
  */
@@ -193,3 +195,3 @@ function toArray(children) {
     null,
-    emptyFunction.thatReturnsArgument
+    emptyFunction.thatReturnsArgument,
   );
@@ -198,3 +200,2 @@ function toArray(children) {
 
-
 var ReactChildren = {
diff --git a/src/isomorphic/children/__tests__/ReactChildren-test.js b/src/isomorphic/children/__tests__/ReactChildren-test.js
index e638c68c1..d6e6a8bfc 100644
--- a/src/isomorphic/children/__tests__/ReactChildren-test.js
+++ b/src/isomorphic/children/__tests__/ReactChildren-test.js
@@ -13,3 +13,3 @@
 
-describe('ReactChildren', function() {
+describe('ReactChildren', () => {
   var ReactChildren;
@@ -18,3 +18,3 @@ describe('ReactChildren', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     ReactChildren = require('ReactChildren');
@@ -24,4 +24,4 @@ describe('ReactChildren', function() {
 
-  it('should support identity for simple', function() {
-    var callback = jasmine.createSpy().andCallFake(function(kid, index) {
+  it('should support identity for simple', () => {
+    var callback = jasmine.createSpy().and.callFake(function(kid, index) {
       return kid;
@@ -37,3 +37,3 @@ describe('ReactChildren', function() {
     expect(callback).toHaveBeenCalledWith(simpleKid, 0);
-    callback.reset();
+    callback.calls.reset();
     var mappedChildren = ReactChildren.map(instance.props.children, callback);
@@ -43,4 +43,4 @@ describe('ReactChildren', function() {
 
-  it('should treat single arrayless child as being in array', function() {
-    var callback = jasmine.createSpy().andCallFake(function(kid, index) {
+  it('should treat single arrayless child as being in array', () => {
+    var callback = jasmine.createSpy().and.callFake(function(kid, index) {
       return kid;
@@ -52,3 +52,3 @@ describe('ReactChildren', function() {
     expect(callback).toHaveBeenCalledWith(simpleKid, 0);
-    callback.reset();
+    callback.calls.reset();
     var mappedChildren = ReactChildren.map(instance.props.children, callback);
@@ -58,4 +58,4 @@ describe('ReactChildren', function() {
 
-  it('should treat single child in array as expected', function() {
-    var callback = jasmine.createSpy().andCallFake(function(kid, index) {
+  it('should treat single child in array as expected', () => {
+    var callback = jasmine.createSpy().and.callFake(function(kid, index) {
       return kid;
@@ -67,3 +67,3 @@ describe('ReactChildren', function() {
     expect(callback).toHaveBeenCalledWith(simpleKid, 0);
-    callback.reset();
+    callback.calls.reset();
     var mappedChildren = ReactChildren.map(instance.props.children, callback);
@@ -71,6 +71,5 @@ describe('ReactChildren', function() {
     expect(mappedChildren[0]).toEqual(<span key=".$simple" />);
-
   });
 
-  it('should pass key to returned component', function() {
+  it('should pass key to returned component', () => {
     var mapFn = function(kid, index) {
@@ -90,3 +89,3 @@ describe('ReactChildren', function() {
 
-  it('should invoke callback with the right context', function() {
+  it('should invoke callback with the right context', () => {
     var lastContext;
@@ -105,4 +104,7 @@ describe('ReactChildren', function() {
 
-    var mappedChildren =
-      ReactChildren.map(instance.props.children, callback, scopeTester);
+    var mappedChildren = ReactChildren.map(
+      instance.props.children,
+      callback,
+      scopeTester,
+    );
 
@@ -112,3 +114,3 @@ describe('ReactChildren', function() {
 
-  it('should be called for each child', function() {
+  it('should be called for each child', () => {
     var zero = <div key="keyZero" />;
@@ -120,5 +122,5 @@ describe('ReactChildren', function() {
     var mapped = [
-      <div key="giraffe" />,  // Key should be joined to obj key
-      null,  // Key should be added even if we don't supply it!
-      <div />,  // Key should be added even if not supplied!
+      <div key="giraffe" />, // Key should be joined to obj key
+      null, // Key should be added even if we don't supply it!
+      <div />, // Key should be added even if not supplied!
       <span />, // Map from null to something.
@@ -126,3 +128,3 @@ describe('ReactChildren', function() {
     ];
-    var callback = jasmine.createSpy().andCallFake(function(kid, index) {
+    var callback = jasmine.createSpy().and.callFake(function(kid, index) {
       return mapped[index];
@@ -146,7 +148,6 @@ describe('ReactChildren', function() {
     expect(callback).toHaveBeenCalledWith(four, 4);
-    callback.reset();
+    callback.calls.reset();
 
-    var mappedChildren =
-      ReactChildren.map(instance.props.children, callback);
-    expect(callback.calls.length).toBe(5);
+    var mappedChildren = ReactChildren.map(instance.props.children, callback);
+    expect(callback.calls.count()).toBe(5);
     expect(ReactChildren.count(mappedChildren)).toBe(4);
@@ -158,5 +159,3 @@ describe('ReactChildren', function() {
       mappedChildren[3].key,
-    ]).toEqual(
-      ['giraffe/.$keyZero', '.$keyTwo', '.3', '.$keyFour']
-    );
+    ]).toEqual(['giraffe/.$keyZero', '.$keyTwo', '.3', '.$keyFour']);
 
@@ -174,3 +173,3 @@ describe('ReactChildren', function() {
 
-  it('should be called for each child in nested structure', function() {
+  it('should be called for each child in nested structure', () => {
     var zero = <div key="keyZero" />;
@@ -187,4 +186,4 @@ describe('ReactChildren', function() {
 
-    var zeroMapped = <div key="giraffe" />;  // Key should be overridden
-    var twoMapped = <div />;  // Key should be added even if not supplied!
+    var zeroMapped = <div key="giraffe" />; // Key should be overridden
+    var twoMapped = <div />; // Key should be added even if not supplied!
     var fourMapped = <div key="keyFour" />;
@@ -192,6 +191,6 @@ describe('ReactChildren', function() {
 
-    var callback = jasmine.createSpy().andCallFake(function(kid, index) {
-      return index === 0 ? zeroMapped :
-        index === 1 ? twoMapped :
-        index === 2 ? fourMapped : fiveMapped;
+    var callback = jasmine.createSpy().and.callFake(function(kid, index) {
+      return index === 0
+        ? zeroMapped
+        : index === 1 ? twoMapped : index === 2 ? fourMapped : fiveMapped;
     });
@@ -205,8 +204,3 @@ describe('ReactChildren', function() {
 
-    expect([
-      frag[0].key,
-      frag[1].key,
-      frag[2].key,
-      frag[3].key,
-    ]).toEqual([
+    expect([frag[0].key, frag[1].key, frag[2].key, frag[3].key]).toEqual([
       'firstHalfKey/.$keyZero',
@@ -218,3 +212,3 @@ describe('ReactChildren', function() {
     ReactChildren.forEach(instance.props.children, callback);
-    expect(callback.calls.length).toBe(4);
+    expect(callback.calls.count()).toBe(4);
     expect(callback).toHaveBeenCalledWith(frag[0], 0);
@@ -223,6 +217,6 @@ describe('ReactChildren', function() {
     expect(callback).toHaveBeenCalledWith(frag[3], 3);
-    callback.reset();
+    callback.calls.reset();
 
     var mappedChildren = ReactChildren.map(instance.props.children, callback);
-    expect(callback.calls.length).toBe(4);
+    expect(callback.calls.count()).toBe(4);
     expect(callback).toHaveBeenCalledWith(frag[0], 0);
@@ -246,5 +240,9 @@ describe('ReactChildren', function() {
 
-    expect(mappedChildren[0]).toEqual(<div key="giraffe/.0:$firstHalfKey/.$keyZero" />);
+    expect(mappedChildren[0]).toEqual(
+      <div key="giraffe/.0:$firstHalfKey/.$keyZero" />,
+    );
     expect(mappedChildren[1]).toEqual(<div key=".0:$firstHalfKey/.$keyTwo" />);
-    expect(mappedChildren[2]).toEqual(<div key="keyFour/.0:$secondHalfKey/.$keyFour" />);
+    expect(mappedChildren[2]).toEqual(
+      <div key="keyFour/.0:$secondHalfKey/.$keyFour" />,
+    );
     expect(mappedChildren[3]).toEqual(<div key=".0:$keyFive/.$keyFiveInner" />);
@@ -252,3 +250,3 @@ describe('ReactChildren', function() {
 
-  it('should retain key across two mappings', function() {
+  it('should retain key across two mappings', () => {
     var zeroForceKey = <div key="keyZero" />;
@@ -273,5 +271,7 @@ describe('ReactChildren', function() {
     var expectedForcedKeys = ['giraffe/.$keyZero', '.$keyOne'];
-    var mappedChildrenForcedKeys =
-      ReactChildren.map(forcedKeys.props.children, mapFn);
-    var mappedForcedKeys = mappedChildrenForcedKeys.map((c) => c.key);
+    var mappedChildrenForcedKeys = ReactChildren.map(
+      forcedKeys.props.children,
+      mapFn,
+    );
+    var mappedForcedKeys = mappedChildrenForcedKeys.map(c => c.key);
     expect(mappedForcedKeys).toEqual(expectedForcedKeys);
@@ -282,11 +282,12 @@ describe('ReactChildren', function() {
     ];
-    var remappedChildrenForcedKeys =
-      ReactChildren.map(mappedChildrenForcedKeys, mapFn);
-    expect(
-      remappedChildrenForcedKeys.map((c) => c.key)
-    ).toEqual(expectedRemappedForcedKeys);
-
+    var remappedChildrenForcedKeys = ReactChildren.map(
+      mappedChildrenForcedKeys,
+      mapFn,
+    );
+    expect(remappedChildrenForcedKeys.map(c => c.key)).toEqual(
+      expectedRemappedForcedKeys,
+    );
   });
 
-  it('should not throw if key provided is a dupe with array key', function() {
+  it('should not throw if key provided is a dupe with array key', () => {
     var zero = <div />;
@@ -310,3 +311,3 @@ describe('ReactChildren', function() {
 
-  it('should use the same key for a cloned element', function() {
+  it('should use the same key for a cloned element', () => {
     var instance = (
@@ -317,10 +318,6 @@ describe('ReactChildren', function() {
 
-    var mapped = ReactChildren.map(
-      instance.props.children,
-      element => element,
-    );
+    var mapped = ReactChildren.map(instance.props.children, element => element);
 
-    var mappedWithClone = ReactChildren.map(
-      instance.props.children,
-      element => React.cloneElement(element),
+    var mappedWithClone = ReactChildren.map(instance.props.children, element =>
+      React.cloneElement(element),
     );
@@ -330,3 +327,3 @@ describe('ReactChildren', function() {
 
-  it('should use the same key for a cloned element with key', function() {
+  it('should use the same key for a cloned element with key', () => {
     var instance = (
@@ -337,10 +334,6 @@ describe('ReactChildren', function() {
 
-    var mapped = ReactChildren.map(
-      instance.props.children,
-      element => element,
-    );
+    var mapped = ReactChildren.map(instance.props.children, element => element);
 
-    var mappedWithClone = ReactChildren.map(
-      instance.props.children,
-      element => React.cloneElement(element, {key: 'unique'}),
+    var mappedWithClone = ReactChildren.map(instance.props.children, element =>
+      React.cloneElement(element, {key: 'unique'}),
     );
@@ -350,3 +343,3 @@ describe('ReactChildren', function() {
 
-  it('should return 0 for null children', function() {
+  it('should return 0 for null children', () => {
     var numberOfChildren = ReactChildren.count(null);
@@ -355,3 +348,3 @@ describe('ReactChildren', function() {
 
-  it('should return 0 for undefined children', function() {
+  it('should return 0 for undefined children', () => {
     var numberOfChildren = ReactChildren.count(undefined);
@@ -360,3 +353,3 @@ describe('ReactChildren', function() {
 
-  it('should return 1 for single child', function() {
+  it('should return 1 for single child', () => {
     var simpleKid = <span key="simple" />;
@@ -367,3 +360,3 @@ describe('ReactChildren', function() {
 
-  it('should count the number of children in flat structure', function() {
+  it('should count the number of children in flat structure', () => {
     var zero = <div key="keyZero" />;
@@ -387,3 +380,3 @@ describe('ReactChildren', function() {
 
-  it('should count the number of children in nested structure', function() {
+  it('should count the number of children in nested structure', () => {
     var zero = <div key="keyZero" />;
@@ -401,4 +394,4 @@ describe('ReactChildren', function() {
     var instance = (
-      <div>{
-        [
+      <div>
+        {[
           ReactFragment.create({
@@ -409,4 +402,4 @@ describe('ReactChildren', function() {
           null,
-        ]
-      }</div>
+        ]}
+      </div>
     );
@@ -416,3 +409,3 @@ describe('ReactChildren', function() {
 
-  it('should flatten children to an array', function() {
+  it('should flatten children to an array', () => {
     expect(ReactChildren.toArray(undefined)).toEqual([]);
@@ -422,6 +415,4 @@ describe('ReactChildren', function() {
     expect(ReactChildren.toArray([<div />]).length).toBe(1);
-    expect(
-      ReactChildren.toArray(<div />)[0].key
-    ).toBe(
-      ReactChildren.toArray([<div />])[0].key
+    expect(ReactChildren.toArray(<div />)[0].key).toBe(
+      ReactChildren.toArray([<div />])[0].key,
     );
@@ -449,7 +440,7 @@ describe('ReactChildren', function() {
     // null/undefined/bool are all omitted
-    expect(ReactChildren.toArray([1, 'two', null, undefined, true])).toEqual(
-      [1, 'two']
-    );
+    expect(ReactChildren.toArray([1, 'two', null, undefined, true])).toEqual([
+      1,
+      'two',
+    ]);
   });
-
 });
diff --git a/src/isomorphic/children/__tests__/onlyChild-test.js b/src/isomorphic/children/__tests__/onlyChild-test.js
index 9be5a5975..0c8870c6d 100644
--- a/src/isomorphic/children/__tests__/onlyChild-test.js
+++ b/src/isomorphic/children/__tests__/onlyChild-test.js
@@ -13,4 +13,3 @@
 
-describe('onlyChild', function() {
-
+describe('onlyChild', () => {
   var React;
@@ -20,3 +19,3 @@ describe('onlyChild', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     React = require('React');
@@ -24,4 +23,4 @@ describe('onlyChild', function() {
     onlyChild = require('onlyChild');
-    WrapComponent = React.createClass({
-      render: function() {
+    WrapComponent = class extends React.Component {
+      render() {
         return (
@@ -31,9 +30,9 @@ describe('onlyChild', function() {
         );
-      },
-    });
+      }
+    };
   });
 
-  it('should fail when passed two children', function() {
+  it('should fail when passed two children', () => {
     expect(function() {
-      var instance =
+      var instance = (
         <WrapComponent>
@@ -41,3 +40,4 @@ describe('onlyChild', function() {
           <span />
-        </WrapComponent>;
+        </WrapComponent>
+      );
       onlyChild(instance.props.children);
@@ -46,8 +46,9 @@ describe('onlyChild', function() {
 
-  it('should fail when passed nully values', function() {
+  it('should fail when passed nully values', () => {
     expect(function() {
-      var instance =
+      var instance = (
         <WrapComponent>
           {null}
-        </WrapComponent>;
+        </WrapComponent>
+      );
       onlyChild(instance.props.children);
@@ -56,6 +57,7 @@ describe('onlyChild', function() {
     expect(function() {
-      var instance =
+      var instance = (
         <WrapComponent>
           {undefined}
-        </WrapComponent>;
+        </WrapComponent>
+      );
       onlyChild(instance.props.children);
@@ -64,8 +66,9 @@ describe('onlyChild', function() {
 
-  it('should fail when key/value objects', function() {
+  it('should fail when key/value objects', () => {
     expect(function() {
-      var instance =
+      var instance = (
         <WrapComponent>
           {ReactFragment.create({oneThing: <span />})}
-        </WrapComponent>;
+        </WrapComponent>
+      );
       onlyChild(instance.props.children);
@@ -74,9 +77,9 @@ describe('onlyChild', function() {
 
-
-  it('should not fail when passed interpolated single child', function() {
+  it('should not fail when passed interpolated single child', () => {
     expect(function() {
-      var instance =
+      var instance = (
         <WrapComponent>
           {<span />}
-        </WrapComponent>;
+        </WrapComponent>
+      );
       onlyChild(instance.props.children);
@@ -85,9 +88,9 @@ describe('onlyChild', function() {
 
-
-  it('should return the only child', function() {
+  it('should return the only child', () => {
     expect(function() {
-      var instance =
+      var instance = (
         <WrapComponent>
           <span />
-        </WrapComponent>;
+        </WrapComponent>
+      );
       onlyChild(instance.props.children);
@@ -95,3 +98,2 @@ describe('onlyChild', function() {
   });
-
 });
diff --git a/src/isomorphic/children/__tests__/sliceChildren-test.js b/src/isomorphic/children/__tests__/sliceChildren-test.js
index e6d448162..d255324a7 100644
--- a/src/isomorphic/children/__tests__/sliceChildren-test.js
+++ b/src/isomorphic/children/__tests__/sliceChildren-test.js
@@ -13,4 +13,3 @@
 
-describe('sliceChildren', function() {
-
+describe('sliceChildren', () => {
   var React;
@@ -19,3 +18,3 @@ describe('sliceChildren', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     React = require('React');
@@ -25,8 +24,4 @@ describe('sliceChildren', function() {
 
-  it('should render the whole set if start zero is supplied', function() {
-    var fullSet = [
-      <div key="A" />,
-      <div key="B" />,
-      <div key="C" />,
-    ];
+  it('should render the whole set if start zero is supplied', () => {
+    var fullSet = [<div key="A" />, <div key="B" />, <div key="C" />];
     var children = sliceChildren(fullSet, 0);
@@ -39,16 +34,9 @@ describe('sliceChildren', function() {
 
-  it('should render the remaining set if no end index is supplied', function() {
-    var fullSet = [
-      <div key="A" />,
-      <div key="B" />,
-      <div key="C" />,
-    ];
+  it('should render the remaining set if no end index is supplied', () => {
+    var fullSet = [<div key="A" />, <div key="B" />, <div key="C" />];
     var children = sliceChildren(fullSet, 1);
-    expect(children).toEqual([
-      <div key=".$B" />,
-      <div key=".$C" />,
-    ]);
+    expect(children).toEqual([<div key=".$B" />, <div key=".$C" />]);
   });
 
-  it('should exclude everything at or after the end index', function() {
+  it('should exclude everything at or after the end index', () => {
     var fullSet = [
@@ -60,8 +48,6 @@ describe('sliceChildren', function() {
     var children = sliceChildren(fullSet, 1, 2);
-    expect(children).toEqual([
-      <div key=".$B" />,
-    ]);
+    expect(children).toEqual([<div key=".$B" />]);
   });
 
-  it('should allow static children to be sliced', function() {
+  it('should allow static children to be sliced', () => {
     var a = <a />;
@@ -72,14 +58,9 @@ describe('sliceChildren', function() {
     var children = sliceChildren(el.props.children, 1, 2);
-    expect(children).toEqual([
-      <b key=".1" />,
-    ]);
+    expect(children).toEqual([<b key=".1" />]);
   });
 
-  it('should slice nested children', function() {
+  it('should slice nested children', () => {
     var fullSet = [
       <div key="A" />,
-      [
-        <div key="B" />,
-        <div key="C" />,
-      ],
+      [<div key="B" />, <div key="C" />],
       <div key="D" />,
@@ -87,7 +68,4 @@ describe('sliceChildren', function() {
     var children = sliceChildren(fullSet, 1, 2);
-    expect(children).toEqual([
-      <div key=".1:$B" />,
-    ]);
+    expect(children).toEqual([<div key=".1:$B" />]);
   });
-
 });
diff --git a/src/isomorphic/children/onlyChild.js b/src/isomorphic/children/onlyChild.js
index 0a33ee180..8801fd6dc 100644
--- a/src/isomorphic/children/onlyChild.js
+++ b/src/isomorphic/children/onlyChild.js
@@ -18,9 +18,12 @@ var invariant = require('invariant');
  * Returns the first child in a collection of children and verifies that there
- * is only one child in the collection. The current implementation of this
- * function assumes that a single child gets passed without a wrapper, but the
- * purpose of this helper function is to abstract away the particular structure
- * of children.
+ * is only one child in the collection.
+ *
+ * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
+ *
+ * The current implementation of this function assumes that a single child gets
+ * passed without a wrapper, but the purpose of this helper function is to
+ * abstract away the particular structure of children.
  *
  * @param {?object} children Child collection structure.
- * @return {ReactComponent} The first and only `ReactComponent` contained in the
+ * @return {ReactElement} The first and only `ReactElement` contained in the
  * structure.
@@ -30,3 +33,3 @@ function onlyChild(children) {
     ReactElement.isValidElement(children),
-    'onlyChild must be passed a children with exactly one child.'
+    'React.Children.only expected to receive a single React element child.',
   );
diff --git a/src/isomorphic/classic/__tests__/ReactContextValidator-test.js b/src/isomorphic/classic/__tests__/ReactContextValidator-test.js
index cc09080f0..29a9ac891 100644
--- a/src/isomorphic/classic/__tests__/ReactContextValidator-test.js
+++ b/src/isomorphic/classic/__tests__/ReactContextValidator-test.js
@@ -19,2 +19,3 @@
 
+var PropTypes;
 var React;
@@ -25,4 +26,8 @@ var reactComponentExpect;
 
-describe('ReactContextValidator', function() {
-  beforeEach(function() {
+describe('ReactContextValidator', () => {
+  function normalizeCodeLocInfo(str) {
+    return str.replace(/\(at .+?:\d+\)/g, '(at **)');
+  }
+
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -32,2 +37,3 @@ describe('ReactContextValidator', function() {
     ReactTestUtils = require('ReactTestUtils');
+    PropTypes = require('prop-types');
     reactComponentExpect = require('reactComponentExpect');
@@ -38,20 +44,14 @@ describe('ReactContextValidator', function() {
 
-  it('should filter out context not in contextTypes', function() {
-    var Component = React.createClass({
-      contextTypes: {
-        foo: React.PropTypes.string,
-      },
-
-      render: function() {
+  it('should filter out context not in contextTypes', () => {
+    class Component extends React.Component {
+      render() {
         return <div />;
-      },
-    });
-
-    var ComponentInFooBarContext = React.createClass({
-      childContextTypes: {
-        foo: React.PropTypes.string,
-        bar: React.PropTypes.number,
-      },
-
-      getChildContext: function() {
+      }
+    }
+    Component.contextTypes = {
+      foo: PropTypes.string,
+    };
+
+    class ComponentInFooBarContext extends React.Component {
+      getChildContext() {
         return {
@@ -60,14 +60,22 @@ describe('ReactContextValidator', function() {
         };
-      },
+      }
 
-      render: function() {
+      render() {
         return <Component />;
-      },
-    });
-
-    var instance = ReactTestUtils.renderIntoDocument(<ComponentInFooBarContext />);
-    reactComponentExpect(instance).expectRenderedChild().scalarContextEqual({foo: 'abc'});
+      }
+    }
+    ComponentInFooBarContext.childContextTypes = {
+      foo: PropTypes.string,
+      bar: PropTypes.number,
+    };
+
+    var instance = ReactTestUtils.renderIntoDocument(
+      <ComponentInFooBarContext />,
+    );
+    reactComponentExpect(instance)
+      .expectRenderedChild()
+      .scalarContextEqual({foo: 'abc'});
   });
 
-  it('should filter context properly in callbacks', function() {
+  it('should filter context properly in callbacks', () => {
     var actualComponentWillReceiveProps;
@@ -77,9 +85,4 @@ describe('ReactContextValidator', function() {
 
-    var Parent = React.createClass({
-      childContextTypes: {
-        foo: React.PropTypes.string.isRequired,
-        bar: React.PropTypes.string.isRequired,
-      },
-
-      getChildContext: function() {
+    class Parent extends React.Component {
+      getChildContext() {
         return {
@@ -88,36 +91,39 @@ describe('ReactContextValidator', function() {
         };
-      },
+      }
 
-      render: function() {
+      render() {
         return <Component />;
-      },
-    });
-
-    var Component = React.createClass({
-      contextTypes: {
-        foo: React.PropTypes.string,
-      },
-
-      componentWillReceiveProps: function(nextProps, nextContext) {
+      }
+    }
+    Parent.childContextTypes = {
+      foo: PropTypes.string.isRequired,
+      bar: PropTypes.string.isRequired,
+    };
+
+    class Component extends React.Component {
+      componentWillReceiveProps(nextProps, nextContext) {
         actualComponentWillReceiveProps = nextContext;
         return true;
-      },
+      }
 
-      shouldComponentUpdate: function(nextProps, nextState, nextContext) {
+      shouldComponentUpdate(nextProps, nextState, nextContext) {
         actualShouldComponentUpdate = nextContext;
         return true;
-      },
+      }
 
-      componentWillUpdate: function(nextProps, nextState, nextContext) {
+      componentWillUpdate(nextProps, nextState, nextContext) {
         actualComponentWillUpdate = nextContext;
-      },
+      }
 
-      componentDidUpdate: function(prevProps, prevState, prevContext) {
+      componentDidUpdate(prevProps, prevState, prevContext) {
         actualComponentDidUpdate = prevContext;
-      },
+      }
 
-      render: function() {
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
+    Component.contextTypes = {
+      foo: PropTypes.string,
+    };
 
@@ -132,14 +138,13 @@ describe('ReactContextValidator', function() {
 
-  it('should check context types', function() {
+  it('should check context types', () => {
     spyOn(console, 'error');
 
-    var Component = React.createClass({
-      contextTypes: {
-        foo: React.PropTypes.string.isRequired,
-      },
-
-      render: function() {
+    class Component extends React.Component {
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
+    Component.contextTypes = {
+      foo: PropTypes.string.isRequired,
+    };
 
@@ -147,14 +152,12 @@ describe('ReactContextValidator', function() {
 
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: Failed Context Types: ' +
-      'Required context `foo` was not specified in `Component`.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
+      'Warning: Failed context type: ' +
+        'The context `foo` is marked as required in `Component`, but its value ' +
+        'is `undefined`.\n' +
+        '    in Component (at **)',
     );
 
-    var ComponentInFooStringContext = React.createClass({
-      childContextTypes: {
-        foo: React.PropTypes.string,
-      },
-
-      getChildContext: function() {
+    class ComponentInFooStringContext extends React.Component {
+      getChildContext() {
         return {
@@ -162,11 +165,14 @@ describe('ReactContextValidator', function() {
         };
-      },
+      }
 
-      render: function() {
+      render() {
         return <Component />;
-      },
-    });
+      }
+    }
+    ComponentInFooStringContext.childContextTypes = {
+      foo: PropTypes.string,
+    };
 
     ReactTestUtils.renderIntoDocument(
-      <ComponentInFooStringContext fooValue={'bar'} />
+      <ComponentInFooStringContext fooValue={'bar'} />,
     );
@@ -174,10 +180,6 @@ describe('ReactContextValidator', function() {
     // Previous call should not error
-    expect(console.error.argsForCall.length).toBe(1);
-
-    var ComponentInFooNumberContext = React.createClass({
-      childContextTypes: {
-        foo: React.PropTypes.number,
-      },
+    expect(console.error.calls.count()).toBe(1);
 
-      getChildContext: function() {
+    class ComponentInFooNumberContext extends React.Component {
+      getChildContext() {
         return {
@@ -185,17 +187,23 @@ describe('ReactContextValidator', function() {
         };
-      },
+      }
 
-      render: function() {
+      render() {
         return <Component />;
-      },
-    });
+      }
+    }
+    ComponentInFooNumberContext.childContextTypes = {
+      foo: PropTypes.number,
+    };
 
-    ReactTestUtils.renderIntoDocument(<ComponentInFooNumberContext fooValue={123} />);
+    ReactTestUtils.renderIntoDocument(
+      <ComponentInFooNumberContext fooValue={123} />,
+    );
 
-    expect(console.error.argsForCall.length).toBe(2);
-    expect(console.error.argsForCall[1][0]).toBe(
-      'Warning: Failed Context Types: ' +
-      'Invalid context `foo` of type `number` supplied ' +
-      'to `Component`, expected `string`.' +
-      ' Check the render method of `ComponentInFooNumberContext`.'
+    expect(console.error.calls.count()).toBe(2);
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(1)[0])).toBe(
+      'Warning: Failed context type: ' +
+        'Invalid context `foo` of type `number` supplied ' +
+        'to `Component`, expected `string`.\n' +
+        '    in Component (at **)\n' +
+        '    in ComponentInFooNumberContext (at **)',
     );
@@ -203,25 +211,26 @@ describe('ReactContextValidator', function() {
 
-  it('should check child context types', function() {
+  it('should check child context types', () => {
     spyOn(console, 'error');
 
-    var Component = React.createClass({
-      childContextTypes: {
-        foo: React.PropTypes.string.isRequired,
-        bar: React.PropTypes.number,
-      },
-
-      getChildContext: function() {
+    class Component extends React.Component {
+      getChildContext() {
         return this.props.testContext;
-      },
+      }
 
-      render: function() {
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
+    Component.childContextTypes = {
+      foo: PropTypes.string.isRequired,
+      bar: PropTypes.number,
+    };
 
     ReactTestUtils.renderIntoDocument(<Component testContext={{bar: 123}} />);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: Failed Context Types: ' +
-      'Required child context `foo` was not specified in `Component`.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
+      'Warning: Failed child context type: ' +
+        'The child context `foo` is marked as required in `Component`, but its ' +
+        'value is `undefined`.\n' +
+        '    in Component (at **)',
     );
@@ -230,7 +239,8 @@ describe('ReactContextValidator', function() {
 
-    expect(console.error.argsForCall.length).toBe(2);
-    expect(console.error.argsForCall[1][0]).toBe(
-      'Warning: Failed Context Types: ' +
-      'Invalid child context `foo` of type `number` ' +
-      'supplied to `Component`, expected `string`.'
+    expect(console.error.calls.count()).toBe(2);
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(1)[0])).toBe(
+      'Warning: Failed child context type: ' +
+        'Invalid child context `foo` of type `number` ' +
+        'supplied to `Component`, expected `string`.\n' +
+        '    in Component (at **)',
     );
@@ -238,13 +248,10 @@ describe('ReactContextValidator', function() {
     ReactTestUtils.renderIntoDocument(
-      <Component testContext={{foo: 'foo', bar: 123}} />
+      <Component testContext={{foo: 'foo', bar: 123}} />,
     );
 
-    ReactTestUtils.renderIntoDocument(
-      <Component testContext={{foo: 'foo'}} />
-    );
+    ReactTestUtils.renderIntoDocument(<Component testContext={{foo: 'foo'}} />);
 
     // Previous calls should not log errors
-    expect(console.error.argsForCall.length).toBe(2);
+    expect(console.error.calls.count()).toBe(2);
   });
-
 });
diff --git a/src/isomorphic/classic/class/ReactClass.js b/src/isomorphic/classic/class/ReactClass.js
deleted file mode 100644
index 56f479a42..000000000
--- a/src/isomorphic/classic/class/ReactClass.js
+++ /dev/null
@@ -1,862 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @providesModule ReactClass
- */
-
-'use strict';
-
-var ReactComponent = require('ReactComponent');
-var ReactElement = require('ReactElement');
-var ReactPropTypeLocations = require('ReactPropTypeLocations');
-var ReactPropTypeLocationNames = require('ReactPropTypeLocationNames');
-var ReactNoopUpdateQueue = require('ReactNoopUpdateQueue');
-
-var emptyObject = require('emptyObject');
-var invariant = require('invariant');
-var keyMirror = require('keyMirror');
-var keyOf = require('keyOf');
-var warning = require('warning');
-
-var MIXINS_KEY = keyOf({mixins: null});
-
-/**
- * Policies that describe methods in `ReactClassInterface`.
- */
-var SpecPolicy = keyMirror({
-  /**
-   * These methods may be defined only once by the class specification or mixin.
-   */
-  DEFINE_ONCE: null,
-  /**
-   * These methods may be defined by both the class specification and mixins.
-   * Subsequent definitions will be chained. These methods must return void.
-   */
-  DEFINE_MANY: null,
-  /**
-   * These methods are overriding the base class.
-   */
-  OVERRIDE_BASE: null,
-  /**
-   * These methods are similar to DEFINE_MANY, except we assume they return
-   * objects. We try to merge the keys of the return values of all the mixed in
-   * functions. If there is a key conflict we throw.
-   */
-  DEFINE_MANY_MERGED: null,
-});
-
-
-var injectedMixins = [];
-
-/**
- * Composite components are higher-level components that compose other composite
- * or native components.
- *
- * To create a new type of `ReactClass`, pass a specification of
- * your new class to `React.createClass`. The only requirement of your class
- * specification is that you implement a `render` method.
- *
- *   var MyComponent = React.createClass({
- *     render: function() {
- *       return <div>Hello World</div>;
- *     }
- *   });
- *
- * The class specification supports a specific protocol of methods that have
- * special meaning (e.g. `render`). See `ReactClassInterface` for
- * more the comprehensive protocol. Any other properties and methods in the
- * class specification will be available on the prototype.
- *
- * @interface ReactClassInterface
- * @internal
- */
-var ReactClassInterface = {
-
-  /**
-   * An array of Mixin objects to include when defining your component.
-   *
-   * @type {array}
-   * @optional
-   */
-  mixins: SpecPolicy.DEFINE_MANY,
-
-  /**
-   * An object containing properties and methods that should be defined on
-   * the component's constructor instead of its prototype (static methods).
-   *
-   * @type {object}
-   * @optional
-   */
-  statics: SpecPolicy.DEFINE_MANY,
-
-  /**
-   * Definition of prop types for this component.
-   *
-   * @type {object}
-   * @optional
-   */
-  propTypes: SpecPolicy.DEFINE_MANY,
-
-  /**
-   * Definition of context types for this component.
-   *
-   * @type {object}
-   * @optional
-   */
-  contextTypes: SpecPolicy.DEFINE_MANY,
-
-  /**
-   * Definition of context types this component sets for its children.
-   *
-   * @type {object}
-   * @optional
-   */
-  childContextTypes: SpecPolicy.DEFINE_MANY,
-
-  // ==== Definition methods ====
-
-  /**
-   * Invoked when the component is mounted. Values in the mapping will be set on
-   * `this.props` if that prop is not specified (i.e. using an `in` check).
-   *
-   * This method is invoked before `getInitialState` and therefore cannot rely
-   * on `this.state` or use `this.setState`.
-   *
-   * @return {object}
-   * @optional
-   */
-  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,
-
-  /**
-   * Invoked once before the component is mounted. The return value will be used
-   * as the initial value of `this.state`.
-   *
-   *   getInitialState: function() {
-   *     return {
-   *       isOn: false,
-   *       fooBaz: new BazFoo()
-   *     }
-   *   }
-   *
-   * @return {object}
-   * @optional
-   */
-  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,
-
-  /**
-   * @return {object}
-   * @optional
-   */
-  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,
-
-  /**
-   * Uses props from `this.props` and state from `this.state` to render the
-   * structure of the component.
-   *
-   * No guarantees are made about when or how often this method is invoked, so
-   * it must not have side effects.
-   *
-   *   render: function() {
-   *     var name = this.props.name;
-   *     return <div>Hello, {name}!</div>;
-   *   }
-   *
-   * @return {ReactComponent}
-   * @nosideeffects
-   * @required
-   */
-  render: SpecPolicy.DEFINE_ONCE,
-
-
-
-  // ==== Delegate methods ====
-
-  /**
-   * Invoked when the component is initially created and about to be mounted.
-   * This may have side effects, but any external subscriptions or data created
-   * by this method must be cleaned up in `componentWillUnmount`.
-   *
-   * @optional
-   */
-  componentWillMount: SpecPolicy.DEFINE_MANY,
-
-  /**
-   * Invoked when the component has been mounted and has a DOM representation.
-   * However, there is no guarantee that the DOM node is in the document.
-   *
-   * Use this as an opportunity to operate on the DOM when the component has
-   * been mounted (initialized and rendered) for the first time.
-   *
-   * @param {DOMElement} rootNode DOM element representing the component.
-   * @optional
-   */
-  componentDidMount: SpecPolicy.DEFINE_MANY,
-
-  /**
-   * Invoked before the component receives new props.
-   *
-   * Use this as an opportunity to react to a prop transition by updating the
-   * state using `this.setState`. Current props are accessed via `this.props`.
-   *
-   *   componentWillReceiveProps: function(nextProps, nextContext) {
-   *     this.setState({
-   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
-   *     });
-   *   }
-   *
-   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
-   * transition may cause a state change, but the opposite is not true. If you
-   * need it, you are probably looking for `componentWillUpdate`.
-   *
-   * @param {object} nextProps
-   * @optional
-   */
-  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,
-
-  /**
-   * Invoked while deciding if the component should be updated as a result of
-   * receiving new props, state and/or context.
-   *
-   * Use this as an opportunity to `return false` when you're certain that the
-   * transition to the new props/state/context will not require a component
-   * update.
-   *
-   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
-   *     return !equal(nextProps, this.props) ||
-   *       !equal(nextState, this.state) ||
-   *       !equal(nextContext, this.context);
-   *   }
-   *
-   * @param {object} nextProps
-   * @param {?object} nextState
-   * @param {?object} nextContext
-   * @return {boolean} True if the component should update.
-   * @optional
-   */
-  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,
-
-  /**
-   * Invoked when the component is about to update due to a transition from
-   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
-   * and `nextContext`.
-   *
-   * Use this as an opportunity to perform preparation before an update occurs.
-   *
-   * NOTE: You **cannot** use `this.setState()` in this method.
-   *
-   * @param {object} nextProps
-   * @param {?object} nextState
-   * @param {?object} nextContext
-   * @param {ReactReconcileTransaction} transaction
-   * @optional
-   */
-  componentWillUpdate: SpecPolicy.DEFINE_MANY,
-
-  /**
-   * Invoked when the component's DOM representation has been updated.
-   *
-   * Use this as an opportunity to operate on the DOM when the component has
-   * been updated.
-   *
-   * @param {object} prevProps
-   * @param {?object} prevState
-   * @param {?object} prevContext
-   * @param {DOMElement} rootNode DOM element representing the component.
-   * @optional
-   */
-  componentDidUpdate: SpecPolicy.DEFINE_MANY,
-
-  /**
-   * Invoked when the component is about to be removed from its parent and have
-   * its DOM representation destroyed.
-   *
-   * Use this as an opportunity to deallocate any external resources.
-   *
-   * NOTE: There is no `componentDidUnmount` since your component will have been
-   * destroyed by that point.
-   *
-   * @optional
-   */
-  componentWillUnmount: SpecPolicy.DEFINE_MANY,
-
-
-
-  // ==== Advanced methods ====
-
-  /**
-   * Updates the component's currently mounted DOM representation.
-   *
-   * By default, this implements React's rendering and reconciliation algorithm.
-   * Sophisticated clients may wish to override this.
-   *
-   * @param {ReactReconcileTransaction} transaction
-   * @internal
-   * @overridable
-   */
-  updateComponent: SpecPolicy.OVERRIDE_BASE,
-
-};
-
-/**
- * Mapping from class specification keys to special processing functions.
- *
- * Although these are declared like instance properties in the specification
- * when defining classes using `React.createClass`, they are actually static
- * and are accessible on the constructor instead of the prototype. Despite
- * being static, they must be defined outside of the "statics" key under
- * which all other static methods are defined.
- */
-var RESERVED_SPEC_KEYS = {
-  displayName: function(Constructor, displayName) {
-    Constructor.displayName = displayName;
-  },
-  mixins: function(Constructor, mixins) {
-    if (mixins) {
-      for (var i = 0; i < mixins.length; i++) {
-        mixSpecIntoComponent(Constructor, mixins[i]);
-      }
-    }
-  },
-  childContextTypes: function(Constructor, childContextTypes) {
-    if (__DEV__) {
-      validateTypeDef(
-        Constructor,
-        childContextTypes,
-        ReactPropTypeLocations.childContext
-      );
-    }
-    Constructor.childContextTypes = Object.assign(
-      {},
-      Constructor.childContextTypes,
-      childContextTypes
-    );
-  },
-  contextTypes: function(Constructor, contextTypes) {
-    if (__DEV__) {
-      validateTypeDef(
-        Constructor,
-        contextTypes,
-        ReactPropTypeLocations.context
-      );
-    }
-    Constructor.contextTypes = Object.assign(
-      {},
-      Constructor.contextTypes,
-      contextTypes
-    );
-  },
-  /**
-   * Special case getDefaultProps which should move into statics but requires
-   * automatic merging.
-   */
-  getDefaultProps: function(Constructor, getDefaultProps) {
-    if (Constructor.getDefaultProps) {
-      Constructor.getDefaultProps = createMergedResultFunction(
-        Constructor.getDefaultProps,
-        getDefaultProps
-      );
-    } else {
-      Constructor.getDefaultProps = getDefaultProps;
-    }
-  },
-  propTypes: function(Constructor, propTypes) {
-    if (__DEV__) {
-      validateTypeDef(
-        Constructor,
-        propTypes,
-        ReactPropTypeLocations.prop
-      );
-    }
-    Constructor.propTypes = Object.assign(
-      {},
-      Constructor.propTypes,
-      propTypes
-    );
-  },
-  statics: function(Constructor, statics) {
-    mixStaticSpecIntoComponent(Constructor, statics);
-  },
-  autobind: function() {}, // noop
-};
-
-function validateTypeDef(Constructor, typeDef, location) {
-  for (var propName in typeDef) {
-    if (typeDef.hasOwnProperty(propName)) {
-      // use a warning instead of an invariant so components
-      // don't show up in prod but only in __DEV__
-      warning(
-        typeof typeDef[propName] === 'function',
-        '%s: %s type `%s` is invalid; it must be a function, usually from ' +
-        'React.PropTypes.',
-        Constructor.displayName || 'ReactClass',
-        ReactPropTypeLocationNames[location],
-        propName
-      );
-    }
-  }
-}
-
-function validateMethodOverride(isAlreadyDefined, name) {
-  var specPolicy = ReactClassInterface.hasOwnProperty(name) ?
-    ReactClassInterface[name] :
-    null;
-
-  // Disallow overriding of base class methods unless explicitly allowed.
-  if (ReactClassMixin.hasOwnProperty(name)) {
-    invariant(
-      specPolicy === SpecPolicy.OVERRIDE_BASE,
-      'ReactClassInterface: You are attempting to override ' +
-      '`%s` from your class specification. Ensure that your method names ' +
-      'do not overlap with React methods.',
-      name
-    );
-  }
-
-  // Disallow defining methods more than once unless explicitly allowed.
-  if (isAlreadyDefined) {
-    invariant(
-      specPolicy === SpecPolicy.DEFINE_MANY ||
-      specPolicy === SpecPolicy.DEFINE_MANY_MERGED,
-      'ReactClassInterface: You are attempting to define ' +
-      '`%s` on your component more than once. This conflict may be due ' +
-      'to a mixin.',
-      name
-    );
-  }
-}
-
-/**
- * Mixin helper which handles policy validation and reserved
- * specification keys when building React classes.
- */
-function mixSpecIntoComponent(Constructor, spec) {
-  if (!spec) {
-    return;
-  }
-
-  invariant(
-    typeof spec !== 'function',
-    'ReactClass: You\'re attempting to ' +
-    'use a component class or function as a mixin. Instead, just use a ' +
-    'regular object.'
-  );
-  invariant(
-    !ReactElement.isValidElement(spec),
-    'ReactClass: You\'re attempting to ' +
-    'use a component as a mixin. Instead, just use a regular object.'
-  );
-
-  var proto = Constructor.prototype;
-  var autoBindPairs = proto.__reactAutoBindPairs;
-
-  // By handling mixins before any other properties, we ensure the same
-  // chaining order is applied to methods with DEFINE_MANY policy, whether
-  // mixins are listed before or after these methods in the spec.
-  if (spec.hasOwnProperty(MIXINS_KEY)) {
-    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
-  }
-
-  for (var name in spec) {
-    if (!spec.hasOwnProperty(name)) {
-      continue;
-    }
-
-    if (name === MIXINS_KEY) {
-      // We have already handled mixins in a special case above.
-      continue;
-    }
-
-    var property = spec[name];
-    var isAlreadyDefined = proto.hasOwnProperty(name);
-    validateMethodOverride(isAlreadyDefined, name);
-
-    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
-      RESERVED_SPEC_KEYS[name](Constructor, property);
-    } else {
-      // Setup methods on prototype:
-      // The following member methods should not be automatically bound:
-      // 1. Expected ReactClass methods (in the "interface").
-      // 2. Overridden methods (that were mixed in).
-      var isReactClassMethod =
-        ReactClassInterface.hasOwnProperty(name);
-      var isFunction = typeof property === 'function';
-      var shouldAutoBind =
-        isFunction &&
-        !isReactClassMethod &&
-        !isAlreadyDefined &&
-        spec.autobind !== false;
-
-      if (shouldAutoBind) {
-        autoBindPairs.push(name, property);
-        proto[name] = property;
-      } else {
-        if (isAlreadyDefined) {
-          var specPolicy = ReactClassInterface[name];
-
-          // These cases should already be caught by validateMethodOverride.
-          invariant(
-            isReactClassMethod && (
-              specPolicy === SpecPolicy.DEFINE_MANY_MERGED ||
-              specPolicy === SpecPolicy.DEFINE_MANY
-            ),
-            'ReactClass: Unexpected spec policy %s for key %s ' +
-            'when mixing in component specs.',
-            specPolicy,
-            name
-          );
-
-          // For methods which are defined more than once, call the existing
-          // methods before calling the new property, merging if appropriate.
-          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
-            proto[name] = createMergedResultFunction(proto[name], property);
-          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
-            proto[name] = createChainedFunction(proto[name], property);
-          }
-        } else {
-          proto[name] = property;
-          if (__DEV__) {
-            // Add verbose displayName to the function, which helps when looking
-            // at profiling tools.
-            if (typeof property === 'function' && spec.displayName) {
-              proto[name].displayName = spec.displayName + '_' + name;
-            }
-          }
-        }
-      }
-    }
-  }
-}
-
-function mixStaticSpecIntoComponent(Constructor, statics) {
-  if (!statics) {
-    return;
-  }
-  for (var name in statics) {
-    var property = statics[name];
-    if (!statics.hasOwnProperty(name)) {
-      continue;
-    }
-
-    var isReserved = name in RESERVED_SPEC_KEYS;
-    invariant(
-      !isReserved,
-      'ReactClass: You are attempting to define a reserved ' +
-      'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' +
-      'as an instance property instead; it will still be accessible on the ' +
-      'constructor.',
-      name
-    );
-
-    var isInherited = name in Constructor;
-    invariant(
-      !isInherited,
-      'ReactClass: You are attempting to define ' +
-      '`%s` on your component more than once. This conflict may be ' +
-      'due to a mixin.',
-      name
-    );
-    Constructor[name] = property;
-  }
-}
-
-/**
- * Merge two objects, but throw if both contain the same key.
- *
- * @param {object} one The first object, which is mutated.
- * @param {object} two The second object
- * @return {object} one after it has been mutated to contain everything in two.
- */
-function mergeIntoWithNoDuplicateKeys(one, two) {
-  invariant(
-    one && two && typeof one === 'object' && typeof two === 'object',
-    'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.'
-  );
-
-  for (var key in two) {
-    if (two.hasOwnProperty(key)) {
-      invariant(
-        one[key] === undefined,
-        'mergeIntoWithNoDuplicateKeys(): ' +
-        'Tried to merge two objects with the same key: `%s`. This conflict ' +
-        'may be due to a mixin; in particular, this may be caused by two ' +
-        'getInitialState() or getDefaultProps() methods returning objects ' +
-        'with clashing keys.',
-        key
-      );
-      one[key] = two[key];
-    }
-  }
-  return one;
-}
-
-/**
- * Creates a function that invokes two functions and merges their return values.
- *
- * @param {function} one Function to invoke first.
- * @param {function} two Function to invoke second.
- * @return {function} Function that invokes the two argument functions.
- * @private
- */
-function createMergedResultFunction(one, two) {
-  return function mergedResult() {
-    var a = one.apply(this, arguments);
-    var b = two.apply(this, arguments);
-    if (a == null) {
-      return b;
-    } else if (b == null) {
-      return a;
-    }
-    var c = {};
-    mergeIntoWithNoDuplicateKeys(c, a);
-    mergeIntoWithNoDuplicateKeys(c, b);
-    return c;
-  };
-}
-
-/**
- * Creates a function that invokes two functions and ignores their return vales.
- *
- * @param {function} one Function to invoke first.
- * @param {function} two Function to invoke second.
- * @return {function} Function that invokes the two argument functions.
- * @private
- */
-function createChainedFunction(one, two) {
-  return function chainedFunction() {
-    one.apply(this, arguments);
-    two.apply(this, arguments);
-  };
-}
-
-/**
- * Binds a method to the component.
- *
- * @param {object} component Component whose method is going to be bound.
- * @param {function} method Method to be bound.
- * @return {function} The bound method.
- */
-function bindAutoBindMethod(component, method) {
-  var boundMethod = method.bind(component);
-  if (__DEV__) {
-    boundMethod.__reactBoundContext = component;
-    boundMethod.__reactBoundMethod = method;
-    boundMethod.__reactBoundArguments = null;
-    var componentName = component.constructor.displayName;
-    var _bind = boundMethod.bind;
-    boundMethod.bind = function(newThis, ...args) {
-      // User is trying to bind() an autobound method; we effectively will
-      // ignore the value of "this" that the user is trying to use, so
-      // let's warn.
-      if (newThis !== component && newThis !== null) {
-        warning(
-          false,
-          'bind(): React component methods may only be bound to the ' +
-          'component instance. See %s',
-          componentName
-        );
-      } else if (!args.length) {
-        warning(
-          false,
-          'bind(): You are binding a component method to the component. ' +
-          'React does this for you automatically in a high-performance ' +
-          'way, so you can safely remove this call. See %s',
-          componentName
-        );
-        return boundMethod;
-      }
-      var reboundMethod = _bind.apply(boundMethod, arguments);
-      reboundMethod.__reactBoundContext = component;
-      reboundMethod.__reactBoundMethod = method;
-      reboundMethod.__reactBoundArguments = args;
-      return reboundMethod;
-    };
-  }
-  return boundMethod;
-}
-
-/**
- * Binds all auto-bound methods in a component.
- *
- * @param {object} component Component whose method is going to be bound.
- */
-function bindAutoBindMethods(component) {
-  var pairs = component.__reactAutoBindPairs;
-  for (var i = 0; i < pairs.length; i += 2) {
-    var autoBindKey = pairs[i];
-    var method = pairs[i + 1];
-    component[autoBindKey] = bindAutoBindMethod(
-      component,
-      method
-    );
-  }
-}
-
-/**
- * Add more to the ReactClass base class. These are all legacy features and
- * therefore not already part of the modern ReactComponent.
- */
-var ReactClassMixin = {
-
-  /**
-   * TODO: This will be deprecated because state should always keep a consistent
-   * type signature and the only use case for this, is to avoid that.
-   */
-  replaceState: function(newState, callback) {
-    this.updater.enqueueReplaceState(this, newState);
-    if (callback) {
-      this.updater.enqueueCallback(this, callback, 'replaceState');
-    }
-  },
-
-  /**
-   * Checks whether or not this composite component is mounted.
-   * @return {boolean} True if mounted, false otherwise.
-   * @protected
-   * @final
-   */
-  isMounted: function() {
-    return this.updater.isMounted(this);
-  },
-};
-
-var ReactClassComponent = function() {};
-Object.assign(
-  ReactClassComponent.prototype,
-  ReactComponent.prototype,
-  ReactClassMixin
-);
-
-/**
- * Module for creating composite components.
- *
- * @class ReactClass
- */
-var ReactClass = {
-
-  /**
-   * Creates a composite component class given a class specification.
-   *
-   * @param {object} spec Class specification (which must define `render`).
-   * @return {function} Component constructor function.
-   * @public
-   */
-  createClass: function(spec) {
-    var Constructor = function(props, context, updater) {
-      // This constructor gets overridden by mocks. The argument is used
-      // by mocks to assert on what gets mounted.
-
-      if (__DEV__) {
-        warning(
-          this instanceof Constructor,
-          'Something is calling a React component directly. Use a factory or ' +
-          'JSX instead. See: https://fb.me/react-legacyfactory'
-        );
-      }
-
-      // Wire up auto-binding
-      if (this.__reactAutoBindPairs.length) {
-        bindAutoBindMethods(this);
-      }
-
-      this.props = props;
-      this.context = context;
-      this.refs = emptyObject;
-      this.updater = updater || ReactNoopUpdateQueue;
-
-      this.state = null;
-
-      // ReactClasses doesn't have constructors. Instead, they use the
-      // getInitialState and componentWillMount methods for initialization.
-
-      var initialState = this.getInitialState ? this.getInitialState() : null;
-      if (__DEV__) {
-        // We allow auto-mocks to proceed as if they're returning null.
-        if (initialState === undefined &&
-            this.getInitialState._isMockFunction) {
-          // This is probably bad practice. Consider warning here and
-          // deprecating this convenience.
-          initialState = null;
-        }
-      }
-      invariant(
-        typeof initialState === 'object' && !Array.isArray(initialState),
-        '%s.getInitialState(): must return an object or null',
-        Constructor.displayName || 'ReactCompositeComponent'
-      );
-
-      this.state = initialState;
-    };
-    Constructor.prototype = new ReactClassComponent();
-    Constructor.prototype.constructor = Constructor;
-    Constructor.prototype.__reactAutoBindPairs = [];
-
-    injectedMixins.forEach(
-      mixSpecIntoComponent.bind(null, Constructor)
-    );
-
-    mixSpecIntoComponent(Constructor, spec);
-
-    // Initialize the defaultProps property after all mixins have been merged.
-    if (Constructor.getDefaultProps) {
-      Constructor.defaultProps = Constructor.getDefaultProps();
-    }
-
-    if (__DEV__) {
-      // This is a tag to indicate that the use of these method names is ok,
-      // since it's used with createClass. If it's not, then it's likely a
-      // mistake so we'll warn you to use the static property, property
-      // initializer or constructor respectively.
-      if (Constructor.getDefaultProps) {
-        Constructor.getDefaultProps.isReactClassApproved = {};
-      }
-      if (Constructor.prototype.getInitialState) {
-        Constructor.prototype.getInitialState.isReactClassApproved = {};
-      }
-    }
-
-    invariant(
-      Constructor.prototype.render,
-      'createClass(...): Class specification must implement a `render` method.'
-    );
-
-    if (__DEV__) {
-      warning(
-        !Constructor.prototype.componentShouldUpdate,
-        '%s has a method called ' +
-        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
-        'The name is phrased as a question because the function is ' +
-        'expected to return a value.',
-        spec.displayName || 'A component'
-      );
-      warning(
-        !Constructor.prototype.componentWillRecieveProps,
-        '%s has a method called ' +
-        'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
-        spec.displayName || 'A component'
-      );
-    }
-
-    // Reduce time spent doing lookups by setting these on the prototype.
-    for (var methodName in ReactClassInterface) {
-      if (!Constructor.prototype[methodName]) {
-        Constructor.prototype[methodName] = null;
-      }
-    }
-
-    return Constructor;
-  },
-
-  injection: {
-    injectMixin: function(mixin) {
-      injectedMixins.push(mixin);
-    },
-  },
-
-};
-
-module.exports = ReactClass;
diff --git a/src/isomorphic/classic/class/__tests__/ReactBind-test.js b/src/isomorphic/classic/class/__tests__/ReactBind-test.js
deleted file mode 100644
index 63aa641a9..000000000
--- a/src/isomorphic/classic/class/__tests__/ReactBind-test.js
+++ /dev/null
@@ -1,166 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
- */
-/*global global:true*/
-'use strict';
-
-var React = require('React');
-var ReactTestUtils = require('ReactTestUtils');
-var reactComponentExpect = require('reactComponentExpect');
-
-// TODO: Test render and all stock methods.
-describe('autobinding', function() {
-
-  it('Holds reference to instance', function() {
-
-    var mouseDidEnter = jest.genMockFn();
-    var mouseDidLeave = jest.genMockFn();
-    var mouseDidClick = jest.genMockFn();
-
-    var TestBindComponent = React.createClass({
-      getInitialState: function() {
-        return {something: 'hi'};
-      },
-      onMouseEnter: mouseDidEnter,
-      onMouseLeave: mouseDidLeave,
-      onClick: mouseDidClick,
-
-      // auto binding only occurs on top level functions in class defs.
-      badIdeas: {
-        badBind: function() {
-          void this.state.something;
-        },
-      },
-
-      render: function() {
-        return (
-          <div
-            onMouseOver={this.onMouseEnter}
-            onMouseOut={this.onMouseLeave}
-            onClick={this.onClick}
-          />
-        );
-      },
-    });
-
-    var instance1 = <TestBindComponent />;
-    var mountedInstance1 = ReactTestUtils.renderIntoDocument(instance1);
-    var rendered1 = reactComponentExpect(mountedInstance1)
-      .expectRenderedChild()
-      .instance();
-
-    var instance2 = <TestBindComponent />;
-    var mountedInstance2 = ReactTestUtils.renderIntoDocument(instance2);
-    var rendered2 = reactComponentExpect(mountedInstance2)
-      .expectRenderedChild()
-      .instance();
-
-    expect(function() {
-      var badIdea = instance1.badIdeas.badBind;
-      badIdea();
-    }).toThrow();
-
-    expect(mountedInstance1.onClick).not.toBe(mountedInstance2.onClick);
-
-    ReactTestUtils.Simulate.click(rendered1);
-    expect(mouseDidClick.mock.instances.length).toBe(1);
-    expect(mouseDidClick.mock.instances[0]).toBe(mountedInstance1);
-
-    ReactTestUtils.Simulate.click(rendered2);
-    expect(mouseDidClick.mock.instances.length).toBe(2);
-    expect(mouseDidClick.mock.instances[1]).toBe(mountedInstance2);
-
-    ReactTestUtils.Simulate.mouseOver(rendered1);
-    expect(mouseDidEnter.mock.instances.length).toBe(1);
-    expect(mouseDidEnter.mock.instances[0]).toBe(mountedInstance1);
-
-    ReactTestUtils.Simulate.mouseOver(rendered2);
-    expect(mouseDidEnter.mock.instances.length).toBe(2);
-    expect(mouseDidEnter.mock.instances[1]).toBe(mountedInstance2);
-
-    ReactTestUtils.Simulate.mouseOut(rendered1);
-    expect(mouseDidLeave.mock.instances.length).toBe(1);
-    expect(mouseDidLeave.mock.instances[0]).toBe(mountedInstance1);
-
-    ReactTestUtils.Simulate.mouseOut(rendered2);
-    expect(mouseDidLeave.mock.instances.length).toBe(2);
-    expect(mouseDidLeave.mock.instances[1]).toBe(mountedInstance2);
-  });
-
-  it('works with mixins', function() {
-    var mouseDidClick = jest.genMockFn();
-
-    var TestMixin = {
-      onClick: mouseDidClick,
-    };
-
-    var TestBindComponent = React.createClass({
-      mixins: [TestMixin],
-
-      render: function() {
-        return <div onClick={this.onClick} />;
-      },
-    });
-
-    var instance1 = <TestBindComponent />;
-    var mountedInstance1 = ReactTestUtils.renderIntoDocument(instance1);
-    var rendered1 = reactComponentExpect(mountedInstance1)
-      .expectRenderedChild()
-      .instance();
-
-    ReactTestUtils.Simulate.click(rendered1);
-    expect(mouseDidClick.mock.instances.length).toBe(1);
-    expect(mouseDidClick.mock.instances[0]).toBe(mountedInstance1);
-  });
-
-  it('warns if you try to bind to this', function() {
-    spyOn(console, 'error');
-
-    var TestBindComponent = React.createClass({
-      handleClick: function() { },
-      render: function() {
-        return <div onClick={this.handleClick.bind(this)} />;
-      },
-    });
-
-    ReactTestUtils.renderIntoDocument(<TestBindComponent />);
-
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: bind(): You are binding a component method to the component. ' +
-      'React does this for you automatically in a high-performance ' +
-      'way, so you can safely remove this call. See TestBindComponent'
-    );
-  });
-
-  it('does not warn if you pass an auto-bound method to setState', function() {
-    spyOn(console, 'error');
-
-    var TestBindComponent = React.createClass({
-      getInitialState: function() {
-        return {foo: 1};
-      },
-      componentDidMount: function() {
-        this.setState({foo: 2}, this.handleUpdate);
-      },
-      handleUpdate: function() {
-
-      },
-      render: function() {
-        return <div onClick={this.handleClick} />;
-      },
-    });
-
-    ReactTestUtils.renderIntoDocument(<TestBindComponent />);
-
-    expect(console.error.argsForCall.length).toBe(0);
-  });
-
-});
diff --git a/src/isomorphic/classic/class/__tests__/ReactBindOptout-test.js b/src/isomorphic/classic/class/__tests__/ReactBindOptout-test.js
deleted file mode 100644
index 395e34577..000000000
--- a/src/isomorphic/classic/class/__tests__/ReactBindOptout-test.js
+++ /dev/null
@@ -1,233 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
- */
-/*global global:true*/
-'use strict';
-
-var React = require('React');
-var ReactTestUtils = require('ReactTestUtils');
-var reactComponentExpect = require('reactComponentExpect');
-
-// TODO: Test render and all stock methods.
-describe('autobind optout', function() {
-
-  it('should work with manual binding', function() {
-
-    var mouseDidEnter = jest.genMockFn();
-    var mouseDidLeave = jest.genMockFn();
-    var mouseDidClick = jest.genMockFn();
-
-    var TestBindComponent = React.createClass({
-      autobind: false,
-      getInitialState: function() {
-        return {something: 'hi'};
-      },
-      onMouseEnter: mouseDidEnter,
-      onMouseLeave: mouseDidLeave,
-      onClick: mouseDidClick,
-
-      render: function() {
-        return (
-          <div
-            onMouseOver={this.onMouseEnter.bind(this)}
-            onMouseOut={this.onMouseLeave.bind(this)}
-            onClick={this.onClick.bind(this)}
-            />
-        );
-      },
-    });
-
-    var instance1 = <TestBindComponent />;
-    var mountedInstance1 = ReactTestUtils.renderIntoDocument(instance1);
-    var rendered1 = reactComponentExpect(mountedInstance1)
-      .expectRenderedChild()
-      .instance();
-
-    var instance2 = <TestBindComponent />;
-    var mountedInstance2 = ReactTestUtils.renderIntoDocument(instance2);
-    var rendered2 = reactComponentExpect(mountedInstance2)
-      .expectRenderedChild()
-      .instance();
-
-    ReactTestUtils.Simulate.click(rendered1);
-    expect(mouseDidClick.mock.instances.length).toBe(1);
-    expect(mouseDidClick.mock.instances[0]).toBe(mountedInstance1);
-
-    ReactTestUtils.Simulate.click(rendered2);
-    expect(mouseDidClick.mock.instances.length).toBe(2);
-    expect(mouseDidClick.mock.instances[1]).toBe(mountedInstance2);
-
-    ReactTestUtils.Simulate.mouseOver(rendered1);
-    expect(mouseDidEnter.mock.instances.length).toBe(1);
-    expect(mouseDidEnter.mock.instances[0]).toBe(mountedInstance1);
-
-    ReactTestUtils.Simulate.mouseOver(rendered2);
-    expect(mouseDidEnter.mock.instances.length).toBe(2);
-    expect(mouseDidEnter.mock.instances[1]).toBe(mountedInstance2);
-
-    ReactTestUtils.Simulate.mouseOut(rendered1);
-    expect(mouseDidLeave.mock.instances.length).toBe(1);
-    expect(mouseDidLeave.mock.instances[0]).toBe(mountedInstance1);
-
-    ReactTestUtils.Simulate.mouseOut(rendered2);
-    expect(mouseDidLeave.mock.instances.length).toBe(2);
-    expect(mouseDidLeave.mock.instances[1]).toBe(mountedInstance2);
-  });
-
-  it('should not hold reference to instance', function() {
-    var mouseDidClick = function() {
-      void this.state.something;
-    };
-
-    var TestBindComponent = React.createClass({
-      autobind: false,
-      getInitialState: function() {
-        return {something: 'hi'};
-      },
-      onClick: mouseDidClick,
-
-      // auto binding only occurs on top level functions in class defs.
-      badIdeas: {
-        badBind: function() {
-          void this.state.something;
-        },
-      },
-
-      render: function() {
-        return (
-          <div
-            onClick={this.onClick}
-          />
-        );
-      },
-    });
-
-    var instance1 = <TestBindComponent />;
-    var mountedInstance1 = ReactTestUtils.renderIntoDocument(instance1);
-    var rendered1 = reactComponentExpect(mountedInstance1)
-      .expectRenderedChild()
-      .instance();
-
-    var instance2 = <TestBindComponent />;
-    var mountedInstance2 = ReactTestUtils.renderIntoDocument(instance2);
-    var rendered2 = reactComponentExpect(mountedInstance2)
-      .expectRenderedChild()
-      .instance();
-
-    expect(function() {
-      var badIdea = instance1.badIdeas.badBind;
-      badIdea();
-    }).toThrow();
-
-    expect(mountedInstance1.onClick).toBe(mountedInstance2.onClick);
-
-    expect(function() {
-      ReactTestUtils.Simulate.click(rendered1);
-    }).toThrow();
-
-    expect(function() {
-      ReactTestUtils.Simulate.click(rendered2);
-    }).toThrow();
-  });
-
-  it('works with mixins that have not opted out of autobinding', function() {
-    var mouseDidClick = jest.genMockFn();
-
-    var TestMixin = {
-      onClick: mouseDidClick,
-    };
-
-    var TestBindComponent = React.createClass({
-      mixins: [TestMixin],
-
-      render: function() {
-        return <div onClick={this.onClick} />;
-      },
-    });
-
-    var instance1 = <TestBindComponent />;
-    var mountedInstance1 = ReactTestUtils.renderIntoDocument(instance1);
-    var rendered1 = reactComponentExpect(mountedInstance1)
-      .expectRenderedChild()
-      .instance();
-
-    ReactTestUtils.Simulate.click(rendered1);
-    expect(mouseDidClick.mock.instances.length).toBe(1);
-    expect(mouseDidClick.mock.instances[0]).toBe(mountedInstance1);
-  });
-
-  it('works with mixins that have opted out of autobinding', function() {
-    var mouseDidClick = jest.genMockFn();
-
-    var TestMixin = {
-      autobind: false,
-      onClick: mouseDidClick,
-    };
-
-    var TestBindComponent = React.createClass({
-      mixins: [TestMixin],
-
-      render: function() {
-        return <div onClick={this.onClick.bind(this)} />;
-      },
-    });
-
-    var instance1 = <TestBindComponent />;
-    var mountedInstance1 = ReactTestUtils.renderIntoDocument(instance1);
-    var rendered1 = reactComponentExpect(mountedInstance1)
-      .expectRenderedChild()
-      .instance();
-
-    ReactTestUtils.Simulate.click(rendered1);
-    expect(mouseDidClick.mock.instances.length).toBe(1);
-    expect(mouseDidClick.mock.instances[0]).toBe(mountedInstance1);
-  });
-
-  it('does not warn if you try to bind to this', function() {
-    spyOn(console, 'error');
-
-    var TestBindComponent = React.createClass({
-      autobind: false,
-      handleClick: function() { },
-      render: function() {
-        return <div onClick={this.handleClick.bind(this)} />;
-      },
-    });
-
-    ReactTestUtils.renderIntoDocument(<TestBindComponent />);
-
-    expect(console.error.argsForCall.length).toBe(0);
-  });
-
-  it('does not warn if you pass an manually bound method to setState', function() {
-    spyOn(console, 'error');
-
-    var TestBindComponent = React.createClass({
-      autobind: false,
-      getInitialState: function() {
-        return {foo: 1};
-      },
-      componentDidMount: function() {
-        this.setState({foo: 2}, this.handleUpdate.bind(this));
-      },
-      handleUpdate: function() {
-
-      },
-      render: function() {
-        return <div />;
-      },
-    });
-
-    ReactTestUtils.renderIntoDocument(<TestBindComponent />);
-
-    expect(console.error.argsForCall.length).toBe(0);
-  });
-
-});
diff --git a/src/isomorphic/classic/class/__tests__/ReactClassMixin-test.js b/src/isomorphic/classic/class/__tests__/ReactClassMixin-test.js
deleted file mode 100644
index a65c68ff0..000000000
--- a/src/isomorphic/classic/class/__tests__/ReactClassMixin-test.js
+++ /dev/null
@@ -1,457 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
- */
-
-'use strict';
-
-var React;
-var ReactTestUtils;
-
-var TestComponent;
-var TestComponentWithPropTypes;
-var TestComponentWithReverseSpec;
-var mixinPropValidator;
-var componentPropValidator;
-
-describe('ReactClass-mixin', function() {
-
-  beforeEach(function() {
-    React = require('React');
-    ReactTestUtils = require('ReactTestUtils');
-    mixinPropValidator = jest.genMockFn();
-    componentPropValidator = jest.genMockFn();
-
-    var MixinA = {
-      propTypes: {
-        propA: function() {},
-      },
-      componentDidMount: function() {
-        this.props.listener('MixinA didMount');
-      },
-    };
-
-    var MixinB = {
-      mixins: [MixinA],
-      propTypes: {
-        propB: function() {},
-      },
-      componentDidMount: function() {
-        this.props.listener('MixinB didMount');
-      },
-    };
-
-    var MixinBWithReverseSpec = {
-      componentDidMount: function() {
-        this.props.listener('MixinBWithReverseSpec didMount');
-      },
-      mixins: [MixinA],
-    };
-
-    var MixinC = {
-      statics: {
-        staticC: function() {},
-      },
-      componentDidMount: function() {
-        this.props.listener('MixinC didMount');
-      },
-    };
-
-    var MixinD = {
-      propTypes: {
-        value: mixinPropValidator,
-      },
-    };
-
-    TestComponent = React.createClass({
-      mixins: [MixinB, MixinC, MixinD],
-      statics: {
-        staticComponent: function() {},
-      },
-      propTypes: {
-        propComponent: function() {},
-      },
-      componentDidMount: function() {
-        this.props.listener('Component didMount');
-      },
-      render: function() {
-        return <div />;
-      },
-    });
-
-    TestComponentWithReverseSpec = React.createClass({
-      render: function() {
-        return <div />;
-      },
-      componentDidMount: function() {
-        this.props.listener('Component didMount');
-      },
-      mixins: [MixinBWithReverseSpec, MixinC, MixinD],
-    });
-
-    TestComponentWithPropTypes = React.createClass({
-      mixins: [MixinD],
-      propTypes: {
-        value: componentPropValidator,
-      },
-      render: function() {
-        return <div />;
-      },
-    });
-  });
-
-  it('should support merging propTypes and statics', function() {
-    var listener = jest.genMockFn();
-    var instance = <TestComponent listener={listener} />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-
-    var instancePropTypes = instance.constructor.propTypes;
-
-    expect('propA' in instancePropTypes).toBe(true);
-    expect('propB' in instancePropTypes).toBe(true);
-    expect('propComponent' in instancePropTypes).toBe(true);
-
-    expect('staticC' in TestComponent).toBe(true);
-    expect('staticComponent' in TestComponent).toBe(true);
-  });
-
-  it('should support chaining delegate functions', function() {
-    var listener = jest.genMockFn();
-    var instance = <TestComponent listener={listener} />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-
-    expect(listener.mock.calls).toEqual([
-      ['MixinA didMount'],
-      ['MixinB didMount'],
-      ['MixinC didMount'],
-      ['Component didMount'],
-    ]);
-  });
-
-  it('should chain functions regardless of spec property order', function() {
-    var listener = jest.genMockFn();
-    var instance = <TestComponentWithReverseSpec listener={listener} />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-
-    expect(listener.mock.calls).toEqual([
-      ['MixinA didMount'],
-      ['MixinBWithReverseSpec didMount'],
-      ['MixinC didMount'],
-      ['Component didMount'],
-    ]);
-  });
-
-  it('should validate prop types via mixins', function() {
-    expect(TestComponent.propTypes).toBeDefined();
-    expect(TestComponent.propTypes.value)
-      .toBe(mixinPropValidator);
-  });
-
-  it('should override mixin prop types with class prop types', function() {
-    // Sanity check...
-    expect(componentPropValidator).toNotBe(mixinPropValidator);
-    // Actually check...
-    expect(TestComponentWithPropTypes.propTypes)
-      .toBeDefined();
-    expect(TestComponentWithPropTypes.propTypes.value)
-      .toNotBe(mixinPropValidator);
-    expect(TestComponentWithPropTypes.propTypes.value)
-      .toBe(componentPropValidator);
-  });
-
-
-  it('should support mixins with getInitialState()', function() {
-    var Mixin = {
-      getInitialState: function() {
-        return {mixin: true};
-      },
-    };
-    var Component = React.createClass({
-      mixins: [Mixin],
-      getInitialState: function() {
-        return {component: true};
-      },
-      render: function() {
-        return <span />;
-      },
-    });
-    var instance = <Component />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-    expect(instance.state.component).toBe(true);
-    expect(instance.state.mixin).toBe(true);
-  });
-
-  it('should throw with conflicting getInitialState() methods', function() {
-    var Mixin = {
-      getInitialState: function() {
-        return {x: true};
-      },
-    };
-    var Component = React.createClass({
-      mixins: [Mixin],
-      getInitialState: function() {
-        return {x: true};
-      },
-      render: function() {
-        return <span />;
-      },
-    });
-    var instance = <Component />;
-    expect(function() {
-      instance = ReactTestUtils.renderIntoDocument(instance);
-    }).toThrow(
-      'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the ' +
-      'same key: `x`. This conflict may be due to a mixin; in particular, ' +
-      'this may be caused by two getInitialState() or getDefaultProps() ' +
-      'methods returning objects with clashing keys.'
-    );
-  });
-
-  it('should not mutate objects returned by getInitialState()', function() {
-    var Mixin = {
-      getInitialState: function() {
-        return Object.freeze({mixin: true});
-      },
-    };
-    var Component = React.createClass({
-      mixins: [Mixin],
-      getInitialState: function() {
-        return Object.freeze({component: true});
-      },
-      render: function() {
-        return <span />;
-      },
-    });
-    expect(() => {
-      ReactTestUtils.renderIntoDocument(<Component />);
-    }).not.toThrow();
-  });
-
-  it('should support statics in mixins', function() {
-    var Mixin = {
-      statics: {
-        foo: 'bar',
-      },
-    };
-    var Component = React.createClass({
-      mixins: [Mixin],
-
-      statics: {
-        abc: 'def',
-      },
-
-      render: function() {
-        return <span />;
-      },
-    });
-    var instance = <Component />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-    expect(instance.constructor.foo).toBe('bar');
-    expect(Component.foo).toBe('bar');
-    expect(instance.constructor.abc).toBe('def');
-    expect(Component.abc).toBe('def');
-  });
-
-  it("should throw if mixins override each others' statics", function() {
-    expect(function() {
-      var Mixin = {
-        statics: {
-          abc: 'foo',
-        },
-      };
-      React.createClass({
-        mixins: [Mixin],
-
-        statics: {
-          abc: 'bar',
-        },
-
-        render: function() {
-          return <span />;
-        },
-      });
-    }).toThrow(
-      'ReactClass: You are attempting to define `abc` on your component more ' +
-      'than once. This conflict may be due to a mixin.'
-    );
-  });
-
-  it('should throw if mixins override functions in statics', function() {
-    expect(function() {
-      var Mixin = {
-        statics: {
-          abc: function() {
-            console.log('foo');
-          },
-        },
-      };
-      React.createClass({
-        mixins: [Mixin],
-
-        statics: {
-          abc: function() {
-            console.log('bar');
-          },
-        },
-
-        render: function() {
-          return <span />;
-        },
-      });
-    }).toThrow(
-      'ReactClass: You are attempting to define `abc` on your component ' +
-      'more than once. This conflict may be due to a mixin.'
-    );
-  });
-
-  it('should throw if the mixin is a React component', function() {
-    expect(function() {
-      React.createClass({
-        mixins: [<div />],
-
-        render: function() {
-          return <span />;
-        },
-      });
-    }).toThrow(
-      'ReactClass: You\'re attempting to use a component as a mixin. ' +
-      'Instead, just use a regular object.'
-    );
-  });
-
-  it('should throw if the mixin is a React component class', function() {
-    expect(function() {
-      var Component = React.createClass({
-        render: function() {
-          return <span />;
-        },
-      });
-
-      React.createClass({
-        mixins: [Component],
-
-        render: function() {
-          return <span />;
-        },
-      });
-    }).toThrow(
-      'ReactClass: You\'re attempting to use a component class or function ' +
-      'as a mixin. Instead, just use a regular object.'
-    );
-  });
-
-  it('should have bound the mixin methods to the component', function() {
-    var mixin = {
-      mixinFunc: function() {
-        return this;
-      },
-    };
-
-    var Component = React.createClass({
-      mixins: [mixin],
-      componentDidMount: function() {
-        expect(this.mixinFunc()).toBe(this);
-      },
-      render: function() {
-        return <span />;
-      },
-    });
-    var instance = <Component />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-  });
-
-  it('should include the mixin keys in even if their values are falsy', function() {
-    var mixin = {
-      keyWithNullValue: null,
-      randomCounter: 0,
-    };
-
-    var Component = React.createClass({
-      mixins: [mixin],
-      componentDidMount: function() {
-        expect(this.randomCounter).toBe(0);
-        expect(this.keyWithNullValue).toBeNull();
-      },
-      render: function() {
-        return <span />;
-      },
-    });
-    var instance = <Component />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-  });
-
-  it('should work with a null getInitialState return value and a mixin', () => {
-    var Component;
-    var instance;
-
-    var Mixin = {
-      getInitialState: function() {
-        return {foo: 'bar'};
-      },
-    };
-    Component = React.createClass({
-      mixins: [Mixin],
-      getInitialState: function() {
-        return null;
-      },
-      render: function() {
-        return <span />;
-      },
-    });
-    expect(
-      () => ReactTestUtils.renderIntoDocument(<Component />)
-    ).not.toThrow();
-
-    instance = <Component />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-    expect(instance.state).toEqual({foo: 'bar'});
-
-    // Also the other way round should work
-    var Mixin2 = {
-      getInitialState: function() {
-        return null;
-      },
-    };
-    Component = React.createClass({
-      mixins: [Mixin2],
-      getInitialState: function() {
-        return {foo: 'bar'};
-      },
-      render: function() {
-        return <span />;
-      },
-    });
-    expect(
-      () => ReactTestUtils.renderIntoDocument(<Component />)
-    ).not.toThrow();
-
-    instance = <Component />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-    expect(instance.state).toEqual({foo: 'bar'});
-
-    // Multiple mixins should be fine too
-    Component = React.createClass({
-      mixins: [Mixin, Mixin2],
-      getInitialState: function() {
-        return {x: true};
-      },
-      render: function() {
-        return <span />;
-      },
-    });
-    expect(
-      () => ReactTestUtils.renderIntoDocument(<Component />)
-    ).not.toThrow();
-
-    instance = <Component />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-    expect(instance.state).toEqual({foo: 'bar', x: true});
-  });
-
-});
diff --git a/src/isomorphic/classic/class/__tests__/ReactCreateClass-test.js b/src/isomorphic/classic/class/__tests__/ReactCreateClass-test.js
new file mode 100644
index 000000000..61f4fafa0
--- /dev/null
+++ b/src/isomorphic/classic/class/__tests__/ReactCreateClass-test.js
@@ -0,0 +1,439 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+var PropTypes;
+var React;
+var ReactDOM;
+var ReactTestUtils;
+var createReactClass;
+
+describe('ReactClass-spec', () => {
+  beforeEach(() => {
+    PropTypes = require('prop-types');
+    React = require('React');
+    ReactDOM = require('ReactDOM');
+    ReactTestUtils = require('ReactTestUtils');
+    var createReactClassFactory = require('create-react-class/factory');
+    createReactClass = createReactClassFactory(
+      React.Component,
+      React.isValidElement,
+      require('ReactNoopUpdateQueue'),
+    );
+  });
+
+  it('should throw when `render` is not specified', () => {
+    expect(function() {
+      createReactClass({});
+    }).toThrowError(
+      'createClass(...): Class specification must implement a `render` method.',
+    );
+  });
+
+  // TODO: Update babel-plugin-transform-react-display-name
+  xit('should copy `displayName` onto the Constructor', () => {
+    var TestComponent = createReactClass({
+      render: function() {
+        return <div />;
+      },
+    });
+
+    expect(TestComponent.displayName).toBe('TestComponent');
+  });
+
+  it('should copy prop types onto the Constructor', () => {
+    var propValidator = jest.fn();
+    var TestComponent = createReactClass({
+      propTypes: {
+        value: propValidator,
+      },
+      render: function() {
+        return <div />;
+      },
+    });
+
+    expect(TestComponent.propTypes).toBeDefined();
+    expect(TestComponent.propTypes.value).toBe(propValidator);
+  });
+
+  it('should warn on invalid prop types', () => {
+    spyOn(console, 'error');
+    createReactClass({
+      displayName: 'Component',
+      propTypes: {
+        prop: null,
+      },
+      render: function() {
+        return <span>{this.props.prop}</span>;
+      },
+    });
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      'Warning: Component: prop type `prop` is invalid; ' +
+        'it must be a function, usually from React.PropTypes.',
+    );
+  });
+
+  it('should warn on invalid context types', () => {
+    spyOn(console, 'error');
+    createReactClass({
+      displayName: 'Component',
+      contextTypes: {
+        prop: null,
+      },
+      render: function() {
+        return <span>{this.props.prop}</span>;
+      },
+    });
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      'Warning: Component: context type `prop` is invalid; ' +
+        'it must be a function, usually from React.PropTypes.',
+    );
+  });
+
+  it('should throw on invalid child context types', () => {
+    spyOn(console, 'error');
+    createReactClass({
+      displayName: 'Component',
+      childContextTypes: {
+        prop: null,
+      },
+      render: function() {
+        return <span>{this.props.prop}</span>;
+      },
+    });
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      'Warning: Component: child context type `prop` is invalid; ' +
+        'it must be a function, usually from React.PropTypes.',
+    );
+  });
+
+  it('should warn when mispelling shouldComponentUpdate', () => {
+    spyOn(console, 'error');
+
+    createReactClass({
+      componentShouldUpdate: function() {
+        return false;
+      },
+      render: function() {
+        return <div />;
+      },
+    });
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      'Warning: A component has a method called componentShouldUpdate(). Did you ' +
+        'mean shouldComponentUpdate()? The name is phrased as a question ' +
+        'because the function is expected to return a value.',
+    );
+
+    createReactClass({
+      displayName: 'NamedComponent',
+      componentShouldUpdate: function() {
+        return false;
+      },
+      render: function() {
+        return <div />;
+      },
+    });
+    expect(console.error.calls.count()).toBe(2);
+    expect(console.error.calls.argsFor(1)[0]).toBe(
+      'Warning: NamedComponent has a method called componentShouldUpdate(). Did you ' +
+        'mean shouldComponentUpdate()? The name is phrased as a question ' +
+        'because the function is expected to return a value.',
+    );
+  });
+
+  it('should warn when mispelling componentWillReceiveProps', () => {
+    spyOn(console, 'error');
+    createReactClass({
+      componentWillRecieveProps: function() {
+        return false;
+      },
+      render: function() {
+        return <div />;
+      },
+    });
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      'Warning: A component has a method called componentWillRecieveProps(). Did you ' +
+        'mean componentWillReceiveProps()?',
+    );
+  });
+
+  it('should throw if a reserved property is in statics', () => {
+    expect(function() {
+      createReactClass({
+        statics: {
+          getDefaultProps: function() {
+            return {
+              foo: 0,
+            };
+          },
+        },
+
+        render: function() {
+          return <span />;
+        },
+      });
+    }).toThrowError(
+      'ReactClass: You are attempting to define a reserved property, ' +
+        '`getDefaultProps`, that shouldn\'t be on the "statics" key. Define ' +
+        'it as an instance property instead; it will still be accessible on ' +
+        'the constructor.',
+    );
+  });
+
+  // TODO: Consider actually moving these to statics or drop this unit test.
+
+  xit('should warn when using deprecated non-static spec keys', () => {
+    spyOn(console, 'error');
+    createReactClass({
+      mixins: [{}],
+      propTypes: {
+        foo: PropTypes.string,
+      },
+      contextTypes: {
+        foo: PropTypes.string,
+      },
+      childContextTypes: {
+        foo: PropTypes.string,
+      },
+      render: function() {
+        return <div />;
+      },
+    });
+    expect(console.error.calls.count()).toBe(4);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      'createClass(...): `mixins` is now a static property and should ' +
+        'be defined inside "statics".',
+    );
+    expect(console.error.calls.argsFor(1)[0]).toBe(
+      'createClass(...): `propTypes` is now a static property and should ' +
+        'be defined inside "statics".',
+    );
+    expect(console.error.calls.argsFor(2)[0]).toBe(
+      'createClass(...): `contextTypes` is now a static property and ' +
+        'should be defined inside "statics".',
+    );
+    expect(console.error.calls.argsFor(3)[0]).toBe(
+      'createClass(...): `childContextTypes` is now a static property and ' +
+        'should be defined inside "statics".',
+    );
+  });
+
+  it('should support statics', () => {
+    var Component = createReactClass({
+      statics: {
+        abc: 'def',
+        def: 0,
+        ghi: null,
+        jkl: 'mno',
+        pqr: function() {
+          return this;
+        },
+      },
+
+      render: function() {
+        return <span />;
+      },
+    });
+    var instance = <Component />;
+    instance = ReactTestUtils.renderIntoDocument(instance);
+    expect(instance.constructor.abc).toBe('def');
+    expect(Component.abc).toBe('def');
+    expect(instance.constructor.def).toBe(0);
+    expect(Component.def).toBe(0);
+    expect(instance.constructor.ghi).toBe(null);
+    expect(Component.ghi).toBe(null);
+    expect(instance.constructor.jkl).toBe('mno');
+    expect(Component.jkl).toBe('mno');
+    expect(instance.constructor.pqr()).toBe(Component);
+    expect(Component.pqr()).toBe(Component);
+  });
+
+  it('should work with object getInitialState() return values', () => {
+    var Component = createReactClass({
+      getInitialState: function() {
+        return {
+          occupation: 'clown',
+        };
+      },
+      render: function() {
+        return <span />;
+      },
+    });
+    var instance = <Component />;
+    instance = ReactTestUtils.renderIntoDocument(instance);
+    expect(instance.state.occupation).toEqual('clown');
+  });
+
+  it('renders based on context getInitialState', () => {
+    var Foo = createReactClass({
+      contextTypes: {
+        className: PropTypes.string,
+      },
+      getInitialState() {
+        return {className: this.context.className};
+      },
+      render() {
+        return <span className={this.state.className} />;
+      },
+    });
+
+    var Outer = createReactClass({
+      childContextTypes: {
+        className: PropTypes.string,
+      },
+      getChildContext() {
+        return {className: 'foo'};
+      },
+      render() {
+        return <Foo />;
+      },
+    });
+
+    var container = document.createElement('div');
+    ReactDOM.render(<Outer />, container);
+    expect(container.firstChild.className).toBe('foo');
+  });
+
+  it('should throw with non-object getInitialState() return values', () => {
+    [['an array'], 'a string', 1234].forEach(function(state) {
+      var Component = createReactClass({
+        getInitialState: function() {
+          return state;
+        },
+        render: function() {
+          return <span />;
+        },
+      });
+      var instance = <Component />;
+      expect(function() {
+        instance = ReactTestUtils.renderIntoDocument(instance);
+      }).toThrowError(
+        'Component.getInitialState(): must return an object or null',
+      );
+    });
+  });
+
+  it('should work with a null getInitialState() return value', () => {
+    var Component = createReactClass({
+      getInitialState: function() {
+        return null;
+      },
+      render: function() {
+        return <span />;
+      },
+    });
+    expect(() =>
+      ReactTestUtils.renderIntoDocument(<Component />),
+    ).not.toThrow();
+  });
+
+  it('should throw when using legacy factories', () => {
+    spyOn(console, 'error');
+    var Component = createReactClass({
+      render() {
+        return <div />;
+      },
+    });
+
+    expect(() => Component()).toThrow();
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      'Warning: Something is calling a React component directly. Use a ' +
+        'factory or JSX instead. See: https://fb.me/react-legacyfactory',
+    );
+  });
+
+  it('replaceState and callback works', () => {
+    var ops = [];
+    var Component = createReactClass({
+      getInitialState() {
+        return {step: 0};
+      },
+      render() {
+        ops.push('Render: ' + this.state.step);
+        return <div />;
+      },
+    });
+
+    var instance = ReactTestUtils.renderIntoDocument(<Component />);
+    instance.replaceState({step: 1}, () => {
+      ops.push('Callback: ' + instance.state.step);
+    });
+    expect(ops).toEqual(['Render: 0', 'Render: 1', 'Callback: 1']);
+  });
+
+  it('isMounted works', () => {
+    spyOn(console, 'error');
+
+    var ops = [];
+    var instance;
+    var Component = createReactClass({
+      displayName: 'MyComponent',
+      log(name) {
+        ops.push(`${name}: ${this.isMounted()}`);
+      },
+      getInitialState() {
+        this.log('getInitialState');
+        return {};
+      },
+      componentWillMount() {
+        this.log('componentWillMount');
+      },
+      componentDidMount() {
+        this.log('componentDidMount');
+      },
+      componentWillUpdate() {
+        this.log('componentWillUpdate');
+      },
+      componentDidUpdate() {
+        this.log('componentDidUpdate');
+      },
+      componentWillUnmount() {
+        this.log('componentWillUnmount');
+      },
+      render() {
+        instance = this;
+        this.log('render');
+        return <div />;
+      },
+    });
+
+    var container = document.createElement('div');
+    ReactDOM.render(<Component />, container);
+    ReactDOM.render(<Component />, container);
+    ReactDOM.unmountComponentAtNode(container);
+    instance.log('after unmount');
+    expect(ops).toEqual([
+      'getInitialState: false',
+      'componentWillMount: false',
+      'render: false',
+      'componentDidMount: true',
+      'componentWillUpdate: true',
+      'render: true',
+      'componentDidUpdate: true',
+      'componentWillUnmount: false',
+      'after unmount: false',
+    ]);
+
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toEqual(
+      'Warning: MyComponent: isMounted is deprecated. Instead, make sure to ' +
+        'clean up subscriptions and pending requests in componentWillUnmount ' +
+        'to prevent memory leaks.',
+    );
+  });
+});
diff --git a/src/isomorphic/classic/class/__tests__/ReactClass-test.js b/src/isomorphic/classic/class/__tests__/create-react-class-integration-test.js
similarity index 51%
rename from src/isomorphic/classic/class/__tests__/ReactClass-test.js
rename to src/isomorphic/classic/class/__tests__/create-react-class-integration-test.js
index 07a1e4bcb..4c89c732a 100644
--- a/src/isomorphic/classic/class/__tests__/ReactClass-test.js
+++ b/src/isomorphic/classic/class/__tests__/create-react-class-integration-test.js
@@ -16,6 +16,6 @@ var ReactDOM;
 var ReactTestUtils;
+var createReactClass;
 
-describe('ReactClass-spec', function() {
-
-  beforeEach(function() {
+describe('create-react-class-integration', () => {
+  beforeEach(() => {
     React = require('React');
@@ -23,9 +23,15 @@ describe('ReactClass-spec', function() {
     ReactTestUtils = require('ReactTestUtils');
+    var createReactClassFactory = require('create-react-class/factory');
+    createReactClass = createReactClassFactory(
+      React.Component,
+      React.isValidElement,
+      require('ReactNoopUpdateQueue'),
+    );
   });
 
-  it('should throw when `render` is not specified', function() {
+  it('should throw when `render` is not specified', () => {
     expect(function() {
-      React.createClass({});
-    }).toThrow(
-      'createClass(...): Class specification must implement a `render` method.'
+      createReactClass({});
+    }).toThrowError(
+      'createClass(...): Class specification must implement a `render` method.',
     );
@@ -33,16 +39,5 @@ describe('ReactClass-spec', function() {
 
-  it('should copy `displayName` onto the Constructor', function() {
-    var TestComponent = React.createClass({
-      render: function() {
-        return <div />;
-      },
-    });
-
-    expect(TestComponent.displayName)
-      .toBe('TestComponent');
-  });
-
-  it('should copy prop types onto the Constructor', function() {
-    var propValidator = jest.genMockFn();
-    var TestComponent = React.createClass({
+  it('should copy prop types onto the Constructor', () => {
+    var propValidator = jest.fn();
+    var TestComponent = createReactClass({
       propTypes: {
@@ -56,9 +51,8 @@ describe('ReactClass-spec', function() {
     expect(TestComponent.propTypes).toBeDefined();
-    expect(TestComponent.propTypes.value)
-      .toBe(propValidator);
+    expect(TestComponent.propTypes.value).toBe(propValidator);
   });
 
-  it('should warn on invalid prop types', function() {
+  it('should warn on invalid prop types', () => {
     spyOn(console, 'error');
-    React.createClass({
+    createReactClass({
       displayName: 'Component',
@@ -71,6 +65,6 @@ describe('ReactClass-spec', function() {
     });
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: Component: prop type `prop` is invalid; ' +
-      'it must be a function, usually from React.PropTypes.'
+        'it must be a function, usually from React.PropTypes.',
     );
@@ -78,5 +72,5 @@ describe('ReactClass-spec', function() {
 
-  it('should warn on invalid context types', function() {
+  it('should warn on invalid context types', () => {
     spyOn(console, 'error');
-    React.createClass({
+    createReactClass({
       displayName: 'Component',
@@ -89,6 +83,6 @@ describe('ReactClass-spec', function() {
     });
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: Component: context type `prop` is invalid; ' +
-      'it must be a function, usually from React.PropTypes.'
+        'it must be a function, usually from React.PropTypes.',
     );
@@ -96,5 +90,5 @@ describe('ReactClass-spec', function() {
 
-  it('should throw on invalid child context types', function() {
+  it('should throw on invalid child context types', () => {
     spyOn(console, 'error');
-    React.createClass({
+    createReactClass({
       displayName: 'Component',
@@ -107,6 +101,6 @@ describe('ReactClass-spec', function() {
     });
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: Component: child context type `prop` is invalid; ' +
-      'it must be a function, usually from React.PropTypes.'
+        'it must be a function, usually from React.PropTypes.',
     );
@@ -114,6 +108,6 @@ describe('ReactClass-spec', function() {
 
-  it('should warn when mispelling shouldComponentUpdate', function() {
+  it('should warn when mispelling shouldComponentUpdate', () => {
     spyOn(console, 'error');
 
-    React.createClass({
+    createReactClass({
       componentShouldUpdate: function() {
@@ -125,10 +119,10 @@ describe('ReactClass-spec', function() {
     });
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: A component has a method called componentShouldUpdate(). Did you ' +
-      'mean shouldComponentUpdate()? The name is phrased as a question ' +
-      'because the function is expected to return a value.'
+        'mean shouldComponentUpdate()? The name is phrased as a question ' +
+        'because the function is expected to return a value.',
     );
 
-    React.createClass({
+    createReactClass({
       displayName: 'NamedComponent',
@@ -141,7 +135,7 @@ describe('ReactClass-spec', function() {
     });
-    expect(console.error.argsForCall.length).toBe(2);
-    expect(console.error.argsForCall[1][0]).toBe(
+    expect(console.error.calls.count()).toBe(2);
+    expect(console.error.calls.argsFor(1)[0]).toBe(
       'Warning: NamedComponent has a method called componentShouldUpdate(). Did you ' +
-      'mean shouldComponentUpdate()? The name is phrased as a question ' +
-      'because the function is expected to return a value.'
+        'mean shouldComponentUpdate()? The name is phrased as a question ' +
+        'because the function is expected to return a value.',
     );
@@ -149,5 +143,5 @@ describe('ReactClass-spec', function() {
 
-  it('should warn when mispelling componentWillReceiveProps', function() {
+  it('should warn when mispelling componentWillReceiveProps', () => {
     spyOn(console, 'error');
-    React.createClass({
+    createReactClass({
       componentWillRecieveProps: function() {
@@ -159,6 +153,6 @@ describe('ReactClass-spec', function() {
     });
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: A component has a method called componentWillRecieveProps(). Did you ' +
-      'mean componentWillReceiveProps()?'
+        'mean componentWillReceiveProps()?',
     );
@@ -166,5 +160,5 @@ describe('ReactClass-spec', function() {
 
-  it('should throw if a reserved property is in statics', function() {
+  it('should throw if a reserved property is in statics', () => {
     expect(function() {
-      React.createClass({
+      createReactClass({
         statics: {
@@ -181,7 +175,7 @@ describe('ReactClass-spec', function() {
       });
-    }).toThrow(
+    }).toThrowError(
       'ReactClass: You are attempting to define a reserved property, ' +
-      '`getDefaultProps`, that shouldn\'t be on the "statics" key. Define ' +
-      'it as an instance property instead; it will still be accessible on ' +
-      'the constructor.'
+        '`getDefaultProps`, that shouldn\'t be on the "statics" key. Define ' +
+        'it as an instance property instead; it will still be accessible on ' +
+        'the constructor.',
     );
@@ -191,5 +185,5 @@ describe('ReactClass-spec', function() {
 
-  xit('should warn when using deprecated non-static spec keys', function() {
+  xit('should warn when using deprecated non-static spec keys', () => {
     spyOn(console, 'error');
-    React.createClass({
+    createReactClass({
       mixins: [{}],
@@ -208,18 +202,18 @@ describe('ReactClass-spec', function() {
     });
-    expect(console.error.argsForCall.length).toBe(4);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(4);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'createClass(...): `mixins` is now a static property and should ' +
-      'be defined inside "statics".'
+        'be defined inside "statics".',
     );
-    expect(console.error.argsForCall[1][0]).toBe(
+    expect(console.error.calls.argsFor(1)[0]).toBe(
       'createClass(...): `propTypes` is now a static property and should ' +
-      'be defined inside "statics".'
+        'be defined inside "statics".',
     );
-    expect(console.error.argsForCall[2][0]).toBe(
+    expect(console.error.calls.argsFor(2)[0]).toBe(
       'createClass(...): `contextTypes` is now a static property and ' +
-      'should be defined inside "statics".'
+        'should be defined inside "statics".',
     );
-    expect(console.error.argsForCall[3][0]).toBe(
+    expect(console.error.calls.argsFor(3)[0]).toBe(
       'createClass(...): `childContextTypes` is now a static property and ' +
-      'should be defined inside "statics".'
+        'should be defined inside "statics".',
     );
@@ -227,4 +221,4 @@ describe('ReactClass-spec', function() {
 
-  it('should support statics', function() {
-    var Component = React.createClass({
+  it('should support statics', () => {
+    var Component = createReactClass({
       statics: {
@@ -257,4 +251,4 @@ describe('ReactClass-spec', function() {
 
-  it('should work with object getInitialState() return values', function() {
-    var Component = React.createClass({
+  it('should work with object getInitialState() return values', () => {
+    var Component = createReactClass({
       getInitialState: function() {
@@ -273,4 +267,4 @@ describe('ReactClass-spec', function() {
 
-  it('renders based on context getInitialState', function() {
-    var Foo = React.createClass({
+  it('renders based on context getInitialState', () => {
+    var Foo = createReactClass({
       contextTypes: {
@@ -286,3 +280,3 @@ describe('ReactClass-spec', function() {
 
-    var Outer = React.createClass({
+    var Outer = createReactClass({
       childContextTypes: {
@@ -303,5 +297,5 @@ describe('ReactClass-spec', function() {
 
-  it('should throw with non-object getInitialState() return values', function() {
+  it('should throw with non-object getInitialState() return values', () => {
     [['an array'], 'a string', 1234].forEach(function(state) {
-      var Component = React.createClass({
+      var Component = createReactClass({
         getInitialState: function() {
@@ -316,4 +310,4 @@ describe('ReactClass-spec', function() {
         instance = ReactTestUtils.renderIntoDocument(instance);
-      }).toThrow(
-        'Component.getInitialState(): must return an object or null'
+      }).toThrowError(
+        'Component.getInitialState(): must return an object or null',
       );
@@ -322,4 +316,4 @@ describe('ReactClass-spec', function() {
 
-  it('should work with a null getInitialState() return value', function() {
-    var Component = React.createClass({
+  it('should work with a null getInitialState() return value', () => {
+    var Component = createReactClass({
       getInitialState: function() {
@@ -331,4 +325,4 @@ describe('ReactClass-spec', function() {
     });
-    expect(
-      () => ReactTestUtils.renderIntoDocument(<Component />)
+    expect(() =>
+      ReactTestUtils.renderIntoDocument(<Component />),
     ).not.toThrow();
@@ -336,5 +330,5 @@ describe('ReactClass-spec', function() {
 
-  it('should throw when using legacy factories', function() {
+  it('should throw when using legacy factories', () => {
     spyOn(console, 'error');
-    var Component = React.createClass({
+    var Component = createReactClass({
       render() {
@@ -345,6 +339,6 @@ describe('ReactClass-spec', function() {
     expect(() => Component()).toThrow();
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: Something is calling a React component directly. Use a ' +
-      'factory or JSX instead. See: https://fb.me/react-legacyfactory'
+        'factory or JSX instead. See: https://fb.me/react-legacyfactory',
     );
@@ -352,2 +346,81 @@ describe('ReactClass-spec', function() {
 
+  it('replaceState and callback works', () => {
+    var ops = [];
+    var Component = createReactClass({
+      getInitialState() {
+        return {step: 0};
+      },
+      render() {
+        ops.push('Render: ' + this.state.step);
+        return <div />;
+      },
+    });
+
+    var instance = ReactTestUtils.renderIntoDocument(<Component />);
+    instance.replaceState({step: 1}, () => {
+      ops.push('Callback: ' + instance.state.step);
+    });
+    expect(ops).toEqual(['Render: 0', 'Render: 1', 'Callback: 1']);
+  });
+
+  it('isMounted works', () => {
+    spyOn(console, 'error');
+
+    var ops = [];
+    var instance;
+    var Component = createReactClass({
+      displayName: 'MyComponent',
+      log(name) {
+        ops.push(`${name}: ${this.isMounted()}`);
+      },
+      getInitialState() {
+        this.log('getInitialState');
+        return {};
+      },
+      componentWillMount() {
+        this.log('componentWillMount');
+      },
+      componentDidMount() {
+        this.log('componentDidMount');
+      },
+      componentWillUpdate() {
+        this.log('componentWillUpdate');
+      },
+      componentDidUpdate() {
+        this.log('componentDidUpdate');
+      },
+      componentWillUnmount() {
+        this.log('componentWillUnmount');
+      },
+      render() {
+        instance = this;
+        this.log('render');
+        return <div />;
+      },
+    });
+
+    var container = document.createElement('div');
+    ReactDOM.render(<Component />, container);
+    ReactDOM.render(<Component />, container);
+    ReactDOM.unmountComponentAtNode(container);
+    instance.log('after unmount');
+    expect(ops).toEqual([
+      'getInitialState: false',
+      'componentWillMount: false',
+      'render: false',
+      'componentDidMount: true',
+      'componentWillUpdate: true',
+      'render: true',
+      'componentDidUpdate: true',
+      'componentWillUnmount: false',
+      'after unmount: false',
+    ]);
+
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toEqual(
+      'Warning: MyComponent: isMounted is deprecated. Instead, make sure to ' +
+        'clean up subscriptions and pending requests in componentWillUnmount ' +
+        'to prevent memory leaks.',
+    );
+  });
 });
diff --git a/src/isomorphic/classic/class/createClass.js b/src/isomorphic/classic/class/createClass.js
new file mode 100644
index 000000000..3791e5392
--- /dev/null
+++ b/src/isomorphic/classic/class/createClass.js
@@ -0,0 +1,19 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule createClass
+ */
+
+'use strict';
+
+var {Component} = require('ReactBaseClasses');
+var {isValidElement} = require('ReactElement');
+var ReactNoopUpdateQueue = require('ReactNoopUpdateQueue');
+var factory = require('create-react-class/factory');
+
+module.exports = factory(Component, isValidElement, ReactNoopUpdateQueue);
diff --git a/src/isomorphic/classic/element/ReactCurrentOwner.js b/src/isomorphic/classic/element/ReactCurrentOwner.js
index e47505f41..a095fe009 100644
--- a/src/isomorphic/classic/element/ReactCurrentOwner.js
+++ b/src/isomorphic/classic/element/ReactCurrentOwner.js
@@ -9,2 +9,3 @@
  * @providesModule ReactCurrentOwner
+ * @flow
  */
@@ -13,2 +14,4 @@
 
+import type {ReactInstance} from 'ReactInstanceType';
+
 /**
@@ -20,3 +23,2 @@
 var ReactCurrentOwner = {
-
   /**
@@ -25,4 +27,3 @@ var ReactCurrentOwner = {
    */
-  current: null,
-
+  current: (null: null | ReactInstance),
 };
diff --git a/src/isomorphic/classic/element/ReactDOMFactories.js b/src/isomorphic/classic/element/ReactDOMFactories.js
deleted file mode 100644
index 422aaae77..000000000
--- a/src/isomorphic/classic/element/ReactDOMFactories.js
+++ /dev/null
@@ -1,176 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @providesModule ReactDOMFactories
- */
-
-'use strict';
-
-var ReactElement = require('ReactElement');
-var ReactElementValidator = require('ReactElementValidator');
-
-var mapObject = require('mapObject');
-
-/**
- * Create a factory that creates HTML tag elements.
- *
- * @param {string} tag Tag name (e.g. `div`).
- * @private
- */
-function createDOMFactory(tag) {
-  if (__DEV__) {
-    return ReactElementValidator.createFactory(tag);
-  }
-  return ReactElement.createFactory(tag);
-}
-
-/**
- * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
- * This is also accessible via `React.DOM`.
- *
- * @public
- */
-var ReactDOMFactories = mapObject({
-  a: 'a',
-  abbr: 'abbr',
-  address: 'address',
-  area: 'area',
-  article: 'article',
-  aside: 'aside',
-  audio: 'audio',
-  b: 'b',
-  base: 'base',
-  bdi: 'bdi',
-  bdo: 'bdo',
-  big: 'big',
-  blockquote: 'blockquote',
-  body: 'body',
-  br: 'br',
-  button: 'button',
-  canvas: 'canvas',
-  caption: 'caption',
-  cite: 'cite',
-  code: 'code',
-  col: 'col',
-  colgroup: 'colgroup',
-  data: 'data',
-  datalist: 'datalist',
-  dd: 'dd',
-  del: 'del',
-  details: 'details',
-  dfn: 'dfn',
-  dialog: 'dialog',
-  div: 'div',
-  dl: 'dl',
-  dt: 'dt',
-  em: 'em',
-  embed: 'embed',
-  fieldset: 'fieldset',
-  figcaption: 'figcaption',
-  figure: 'figure',
-  footer: 'footer',
-  form: 'form',
-  h1: 'h1',
-  h2: 'h2',
-  h3: 'h3',
-  h4: 'h4',
-  h5: 'h5',
-  h6: 'h6',
-  head: 'head',
-  header: 'header',
-  hgroup: 'hgroup',
-  hr: 'hr',
-  html: 'html',
-  i: 'i',
-  iframe: 'iframe',
-  img: 'img',
-  input: 'input',
-  ins: 'ins',
-  kbd: 'kbd',
-  keygen: 'keygen',
-  label: 'label',
-  legend: 'legend',
-  li: 'li',
-  link: 'link',
-  main: 'main',
-  map: 'map',
-  mark: 'mark',
-  menu: 'menu',
-  menuitem: 'menuitem',
-  meta: 'meta',
-  meter: 'meter',
-  nav: 'nav',
-  noscript: 'noscript',
-  object: 'object',
-  ol: 'ol',
-  optgroup: 'optgroup',
-  option: 'option',
-  output: 'output',
-  p: 'p',
-  param: 'param',
-  picture: 'picture',
-  pre: 'pre',
-  progress: 'progress',
-  q: 'q',
-  rp: 'rp',
-  rt: 'rt',
-  ruby: 'ruby',
-  s: 's',
-  samp: 'samp',
-  script: 'script',
-  section: 'section',
-  select: 'select',
-  small: 'small',
-  source: 'source',
-  span: 'span',
-  strong: 'strong',
-  style: 'style',
-  sub: 'sub',
-  summary: 'summary',
-  sup: 'sup',
-  table: 'table',
-  tbody: 'tbody',
-  td: 'td',
-  textarea: 'textarea',
-  tfoot: 'tfoot',
-  th: 'th',
-  thead: 'thead',
-  time: 'time',
-  title: 'title',
-  tr: 'tr',
-  track: 'track',
-  u: 'u',
-  ul: 'ul',
-  'var': 'var',
-  video: 'video',
-  wbr: 'wbr',
-
-  // SVG
-  circle: 'circle',
-  clipPath: 'clipPath',
-  defs: 'defs',
-  ellipse: 'ellipse',
-  g: 'g',
-  image: 'image',
-  line: 'line',
-  linearGradient: 'linearGradient',
-  mask: 'mask',
-  path: 'path',
-  pattern: 'pattern',
-  polygon: 'polygon',
-  polyline: 'polyline',
-  radialGradient: 'radialGradient',
-  rect: 'rect',
-  stop: 'stop',
-  svg: 'svg',
-  text: 'text',
-  tspan: 'tspan',
-
-}, createDOMFactory);
-
-module.exports = ReactDOMFactories;
diff --git a/src/isomorphic/classic/element/ReactElement.js b/src/isomorphic/classic/element/ReactElement.js
index ee46a5f39..15ff17764 100644
--- a/src/isomorphic/classic/element/ReactElement.js
+++ b/src/isomorphic/classic/element/ReactElement.js
@@ -17,8 +17,5 @@ var warning = require('warning');
 var canDefineProperty = require('canDefineProperty');
+var hasOwnProperty = Object.prototype.hasOwnProperty;
 
-// The Symbol used to tag the ReactElement type. If there is no native Symbol
-// nor polyfill, then a plain number is used for performance.
-var REACT_ELEMENT_TYPE =
-  (typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element')) ||
-  0xeac7;
+var REACT_ELEMENT_TYPE = require('ReactElementSymbol');
 
@@ -33,2 +30,68 @@ var specialPropKeyWarningShown, specialPropRefWarningShown;
 
+function hasValidRef(config) {
+  if (__DEV__) {
+    if (hasOwnProperty.call(config, 'ref')) {
+      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
+      if (getter && getter.isReactWarning) {
+        return false;
+      }
+    }
+  }
+  return config.ref !== undefined;
+}
+
+function hasValidKey(config) {
+  if (__DEV__) {
+    if (hasOwnProperty.call(config, 'key')) {
+      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
+      if (getter && getter.isReactWarning) {
+        return false;
+      }
+    }
+  }
+  return config.key !== undefined;
+}
+
+function defineKeyPropWarningGetter(props, displayName) {
+  var warnAboutAccessingKey = function() {
+    if (!specialPropKeyWarningShown) {
+      specialPropKeyWarningShown = true;
+      warning(
+        false,
+        '%s: `key` is not a prop. Trying to access it will result ' +
+          'in `undefined` being returned. If you need to access the same ' +
+          'value within the child component, you should pass it as a different ' +
+          'prop. (https://fb.me/react-special-props)',
+        displayName,
+      );
+    }
+  };
+  warnAboutAccessingKey.isReactWarning = true;
+  Object.defineProperty(props, 'key', {
+    get: warnAboutAccessingKey,
+    configurable: true,
+  });
+}
+
+function defineRefPropWarningGetter(props, displayName) {
+  var warnAboutAccessingRef = function() {
+    if (!specialPropRefWarningShown) {
+      specialPropRefWarningShown = true;
+      warning(
+        false,
+        '%s: `ref` is not a prop. Trying to access it will result ' +
+          'in `undefined` being returned. If you need to access the same ' +
+          'value within the child component, you should pass it as a different ' +
+          'prop. (https://fb.me/react-special-props)',
+        displayName,
+      );
+    }
+  };
+  warnAboutAccessingRef.isReactWarning = true;
+  Object.defineProperty(props, 'ref', {
+    get: warnAboutAccessingRef,
+    configurable: true,
+  });
+}
+
 /**
@@ -115,2 +178,6 @@ var ReactElement = function(type, key, ref, self, source, owner, props) {
 
+/**
+ * Create and return a new ReactElement of the given type.
+ * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
+ */
 ReactElement.createElement = function(type, config, children) {
@@ -127,11 +194,9 @@ ReactElement.createElement = function(type, config, children) {
   if (config != null) {
-    if (__DEV__) {
-      ref = !config.hasOwnProperty('ref') ||
-        Object.getOwnPropertyDescriptor(config, 'ref').get ? null : config.ref;
-      key = !config.hasOwnProperty('key') ||
-        Object.getOwnPropertyDescriptor(config, 'key').get ? null : '' + config.key;
-    } else {
-      ref = config.ref === undefined ? null : config.ref;
-      key = config.key === undefined ? null : '' + config.key;
+    if (hasValidRef(config)) {
+      ref = config.ref;
     }
+    if (hasValidKey(config)) {
+      key = '' + config.key;
+    }
+
     self = config.__self === undefined ? null : config.__self;
@@ -140,4 +205,6 @@ ReactElement.createElement = function(type, config, children) {
     for (propName in config) {
-      if (config.hasOwnProperty(propName) &&
-          !RESERVED_PROPS.hasOwnProperty(propName)) {
+      if (
+        hasOwnProperty.call(config, propName) &&
+        !RESERVED_PROPS.hasOwnProperty(propName)
+      ) {
         props[propName] = config[propName];
@@ -157,2 +224,7 @@ ReactElement.createElement = function(type, config, children) {
     }
+    if (__DEV__) {
+      if (Object.freeze) {
+        Object.freeze(childArray);
+      }
+    }
     props.children = childArray;
@@ -170,43 +242,16 @@ ReactElement.createElement = function(type, config, children) {
   if (__DEV__) {
-    // Create dummy `key` and `ref` property to `props` to warn users
-    // against its use
-    if (typeof props.$$typeof === 'undefined' ||
-        props.$$typeof !== REACT_ELEMENT_TYPE) {
-      if (!props.hasOwnProperty('key')) {
-        Object.defineProperty(props, 'key', {
-          get: function() {
-            if (!specialPropKeyWarningShown) {
-              specialPropKeyWarningShown = true;
-              warning(
-                false,
-                '%s: `key` is not a prop. Trying to access it will result ' +
-                  'in `undefined` being returned. If you need to access the same ' +
-                  'value within the child component, you should pass it as a different ' +
-                  'prop. (https://fb.me/react-special-props)',
-                typeof type === 'function' && 'displayName' in type ? type.displayName : 'Element'
-              );
-            }
-            return undefined;
-          },
-          configurable: true,
-        });
-      }
-      if (!props.hasOwnProperty('ref')) {
-        Object.defineProperty(props, 'ref', {
-          get: function() {
-            if (!specialPropRefWarningShown) {
-              specialPropRefWarningShown = true;
-              warning(
-                false,
-                '%s: `ref` is not a prop. Trying to access it will result ' +
-                  'in `undefined` being returned. If you need to access the same ' +
-                  'value within the child component, you should pass it as a different ' +
-                  'prop. (https://fb.me/react-special-props)',
-                typeof type === 'function' && 'displayName' in type ? type.displayName : 'Element'
-              );
-            }
-            return undefined;
-          },
-          configurable: true,
-        });
+    if (key || ref) {
+      if (
+        typeof props.$$typeof === 'undefined' ||
+        props.$$typeof !== REACT_ELEMENT_TYPE
+      ) {
+        var displayName = typeof type === 'function'
+          ? type.displayName || type.name || 'Unknown'
+          : type;
+        if (key) {
+          defineKeyPropWarningGetter(props, displayName);
+        }
+        if (ref) {
+          defineRefPropWarningGetter(props, displayName);
+        }
       }
@@ -221,3 +266,3 @@ ReactElement.createElement = function(type, config, children) {
     ReactCurrentOwner.current,
-    props
+    props,
   );
@@ -225,2 +270,6 @@ ReactElement.createElement = function(type, config, children) {
 
+/**
+ * Return a function that produces ReactElements of a given type.
+ * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
+ */
 ReactElement.createFactory = function(type) {
@@ -244,3 +293,3 @@ ReactElement.cloneAndReplaceKey = function(oldElement, newKey) {
     oldElement._owner,
-    oldElement.props
+    oldElement.props,
   );
@@ -250,2 +299,6 @@ ReactElement.cloneAndReplaceKey = function(oldElement, newKey) {
 
+/**
+ * Clone and return a new ReactElement using element as the starting point.
+ * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
+ */
 ReactElement.cloneElement = function(element, config, children) {
@@ -270,3 +323,3 @@ ReactElement.cloneElement = function(element, config, children) {
   if (config != null) {
-    if (config.ref !== undefined) {
+    if (hasValidRef(config)) {
       // Silently steal the ref from the parent.
@@ -275,5 +328,6 @@ ReactElement.cloneElement = function(element, config, children) {
     }
-    if (config.key !== undefined) {
+    if (hasValidKey(config)) {
       key = '' + config.key;
     }
+
     // Remaining properties override existing props
@@ -284,4 +338,6 @@ ReactElement.cloneElement = function(element, config, children) {
     for (propName in config) {
-      if (config.hasOwnProperty(propName) &&
-          !RESERVED_PROPS.hasOwnProperty(propName)) {
+      if (
+        hasOwnProperty.call(config, propName) &&
+        !RESERVED_PROPS.hasOwnProperty(propName)
+      ) {
         if (config[propName] === undefined && defaultProps !== undefined) {
@@ -309,11 +365,3 @@ ReactElement.cloneElement = function(element, config, children) {
 
-  return ReactElement(
-    element.type,
-    key,
-    ref,
-    self,
-    source,
-    owner,
-    props
-  );
+  return ReactElement(element.type, key, ref, self, source, owner, props);
 };
@@ -321,2 +369,4 @@ ReactElement.cloneElement = function(element, config, children) {
 /**
+ * Verifies the object is a ReactElement.
+ * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
  * @param {?object} object
diff --git a/src/isomorphic/classic/element/ReactElementType.js b/src/isomorphic/classic/element/ReactElementType.js
new file mode 100644
index 000000000..a0d8427b1
--- /dev/null
+++ b/src/isomorphic/classic/element/ReactElementType.js
@@ -0,0 +1,37 @@
+/**
+ * Copyright 2016-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @flow
+ * @providesModule ReactElementType
+ */
+
+'use strict';
+
+import type {ReactInstance} from 'ReactInstanceType';
+
+export type Source = {
+  fileName: string,
+  lineNumber: number,
+};
+
+export type ReactElement = {
+  $$typeof: any,
+  type: any,
+  key: any,
+  ref: any,
+  props: any,
+  _owner: ReactInstance,
+
+  // __DEV__
+  _store: {
+    validated: boolean,
+  },
+  _self: ReactElement,
+  _shadowChildren: any,
+  _source: Source,
+};
diff --git a/src/isomorphic/classic/element/ReactElementValidator.js b/src/isomorphic/classic/element/ReactElementValidator.js
index 2051a212e..17f0332f8 100644
--- a/src/isomorphic/classic/element/ReactElementValidator.js
+++ b/src/isomorphic/classic/element/ReactElementValidator.js
@@ -20,6 +20,7 @@
 
-var ReactElement = require('ReactElement');
-var ReactPropTypeLocations = require('ReactPropTypeLocations');
-var ReactPropTypeLocationNames = require('ReactPropTypeLocationNames');
 var ReactCurrentOwner = require('ReactCurrentOwner');
+var ReactComponentTreeHook = require('ReactComponentTreeHook');
+var ReactElement = require('ReactElement');
+
+var checkReactTypeSpec = require('checkReactTypeSpec');
 
@@ -27,4 +28,4 @@ var canDefineProperty = require('canDefineProperty');
 var getIteratorFn = require('getIteratorFn');
-var invariant = require('invariant');
 var warning = require('warning');
+var lowPriorityWarning = require('lowPriorityWarning');
 
@@ -40,2 +41,16 @@ function getDeclarationErrorAddendum() {
 
+function getSourceInfoErrorAddendum(elementProps) {
+  if (
+    elementProps !== null &&
+    elementProps !== undefined &&
+    elementProps.__source !== undefined
+  ) {
+    var source = elementProps.__source;
+    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
+    var lineNumber = source.lineNumber;
+    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
+  }
+  return '';
+}
+
 /**
@@ -47,3 +62,15 @@ var ownerHasKeyUseWarning = {};
 
-var loggedTypeFailures = {};
+function getCurrentComponentErrorInfo(parentType) {
+  var info = getDeclarationErrorAddendum();
+
+  if (!info) {
+    var parentName = typeof parentType === 'string'
+      ? parentType
+      : parentType.displayName || parentType.name;
+    if (parentName) {
+      info = ` Check the top-level render call using <${parentName}>.`;
+    }
+  }
+  return info;
+}
 
@@ -53,3 +80,4 @@ var loggedTypeFailures = {};
  * reordered. All children that haven't already been validated are required to
- * have a "key" property assigned to it.
+ * have a "key" property assigned to it. Error statuses are cached so a warning
+ * will only be shown once.
  *
@@ -65,50 +93,10 @@ function validateExplicitKey(element, parentType) {
 
-  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
-  if (addenda === null) {
-    // we already showed the warning
-    return;
-  }
-  warning(
-    false,
-    'Each child in an array or iterator should have a unique "key" prop.' +
-    '%s%s%s',
-    addenda.parentOrOwner || '',
-    addenda.childOwner || '',
-    addenda.url || ''
-  );
-}
-
-/**
- * Shared warning and monitoring code for the key warnings.
- *
- * @internal
- * @param {string} messageType A key used for de-duping warnings.
- * @param {ReactElement} element Component that requires a key.
- * @param {*} parentType element's parent's type.
- * @returns {?object} A set of addenda to use in the warning message, or null
- * if the warning has already been shown before (and shouldn't be shown again).
- */
-function getAddendaForKeyUse(messageType, element, parentType) {
-  var addendum = getDeclarationErrorAddendum();
-  if (!addendum) {
-    var parentName = typeof parentType === 'string' ?
-      parentType : parentType.displayName || parentType.name;
-    if (parentName) {
-      addendum = ` Check the top-level render call using <${parentName}>.`;
-    }
-  }
+  var memoizer =
+    ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});
 
-  var memoizer = ownerHasKeyUseWarning[messageType] || (
-    ownerHasKeyUseWarning[messageType] = {}
-  );
-  if (memoizer[addendum]) {
-    return null;
+  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
+  if (memoizer[currentComponentErrorInfo]) {
+    return;
   }
-  memoizer[addendum] = true;
-
-  var addenda = {
-    parentOrOwner: addendum,
-    url: ' See https://fb.me/react-warning-keys for more information.',
-    childOwner: null,
-  };
+  memoizer[currentComponentErrorInfo] = true;
 
@@ -117,11 +105,20 @@ function getAddendaForKeyUse(messageType, element, parentType) {
   // assigning it a key.
-  if (element &&
-      element._owner &&
-      element._owner !== ReactCurrentOwner.current) {
+  var childOwner = '';
+  if (
+    element &&
+    element._owner &&
+    element._owner !== ReactCurrentOwner.current
+  ) {
     // Give the component that originally created this child.
-    addenda.childOwner =
-      ` It was passed a child from ${element._owner.getName()}.`;
+    childOwner = ` It was passed a child from ${element._owner.getName()}.`;
   }
 
-  return addenda;
+  warning(
+    false,
+    'Each child in an array or iterator should have a unique "key" prop.' +
+      '%s%s See https://fb.me/react-warning-keys for more information.%s',
+    currentComponentErrorInfo,
+    childOwner,
+    ReactComponentTreeHook.getCurrentStackAddendum(element),
+  );
 }
@@ -170,57 +167,2 @@ function validateChildKeys(node, parentType) {
 
-/**
- * Assert that the props are valid
- *
- * @param {string} componentName Name of the component for error messages.
- * @param {object} propTypes Map of prop name to a ReactPropType
- * @param {object} props
- * @param {string} location e.g. "prop", "context", "child context"
- * @private
- */
-function checkPropTypes(componentName, propTypes, props, location) {
-  for (var propName in propTypes) {
-    if (propTypes.hasOwnProperty(propName)) {
-      var error;
-      // Prop type validation may throw. In case they do, we don't want to
-      // fail the render phase where it didn't fail before. So we log it.
-      // After these have been cleaned up, we'll let them throw.
-      try {
-        // This is intentionally an invariant that gets caught. It's the same
-        // behavior as without this statement except with a better message.
-        invariant(
-          typeof propTypes[propName] === 'function',
-          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
-          'React.PropTypes.',
-          componentName || 'React class',
-          ReactPropTypeLocationNames[location],
-          propName
-        );
-        error = propTypes[propName](props, propName, componentName, location);
-      } catch (ex) {
-        error = ex;
-      }
-      warning(
-        !error || error instanceof Error,
-        '%s: type specification of %s `%s` is invalid; the type checker ' +
-        'function must return `null` or an `Error` but returned a %s. ' +
-        'You may have forgotten to pass an argument to the type checker ' +
-        'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
-        'shape all require an argument).',
-        componentName || 'React class',
-        ReactPropTypeLocationNames[location],
-        propName,
-        typeof error
-      );
-      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
-        // Only monitor this failure once because there tends to be a lot of the
-        // same error.
-        loggedTypeFailures[error.message] = true;
-
-        var addendum = getDeclarationErrorAddendum();
-        warning(false, 'Failed propType: %s%s', error.message, addendum);
-      }
-    }
-  }
-}
-
 /**
@@ -238,7 +180,9 @@ function validatePropTypes(element) {
   if (componentClass.propTypes) {
-    checkPropTypes(
-      name,
+    checkReactTypeSpec(
       componentClass.propTypes,
       element.props,
-      ReactPropTypeLocations.prop
+      'prop',
+      name,
+      element,
+      null,
     );
@@ -249,3 +193,3 @@ function validatePropTypes(element) {
       'getDefaultProps is only used on classic React.createClass ' +
-      'definitions. Use a static property named `defaultProps` instead.'
+        'definitions. Use a static property named `defaultProps` instead.',
     );
@@ -255,3 +199,2 @@ function validatePropTypes(element) {
 var ReactElementValidator = {
-
   createElement: function(type, props, children) {
@@ -260,9 +203,42 @@ var ReactElementValidator = {
     // succeed and there will likely be errors in render.
-    warning(
-      validType,
-      'React.createElement: type should not be null, undefined, boolean, or ' +
-        'number. It should be a string (for DOM elements) or a ReactClass ' +
-        '(for composite components).%s',
-      getDeclarationErrorAddendum()
-    );
+    if (!validType) {
+      if (typeof type !== 'function' && typeof type !== 'string') {
+        var info = '';
+        if (
+          type === undefined ||
+          (typeof type === 'object' &&
+            type !== null &&
+            Object.keys(type).length === 0)
+        ) {
+          info +=
+            ' You likely forgot to export your component from the file ' +
+            "it's defined in.";
+        }
+
+        var sourceInfo = getSourceInfoErrorAddendum(props);
+        if (sourceInfo) {
+          info += sourceInfo;
+        } else {
+          info += getDeclarationErrorAddendum();
+        }
+
+        info += ReactComponentTreeHook.getCurrentStackAddendum();
+
+        var currentSource = props !== null &&
+          props !== undefined &&
+          props.__source !== undefined
+          ? props.__source
+          : null;
+        ReactComponentTreeHook.pushNonStandardWarningStack(true, currentSource);
+        warning(
+          false,
+          'React.createElement: type is invalid -- expected a string (for ' +
+            'built-in components) or a class/function (for composite ' +
+            'components) but got: %s.%s',
+          type == null ? type : typeof type,
+          info,
+        );
+        ReactComponentTreeHook.popNonStandardWarningStack();
+      }
+    }
 
@@ -293,6 +269,3 @@ var ReactElementValidator = {
   createFactory: function(type) {
-    var validatedFactory = ReactElementValidator.createElement.bind(
-      null,
-      type
-    );
+    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
     // Legacy hook TODO: Warn if this is accessed
@@ -302,20 +275,16 @@ var ReactElementValidator = {
       if (canDefineProperty) {
-        Object.defineProperty(
-          validatedFactory,
-          'type',
-          {
-            enumerable: false,
-            get: function() {
-              warning(
-                false,
-                'Factory.type is deprecated. Access the class directly ' +
-                'before passing it to createFactory.'
-              );
-              Object.defineProperty(this, 'type', {
-                value: type,
-              });
-              return type;
-            },
-          }
-        );
+        Object.defineProperty(validatedFactory, 'type', {
+          enumerable: false,
+          get: function() {
+            lowPriorityWarning(
+              false,
+              'Factory.type is deprecated. Access the class directly ' +
+                'before passing it to createFactory.',
+            );
+            Object.defineProperty(this, 'type', {
+              value: type,
+            });
+            return type;
+          },
+        });
       }
@@ -323,3 +292,2 @@ var ReactElementValidator = {
 
-
     return validatedFactory;
@@ -335,3 +303,2 @@ var ReactElementValidator = {
   },
-
 };
diff --git a/src/isomorphic/classic/element/__tests__/ReactElement-test.js b/src/isomorphic/classic/element/__tests__/ReactElement-test.js
index 402c9b95e..de83b4e91 100644
--- a/src/isomorphic/classic/element/__tests__/ReactElement-test.js
+++ b/src/isomorphic/classic/element/__tests__/ReactElement-test.js
@@ -17,3 +17,3 @@ var ReactTestUtils;
 
-describe('ReactElement', function() {
+describe('ReactElement', () => {
   var ComponentClass;
@@ -21,3 +21,3 @@ describe('ReactElement', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -34,10 +34,10 @@ describe('ReactElement', function() {
     // classic JS without JSX.
-    ComponentClass = React.createClass({
-      render: function() {
+    ComponentClass = class extends React.Component {
+      render() {
         return React.createElement('div');
-      },
-    });
+      }
+    };
   });
 
-  afterEach(function() {
+  afterEach(() => {
     global.Symbol = originalSymbol;
@@ -45,3 +45,3 @@ describe('ReactElement', function() {
 
-  it('uses the fallback value when in an environment without Symbol', function() {
+  it('uses the fallback value when in an environment without Symbol', () => {
     expect(<div />.$$typeof).toBe(0xeac7);
@@ -49,3 +49,3 @@ describe('ReactElement', function() {
 
-  it('returns a complete element according to spec', function() {
+  it('returns a complete element according to spec', () => {
     var element = React.createFactory(ComponentClass)();
@@ -54,17 +54,17 @@ describe('ReactElement', function() {
     expect(element.ref).toBe(null);
-    var expectation = {};
-    Object.freeze(expectation);
-    expect(element.props).toEqual(expectation);
+    expect(Object.isFrozen(element)).toBe(true);
+    expect(Object.isFrozen(element.props)).toBe(true);
+    expect(element.props).toEqual({});
   });
 
-  it('should warn when `key` is being accessed', function() {
+  it('should warn when `key` is being accessed on composite element', () => {
     spyOn(console, 'error');
     var container = document.createElement('div');
-    var Child = React.createClass({
-      render: function() {
+    class Child extends React.Component {
+      render() {
         return <div> {this.props.key} </div>;
-      },
-    });
-    var Parent = React.createClass({
-      render: function() {
+      }
+    }
+    class Parent extends React.Component {
+      render() {
         return (
@@ -76,12 +76,26 @@ describe('ReactElement', function() {
         );
-      },
-    });
-    expect(console.error.calls.length).toBe(0);
+      }
+    }
+    expect(console.error.calls.count()).toBe(0);
     ReactDOM.render(<Parent />, container);
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'Child: `key` is not a prop. Trying to access it will result ' +
-      'in `undefined` being returned. If you need to access the same ' +
-      'value within the child component, you should pass it as a different ' +
-      'prop. (https://fb.me/react-special-props)'
+        'in `undefined` being returned. If you need to access the same ' +
+        'value within the child component, you should pass it as a different ' +
+        'prop. (https://fb.me/react-special-props)',
+    );
+  });
+
+  it('should warn when `key` is being accessed on a host element', () => {
+    spyOn(console, 'error');
+    var element = <div key="3" />;
+    expect(console.error.calls.count()).toBe(0);
+    void element.props.key;
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'div: `key` is not a prop. Trying to access it will result ' +
+        'in `undefined` being returned. If you need to access the same ' +
+        'value within the child component, you should pass it as a different ' +
+        'prop. (https://fb.me/react-special-props)',
     );
@@ -89,12 +103,12 @@ describe('ReactElement', function() {
 
-  it('should warn when `ref` is being accessed', function() {
+  it('should warn when `ref` is being accessed', () => {
     spyOn(console, 'error');
     var container = document.createElement('div');
-    var Child = React.createClass({
-      render: function() {
+    class Child extends React.Component {
+      render() {
         return <div> {this.props.ref} </div>;
-      },
-    });
-    var Parent = React.createClass({
-      render: function() {
+      }
+    }
+    class Parent extends React.Component {
+      render() {
         return (
@@ -104,12 +118,12 @@ describe('ReactElement', function() {
         );
-      },
-    });
-    expect(console.error.calls.length).toBe(0);
+      }
+    }
+    expect(console.error.calls.count()).toBe(0);
     ReactDOM.render(<Parent />, container);
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'Child: `ref` is not a prop. Trying to access it will result ' +
-      'in `undefined` being returned. If you need to access the same ' +
-      'value within the child component, you should pass it as a different ' +
-      'prop. (https://fb.me/react-special-props)'
+        'in `undefined` being returned. If you need to access the same ' +
+        'value within the child component, you should pass it as a different ' +
+        'prop. (https://fb.me/react-special-props)',
     );
@@ -117,3 +131,3 @@ describe('ReactElement', function() {
 
-  it('allows a string to be passed as the type', function() {
+  it('allows a string to be passed as the type', () => {
     var element = React.createFactory('div')();
@@ -122,13 +136,13 @@ describe('ReactElement', function() {
     expect(element.ref).toBe(null);
-    var expectation = {};
-    Object.freeze(expectation);
-    expect(element.props).toEqual(expectation);
+    expect(Object.isFrozen(element)).toBe(true);
+    expect(Object.isFrozen(element.props)).toBe(true);
+    expect(element.props).toEqual({});
   });
 
-  it('returns an immutable element', function() {
+  it('returns an immutable element', () => {
     var element = React.createFactory(ComponentClass)();
-    expect(() => element.type = 'div').toThrow();
+    expect(() => (element.type = 'div')).toThrow();
   });
 
-  it('does not reuse the original config object', function() {
+  it('does not reuse the original config object', () => {
     var config = {foo: 1};
@@ -140,3 +154,9 @@ describe('ReactElement', function() {
 
-  it('extracts key and ref from the config', function() {
+  it('does not fail if config has no prototype', () => {
+    var config = Object.create(null, {foo: {value: 1, enumerable: true}});
+    var element = React.createFactory(ComponentClass)(config);
+    expect(element.props.foo).toBe(1);
+  });
+
+  it('extracts key and ref from the config', () => {
     var element = React.createFactory(ComponentClass)({
@@ -149,8 +169,44 @@ describe('ReactElement', function() {
     expect(element.ref).toBe('34');
-    var expectation = {foo:'56'};
-    Object.freeze(expectation);
-    expect(element.props).toEqual(expectation);
+    expect(Object.isFrozen(element)).toBe(true);
+    expect(Object.isFrozen(element.props)).toBe(true);
+    expect(element.props).toEqual({foo: '56'});
   });
 
-  it('coerces the key to a string', function() {
+  it('extracts null key and ref', () => {
+    var element = React.createFactory(ComponentClass)({
+      key: null,
+      ref: null,
+      foo: '12',
+    });
+    expect(element.type).toBe(ComponentClass);
+    expect(element.key).toBe('null');
+    expect(element.ref).toBe(null);
+    expect(Object.isFrozen(element)).toBe(true);
+    expect(Object.isFrozen(element.props)).toBe(true);
+    expect(element.props).toEqual({foo: '12'});
+  });
+
+  it('ignores undefined key and ref', () => {
+    var props = {
+      foo: '56',
+      key: undefined,
+      ref: undefined,
+    };
+    var element = React.createFactory(ComponentClass)(props);
+    expect(element.type).toBe(ComponentClass);
+    expect(element.key).toBe(null);
+    expect(element.ref).toBe(null);
+    expect(Object.isFrozen(element)).toBe(true);
+    expect(Object.isFrozen(element.props)).toBe(true);
+    expect(element.props).toEqual({foo: '56'});
+  });
+
+  it('ignores key and ref warning getters', () => {
+    var elementA = React.createElement('div');
+    var elementB = React.createElement('div', elementA.props);
+    expect(elementB.key).toBe(null);
+    expect(elementB.ref).toBe(null);
+  });
+
+  it('coerces the key to a string', () => {
     var element = React.createFactory(ComponentClass)({
@@ -162,8 +218,8 @@ describe('ReactElement', function() {
     expect(element.ref).toBe(null);
-    var expectation = {foo:'56'};
-    Object.freeze(expectation);
-    expect(element.props).toEqual(expectation);
+    expect(Object.isFrozen(element)).toBe(true);
+    expect(Object.isFrozen(element.props)).toBe(true);
+    expect(element.props).toEqual({foo: '56'});
   });
 
-  it('preserves the owner on the element', function() {
+  it('preserves the owner on the element', () => {
     var Component = React.createFactory(ComponentClass);
@@ -171,11 +227,11 @@ describe('ReactElement', function() {
 
-    var Wrapper = React.createClass({
-      render: function() {
+    class Wrapper extends React.Component {
+      render() {
         element = Component();
         return element;
-      },
-    });
+      }
+    }
 
     var instance = ReactTestUtils.renderIntoDocument(
-      React.createElement(Wrapper)
+      React.createElement(Wrapper),
     );
@@ -185,13 +241,16 @@ describe('ReactElement', function() {
 
-  it('merges an additional argument onto the children prop', function() {
+  it('merges an additional argument onto the children prop', () => {
     spyOn(console, 'error');
     var a = 1;
-    var element = React.createFactory(ComponentClass)({
-      children: 'text',
-    }, a);
+    var element = React.createFactory(ComponentClass)(
+      {
+        children: 'text',
+      },
+      a,
+    );
     expect(element.props.children).toBe(a);
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('does not override children if no rest args are provided', function() {
+  it('does not override children if no rest args are provided', () => {
     spyOn(console, 'error');
@@ -201,15 +260,18 @@ describe('ReactElement', function() {
     expect(element.props.children).toBe('text');
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('overrides children if null is provided as an argument', function() {
+  it('overrides children if null is provided as an argument', () => {
     spyOn(console, 'error');
-    var element = React.createFactory(ComponentClass)({
-      children: 'text',
-    }, null);
+    var element = React.createFactory(ComponentClass)(
+      {
+        children: 'text',
+      },
+      null,
+    );
     expect(element.props.children).toBe(null);
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('merges rest arguments onto the children prop in an array', function() {
+  it('merges rest arguments onto the children prop in an array', () => {
     spyOn(console, 'error');
@@ -220,3 +282,3 @@ describe('ReactElement', function() {
     expect(element.props.children).toEqual([1, 2, 3]);
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
@@ -225,18 +287,11 @@ describe('ReactElement', function() {
   // classic JS without JSX.
-  it('allows static methods to be called using the type property', function() {
+  it('allows static methods to be called using the type property', () => {
     spyOn(console, 'error');
 
-    var StaticMethodComponentClass = React.createClass({
-      statics: {
-        someStaticMethod: function() {
-          return 'someReturnValue';
-        },
-      },
-      getInitialState: function() {
-        return {valueToReturn: 'hi'};
-      },
-      render: function() {
+    class StaticMethodComponentClass extends React.Component {
+      render() {
         return React.createElement('div');
-      },
-    });
+      }
+    }
+    StaticMethodComponentClass.someStaticMethod = () => 'someReturnValue';
 
@@ -244,3 +299,3 @@ describe('ReactElement', function() {
     expect(element.type.someStaticMethod()).toBe('someReturnValue');
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
@@ -249,13 +304,11 @@ describe('ReactElement', function() {
   // classic JS without JSX.
-  it('identifies valid elements', function() {
-    var Component = React.createClass({
-      render: function() {
+  it('identifies valid elements', () => {
+    class Component extends React.Component {
+      render() {
         return React.createElement('div');
-      },
-    });
+      }
+    }
 
-    expect(React.isValidElement(React.createElement('div')))
-      .toEqual(true);
-    expect(React.isValidElement(React.createElement(Component)))
-      .toEqual(true);
+    expect(React.isValidElement(React.createElement('div'))).toEqual(true);
+    expect(React.isValidElement(React.createElement(Component))).toEqual(true);
 
@@ -265,5 +318,5 @@ describe('ReactElement', function() {
     expect(React.isValidElement('string')).toEqual(false);
-    expect(React.isValidElement(React.DOM.div)).toEqual(false);
+    expect(React.isValidElement(React.createFactory('div'))).toEqual(false);
     expect(React.isValidElement(Component)).toEqual(false);
-    expect(React.isValidElement({ type: 'div', props: {} })).toEqual(false);
+    expect(React.isValidElement({type: 'div', props: {}})).toEqual(false);
 
@@ -273,20 +326,5 @@ describe('ReactElement', function() {
 
-  it('allows the use of PropTypes validators in statics', function() {
-    // TODO: This test was added to cover a special case where we proxied
-    // methods. However, we don't do that any more so this test can probably
-    // be removed. Leaving it in classic as a safety precaution.
-    var Component = React.createClass({
-      render: () => null,
-      statics: {
-        specialType: React.PropTypes.shape({monkey: React.PropTypes.any}),
-      },
-    });
-
-    expect(typeof Component.specialType).toBe('function');
-    expect(typeof Component.specialType.isRequired).toBe('function');
-  });
-
   // NOTE: We're explicitly not using JSX here. This is intended to test
   // classic JS without JSX.
-  it('is indistinguishable from a plain object', function() {
+  it('is indistinguishable from a plain object', () => {
     var element = React.createElement('div', {className: 'foo'});
@@ -298,11 +336,9 @@ describe('ReactElement', function() {
   // classic JS without JSX.
-  it('should use default prop value when removing a prop', function() {
-    var Component = React.createClass({
-      getDefaultProps: function() {
-        return {fruit: 'persimmon'};
-      },
-      render: function() {
+  it('should use default prop value when removing a prop', () => {
+    class Component extends React.Component {
+      render() {
         return React.createElement('span');
-      },
-    });
+      }
+    }
+    Component.defaultProps = {fruit: 'persimmon'};
 
@@ -311,3 +347,3 @@ describe('ReactElement', function() {
       React.createElement(Component, {fruit: 'mango'}),
-      container
+      container,
     );
@@ -321,14 +357,12 @@ describe('ReactElement', function() {
   // classic JS without JSX.
-  it('should normalize props with default values', function() {
-    var Component = React.createClass({
-      getDefaultProps: function() {
-        return {prop: 'testKey'};
-      },
-      render: function() {
+  it('should normalize props with default values', () => {
+    class Component extends React.Component {
+      render() {
         return React.createElement('span', null, this.props.prop);
-      },
-    });
+      }
+    }
+    Component.defaultProps = {prop: 'testKey'};
 
     var instance = ReactTestUtils.renderIntoDocument(
-      React.createElement(Component)
+      React.createElement(Component),
     );
@@ -337,3 +371,3 @@ describe('ReactElement', function() {
     var inst2 = ReactTestUtils.renderIntoDocument(
-      React.createElement(Component, {prop: null})
+      React.createElement(Component, {prop: null}),
     );
@@ -342,28 +376,5 @@ describe('ReactElement', function() {
 
-  it('should normalize props with default values in cloning', function() {
-    var Component = React.createClass({
-      getDefaultProps: function() {
-        return {prop: 'testKey'};
-      },
-      render: function() {
-        return <span />;
-      },
-    });
-
-    var instance = React.createElement(Component);
-    var clonedInstance = React.cloneElement(instance, {prop: undefined});
-    expect(clonedInstance.props.prop).toBe('testKey');
-    var clonedInstance2 = React.cloneElement(instance, {prop: null});
-    expect(clonedInstance2.props.prop).toBe(null);
-
-    var instance2 = React.createElement(Component, {prop: 'newTestKey'});
-    var cloneInstance3 = React.cloneElement(instance2, {prop: undefined});
-    expect(cloneInstance3.props.prop).toBe('testKey');
-    var cloneInstance4 = React.cloneElement(instance2, {});
-    expect(cloneInstance4.props.prop).toBe('newTestKey');
-  });
-
-  it('throws when changing a prop (in dev) after element creation', function() {
-    var Outer = React.createClass({
-      render: function() {
+  it('throws when changing a prop (in dev) after element creation', () => {
+    class Outer extends React.Component {
+      render() {
         var el = <div className="moo" />;
@@ -376,4 +387,4 @@ describe('ReactElement', function() {
         return el;
-      },
-    });
+      }
+    }
     var outer = ReactTestUtils.renderIntoDocument(<Outer color="orange" />);
@@ -382,7 +393,6 @@ describe('ReactElement', function() {
 
-  it('throws when adding a prop (in dev) after element creation', function() {
+  it('throws when adding a prop (in dev) after element creation', () => {
     var container = document.createElement('div');
-    var Outer = React.createClass({
-      getDefaultProps: () => ({sound: 'meow'}),
-      render: function() {
+    class Outer extends React.Component {
+      render() {
         var el = <div>{this.props.sound}</div>;
@@ -396,4 +406,5 @@ describe('ReactElement', function() {
         return el;
-      },
-    });
+      }
+    }
+    Outer.defaultProps = {sound: 'meow'};
     var outer = ReactDOM.render(<Outer />, container);
@@ -403,12 +414,12 @@ describe('ReactElement', function() {
 
-  it('does not warn for NaN props', function() {
+  it('does not warn for NaN props', () => {
     spyOn(console, 'error');
-    var Test = React.createClass({
-      render: function() {
+    class Test extends React.Component {
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
     var test = ReactTestUtils.renderIntoDocument(<Test value={+undefined} />);
     expect(test.props.value).toBeNaN();
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
@@ -417,3 +428,3 @@ describe('ReactElement', function() {
   // classic JS without JSX.
-  it('identifies elements, but not JSON, if Symbols are supported', function() {
+  it('identifies elements, but not JSON, if Symbols are supported', () => {
     // Rudimentary polyfill
@@ -437,12 +448,10 @@ describe('ReactElement', function() {
 
-    var Component = React.createClass({
-      render: function() {
+    class Component extends React.Component {
+      render() {
         return React.createElement('div');
-      },
-    });
+      }
+    }
 
-    expect(React.isValidElement(React.createElement('div')))
-      .toEqual(true);
-    expect(React.isValidElement(React.createElement(Component)))
-      .toEqual(true);
+    expect(React.isValidElement(React.createElement('div'))).toEqual(true);
+    expect(React.isValidElement(React.createElement(Component))).toEqual(true);
 
@@ -452,5 +461,5 @@ describe('ReactElement', function() {
     expect(React.isValidElement('string')).toEqual(false);
-    expect(React.isValidElement(React.DOM.div)).toEqual(false);
+    expect(React.isValidElement(React.createFactory('div'))).toEqual(false);
     expect(React.isValidElement(Component)).toEqual(false);
-    expect(React.isValidElement({ type: 'div', props: {} })).toEqual(false);
+    expect(React.isValidElement({type: 'div', props: {}})).toEqual(false);
 
@@ -459,9 +468,8 @@ describe('ReactElement', function() {
   });
-
 });
 
-describe('comparing jsx vs .createFactory() vs .createElement()', function() {
+describe('comparing jsx vs .createFactory() vs .createElement()', () => {
   var Child;
 
-  beforeEach(function() {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -473,8 +481,7 @@ describe('comparing jsx vs .createFactory() vs .createElement()', function() {
 
-
-  describe('when using jsx only', function() {
+  describe('when using jsx only', () => {
     var Parent, instance;
-    beforeEach(function() {
-      Parent = React.createClass({
-        render: function() {
+    beforeEach(() => {
+      Parent = class extends React.Component {
+        render() {
           return (
@@ -484,9 +491,12 @@ describe('comparing jsx vs .createFactory() vs .createElement()', function() {
           );
-        },
-      });
-      instance = ReactTestUtils.renderIntoDocument(<Parent/>);
+        }
+      };
+      instance = ReactTestUtils.renderIntoDocument(<Parent />);
     });
 
-    it('should scry children but cannot', function() {
-      var children = ReactTestUtils.scryRenderedComponentsWithType(instance, Child);
+    it('should scry children but cannot', () => {
+      var children = ReactTestUtils.scryRenderedComponentsWithType(
+        instance,
+        Child,
+      );
       expect(children.length).toBe(1);
@@ -494,3 +504,3 @@ describe('comparing jsx vs .createFactory() vs .createElement()', function() {
 
-    it('does not maintain refs', function() {
+    it('does not maintain refs', () => {
       expect(instance.refs.child).not.toBeUndefined();
@@ -498,4 +508,7 @@ describe('comparing jsx vs .createFactory() vs .createElement()', function() {
 
-    it('can capture Child instantiation calls', function() {
-      expect(Child.mock.calls[0][0]).toEqual({ foo: 'foo value', children: 'children value' });
+    it('can capture Child instantiation calls', () => {
+      expect(Child.mock.calls[0][0]).toEqual({
+        foo: 'foo value',
+        children: 'children value',
+      });
     });
@@ -503,11 +516,15 @@ describe('comparing jsx vs .createFactory() vs .createElement()', function() {
 
-  describe('when using parent that uses .createFactory()', function() {
+  describe('when using parent that uses .createFactory()', () => {
     var factory, instance;
-    beforeEach(function() {
+    beforeEach(() => {
       var childFactory = React.createFactory(Child);
-      var Parent = React.createClass({
-        render: function() {
-          return React.DOM.div({}, childFactory({ ref: 'child', foo: 'foo value' }, 'children value'));
-        },
-      });
+      class Parent extends React.Component {
+        render() {
+          return React.createElement(
+            'div',
+            {},
+            childFactory({ref: 'child', foo: 'foo value'}, 'children value'),
+          );
+        }
+      }
       factory = React.createFactory(Parent);
@@ -516,4 +533,7 @@ describe('comparing jsx vs .createFactory() vs .createElement()', function() {
 
-    it('can properly scry children', function() {
-      var children = ReactTestUtils.scryRenderedComponentsWithType(instance, Child);
+    it('can properly scry children', () => {
+      var children = ReactTestUtils.scryRenderedComponentsWithType(
+        instance,
+        Child,
+      );
       expect(children.length).toBe(1);
@@ -521,3 +541,3 @@ describe('comparing jsx vs .createFactory() vs .createElement()', function() {
 
-    it('does not maintain refs', function() {
+    it('does not maintain refs', () => {
       expect(instance.refs.child).not.toBeUndefined();
@@ -525,4 +545,7 @@ describe('comparing jsx vs .createFactory() vs .createElement()', function() {
 
-    it('can capture Child instantiation calls', function() {
-      expect(Child.mock.calls[0][0]).toEqual({ foo: 'foo value', children: 'children value' });
+    it('can capture Child instantiation calls', () => {
+      expect(Child.mock.calls[0][0]).toEqual({
+        foo: 'foo value',
+        children: 'children value',
+      });
     });
@@ -530,10 +553,18 @@ describe('comparing jsx vs .createFactory() vs .createElement()', function() {
 
-  describe('when using parent that uses .createElement()', function() {
+  describe('when using parent that uses .createElement()', () => {
     var factory, instance;
-    beforeEach(function() {
-      var Parent = React.createClass({
-        render: function() {
-          return React.DOM.div({}, React.createElement(Child, { ref: 'child', foo: 'foo value' }, 'children value'));
-        },
-      });
+    beforeEach(() => {
+      class Parent extends React.Component {
+        render() {
+          return React.createElement(
+            'div',
+            {},
+            React.createElement(
+              Child,
+              {ref: 'child', foo: 'foo value'},
+              'children value',
+            ),
+          );
+        }
+      }
       factory = React.createFactory(Parent);
@@ -542,4 +573,7 @@ describe('comparing jsx vs .createFactory() vs .createElement()', function() {
 
-    it('should scry children but cannot', function() {
-      var children = ReactTestUtils.scryRenderedComponentsWithType(instance, Child);
+    it('should scry children but cannot', () => {
+      var children = ReactTestUtils.scryRenderedComponentsWithType(
+        instance,
+        Child,
+      );
       expect(children.length).toBe(1);
@@ -547,3 +581,3 @@ describe('comparing jsx vs .createFactory() vs .createElement()', function() {
 
-    it('does not maintain refs', function() {
+    it('does not maintain refs', () => {
       expect(instance.refs.child).not.toBeUndefined();
@@ -551,4 +585,7 @@ describe('comparing jsx vs .createFactory() vs .createElement()', function() {
 
-    it('can capture Child instantiation calls', function() {
-      expect(Child.mock.calls[0][0]).toEqual({ foo: 'foo value', children: 'children value' });
+    it('can capture Child instantiation calls', () => {
+      expect(Child.mock.calls[0][0]).toEqual({
+        foo: 'foo value',
+        children: 'children value',
+      });
     });
diff --git a/src/isomorphic/classic/element/__tests__/ReactElementClone-test.js b/src/isomorphic/classic/element/__tests__/ReactElementClone-test.js
index f4c5b4b76..a29bdff98 100644
--- a/src/isomorphic/classic/element/__tests__/ReactElementClone-test.js
+++ b/src/isomorphic/classic/element/__tests__/ReactElementClone-test.js
@@ -13,2 +13,3 @@
 
+var PropTypes;
 var React;
@@ -17,5 +18,6 @@ var ReactTestUtils;
 
-describe('ReactElementClone', function() {
+describe('ReactElementClone', () => {
+  var ComponentClass;
 
-  beforeEach(function() {
+  beforeEach(() => {
     React = require('React');
@@ -23,19 +25,28 @@ describe('ReactElementClone', function() {
     ReactTestUtils = require('ReactTestUtils');
+    PropTypes = require('prop-types');
+
+    // NOTE: We're explicitly not using JSX here. This is intended to test
+    // classic JS without JSX.
+    ComponentClass = class extends React.Component {
+      render() {
+        return React.createElement('div');
+      }
+    };
   });
 
-  it('should clone a DOM component with new props', function() {
-    var Grandparent = React.createClass({
-      render: function() {
+  it('should clone a DOM component with new props', () => {
+    class Grandparent extends React.Component {
+      render() {
         return <Parent child={<div className="child" />} />;
-      },
-    });
-    var Parent = React.createClass({
-      render: function() {
+      }
+    }
+    class Parent extends React.Component {
+      render() {
         return (
           <div className="parent">
-            {React.cloneElement(this.props.child, { className: 'xyz' })}
+            {React.cloneElement(this.props.child, {className: 'xyz'})}
           </div>
         );
-      },
-    });
+      }
+    }
     var component = ReactTestUtils.renderIntoDocument(<Grandparent />);
@@ -44,22 +55,22 @@ describe('ReactElementClone', function() {
 
-  it('should clone a composite component with new props', function() {
-    var Child = React.createClass({
-      render: function() {
+  it('should clone a composite component with new props', () => {
+    class Child extends React.Component {
+      render() {
         return <div className={this.props.className} />;
-      },
-    });
-    var Grandparent = React.createClass({
-      render: function() {
+      }
+    }
+    class Grandparent extends React.Component {
+      render() {
         return <Parent child={<Child className="child" />} />;
-      },
-    });
-    var Parent = React.createClass({
-      render: function() {
+      }
+    }
+    class Parent extends React.Component {
+      render() {
         return (
           <div className="parent">
-            {React.cloneElement(this.props.child, { className: 'xyz' })}
+            {React.cloneElement(this.props.child, {className: 'xyz'})}
           </div>
         );
-      },
-    });
+      }
+    }
     var component = ReactTestUtils.renderIntoDocument(<Grandparent />);
@@ -68,18 +79,23 @@ describe('ReactElementClone', function() {
 
-  it('should keep the original ref if it is not overridden', function() {
-    var Grandparent = React.createClass({
-      render: function() {
+  it('does not fail if config has no prototype', () => {
+    var config = Object.create(null, {foo: {value: 1, enumerable: true}});
+    React.cloneElement(<div />, config);
+  });
+
+  it('should keep the original ref if it is not overridden', () => {
+    class Grandparent extends React.Component {
+      render() {
         return <Parent child={<div ref="yolo" />} />;
-      },
-    });
+      }
+    }
 
-    var Parent = React.createClass({
-      render: function() {
+    class Parent extends React.Component {
+      render() {
         return (
           <div>
-            {React.cloneElement(this.props.child, { className: 'xyz' })}
+            {React.cloneElement(this.props.child, {className: 'xyz'})}
           </div>
         );
-      },
-    });
+      }
+    }
 
@@ -89,8 +105,8 @@ describe('ReactElementClone', function() {
 
-  it('should transfer the key property', function() {
-    var Component = React.createClass({
-      render: function() {
+  it('should transfer the key property', () => {
+    class Component extends React.Component {
+      render() {
         return null;
-      },
-    });
+      }
+    }
     var clone = React.cloneElement(<Component />, {key: 'xyz'});
@@ -99,12 +115,12 @@ describe('ReactElementClone', function() {
 
-  it('should transfer children', function() {
-    var Component = React.createClass({
-      render: function() {
+  it('should transfer children', () => {
+    class Component extends React.Component {
+      render() {
         expect(this.props.children).toBe('xyz');
         return <div />;
-      },
-    });
+      }
+    }
 
     ReactTestUtils.renderIntoDocument(
-      React.cloneElement(<Component />, {children: 'xyz'})
+      React.cloneElement(<Component />, {children: 'xyz'}),
     );
@@ -112,12 +128,12 @@ describe('ReactElementClone', function() {
 
-  it('should shallow clone children', function() {
-    var Component = React.createClass({
-      render: function() {
+  it('should shallow clone children', () => {
+    class Component extends React.Component {
+      render() {
         expect(this.props.children).toBe('xyz');
         return <div />;
-      },
-    });
+      }
+    }
 
     ReactTestUtils.renderIntoDocument(
-      React.cloneElement(<Component>xyz</Component>, {})
+      React.cloneElement(<Component>xyz</Component>, {}),
     );
@@ -125,8 +141,8 @@ describe('ReactElementClone', function() {
 
-  it('should accept children as rest arguments', function() {
-    var Component = React.createClass({
-      render: function() {
+  it('should accept children as rest arguments', () => {
+    class Component extends React.Component {
+      render() {
         return null;
-      },
-    });
+      }
+    }
 
@@ -134,18 +150,37 @@ describe('ReactElementClone', function() {
       <Component>xyz</Component>,
-      { children: <Component /> },
+      {children: <Component />},
       <div />,
-      <span />
+      <span />,
     );
 
-    expect(clone.props.children).toEqual([
-      <div />,
-      <span />,
-    ]);
+    expect(clone.props.children).toEqual([<div />, <span />]);
   });
 
-  it('should support keys and refs', function() {
-    var Parent = React.createClass({
-      render: function() {
-        var clone =
-          React.cloneElement(this.props.children, {key: 'xyz', ref: 'xyz'});
+  it('should override children if undefined is provided as an argument', () => {
+    var element = React.createElement(
+      ComponentClass,
+      {
+        children: 'text',
+      },
+      undefined,
+    );
+    expect(element.props.children).toBe(undefined);
+
+    var element2 = React.cloneElement(
+      React.createElement(ComponentClass, {
+        children: 'text',
+      }),
+      {},
+      undefined,
+    );
+    expect(element2.props.children).toBe(undefined);
+  });
+
+  it('should support keys and refs', () => {
+    class Parent extends React.Component {
+      render() {
+        var clone = React.cloneElement(this.props.children, {
+          key: 'xyz',
+          ref: 'xyz',
+        });
         expect(clone.key).toBe('xyz');
@@ -153,10 +188,10 @@ describe('ReactElementClone', function() {
         return <div>{clone}</div>;
-      },
-    });
+      }
+    }
 
-    var Grandparent = React.createClass({
-      render: function() {
+    class Grandparent extends React.Component {
+      render() {
         return <Parent ref="parent"><span key="abc" /></Parent>;
-      },
-    });
+      }
+    }
 
@@ -166,15 +201,15 @@ describe('ReactElementClone', function() {
 
-  it('should steal the ref if a new ref is specified', function() {
-    var Parent = React.createClass({
-      render: function() {
+  it('should steal the ref if a new ref is specified', () => {
+    class Parent extends React.Component {
+      render() {
         var clone = React.cloneElement(this.props.children, {ref: 'xyz'});
         return <div>{clone}</div>;
-      },
-    });
+      }
+    }
 
-    var Grandparent = React.createClass({
-      render: function() {
+    class Grandparent extends React.Component {
+      render() {
         return <Parent ref="parent"><span ref="child" /></Parent>;
-      },
-    });
+      }
+    }
 
@@ -185,12 +220,12 @@ describe('ReactElementClone', function() {
 
-  it('should overwrite props', function() {
-    var Component = React.createClass({
-      render: function() {
+  it('should overwrite props', () => {
+    class Component extends React.Component {
+      render() {
         expect(this.props.myprop).toBe('xyz');
         return <div />;
-      },
-    });
+      }
+    }
 
     ReactTestUtils.renderIntoDocument(
-      React.cloneElement(<Component myprop="abc" />, {myprop: 'xyz'})
+      React.cloneElement(<Component myprop="abc" />, {myprop: 'xyz'}),
     );
@@ -198,3 +233,24 @@ describe('ReactElementClone', function() {
 
-  it('warns for keys for arrays of elements in rest args', function() {
+  it('should normalize props with default values', () => {
+    class Component extends React.Component {
+      render() {
+        return <span />;
+      }
+    }
+    Component.defaultProps = {prop: 'testKey'};
+
+    var instance = React.createElement(Component);
+    var clonedInstance = React.cloneElement(instance, {prop: undefined});
+    expect(clonedInstance.props.prop).toBe('testKey');
+    var clonedInstance2 = React.cloneElement(instance, {prop: null});
+    expect(clonedInstance2.props.prop).toBe(null);
+
+    var instance2 = React.createElement(Component, {prop: 'newTestKey'});
+    var cloneInstance3 = React.cloneElement(instance2, {prop: undefined});
+    expect(cloneInstance3.props.prop).toBe('testKey');
+    var cloneInstance4 = React.cloneElement(instance2, {});
+    expect(cloneInstance4.props.prop).toBe('newTestKey');
+  });
+
+  it('warns for keys for arrays of elements in rest args', () => {
     spyOn(console, 'error');
@@ -203,5 +259,5 @@ describe('ReactElementClone', function() {
 
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'Each child in an array or iterator should have a unique "key" prop.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'Each child in an array or iterator should have a unique "key" prop.',
     );
@@ -209,3 +265,3 @@ describe('ReactElementClone', function() {
 
-  it('does not warns for arrays of elements with keys', function() {
+  it('does not warns for arrays of elements with keys', () => {
     spyOn(console, 'error');
@@ -214,6 +270,6 @@ describe('ReactElementClone', function() {
 
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('does not warn when the element is directly in rest args', function() {
+  it('does not warn when the element is directly in rest args', () => {
     spyOn(console, 'error');
@@ -222,6 +278,6 @@ describe('ReactElementClone', function() {
 
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('does not warn when the array contains a non-element', function() {
+  it('does not warn when the array contains a non-element', () => {
     spyOn(console, 'error');
@@ -230,34 +286,36 @@ describe('ReactElementClone', function() {
 
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('should check declared prop types after clone', function() {
+  it('should check declared prop types after clone', () => {
     spyOn(console, 'error');
-    var Component = React.createClass({
-      propTypes: {
-        color: React.PropTypes.string.isRequired,
-      },
-      render: function() {
+    class Component extends React.Component {
+      render() {
         return React.createElement('div', null, 'My color is ' + this.color);
-      },
-    });
-    var Parent = React.createClass({
-      render: function() {
+      }
+    }
+    Component.propTypes = {
+      color: PropTypes.string.isRequired,
+    };
+    class Parent extends React.Component {
+      render() {
         return React.cloneElement(this.props.child, {color: 123});
-      },
-    });
-    var GrandParent = React.createClass({
-      render: function() {
-        return React.createElement(
-          Parent,
-          { child: React.createElement(Component, {color: 'red'}) }
-        );
-      },
-    });
+      }
+    }
+    class GrandParent extends React.Component {
+      render() {
+        return React.createElement(Parent, {
+          child: React.createElement(Component, {color: 'red'}),
+        });
+      }
+    }
     ReactTestUtils.renderIntoDocument(React.createElement(GrandParent));
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: Failed propType: ' +
-      'Invalid prop `color` of type `number` supplied to `Component`, ' +
-      'expected `string`. Check the render method of `Parent`.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      'Warning: Failed prop type: ' +
+        'Invalid prop `color` of type `number` supplied to `Component`, ' +
+        'expected `string`.\n' +
+        '    in Component (created by GrandParent)\n' +
+        '    in Parent (created by GrandParent)\n' +
+        '    in GrandParent',
     );
@@ -265,2 +323,48 @@ describe('ReactElementClone', function() {
 
+  it('should ignore key and ref warning getters', () => {
+    var elementA = React.createElement('div');
+    var elementB = React.cloneElement(elementA, elementA.props);
+    expect(elementB.key).toBe(null);
+    expect(elementB.ref).toBe(null);
+  });
+
+  it('should ignore undefined key and ref', () => {
+    var element = React.createFactory(ComponentClass)({
+      key: '12',
+      ref: '34',
+      foo: '56',
+    });
+    var props = {
+      key: undefined,
+      ref: undefined,
+      foo: 'ef',
+    };
+    var clone = React.cloneElement(element, props);
+    expect(clone.type).toBe(ComponentClass);
+    expect(clone.key).toBe('12');
+    expect(clone.ref).toBe('34');
+    expect(Object.isFrozen(element)).toBe(true);
+    expect(Object.isFrozen(element.props)).toBe(true);
+    expect(clone.props).toEqual({foo: 'ef'});
+  });
+
+  it('should extract null key and ref', () => {
+    var element = React.createFactory(ComponentClass)({
+      key: '12',
+      ref: '34',
+      foo: '56',
+    });
+    var props = {
+      key: null,
+      ref: null,
+      foo: 'ef',
+    };
+    var clone = React.cloneElement(element, props);
+    expect(clone.type).toBe(ComponentClass);
+    expect(clone.key).toBe('null');
+    expect(clone.ref).toBe(null);
+    expect(Object.isFrozen(element)).toBe(true);
+    expect(Object.isFrozen(element.props)).toBe(true);
+    expect(clone.props).toEqual({foo: 'ef'});
+  });
 });
diff --git a/src/isomorphic/classic/element/__tests__/ReactElementValidator-test.js b/src/isomorphic/classic/element/__tests__/ReactElementValidator-test.js
index 3cdcd48e5..a772395aa 100644
--- a/src/isomorphic/classic/element/__tests__/ReactElementValidator-test.js
+++ b/src/isomorphic/classic/element/__tests__/ReactElementValidator-test.js
@@ -16,2 +16,3 @@
 
+var PropTypes;
 var React;
@@ -20,6 +21,10 @@ var ReactTestUtils;
 
-describe('ReactElementValidator', function() {
+describe('ReactElementValidator', () => {
+  function normalizeCodeLocInfo(str) {
+    return str && str.replace(/at .+?:\d+/g, 'at **');
+  }
+
   var ComponentClass;
 
-  beforeEach(function() {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -29,10 +34,11 @@ describe('ReactElementValidator', function() {
     ReactTestUtils = require('ReactTestUtils');
-    ComponentClass = React.createClass({
-      render: function() {
+    PropTypes = require('prop-types');
+    ComponentClass = class extends React.Component {
+      render() {
         return React.createElement('div');
-      },
-    });
+      }
+    };
   });
 
-  it('warns for keys for arrays of elements in rest args', function() {
+  it('warns for keys for arrays of elements in rest args', () => {
     spyOn(console, 'error');
@@ -42,5 +48,5 @@ describe('ReactElementValidator', function() {
 
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'Each child in an array or iterator should have a unique "key" prop.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'Each child in an array or iterator should have a unique "key" prop.',
     );
@@ -48,3 +54,3 @@ describe('ReactElementValidator', function() {
 
-  it('warns for keys for arrays of elements with owner info', function() {
+  it('warns for keys for arrays of elements with owner info', () => {
     spyOn(console, 'error');
@@ -52,8 +58,7 @@ describe('ReactElementValidator', function() {
 
-    var InnerClass = React.createClass({
-      displayName: 'InnerClass',
-      render: function() {
+    class InnerClass extends React.Component {
+      render() {
         return Component(null, this.props.childSet);
-      },
-    });
+      }
+    }
 
@@ -61,18 +66,15 @@ describe('ReactElementValidator', function() {
 
-    var ComponentWrapper = React.createClass({
-      displayName: 'ComponentWrapper',
-      render: function() {
-        return InnerComponent({childSet: [Component(), Component()] });
-      },
-    });
+    class ComponentWrapper extends React.Component {
+      render() {
+        return InnerComponent({childSet: [Component(), Component()]});
+      }
+    }
 
-    ReactTestUtils.renderIntoDocument(
-      React.createElement(ComponentWrapper)
-    );
+    ReactTestUtils.renderIntoDocument(React.createElement(ComponentWrapper));
 
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'Each child in an array or iterator should have a unique "key" prop. ' +
-      'Check the render method of `InnerClass`. ' +
-      'It was passed a child from ComponentWrapper. '
+        'Check the render method of `InnerClass`. ' +
+        'It was passed a child from ComponentWrapper. ',
     );
@@ -80,22 +82,18 @@ describe('ReactElementValidator', function() {
 
-  it('warns for keys for arrays with no owner or parent info', function() {
+  it('warns for keys for arrays with no owner or parent info', () => {
     spyOn(console, 'error');
 
-    var Anonymous = React.createClass({
-      displayName: undefined,
-      render: function() {
-        return <div />;
-      },
-    });
+    function Anonymous() {
+      return <div />;
+    }
+    Object.defineProperty(Anonymous, 'name', {value: undefined});
 
-    var divs = [
-      <div />,
-      <div />,
-    ];
+    var divs = [<div />, <div />];
     ReactTestUtils.renderIntoDocument(<Anonymous>{divs}</Anonymous>);
 
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
       'Warning: Each child in an array or iterator should have a unique ' +
-      '"key" prop. See https://fb.me/react-warning-keys for more information.'
+        '"key" prop. See https://fb.me/react-warning-keys for more information.\n' +
+        '    in div (at **)',
     );
@@ -103,16 +101,14 @@ describe('ReactElementValidator', function() {
 
-  it('warns for keys for arrays of elements with no owner info', function() {
+  it('warns for keys for arrays of elements with no owner info', () => {
     spyOn(console, 'error');
 
-    var divs = [
-      <div />,
-      <div />,
-    ];
+    var divs = [<div />, <div />];
     ReactTestUtils.renderIntoDocument(<div>{divs}</div>);
 
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
       'Warning: Each child in an array or iterator should have a unique ' +
-      '"key" prop. Check the top-level render call using <div>. See ' +
-      'https://fb.me/react-warning-keys for more information.'
+        '"key" prop. Check the top-level render call using <div>. See ' +
+        'https://fb.me/react-warning-keys for more information.\n' +
+        '    in div (at **)',
     );
@@ -120,15 +116,42 @@ describe('ReactElementValidator', function() {
 
-  it('does not warn for keys when passing children down', function() {
+  it('warns for keys with component stack info', () => {
     spyOn(console, 'error');
 
-    var Wrapper = React.createClass({
-      render: function() {
-        return (
-          <div>
-            {this.props.children}
-            <footer />
-          </div>
-        );
-      },
-    });
+    function Component() {
+      return <div>{[<div />, <div />]}</div>;
+    }
+
+    function Parent(props) {
+      return React.cloneElement(props.child);
+    }
+
+    function GrandParent() {
+      return <Parent child={<Component />} />;
+    }
+
+    ReactTestUtils.renderIntoDocument(<GrandParent />);
+
+    expect(console.error.calls.count()).toBe(1);
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
+      'Warning: Each child in an array or iterator should have a unique ' +
+        '"key" prop. Check the render method of `Component`. See ' +
+        'https://fb.me/react-warning-keys for more information.\n' +
+        '    in div (at **)\n' +
+        '    in Component (at **)\n' +
+        '    in Parent (at **)\n' +
+        '    in GrandParent (at **)',
+    );
+  });
+
+  it('does not warn for keys when passing children down', () => {
+    spyOn(console, 'error');
+
+    function Wrapper(props) {
+      return (
+        <div>
+          {props.children}
+          <footer />
+        </div>
+      );
+    }
 
@@ -138,9 +161,9 @@ describe('ReactElementValidator', function() {
         <span />
-      </Wrapper>
+      </Wrapper>,
     );
 
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('warns for keys for iterables of elements in rest args', function() {
+  it('warns for keys for iterables of elements in rest args', () => {
     spyOn(console, 'error');
@@ -162,5 +185,5 @@ describe('ReactElementValidator', function() {
 
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'Each child in an array or iterator should have a unique "key" prop.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'Each child in an array or iterator should have a unique "key" prop.',
     );
@@ -168,3 +191,3 @@ describe('ReactElementValidator', function() {
 
-  it('does not warns for arrays of elements with keys', function() {
+  it('does not warns for arrays of elements with keys', () => {
     spyOn(console, 'error');
@@ -174,6 +197,6 @@ describe('ReactElementValidator', function() {
 
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('does not warns for iterable elements with keys', function() {
+  it('does not warns for iterable elements with keys', () => {
     spyOn(console, 'error');
@@ -198,6 +221,6 @@ describe('ReactElementValidator', function() {
 
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('does not warn when the element is directly in rest args', function() {
+  it('does not warn when the element is directly in rest args', () => {
     spyOn(console, 'error');
@@ -207,6 +230,6 @@ describe('ReactElementValidator', function() {
 
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('does not warn when the array contains a non-element', function() {
+  it('does not warn when the array contains a non-element', () => {
     spyOn(console, 'error');
@@ -216,3 +239,3 @@ describe('ReactElementValidator', function() {
 
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
@@ -227,20 +250,18 @@ describe('ReactElementValidator', function() {
     spyOn(console, 'error');
-    var MyComp = React.createClass({
-      propTypes: {
-        color: React.PropTypes.string,
-      },
-      render: function() {
-        return React.createElement('div', null, 'My color is ' + this.color);
-      },
-    });
-    var ParentComp = React.createClass({
-      render: function() {
-        return React.createElement(MyComp, {color: 123});
-      },
-    });
+    function MyComp(props) {
+      return React.createElement('div', null, 'My color is ' + props.color);
+    }
+    MyComp.propTypes = {
+      color: PropTypes.string,
+    };
+    function ParentComp() {
+      return React.createElement(MyComp, {color: 123});
+    }
     ReactTestUtils.renderIntoDocument(React.createElement(ParentComp));
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: Failed propType: ' +
-      'Invalid prop `color` of type `number` supplied to `MyComp`, ' +
-      'expected `string`. Check the render method of `ParentComp`.'
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      'Warning: Failed prop type: ' +
+        'Invalid prop `color` of type `number` supplied to `MyComp`, ' +
+        'expected `string`.\n' +
+        '    in MyComp (created by ParentComp)\n' +
+        '    in ParentComp',
     );
@@ -248,3 +269,3 @@ describe('ReactElementValidator', function() {
 
-  it('gives a helpful error when passing null, undefined, boolean, or number', function() {
+  it('gives a helpful error when passing invalid types', () => {
     spyOn(console, 'error');
@@ -254,47 +275,59 @@ describe('ReactElementValidator', function() {
     React.createElement(123);
-    expect(console.error.calls.length).toBe(4);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: React.createElement: type should not be null, undefined, ' +
-      'boolean, or number. It should be a string (for DOM elements) or a ' +
-      'ReactClass (for composite components).'
+    React.createElement({x: 17});
+    React.createElement({});
+    expect(console.error.calls.count()).toBe(6);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      'Warning: React.createElement: type is invalid -- expected a string ' +
+        '(for built-in components) or a class/function (for composite ' +
+        'components) but got: undefined. You likely forgot to export your ' +
+        "component from the file it's defined in.",
+    );
+    expect(console.error.calls.argsFor(1)[0]).toBe(
+      'Warning: React.createElement: type is invalid -- expected a string ' +
+        '(for built-in components) or a class/function (for composite ' +
+        'components) but got: null.',
+    );
+    expect(console.error.calls.argsFor(2)[0]).toBe(
+      'Warning: React.createElement: type is invalid -- expected a string ' +
+        '(for built-in components) or a class/function (for composite ' +
+        'components) but got: boolean.',
     );
-    expect(console.error.argsForCall[1][0]).toBe(
-      'Warning: React.createElement: type should not be null, undefined, ' +
-      'boolean, or number. It should be a string (for DOM elements) or a ' +
-      'ReactClass (for composite components).'
+    expect(console.error.calls.argsFor(3)[0]).toBe(
+      'Warning: React.createElement: type is invalid -- expected a string ' +
+        '(for built-in components) or a class/function (for composite ' +
+        'components) but got: number.',
     );
-    expect(console.error.argsForCall[2][0]).toBe(
-      'Warning: React.createElement: type should not be null, undefined, ' +
-      'boolean, or number. It should be a string (for DOM elements) or a ' +
-      'ReactClass (for composite components).'
+    expect(console.error.calls.argsFor(4)[0]).toBe(
+      'Warning: React.createElement: type is invalid -- expected a string ' +
+        '(for built-in components) or a class/function (for composite ' +
+        'components) but got: object.',
     );
-    expect(console.error.argsForCall[3][0]).toBe(
-      'Warning: React.createElement: type should not be null, undefined, ' +
-      'boolean, or number. It should be a string (for DOM elements) or a ' +
-      'ReactClass (for composite components).'
+    expect(console.error.calls.argsFor(5)[0]).toBe(
+      'Warning: React.createElement: type is invalid -- expected a string ' +
+        '(for built-in components) or a class/function (for composite ' +
+        'components) but got: object. You likely forgot to export your ' +
+        "component from the file it's defined in.",
     );
     React.createElement('div');
-    expect(console.error.calls.length).toBe(4);
+    expect(console.error.calls.count()).toBe(6);
   });
 
-  it('includes the owner name when passing null, undefined, boolean, or number', function() {
+  it('includes the owner name when passing null, undefined, boolean, or number', () => {
     spyOn(console, 'error');
-    var ParentComp = React.createClass({
-      render: function() {
-        return React.createElement(null);
-      },
-    });
+    function ParentComp() {
+      return React.createElement(null);
+    }
     expect(function() {
       ReactTestUtils.renderIntoDocument(React.createElement(ParentComp));
-    }).toThrow(
+    }).toThrowError(
       'Element type is invalid: expected a string (for built-in components) ' +
-      'or a class/function (for composite components) but got: null. Check ' +
-      'the render method of `ParentComp`.'
+        'or a class/function (for composite components) but got: null. Check ' +
+        'the render method of `ParentComp`.',
     );
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: React.createElement: type should not be null, undefined, ' +
-      'boolean, or number. It should be a string (for DOM elements) or a ' +
-      'ReactClass (for composite components). Check the render method of ' +
-      '`ParentComp`.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      'Warning: React.createElement: type is invalid -- expected a string ' +
+        '(for built-in components) or a class/function (for composite ' +
+        'components) but got: null. Check the render method of `ParentComp`.' +
+        '\n    in ParentComp',
     );
@@ -302,14 +335,12 @@ describe('ReactElementValidator', function() {
 
-  it('should check default prop values', function() {
+  it('should check default prop values', () => {
     spyOn(console, 'error');
 
-    var Component = React.createClass({
-      propTypes: {prop: React.PropTypes.string.isRequired},
-      getDefaultProps: function() {
-        return {prop: null};
-      },
-      render: function() {
+    class Component extends React.Component {
+      render() {
         return React.createElement('span', null, this.props.prop);
-      },
-    });
+      }
+    }
+    Component.propTypes = {prop: PropTypes.string.isRequired};
+    Component.defaultProps = {prop: null};
 
@@ -317,6 +348,7 @@ describe('ReactElementValidator', function() {
 
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: Failed propType: ' +
-      'Required prop `prop` was not specified in `Component`.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      'Warning: Failed prop type: The prop `prop` is marked as required in ' +
+        '`Component`, but its value is `null`.\n' +
+        '    in Component',
     );
@@ -324,23 +356,22 @@ describe('ReactElementValidator', function() {
 
-  it('should not check the default for explicit null', function() {
+  it('should not check the default for explicit null', () => {
     spyOn(console, 'error');
 
-    var Component = React.createClass({
-      propTypes: {prop: React.PropTypes.string.isRequired},
-      getDefaultProps: function() {
-        return {prop: 'text'};
-      },
-      render: function() {
+    class Component extends React.Component {
+      render() {
         return React.createElement('span', null, this.props.prop);
-      },
-    });
+      }
+    }
+    Component.propTypes = {prop: PropTypes.string.isRequired};
+    Component.defaultProps = {prop: 'text'};
 
     ReactTestUtils.renderIntoDocument(
-      React.createElement(Component, {prop:null})
+      React.createElement(Component, {prop: null}),
     );
 
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: Failed propType: ' +
-      'Required prop `prop` was not specified in `Component`.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      'Warning: Failed prop type: The prop `prop` is marked as required in ' +
+        '`Component`, but its value is `null`.\n' +
+        '    in Component',
     );
@@ -348,31 +379,32 @@ describe('ReactElementValidator', function() {
 
-  it('should check declared prop types', function() {
+  it('should check declared prop types', () => {
     spyOn(console, 'error');
 
-    var Component = React.createClass({
-      propTypes: {
-        prop: React.PropTypes.string.isRequired,
-      },
-      render: function() {
+    class Component extends React.Component {
+      render() {
         return React.createElement('span', null, this.props.prop);
-      },
-    });
+      }
+    }
+    Component.propTypes = {
+      prop: PropTypes.string.isRequired,
+    };
 
+    ReactTestUtils.renderIntoDocument(React.createElement(Component));
     ReactTestUtils.renderIntoDocument(
-      React.createElement(Component)
-    );
-    ReactTestUtils.renderIntoDocument(
-      React.createElement(Component, {prop: 42})
+      React.createElement(Component, {prop: 42}),
     );
 
-    expect(console.error.calls.length).toBe(2);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: Failed propType: ' +
-      'Required prop `prop` was not specified in `Component`.'
+    expect(console.error.calls.count()).toBe(2);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      'Warning: Failed prop type: ' +
+        'The prop `prop` is marked as required in `Component`, but its value ' +
+        'is `undefined`.\n' +
+        '    in Component',
     );
 
-    expect(console.error.argsForCall[1][0]).toBe(
-      'Warning: Failed propType: ' +
-      'Invalid prop `prop` of type `number` supplied to ' +
-      '`Component`, expected `string`.'
+    expect(console.error.calls.argsFor(1)[0]).toBe(
+      'Warning: Failed prop type: ' +
+        'Invalid prop `prop` of type `number` supplied to ' +
+        '`Component`, expected `string`.\n' +
+        '    in Component',
     );
@@ -380,3 +412,3 @@ describe('ReactElementValidator', function() {
     ReactTestUtils.renderIntoDocument(
-      React.createElement(Component, {prop: 'string'})
+      React.createElement(Component, {prop: 'string'}),
     );
@@ -384,28 +416,28 @@ describe('ReactElementValidator', function() {
     // Should not error for strings
-    expect(console.error.calls.length).toBe(2);
+    expect(console.error.calls.count()).toBe(2);
   });
 
-  it('should warn if a PropType creator is used as a PropType', function() {
+  it('should warn if a PropType creator is used as a PropType', () => {
     spyOn(console, 'error');
 
-    var Component = React.createClass({
-      propTypes: {
-        myProp: React.PropTypes.shape,
-      },
-      render: function() {
+    class Component extends React.Component {
+      render() {
         return React.createElement('span', null, this.props.myProp.value);
-      },
-    });
+      }
+    }
+    Component.propTypes = {
+      myProp: PropTypes.shape,
+    };
 
     ReactTestUtils.renderIntoDocument(
-      React.createElement(Component, {myProp: {value: 'hi'}})
+      React.createElement(Component, {myProp: {value: 'hi'}}),
     );
 
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: Component: type specification of prop `myProp` is invalid; ' +
-      'the type checker function must return `null` or an `Error` but ' +
-      'returned a function. You may have forgotten to pass an argument to ' +
-      'the type checker creator (arrayOf, instanceOf, objectOf, oneOf, ' +
-      'oneOfType, and shape all require an argument).'
+        'the type checker function must return `null` or an `Error` but ' +
+        'returned a function. You may have forgotten to pass an argument to ' +
+        'the type checker creator (arrayOf, instanceOf, objectOf, oneOf, ' +
+        'oneOfType, and shape all require an argument).',
     );
@@ -413,15 +445,13 @@ describe('ReactElementValidator', function() {
 
-  it('should warn when accessing .type on an element factory', function() {
-    spyOn(console, 'error');
-    var TestComponent = React.createClass({
-      render: function() {
-        return <div />;
-      },
-    });
+  it('should warn when accessing .type on an element factory', () => {
+    spyOn(console, 'warn');
+    function TestComponent() {
+      return <div />;
+    }
     var TestFactory = React.createFactory(TestComponent);
     expect(TestFactory.type).toBe(TestComponent);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.warn.calls.count()).toBe(1);
+    expect(console.warn.calls.argsFor(0)[0]).toBe(
       'Warning: Factory.type is deprecated. Access the class directly before ' +
-      'passing it to createFactory.'
+        'passing it to createFactory.',
     );
@@ -429,15 +459,15 @@ describe('ReactElementValidator', function() {
     expect(TestFactory.type).toBe(TestComponent);
-    expect(console.error.argsForCall.length).toBe(1);
+    expect(console.warn.calls.count()).toBe(1);
   });
 
-  it('does not warn when using DOM node as children', function() {
+  it('does not warn when using DOM node as children', () => {
     spyOn(console, 'error');
-    var DOMContainer = React.createClass({
-      render: function() {
+    class DOMContainer extends React.Component {
+      render() {
         return <div />;
-      },
-      componentDidMount: function() {
+      }
+      componentDidMount() {
         ReactDOM.findDOMNode(this).appendChild(this.props.children);
-      },
-    });
+      }
+    }
 
@@ -446,6 +476,6 @@ describe('ReactElementValidator', function() {
     ReactTestUtils.renderIntoDocument(<DOMContainer>{node}</DOMContainer>);
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('should not enumerate enumerable numbers (#4776)', function() {
+  it('should not enumerate enumerable numbers (#4776)', () => {
     /*eslint-disable no-extend-native */
@@ -469,3 +499,3 @@ describe('ReactElementValidator', function() {
 
-  it('does not blow up with inlined children', function() {
+  it('does not blow up with inlined children', () => {
     // We don't suggest this since it silences all sorts of warnings, but we
@@ -474,3 +504,3 @@ describe('ReactElementValidator', function() {
     var child = {
-      $$typeof: (<div />).$$typeof,
+      $$typeof: <div />.$$typeof,
       type: 'span',
@@ -485,3 +515,3 @@ describe('ReactElementValidator', function() {
 
-  it('does not blow up on key warning with undefined type', function() {
+  it('does not blow up on key warning with undefined type', () => {
     spyOn(console, 'error');
@@ -489,7 +519,8 @@ describe('ReactElementValidator', function() {
     void <Foo>{[<div />]}</Foo>;
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: React.createElement: type should not be null, undefined, ' +
-      'boolean, or number. It should be a string (for DOM elements) or a ' +
-      'ReactClass (for composite components).'
+    expect(console.error.calls.count()).toBe(1);
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
+      'Warning: React.createElement: type is invalid -- expected a string ' +
+        '(for built-in components) or a class/function (for composite ' +
+        'components) but got: undefined. You likely forgot to export your ' +
+        "component from the file it's defined in. Check your code at **.",
     );
@@ -497,2 +528,52 @@ describe('ReactElementValidator', function() {
 
+  it('provides stack via non-standard console.reactStack for invalid types', () => {
+    spyOn(console, 'error');
+
+    function Foo() {
+      var Bad = undefined;
+      return React.createElement(Bad);
+    }
+
+    function App() {
+      return React.createElement('div', null, React.createElement(Foo));
+    }
+
+    try {
+      console.reactStack = jest.fn();
+      console.reactStackEnd = jest.fn();
+
+      expect(() => {
+        ReactTestUtils.renderIntoDocument(React.createElement(App));
+      }).toThrow(
+        'Element type is invalid: expected a string (for built-in components) ' +
+          'or a class/function (for composite components) but got: undefined. ' +
+          "You likely forgot to export your component from the file it's " +
+          'defined in. Check the render method of `Foo`.',
+      );
+
+      expect(console.reactStack.mock.calls.length).toBe(1);
+      expect(console.reactStackEnd.mock.calls.length).toBe(1);
+
+      var stack = console.reactStack.mock.calls[0][0];
+      expect(Array.isArray(stack)).toBe(true);
+      expect(stack.map(frame => frame.name)).toEqual([
+        'Foo', // <Bad> is inside Foo
+        'App', // <Foo> is inside App
+        'App', // <div> is inside App
+        null, // <App> is outside a component
+      ]);
+      expect(
+        stack.map(frame => frame.fileName && frame.fileName.slice(-8)),
+      ).toEqual([null, null, null, null]);
+      expect(stack.map(frame => frame.lineNumber)).toEqual([
+        null,
+        null,
+        null,
+        null,
+      ]);
+    } finally {
+      delete console.reactStack;
+      delete console.reactStackEnd;
+    }
+  });
 });
diff --git a/src/isomorphic/classic/types/ReactPropTypes.js b/src/isomorphic/classic/types/ReactPropTypes.js
index 99c036496..5c0ca7735 100644
--- a/src/isomorphic/classic/types/ReactPropTypes.js
+++ b/src/isomorphic/classic/types/ReactPropTypes.js
@@ -13,434 +13,5 @@
 
-var ReactElement = require('ReactElement');
-var ReactPropTypeLocationNames = require('ReactPropTypeLocationNames');
+var {isValidElement} = require('ReactElement');
+var factory = require('prop-types/factory');
 
-var emptyFunction = require('emptyFunction');
-var getIteratorFn = require('getIteratorFn');
-
-/**
- * Collection of methods that allow declaration and validation of props that are
- * supplied to React components. Example usage:
- *
- *   var Props = require('ReactPropTypes');
- *   var MyArticle = React.createClass({
- *     propTypes: {
- *       // An optional string prop named "description".
- *       description: Props.string,
- *
- *       // A required enum prop named "category".
- *       category: Props.oneOf(['News','Photos']).isRequired,
- *
- *       // A prop named "dialog" that requires an instance of Dialog.
- *       dialog: Props.instanceOf(Dialog).isRequired
- *     },
- *     render: function() { ... }
- *   });
- *
- * A more formal specification of how these methods are used:
- *
- *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
- *   decl := ReactPropTypes.{type}(.isRequired)?
- *
- * Each and every declaration produces a function with the same signature. This
- * allows the creation of custom validation functions. For example:
- *
- *  var MyLink = React.createClass({
- *    propTypes: {
- *      // An optional string or URI prop named "href".
- *      href: function(props, propName, componentName) {
- *        var propValue = props[propName];
- *        if (propValue != null && typeof propValue !== 'string' &&
- *            !(propValue instanceof URI)) {
- *          return new Error(
- *            'Expected a string or an URI for ' + propName + ' in ' +
- *            componentName
- *          );
- *        }
- *      }
- *    },
- *    render: function() {...}
- *  });
- *
- * @internal
- */
-
-var ANONYMOUS = '<<anonymous>>';
-
-var ReactPropTypes = {
-  array: createPrimitiveTypeChecker('array'),
-  bool: createPrimitiveTypeChecker('boolean'),
-  func: createPrimitiveTypeChecker('function'),
-  number: createPrimitiveTypeChecker('number'),
-  object: createPrimitiveTypeChecker('object'),
-  string: createPrimitiveTypeChecker('string'),
-
-  any: createAnyTypeChecker(),
-  arrayOf: createArrayOfTypeChecker,
-  element: createElementTypeChecker(),
-  instanceOf: createInstanceTypeChecker,
-  node: createNodeChecker(),
-  objectOf: createObjectOfTypeChecker,
-  oneOf: createEnumTypeChecker,
-  oneOfType: createUnionTypeChecker,
-  shape: createShapeTypeChecker,
-};
-
-/**
- * inlined Object.is polyfill to avoid requiring consumers ship their own
- * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
- */
-/*eslint-disable no-self-compare*/
-function is(x, y) {
-  // SameValue algorithm
-  if (x === y) { // Steps 1-5, 7-10
-    // Steps 6.b-6.e: +0 != -0
-    return x !== 0 || 1 / x === 1 / y;
-  } else {
-    // Step 6.a: NaN == NaN
-    return x !== x && y !== y;
-  }
-}
-/*eslint-enable no-self-compare*/
-
-function createChainableTypeChecker(validate) {
-  function checkType(
-    isRequired,
-    props,
-    propName,
-    componentName,
-    location,
-    propFullName
-  ) {
-    componentName = componentName || ANONYMOUS;
-    propFullName = propFullName || propName;
-    if (props[propName] == null) {
-      var locationName = ReactPropTypeLocationNames[location];
-      if (isRequired) {
-        return new Error(
-          `Required ${locationName} \`${propFullName}\` was not specified in ` +
-          `\`${componentName}\`.`
-        );
-      }
-      return null;
-    } else {
-      return validate(props, propName, componentName, location, propFullName);
-    }
-  }
-
-  var chainedCheckType = checkType.bind(null, false);
-  chainedCheckType.isRequired = checkType.bind(null, true);
-
-  return chainedCheckType;
-}
-
-function createPrimitiveTypeChecker(expectedType) {
-  function validate(props, propName, componentName, location, propFullName) {
-    var propValue = props[propName];
-    var propType = getPropType(propValue);
-    if (propType !== expectedType) {
-      var locationName = ReactPropTypeLocationNames[location];
-      // `propValue` being instance of, say, date/regexp, pass the 'object'
-      // check, but we can offer a more precise error message here rather than
-      // 'of type `object`'.
-      var preciseType = getPreciseType(propValue);
-
-      return new Error(
-        `Invalid ${locationName} \`${propFullName}\` of type ` +
-        `\`${preciseType}\` supplied to \`${componentName}\`, expected ` +
-        `\`${expectedType}\`.`
-      );
-    }
-    return null;
-  }
-  return createChainableTypeChecker(validate);
-}
-
-function createAnyTypeChecker() {
-  return createChainableTypeChecker(emptyFunction.thatReturns(null));
-}
-
-function createArrayOfTypeChecker(typeChecker) {
-  function validate(props, propName, componentName, location, propFullName) {
-    if (typeof typeChecker !== 'function') {
-      return new Error(
-        `Property \`${propFullName}\` of component \`${componentName}\` has invalid PropType notation inside arrayOf.`
-      );
-    }
-    var propValue = props[propName];
-    if (!Array.isArray(propValue)) {
-      var locationName = ReactPropTypeLocationNames[location];
-      var propType = getPropType(propValue);
-      return new Error(
-        `Invalid ${locationName} \`${propFullName}\` of type ` +
-        `\`${propType}\` supplied to \`${componentName}\`, expected an array.`
-      );
-    }
-    for (var i = 0; i < propValue.length; i++) {
-      var error = typeChecker(
-        propValue,
-        i,
-        componentName,
-        location,
-        `${propFullName}[${i}]`
-      );
-      if (error instanceof Error) {
-        return error;
-      }
-    }
-    return null;
-  }
-  return createChainableTypeChecker(validate);
-}
-
-function createElementTypeChecker() {
-  function validate(props, propName, componentName, location, propFullName) {
-    if (!ReactElement.isValidElement(props[propName])) {
-      var locationName = ReactPropTypeLocationNames[location];
-      return new Error(
-        `Invalid ${locationName} \`${propFullName}\` supplied to ` +
-        `\`${componentName}\`, expected a single ReactElement.`
-      );
-    }
-    return null;
-  }
-  return createChainableTypeChecker(validate);
-}
-
-function createInstanceTypeChecker(expectedClass) {
-  function validate(props, propName, componentName, location, propFullName) {
-    if (!(props[propName] instanceof expectedClass)) {
-      var locationName = ReactPropTypeLocationNames[location];
-      var expectedClassName = expectedClass.name || ANONYMOUS;
-      var actualClassName = getClassName(props[propName]);
-      return new Error(
-        `Invalid ${locationName} \`${propFullName}\` of type ` +
-        `\`${actualClassName}\` supplied to \`${componentName}\`, expected ` +
-        `instance of \`${expectedClassName}\`.`
-      );
-    }
-    return null;
-  }
-  return createChainableTypeChecker(validate);
-}
-
-function createEnumTypeChecker(expectedValues) {
-  if (!Array.isArray(expectedValues)) {
-    return createChainableTypeChecker(function() {
-      return new Error(
-        `Invalid argument supplied to oneOf, expected an instance of array.`
-      );
-    });
-  }
-
-  function validate(props, propName, componentName, location, propFullName) {
-    var propValue = props[propName];
-    for (var i = 0; i < expectedValues.length; i++) {
-      if (is(propValue, expectedValues[i])) {
-        return null;
-      }
-    }
-
-    var locationName = ReactPropTypeLocationNames[location];
-    var valuesString = JSON.stringify(expectedValues);
-    return new Error(
-      `Invalid ${locationName} \`${propFullName}\` of value \`${propValue}\` ` +
-      `supplied to \`${componentName}\`, expected one of ${valuesString}.`
-    );
-  }
-  return createChainableTypeChecker(validate);
-}
-
-function createObjectOfTypeChecker(typeChecker) {
-  function validate(props, propName, componentName, location, propFullName) {
-    if (typeof typeChecker !== 'function') {
-      return new Error(
-        `Property \`${propFullName}\` of component \`${componentName}\` has invalid PropType notation inside objectOf.`
-      );
-    }
-    var propValue = props[propName];
-    var propType = getPropType(propValue);
-    if (propType !== 'object') {
-      var locationName = ReactPropTypeLocationNames[location];
-      return new Error(
-        `Invalid ${locationName} \`${propFullName}\` of type ` +
-        `\`${propType}\` supplied to \`${componentName}\`, expected an object.`
-      );
-    }
-    for (var key in propValue) {
-      if (propValue.hasOwnProperty(key)) {
-        var error = typeChecker(
-          propValue,
-          key,
-          componentName,
-          location,
-          `${propFullName}.${key}`
-        );
-        if (error instanceof Error) {
-          return error;
-        }
-      }
-    }
-    return null;
-  }
-  return createChainableTypeChecker(validate);
-}
-
-function createUnionTypeChecker(arrayOfTypeCheckers) {
-  if (!Array.isArray(arrayOfTypeCheckers)) {
-    return createChainableTypeChecker(function() {
-      return new Error(
-        `Invalid argument supplied to oneOfType, expected an instance of array.`
-      );
-    });
-  }
-
-  function validate(props, propName, componentName, location, propFullName) {
-    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
-      var checker = arrayOfTypeCheckers[i];
-      if (
-        checker(props, propName, componentName, location, propFullName) == null
-      ) {
-        return null;
-      }
-    }
-
-    var locationName = ReactPropTypeLocationNames[location];
-    return new Error(
-      `Invalid ${locationName} \`${propFullName}\` supplied to ` +
-      `\`${componentName}\`.`
-    );
-  }
-  return createChainableTypeChecker(validate);
-}
-
-function createNodeChecker() {
-  function validate(props, propName, componentName, location, propFullName) {
-    if (!isNode(props[propName])) {
-      var locationName = ReactPropTypeLocationNames[location];
-      return new Error(
-        `Invalid ${locationName} \`${propFullName}\` supplied to ` +
-        `\`${componentName}\`, expected a ReactNode.`
-      );
-    }
-    return null;
-  }
-  return createChainableTypeChecker(validate);
-}
-
-function createShapeTypeChecker(shapeTypes) {
-  function validate(props, propName, componentName, location, propFullName) {
-    var propValue = props[propName];
-    var propType = getPropType(propValue);
-    if (propType !== 'object') {
-      var locationName = ReactPropTypeLocationNames[location];
-      return new Error(
-        `Invalid ${locationName} \`${propFullName}\` of type \`${propType}\` ` +
-        `supplied to \`${componentName}\`, expected \`object\`.`
-      );
-    }
-    for (var key in shapeTypes) {
-      var checker = shapeTypes[key];
-      if (!checker) {
-        continue;
-      }
-      var error = checker(
-        propValue,
-        key,
-        componentName,
-        location,
-        `${propFullName}.${key}`
-      );
-      if (error) {
-        return error;
-      }
-    }
-    return null;
-  }
-  return createChainableTypeChecker(validate);
-}
-
-function isNode(propValue) {
-  switch (typeof propValue) {
-    case 'number':
-    case 'string':
-    case 'undefined':
-      return true;
-    case 'boolean':
-      return !propValue;
-    case 'object':
-      if (Array.isArray(propValue)) {
-        return propValue.every(isNode);
-      }
-      if (propValue === null || ReactElement.isValidElement(propValue)) {
-        return true;
-      }
-
-      var iteratorFn = getIteratorFn(propValue);
-      if (iteratorFn) {
-        var iterator = iteratorFn.call(propValue);
-        var step;
-        if (iteratorFn !== propValue.entries) {
-          while (!(step = iterator.next()).done) {
-            if (!isNode(step.value)) {
-              return false;
-            }
-          }
-        } else {
-          // Iterator will provide entry [k,v] tuples rather than values.
-          while (!(step = iterator.next()).done) {
-            var entry = step.value;
-            if (entry) {
-              if (!isNode(entry[1])) {
-                return false;
-              }
-            }
-          }
-        }
-      } else {
-        return false;
-      }
-
-      return true;
-    default:
-      return false;
-  }
-}
-
-// Equivalent of `typeof` but with special handling for array and regexp.
-function getPropType(propValue) {
-  var propType = typeof propValue;
-  if (Array.isArray(propValue)) {
-    return 'array';
-  }
-  if (propValue instanceof RegExp) {
-    // Old webkits (at least until Android 4.0) return 'function' rather than
-    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
-    // passes PropTypes.object.
-    return 'object';
-  }
-  return propType;
-}
-
-// This handles more types than `getPropType`. Only used for error messages.
-// See `createPrimitiveTypeChecker`.
-function getPreciseType(propValue) {
-  var propType = getPropType(propValue);
-  if (propType === 'object') {
-    if (propValue instanceof Date) {
-      return 'date';
-    } else if (propValue instanceof RegExp) {
-      return 'regexp';
-    }
-  }
-  return propType;
-}
-
-// Returns class name of the object, if any.
-function getClassName(propValue) {
-  if (!propValue.constructor || !propValue.constructor.name) {
-    return ANONYMOUS;
-  }
-  return propValue.constructor.name;
-}
-
-module.exports = ReactPropTypes;
+module.exports = factory(isValidElement);
diff --git a/src/isomorphic/classic/types/__tests__/ReactPropTypes-test.js b/src/isomorphic/classic/types/__tests__/ReactPropTypes-test.js
index 9601e675b..c12cc1c29 100644
--- a/src/isomorphic/classic/types/__tests__/ReactPropTypes-test.js
+++ b/src/isomorphic/classic/types/__tests__/ReactPropTypes-test.js
@@ -16,4 +16,4 @@ var React;
 var ReactFragment;
-var ReactPropTypeLocations;
 var ReactTestUtils;
+var ReactPropTypesSecret;
 
@@ -21,4 +21,2 @@ var Component;
 var MyComponent;
-var requiredMessage =
-  'Required prop `testProp` was not specified in `testComponent`.';
 
@@ -30,3 +28,5 @@ function typeCheckFail(declaration, value, message) {
     'testComponent',
-    ReactPropTypeLocations.prop
+    'prop',
+    null,
+    ReactPropTypesSecret,
   );
@@ -36,2 +36,44 @@ function typeCheckFail(declaration, value, message) {
 
+function typeCheckFailRequiredValues(declaration) {
+  var specifiedButIsNullMsg =
+    'The prop `testProp` is marked as required in ' +
+    '`testComponent`, but its value is `null`.';
+  var unspecifiedMsg =
+    'The prop `testProp` is marked as required in ' +
+    '`testComponent`, but its value is `undefined`.';
+  var props1 = {testProp: null};
+  var error1 = declaration(
+    props1,
+    'testProp',
+    'testComponent',
+    'prop',
+    null,
+    ReactPropTypesSecret,
+  );
+  expect(error1 instanceof Error).toBe(true);
+  expect(error1.message).toBe(specifiedButIsNullMsg);
+  var props2 = {testProp: undefined};
+  var error2 = declaration(
+    props2,
+    'testProp',
+    'testComponent',
+    'prop',
+    null,
+    ReactPropTypesSecret,
+  );
+  expect(error2 instanceof Error).toBe(true);
+  expect(error2.message).toBe(unspecifiedMsg);
+  var props3 = {};
+  var error3 = declaration(
+    props3,
+    'testProp',
+    'testComponent',
+    'prop',
+    null,
+    ReactPropTypesSecret,
+  );
+  expect(error3 instanceof Error).toBe(true);
+  expect(error3.message).toBe(unspecifiedMsg);
+}
+
 function typeCheckPass(declaration, value) {
@@ -42,3 +84,5 @@ function typeCheckPass(declaration, value) {
     'testComponent',
-    ReactPropTypeLocations.prop
+    'prop',
+    null,
+    ReactPropTypesSecret,
   );
@@ -47,13 +91,33 @@ function typeCheckPass(declaration, value) {
 
-describe('ReactPropTypes', function() {
-  beforeEach(function() {
-    PropTypes = require('ReactPropTypes');
-    React = require('React');
-    ReactFragment = require('ReactFragment');
-    ReactPropTypeLocations = require('ReactPropTypeLocations');
-    ReactTestUtils = require('ReactTestUtils');
+function resetWarningCache() {
+  jest.resetModules();
+  PropTypes = require('ReactPropTypes');
+  React = require('React');
+  ReactFragment = require('ReactFragment');
+  ReactTestUtils = require('ReactTestUtils');
+  ReactPropTypesSecret = require('ReactPropTypesSecret');
+}
+
+function expectWarningInDevelopment(declaration, value) {
+  resetWarningCache();
+  var props = {testProp: value};
+  var propName = 'testProp' + Math.random().toString();
+  var componentName = 'testComponent' + Math.random().toString();
+  for (var i = 0; i < 3; i++) {
+    declaration(props, propName, componentName, 'prop');
+  }
+  expect(console.error.calls.count()).toBe(1);
+  expect(console.error.calls.argsFor(0)[0]).toContain(
+    'You are manually calling a React.PropTypes validation ',
+  );
+  console.error.calls.reset();
+}
+
+describe('ReactPropTypes', () => {
+  beforeEach(() => {
+    resetWarningCache();
   });
 
-  describe('Primitive Types', function() {
-    it('should warn for invalid strings', function() {
+  describe('Primitive Types', () => {
+    it('should warn for invalid strings', () => {
       typeCheckFail(
@@ -62,3 +126,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `array` supplied to ' +
-        '`testComponent`, expected `string`.'
+          '`testComponent`, expected `string`.',
       );
@@ -68,3 +132,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `boolean` supplied to ' +
-        '`testComponent`, expected `string`.'
+          '`testComponent`, expected `string`.',
       );
@@ -74,3 +138,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `number` supplied to ' +
-        '`testComponent`, expected `string`.'
+          '`testComponent`, expected `string`.',
       );
@@ -80,3 +144,9 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `object` supplied to ' +
-        '`testComponent`, expected `string`.'
+          '`testComponent`, expected `string`.',
+      );
+      typeCheckFail(
+        PropTypes.string,
+        Symbol(),
+        'Invalid prop `testProp` of type `symbol` supplied to ' +
+          '`testComponent`, expected `string`.',
       );
@@ -84,3 +154,3 @@ describe('ReactPropTypes', function() {
 
-    it('should fail date and regexp correctly', function() {
+    it('should fail date and regexp correctly', () => {
       typeCheckFail(
@@ -89,3 +159,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `date` supplied to ' +
-        '`testComponent`, expected `string`.'
+          '`testComponent`, expected `string`.',
       );
@@ -95,3 +165,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `regexp` supplied to ' +
-        '`testComponent`, expected `string`.'
+          '`testComponent`, expected `string`.',
       );
@@ -99,3 +169,3 @@ describe('ReactPropTypes', function() {
 
-    it('should not warn for valid values', function() {
+    it('should not warn for valid values', () => {
       typeCheckPass(PropTypes.array, []);
@@ -108,5 +178,6 @@ describe('ReactPropTypes', function() {
       typeCheckPass(PropTypes.object, /please/);
+      typeCheckPass(PropTypes.symbol, Symbol());
     });
 
-    it('should be implicitly optional and not warn without values', function() {
+    it('should be implicitly optional and not warn without values', () => {
       typeCheckPass(PropTypes.string, null);
@@ -115,5 +186,50 @@ describe('ReactPropTypes', function() {
 
-    it('should warn for missing required values', function() {
-      typeCheckFail(PropTypes.string.isRequired, null, requiredMessage);
-      typeCheckFail(PropTypes.string.isRequired, undefined, requiredMessage);
+    it('should warn for missing required values', () => {
+      typeCheckFailRequiredValues(PropTypes.string.isRequired);
+    });
+
+    it('should warn if called manually in development', () => {
+      spyOn(console, 'error');
+      expectWarningInDevelopment(PropTypes.array, /please/);
+      expectWarningInDevelopment(PropTypes.array, []);
+      expectWarningInDevelopment(PropTypes.array.isRequired, /please/);
+      expectWarningInDevelopment(PropTypes.array.isRequired, []);
+      expectWarningInDevelopment(PropTypes.array.isRequired, null);
+      expectWarningInDevelopment(PropTypes.array.isRequired, undefined);
+      expectWarningInDevelopment(PropTypes.bool, []);
+      expectWarningInDevelopment(PropTypes.bool, true);
+      expectWarningInDevelopment(PropTypes.bool.isRequired, []);
+      expectWarningInDevelopment(PropTypes.bool.isRequired, true);
+      expectWarningInDevelopment(PropTypes.bool.isRequired, null);
+      expectWarningInDevelopment(PropTypes.bool.isRequired, undefined);
+      expectWarningInDevelopment(PropTypes.func, false);
+      expectWarningInDevelopment(PropTypes.func, function() {});
+      expectWarningInDevelopment(PropTypes.func.isRequired, false);
+      expectWarningInDevelopment(PropTypes.func.isRequired, function() {});
+      expectWarningInDevelopment(PropTypes.func.isRequired, null);
+      expectWarningInDevelopment(PropTypes.func.isRequired, undefined);
+      expectWarningInDevelopment(PropTypes.number, function() {});
+      expectWarningInDevelopment(PropTypes.number, 42);
+      expectWarningInDevelopment(PropTypes.number.isRequired, function() {});
+      expectWarningInDevelopment(PropTypes.number.isRequired, 42);
+      expectWarningInDevelopment(PropTypes.number.isRequired, null);
+      expectWarningInDevelopment(PropTypes.number.isRequired, undefined);
+      expectWarningInDevelopment(PropTypes.string, 0);
+      expectWarningInDevelopment(PropTypes.string, 'foo');
+      expectWarningInDevelopment(PropTypes.string.isRequired, 0);
+      expectWarningInDevelopment(PropTypes.string.isRequired, 'foo');
+      expectWarningInDevelopment(PropTypes.string.isRequired, null);
+      expectWarningInDevelopment(PropTypes.string.isRequired, undefined);
+      expectWarningInDevelopment(PropTypes.symbol, 0);
+      expectWarningInDevelopment(PropTypes.symbol, Symbol('Foo'));
+      expectWarningInDevelopment(PropTypes.symbol.isRequired, 0);
+      expectWarningInDevelopment(PropTypes.symbol.isRequired, Symbol('Foo'));
+      expectWarningInDevelopment(PropTypes.symbol.isRequired, null);
+      expectWarningInDevelopment(PropTypes.symbol.isRequired, undefined);
+      expectWarningInDevelopment(PropTypes.object, '');
+      expectWarningInDevelopment(PropTypes.object, {foo: 'bar'});
+      expectWarningInDevelopment(PropTypes.object.isRequired, '');
+      expectWarningInDevelopment(PropTypes.object.isRequired, {foo: 'bar'});
+      expectWarningInDevelopment(PropTypes.object.isRequired, null);
+      expectWarningInDevelopment(PropTypes.object.isRequired, undefined);
     });
@@ -121,4 +237,4 @@ describe('ReactPropTypes', function() {
 
-  describe('Any type', function() {
-    it('should should accept any value', function() {
+  describe('Any type', () => {
+    it('should should accept any value', () => {
       typeCheckPass(PropTypes.any, 0);
@@ -126,5 +242,6 @@ describe('ReactPropTypes', function() {
       typeCheckPass(PropTypes.any, []);
+      typeCheckPass(PropTypes.any, Symbol());
     });
 
-    it('should be implicitly optional and not warn without values', function() {
+    it('should be implicitly optional and not warn without values', () => {
       typeCheckPass(PropTypes.any, null);
@@ -133,5 +250,11 @@ describe('ReactPropTypes', function() {
 
-    it('should warn for missing required values', function() {
-      typeCheckFail(PropTypes.any.isRequired, null, requiredMessage);
-      typeCheckFail(PropTypes.any.isRequired, undefined, requiredMessage);
+    it('should warn for missing required values', () => {
+      typeCheckFailRequiredValues(PropTypes.any.isRequired);
+    });
+
+    it('should warn if called manually in development', () => {
+      spyOn(console, 'error');
+      expectWarningInDevelopment(PropTypes.any, null);
+      expectWarningInDevelopment(PropTypes.any.isRequired, null);
+      expectWarningInDevelopment(PropTypes.any.isRequired, undefined);
     });
@@ -139,8 +262,8 @@ describe('ReactPropTypes', function() {
 
-  describe('ArrayOf Type', function() {
-    it('should fail for invalid argument', function() {
+  describe('ArrayOf Type', () => {
+    it('should fail for invalid argument', () => {
       typeCheckFail(
-        PropTypes.arrayOf({ foo: PropTypes.string }),
-        { foo: 'bar' },
-        'Property `testProp` of component `testComponent` has invalid PropType notation inside arrayOf.'
+        PropTypes.arrayOf({foo: PropTypes.string}),
+        {foo: 'bar'},
+        'Property `testProp` of component `testComponent` has invalid PropType notation inside arrayOf.',
       );
@@ -148,3 +271,3 @@ describe('ReactPropTypes', function() {
 
-    it('should support the arrayOf propTypes', function() {
+    it('should support the arrayOf propTypes', () => {
       typeCheckPass(PropTypes.arrayOf(PropTypes.number), [1, 2, 3]);
@@ -152,8 +275,9 @@ describe('ReactPropTypes', function() {
       typeCheckPass(PropTypes.arrayOf(PropTypes.oneOf(['a', 'b'])), ['a', 'b']);
+      typeCheckPass(PropTypes.arrayOf(PropTypes.symbol), [Symbol(), Symbol()]);
     });
 
-    it('should support arrayOf with complex types', function() {
+    it('should support arrayOf with complex types', () => {
       typeCheckPass(
         PropTypes.arrayOf(PropTypes.shape({a: PropTypes.number.isRequired})),
-        [{a: 1}, {a: 2}]
+        [{a: 1}, {a: 2}],
       );
@@ -161,9 +285,9 @@ describe('ReactPropTypes', function() {
       function Thing() {}
-      typeCheckPass(
-        PropTypes.arrayOf(PropTypes.instanceOf(Thing)),
-        [new Thing(), new Thing()]
-      );
+      typeCheckPass(PropTypes.arrayOf(PropTypes.instanceOf(Thing)), [
+        new Thing(),
+        new Thing(),
+      ]);
     });
 
-    it('should warn with invalid items in the array', function() {
+    it('should warn with invalid items in the array', () => {
       typeCheckFail(
@@ -172,3 +296,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp[2]` of type `string` supplied to ' +
-        '`testComponent`, expected `number`.'
+          '`testComponent`, expected `number`.',
       );
@@ -176,3 +300,3 @@ describe('ReactPropTypes', function() {
 
-    it('should warn with invalid complex types', function() {
+    it('should warn with invalid complex types', () => {
       function Thing() {}
@@ -184,3 +308,5 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp[1]` of type `String` supplied to ' +
-        '`testComponent`, expected instance of `' + name + '`.'
+          '`testComponent`, expected instance of `' +
+          name +
+          '`.',
       );
@@ -188,3 +314,3 @@ describe('ReactPropTypes', function() {
 
-    it('should warn when passed something other than an array', function() {
+    it('should warn when passed something other than an array', () => {
       typeCheckFail(
@@ -193,3 +319,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `object` supplied to ' +
-        '`testComponent`, expected an array.'
+          '`testComponent`, expected an array.',
       );
@@ -199,3 +325,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `number` supplied to ' +
-        '`testComponent`, expected an array.'
+          '`testComponent`, expected an array.',
       );
@@ -205,3 +331,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `string` supplied to ' +
-        '`testComponent`, expected an array.'
+          '`testComponent`, expected an array.',
       );
@@ -209,3 +335,3 @@ describe('ReactPropTypes', function() {
 
-    it('should not warn when passing an empty array', function() {
+    it('should not warn when passing an empty array', () => {
       typeCheckPass(PropTypes.arrayOf(PropTypes.number), []);
@@ -213,3 +339,3 @@ describe('ReactPropTypes', function() {
 
-    it('should be implicitly optional and not warn without values', function() {
+    it('should be implicitly optional and not warn without values', () => {
       typeCheckPass(PropTypes.arrayOf(PropTypes.number), null);
@@ -218,12 +344,29 @@ describe('ReactPropTypes', function() {
 
-    it('should warn for missing required values', function() {
-      typeCheckFail(
+    it('should warn for missing required values', () => {
+      typeCheckFailRequiredValues(
+        PropTypes.arrayOf(PropTypes.number).isRequired,
+      );
+    });
+
+    it('should warn if called manually in development', () => {
+      spyOn(console, 'error');
+      expectWarningInDevelopment(PropTypes.arrayOf({foo: PropTypes.string}), {
+        foo: 'bar',
+      });
+      expectWarningInDevelopment(PropTypes.arrayOf(PropTypes.number), [
+        1,
+        2,
+        'b',
+      ]);
+      expectWarningInDevelopment(PropTypes.arrayOf(PropTypes.number), {
+        '0': 'maybe-array',
+        length: 1,
+      });
+      expectWarningInDevelopment(
         PropTypes.arrayOf(PropTypes.number).isRequired,
         null,
-        requiredMessage
       );
-      typeCheckFail(
+      expectWarningInDevelopment(
         PropTypes.arrayOf(PropTypes.number).isRequired,
         undefined,
-        requiredMessage
       );
@@ -232,13 +375,13 @@ describe('ReactPropTypes', function() {
 
-  describe('Component Type', function() {
-    beforeEach(function() {
-      Component = React.createClass({
-        propTypes: {
+  describe('Component Type', () => {
+    beforeEach(() => {
+      Component = class extends React.Component {
+        static propTypes = {
           label: PropTypes.element.isRequired,
-        },
+        };
 
-        render: function() {
+        render() {
           return <div>{this.props.label}</div>;
-        },
-      });
+        }
+      };
     });
@@ -250,8 +393,26 @@ describe('ReactPropTypes', function() {
     it('should not support multiple components or scalar values', () => {
-      var message = 'Invalid prop `testProp` supplied to `testComponent`, ' +
-        'expected a single ReactElement.';
-      typeCheckFail(PropTypes.element, [<div />, <div />], message);
-      typeCheckFail(PropTypes.element, 123, message);
-      typeCheckFail(PropTypes.element, 'foo', message);
-      typeCheckFail(PropTypes.element, false, message);
+      typeCheckFail(
+        PropTypes.element,
+        [<div />, <div />],
+        'Invalid prop `testProp` of type `array` supplied to `testComponent`, ' +
+          'expected a single ReactElement.',
+      );
+      typeCheckFail(
+        PropTypes.element,
+        123,
+        'Invalid prop `testProp` of type `number` supplied to `testComponent`, ' +
+          'expected a single ReactElement.',
+      );
+      typeCheckFail(
+        PropTypes.element,
+        'foo',
+        'Invalid prop `testProp` of type `string` supplied to `testComponent`, ' +
+          'expected a single ReactElement.',
+      );
+      typeCheckFail(
+        PropTypes.element,
+        false,
+        'Invalid prop `testProp` of type `boolean` supplied to `testComponent`, ' +
+          'expected a single ReactElement.',
+      );
     });
@@ -262,5 +423,5 @@ describe('ReactPropTypes', function() {
       var instance = <Component label={<div />} />;
-      instance = ReactTestUtils.renderIntoDocument(instance);
+      ReactTestUtils.renderIntoDocument(instance);
 
-      expect(console.error.argsForCall.length).toBe(0);
+      expect(console.error.calls.count()).toBe(0);
     });
@@ -271,8 +432,8 @@ describe('ReactPropTypes', function() {
       var instance = <Component />;
-      instance = ReactTestUtils.renderIntoDocument(instance);
+      ReactTestUtils.renderIntoDocument(instance);
 
-      expect(console.error.argsForCall.length).toBe(1);
+      expect(console.error.calls.count()).toBe(1);
     });
 
-    it('should be implicitly optional and not warn without values', function() {
+    it('should be implicitly optional and not warn without values', () => {
       typeCheckPass(PropTypes.element, null);
@@ -281,5 +442,15 @@ describe('ReactPropTypes', function() {
 
-    it('should warn for missing required values', function() {
-      typeCheckFail(PropTypes.element.isRequired, null, requiredMessage);
-      typeCheckFail(PropTypes.element.isRequired, undefined, requiredMessage);
+    it('should warn for missing required values', () => {
+      typeCheckFailRequiredValues(PropTypes.element.isRequired);
+    });
+
+    it('should warn if called manually in development', () => {
+      spyOn(console, 'error');
+      expectWarningInDevelopment(PropTypes.element, [<div />, <div />]);
+      expectWarningInDevelopment(PropTypes.element, <div />);
+      expectWarningInDevelopment(PropTypes.element, 123);
+      expectWarningInDevelopment(PropTypes.element, 'foo');
+      expectWarningInDevelopment(PropTypes.element, false);
+      expectWarningInDevelopment(PropTypes.element.isRequired, null);
+      expectWarningInDevelopment(PropTypes.element.isRequired, undefined);
     });
@@ -287,4 +458,4 @@ describe('ReactPropTypes', function() {
 
-  describe('Instance Types', function() {
-    it('should warn for invalid instances', function() {
+  describe('Instance Types', () => {
+    it('should warn for invalid instances', () => {
       function Person() {}
@@ -299,3 +470,5 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `Boolean` supplied to ' +
-        '`testComponent`, expected instance of `' + personName + '`.'
+          '`testComponent`, expected instance of `' +
+          personName +
+          '`.',
       );
@@ -305,3 +478,5 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `Object` supplied to ' +
-        '`testComponent`, expected instance of `' + personName + '`.'
+          '`testComponent`, expected instance of `' +
+          personName +
+          '`.',
       );
@@ -311,3 +486,5 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `String` supplied to ' +
-        '`testComponent`, expected instance of `' + personName + '`.'
+          '`testComponent`, expected instance of `' +
+          personName +
+          '`.',
       );
@@ -317,3 +494,5 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `Object` supplied to ' +
-        '`testComponent`, expected instance of `' + dateName + '`.'
+          '`testComponent`, expected instance of `' +
+          dateName +
+          '`.',
       );
@@ -323,3 +502,5 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `Object` supplied to ' +
-        '`testComponent`, expected instance of `' + regExpName + '`.'
+          '`testComponent`, expected instance of `' +
+          regExpName +
+          '`.',
       );
@@ -329,3 +510,5 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `Cat` supplied to ' +
-        '`testComponent`, expected instance of `' + personName + '`.'
+          '`testComponent`, expected instance of `' +
+          personName +
+          '`.',
       );
@@ -335,3 +518,5 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `<<anonymous>>` supplied to ' +
-        '`testComponent`, expected instance of `' + personName + '`.'
+          '`testComponent`, expected instance of `' +
+          personName +
+          '`.',
       );
@@ -339,3 +524,3 @@ describe('ReactPropTypes', function() {
 
-    it('should not warn for valid values', function() {
+    it('should not warn for valid values', () => {
       function Person() {}
@@ -351,3 +536,3 @@ describe('ReactPropTypes', function() {
 
-    it('should be implicitly optional and not warn without values', function() {
+    it('should be implicitly optional and not warn without values', () => {
       typeCheckPass(PropTypes.instanceOf(String), null);
@@ -356,8 +541,14 @@ describe('ReactPropTypes', function() {
 
-    it('should warn for missing required values', function() {
-      typeCheckFail(
-        PropTypes.instanceOf(String).isRequired, null, requiredMessage
-      );
-      typeCheckFail(
-        PropTypes.instanceOf(String).isRequired, undefined, requiredMessage
+    it('should warn for missing required values', () => {
+      typeCheckFailRequiredValues(PropTypes.instanceOf(String).isRequired);
+    });
+
+    it('should warn if called manually in development', () => {
+      spyOn(console, 'error');
+      expectWarningInDevelopment(PropTypes.instanceOf(Date), {});
+      expectWarningInDevelopment(PropTypes.instanceOf(Date), new Date());
+      expectWarningInDevelopment(PropTypes.instanceOf(Date).isRequired, {});
+      expectWarningInDevelopment(
+        PropTypes.instanceOf(Date).isRequired,
+        new Date(),
       );
@@ -366,13 +557,14 @@ describe('ReactPropTypes', function() {
 
-  describe('React Component Types', function() {
-    beforeEach(function() {
-      MyComponent = React.createClass({
-        render: function() {
+  describe('React Component Types', () => {
+    beforeEach(() => {
+      MyComponent = class extends React.Component {
+        render() {
           return <div />;
-        },
-      });
+        }
+      };
     });
 
-    it('should warn for invalid values', function() {
-      var failMessage = 'Invalid prop `testProp` supplied to ' +
+    it('should warn for invalid values', () => {
+      var failMessage =
+        'Invalid prop `testProp` supplied to ' +
         '`testComponent`, expected a ReactNode.';
@@ -384,3 +576,3 @@ describe('ReactPropTypes', function() {
 
-    it('should not warn for valid values', function() {
+    it('should not warn for valid values', () => {
       spyOn(console, 'error');
@@ -402,18 +594,21 @@ describe('ReactPropTypes', function() {
       var frag = ReactFragment.create;
-      typeCheckPass(PropTypes.node, frag({
-        k0: 123,
-        k1: 'Some string',
-        k2: <div />,
-        k3: frag({
-          k30: <MyComponent />,
-          k31: frag({k310: <a />}),
-          k32: 'Another string',
+      typeCheckPass(
+        PropTypes.node,
+        frag({
+          k0: 123,
+          k1: 'Some string',
+          k2: <div />,
+          k3: frag({
+            k30: <MyComponent />,
+            k31: frag({k310: <a />}),
+            k32: 'Another string',
+          }),
+          k4: null,
+          k5: undefined,
         }),
-        k4: null,
-        k5: undefined,
-      }));
-      expect(console.error.calls).toEqual([]);
+      );
+      expect(console.error.calls.count()).toBe(0);
     });
 
-    it('should not warn for iterables', function() {
+    it('should not warn for iterables', () => {
       var iterable = {
@@ -433,3 +628,3 @@ describe('ReactPropTypes', function() {
 
-    it('should not warn for entry iterables', function() {
+    it('should not warn for entry iterables', () => {
       var iterable = {
@@ -440,3 +635,6 @@ describe('ReactPropTypes', function() {
               var done = ++i > 2;
-              return {value: done ? undefined : ['#' + i, <MyComponent />], done: done};
+              return {
+                value: done ? undefined : ['#' + i, <MyComponent />],
+                done: done,
+              };
             },
@@ -450,3 +648,3 @@ describe('ReactPropTypes', function() {
 
-    it('should not warn for null/undefined if not required', function() {
+    it('should not warn for null/undefined if not required', () => {
       typeCheckPass(PropTypes.node, null);
@@ -455,26 +653,26 @@ describe('ReactPropTypes', function() {
 
-    it('should warn for missing required values', function() {
-      typeCheckFail(
-        PropTypes.node.isRequired,
-        null,
-        'Required prop `testProp` was not specified in `testComponent`.'
-      );
-      typeCheckFail(
-        PropTypes.node.isRequired,
-        undefined,
-        'Required prop `testProp` was not specified in `testComponent`.'
-      );
+    it('should warn for missing required values', () => {
+      typeCheckFailRequiredValues(PropTypes.node.isRequired);
     });
 
-    it('should accept empty array for required props', function() {
+    it('should accept empty array for required props', () => {
       typeCheckPass(PropTypes.node.isRequired, []);
     });
+
+    it('should warn if called manually in development', () => {
+      spyOn(console, 'error');
+      expectWarningInDevelopment(PropTypes.node, 'node');
+      expectWarningInDevelopment(PropTypes.node, {});
+      expectWarningInDevelopment(PropTypes.node.isRequired, 'node');
+      expectWarningInDevelopment(PropTypes.node.isRequired, undefined);
+      expectWarningInDevelopment(PropTypes.node.isRequired, undefined);
+    });
   });
 
-  describe('ObjectOf Type', function() {
-    it('should fail for invalid argument', function() {
+  describe('ObjectOf Type', () => {
+    it('should fail for invalid argument', () => {
       typeCheckFail(
-        PropTypes.objectOf({ foo: PropTypes.string }),
-        { foo: 'bar' },
-        'Property `testProp` of component `testComponent` has invalid PropType notation inside objectOf.'
+        PropTypes.objectOf({foo: PropTypes.string}),
+        {foo: 'bar'},
+        'Property `testProp` of component `testComponent` has invalid PropType notation inside objectOf.',
       );
@@ -482,18 +680,24 @@ describe('ReactPropTypes', function() {
 
-    it('should support the objectOf propTypes', function() {
+    it('should support the objectOf propTypes', () => {
       typeCheckPass(PropTypes.objectOf(PropTypes.number), {a: 1, b: 2, c: 3});
-      typeCheckPass(
-        PropTypes.objectOf(PropTypes.string),
-        {a: 'a', b: 'b', c: 'c'}
-      );
-      typeCheckPass(
-        PropTypes.objectOf(PropTypes.oneOf(['a', 'b'])),
-        {a: 'a', b: 'b'}
-      );
+      typeCheckPass(PropTypes.objectOf(PropTypes.string), {
+        a: 'a',
+        b: 'b',
+        c: 'c',
+      });
+      typeCheckPass(PropTypes.objectOf(PropTypes.oneOf(['a', 'b'])), {
+        a: 'a',
+        b: 'b',
+      });
+      typeCheckPass(PropTypes.objectOf(PropTypes.symbol), {
+        a: Symbol(),
+        b: Symbol(),
+        c: Symbol(),
+      });
     });
 
-    it('should support objectOf with complex types', function() {
+    it('should support objectOf with complex types', () => {
       typeCheckPass(
         PropTypes.objectOf(PropTypes.shape({a: PropTypes.number.isRequired})),
-        {a: {a: 1}, b: {a: 2}}
+        {a: {a: 1}, b: {a: 2}},
       );
@@ -501,9 +705,9 @@ describe('ReactPropTypes', function() {
       function Thing() {}
-      typeCheckPass(
-        PropTypes.objectOf(PropTypes.instanceOf(Thing)),
-        {a: new Thing(), b: new Thing()}
-      );
+      typeCheckPass(PropTypes.objectOf(PropTypes.instanceOf(Thing)), {
+        a: new Thing(),
+        b: new Thing(),
+      });
     });
 
-    it('should warn with invalid items in the object', function() {
+    it('should warn with invalid items in the object', () => {
       typeCheckFail(
@@ -512,3 +716,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp.c` of type `string` supplied to `testComponent`, ' +
-        'expected `number`.'
+          'expected `number`.',
       );
@@ -516,3 +720,3 @@ describe('ReactPropTypes', function() {
 
-    it('should warn with invalid complex types', function() {
+    it('should warn with invalid complex types', () => {
       function Thing() {}
@@ -524,3 +728,5 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp.b` of type `String` supplied to ' +
-        '`testComponent`, expected instance of `' + name + '`.'
+          '`testComponent`, expected instance of `' +
+          name +
+          '`.',
       );
@@ -528,3 +734,3 @@ describe('ReactPropTypes', function() {
 
-    it('should warn when passed something other than an object', function() {
+    it('should warn when passed something other than an object', () => {
       typeCheckFail(
@@ -533,3 +739,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `array` supplied to ' +
-        '`testComponent`, expected an object.'
+          '`testComponent`, expected an object.',
       );
@@ -539,3 +745,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `number` supplied to ' +
-        '`testComponent`, expected an object.'
+          '`testComponent`, expected an object.',
       );
@@ -545,3 +751,9 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `string` supplied to ' +
-        '`testComponent`, expected an object.'
+          '`testComponent`, expected an object.',
+      );
+      typeCheckFail(
+        PropTypes.objectOf(PropTypes.symbol),
+        Symbol(),
+        'Invalid prop `testProp` of type `symbol` supplied to ' +
+          '`testComponent`, expected an object.',
       );
@@ -549,3 +761,3 @@ describe('ReactPropTypes', function() {
 
-    it('should not warn when passing an empty object', function() {
+    it('should not warn when passing an empty object', () => {
       typeCheckPass(PropTypes.objectOf(PropTypes.number), {});
@@ -553,3 +765,3 @@ describe('ReactPropTypes', function() {
 
-    it('should be implicitly optional and not warn without values', function() {
+    it('should be implicitly optional and not warn without values', () => {
       typeCheckPass(PropTypes.objectOf(PropTypes.number), null);
@@ -558,12 +770,23 @@ describe('ReactPropTypes', function() {
 
-    it('should warn for missing required values', function() {
-      typeCheckFail(
+    it('should warn for missing required values', () => {
+      typeCheckFailRequiredValues(
         PropTypes.objectOf(PropTypes.number).isRequired,
-        null,
-        requiredMessage
       );
-      typeCheckFail(
-        PropTypes.objectOf(PropTypes.number).isRequired,
+    });
+
+    it('should warn if called manually in development', () => {
+      spyOn(console, 'error');
+      expectWarningInDevelopment(PropTypes.objectOf({foo: PropTypes.string}), {
+        foo: 'bar',
+      });
+      expectWarningInDevelopment(PropTypes.objectOf(PropTypes.number), {
+        a: 1,
+        b: 2,
+        c: 'b',
+      });
+      expectWarningInDevelopment(PropTypes.objectOf(PropTypes.number), [1, 2]);
+      expectWarningInDevelopment(PropTypes.objectOf(PropTypes.number), null);
+      expectWarningInDevelopment(
+        PropTypes.objectOf(PropTypes.number),
         undefined,
-        requiredMessage
       );
@@ -572,12 +795,17 @@ describe('ReactPropTypes', function() {
 
-  describe('OneOf Types', function() {
-    it('should fail for invalid argument', function() {
-      typeCheckFail(
-        PropTypes.oneOf('red', 'blue'),
-        'red',
-        'Invalid argument supplied to oneOf, expected an instance of array.'
+  describe('OneOf Types', () => {
+    it('should warn but not error for invalid argument', () => {
+      spyOn(console, 'error');
+
+      PropTypes.oneOf('red', 'blue');
+
+      expect(console.error).toHaveBeenCalled();
+      expect(console.error.calls.argsFor(0)[0]).toContain(
+        'Invalid argument supplied to oneOf, expected an instance of array.',
       );
+
+      typeCheckPass(PropTypes.oneOf('red', 'blue'), 'red');
     });
 
-    it('should warn for invalid values', function() {
+    it('should warn for invalid values', () => {
       typeCheckFail(
@@ -586,3 +814,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of value `true` supplied to ' +
-        '`testComponent`, expected one of ["red","blue"].'
+          '`testComponent`, expected one of ["red","blue"].',
       );
@@ -592,3 +820,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of value `` supplied to `testComponent`, ' +
-        'expected one of ["red","blue"].'
+          'expected one of ["red","blue"].',
       );
@@ -598,3 +826,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of value `` supplied to `testComponent`, ' +
-        'expected one of ["red","blue"].'
+          'expected one of ["red","blue"].',
       );
@@ -604,3 +832,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of value `false` supplied to ' +
-        '`testComponent`, expected one of [0,"false"].'
+          '`testComponent`, expected one of [0,"false"].',
       );
@@ -608,3 +836,3 @@ describe('ReactPropTypes', function() {
 
-    it('should not warn for valid values', function() {
+    it('should not warn for valid values', () => {
       typeCheckPass(PropTypes.oneOf(['red', 'blue']), 'red');
@@ -614,3 +842,3 @@ describe('ReactPropTypes', function() {
 
-    it('should be implicitly optional and not warn without values', function() {
+    it('should be implicitly optional and not warn without values', () => {
       typeCheckPass(PropTypes.oneOf(['red', 'blue']), null);
@@ -619,13 +847,11 @@ describe('ReactPropTypes', function() {
 
-    it('should warn for missing required values', function() {
-      typeCheckFail(
-        PropTypes.oneOf(['red', 'blue']).isRequired,
-        null,
-        requiredMessage
-      );
-      typeCheckFail(
-        PropTypes.oneOf(['red', 'blue']).isRequired,
-        undefined,
-        requiredMessage
-      );
+    it('should warn for missing required values', () => {
+      typeCheckFailRequiredValues(PropTypes.oneOf(['red', 'blue']).isRequired);
+    });
+
+    it('should warn if called manually in development', () => {
+      spyOn(console, 'error');
+      expectWarningInDevelopment(PropTypes.oneOf(['red', 'blue']), true);
+      expectWarningInDevelopment(PropTypes.oneOf(['red', 'blue']), null);
+      expectWarningInDevelopment(PropTypes.oneOf(['red', 'blue']), undefined);
     });
@@ -633,12 +859,17 @@ describe('ReactPropTypes', function() {
 
-  describe('Union Types', function() {
-    it('should fail for invalid argument', function() {
-      typeCheckFail(
-        PropTypes.oneOfType(PropTypes.string, PropTypes.number),
-        'red',
-        'Invalid argument supplied to oneOfType, expected an instance of array.'
+  describe('Union Types', () => {
+    it('should warn but not error for invalid argument', () => {
+      spyOn(console, 'error');
+
+      PropTypes.oneOfType(PropTypes.string, PropTypes.number);
+
+      expect(console.error).toHaveBeenCalled();
+      expect(console.error.calls.argsFor(0)[0]).toContain(
+        'Invalid argument supplied to oneOfType, expected an instance of array.',
       );
+
+      typeCheckPass(PropTypes.oneOf(PropTypes.string, PropTypes.number), []);
     });
 
-    it('should warn if none of the types are valid', function() {
+    it('should warn if none of the types are valid', () => {
       typeCheckFail(
@@ -646,3 +877,3 @@ describe('ReactPropTypes', function() {
         [],
-        'Invalid prop `testProp` supplied to `testComponent`.'
+        'Invalid prop `testProp` supplied to `testComponent`.',
       );
@@ -656,3 +887,3 @@ describe('ReactPropTypes', function() {
         {c: 1},
-        'Invalid prop `testProp` supplied to `testComponent`.'
+        'Invalid prop `testProp` supplied to `testComponent`.',
       );
@@ -660,7 +891,4 @@ describe('ReactPropTypes', function() {
 
-    it('should not warn if one of the types are valid', function() {
-      var checker = PropTypes.oneOfType([
-        PropTypes.string,
-        PropTypes.number,
-      ]);
+    it('should not warn if one of the types are valid', () => {
+      var checker = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);
       typeCheckPass(checker, null);
@@ -677,8 +905,10 @@ describe('ReactPropTypes', function() {
 
-    it('should be implicitly optional and not warn without values', function() {
+    it('should be implicitly optional and not warn without values', () => {
       typeCheckPass(
-        PropTypes.oneOfType([PropTypes.string, PropTypes.number]), null
+        PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+        null,
       );
       typeCheckPass(
-        PropTypes.oneOfType([PropTypes.string, PropTypes.number]), undefined
+        PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+        undefined,
       );
@@ -686,12 +916,21 @@ describe('ReactPropTypes', function() {
 
-    it('should warn for missing required values', function() {
-      typeCheckFail(
+    it('should warn for missing required values', () => {
+      typeCheckFailRequiredValues(
         PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
+      );
+    });
+
+    it('should warn if called manually in development', () => {
+      spyOn(console, 'error');
+      expectWarningInDevelopment(
+        PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
+        [],
+      );
+      expectWarningInDevelopment(
+        PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
         null,
-        requiredMessage
       );
-      typeCheckFail(
-        PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
+      expectWarningInDevelopment(
+        PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
         undefined,
-        requiredMessage
       );
@@ -700,4 +939,4 @@ describe('ReactPropTypes', function() {
 
-  describe('Shape Types', function() {
-    it('should warn for non objects', function() {
+  describe('Shape Types', () => {
+    it('should warn for non objects', () => {
       typeCheckFail(
@@ -706,3 +945,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `string` supplied to ' +
-        '`testComponent`, expected `object`.'
+          '`testComponent`, expected `object`.',
       );
@@ -712,3 +951,3 @@ describe('ReactPropTypes', function() {
         'Invalid prop `testProp` of type `array` supplied to ' +
-        '`testComponent`, expected `object`.'
+          '`testComponent`, expected `object`.',
       );
@@ -716,3 +955,3 @@ describe('ReactPropTypes', function() {
 
-    it('should not warn for empty values', function() {
+    it('should not warn for empty values', () => {
       typeCheckPass(PropTypes.shape({}), undefined);
@@ -722,3 +961,3 @@ describe('ReactPropTypes', function() {
 
-    it('should not warn for an empty object', function() {
+    it('should not warn for an empty object', () => {
       typeCheckPass(PropTypes.shape({}).isRequired, {});
@@ -726,3 +965,3 @@ describe('ReactPropTypes', function() {
 
-    it('should not warn for non specified types', function() {
+    it('should not warn for non specified types', () => {
       typeCheckPass(PropTypes.shape({}), {key: 1});
@@ -730,3 +969,3 @@ describe('ReactPropTypes', function() {
 
-    it('should not warn for valid types', function() {
+    it('should not warn for valid types', () => {
       typeCheckPass(PropTypes.shape({key: PropTypes.number}), {key: 1});
@@ -734,3 +973,3 @@ describe('ReactPropTypes', function() {
 
-    it('should warn for required valid types', function() {
+    it('should warn for required valid types', () => {
       typeCheckFail(
@@ -738,3 +977,4 @@ describe('ReactPropTypes', function() {
         {},
-        'Required prop `testProp.key` was not specified in `testComponent`.'
+        'The prop `testProp.key` is marked as required in `testComponent`, ' +
+          'but its value is `undefined`.',
       );
@@ -742,3 +982,3 @@ describe('ReactPropTypes', function() {
 
-    it('should warn for the first required type', function() {
+    it('should warn for the first required type', () => {
       typeCheckFail(
@@ -749,3 +989,4 @@ describe('ReactPropTypes', function() {
         {},
-        'Required prop `testProp.key` was not specified in `testComponent`.'
+        'The prop `testProp.key` is marked as required in `testComponent`, ' +
+          'but its value is `undefined`.',
       );
@@ -753,7 +994,8 @@ describe('ReactPropTypes', function() {
 
-    it('should warn for invalid key types', function() {
-      typeCheckFail(PropTypes.shape({key: PropTypes.number}),
+    it('should warn for invalid key types', () => {
+      typeCheckFail(
+        PropTypes.shape({key: PropTypes.number}),
         {key: 'abc'},
         'Invalid prop `testProp.key` of type `string` supplied to `testComponent`, ' +
-        'expected `number`.'
+          'expected `number`.',
       );
@@ -761,8 +1003,10 @@ describe('ReactPropTypes', function() {
 
-    it('should be implicitly optional and not warn without values', function() {
+    it('should be implicitly optional and not warn without values', () => {
       typeCheckPass(
-        PropTypes.shape(PropTypes.shape({key: PropTypes.number})), null
+        PropTypes.shape(PropTypes.shape({key: PropTypes.number})),
+        null,
       );
       typeCheckPass(
-        PropTypes.shape(PropTypes.shape({key: PropTypes.number})), undefined
+        PropTypes.shape(PropTypes.shape({key: PropTypes.number})),
+        undefined,
       );
@@ -770,13 +1014,53 @@ describe('ReactPropTypes', function() {
 
-    it('should warn for missing required values', function() {
-      typeCheckFail(
+    it('should warn for missing required values', () => {
+      typeCheckFailRequiredValues(
+        PropTypes.shape({key: PropTypes.number}).isRequired,
+      );
+    });
+
+    it('should warn if called manually in development', () => {
+      spyOn(console, 'error');
+      expectWarningInDevelopment(PropTypes.shape({}), 'some string');
+      expectWarningInDevelopment(PropTypes.shape({foo: PropTypes.number}), {
+        foo: 42,
+      });
+      expectWarningInDevelopment(
         PropTypes.shape({key: PropTypes.number}).isRequired,
         null,
-        requiredMessage
       );
-      typeCheckFail(
+      expectWarningInDevelopment(
         PropTypes.shape({key: PropTypes.number}).isRequired,
         undefined,
-        requiredMessage
       );
+      expectWarningInDevelopment(PropTypes.element, <div />);
+    });
+  });
+
+  describe('Symbol Type', () => {
+    it('should warn for non-symbol', () => {
+      typeCheckFail(
+        PropTypes.symbol,
+        'hello',
+        'Invalid prop `testProp` of type `string` supplied to ' +
+          '`testComponent`, expected `symbol`.',
+      );
+      typeCheckFail(
+        PropTypes.symbol,
+        function() {},
+        'Invalid prop `testProp` of type `function` supplied to ' +
+          '`testComponent`, expected `symbol`.',
+      );
+      typeCheckFail(
+        PropTypes.symbol,
+        {
+          '@@toStringTag': 'Katana',
+        },
+        'Invalid prop `testProp` of type `object` supplied to ' +
+          '`testComponent`, expected `symbol`.',
+      );
+    });
+
+    it('should not warn for a polyfilled Symbol', () => {
+      var CoreSymbol = require('core-js/library/es6/symbol');
+      typeCheckPass(PropTypes.symbol, CoreSymbol('core-js'));
     });
@@ -784,4 +1068,4 @@ describe('ReactPropTypes', function() {
 
-  describe('Custom validator', function() {
-    beforeEach(function() {
+  describe('Custom validator', () => {
+    beforeEach(() => {
       jest.resetModuleRegistry();
@@ -789,41 +1073,41 @@ describe('ReactPropTypes', function() {
 
-    it('should have been called with the right params', function() {
+    it('should have been called with the right params', () => {
       var spy = jasmine.createSpy();
-      Component = React.createClass({
-        propTypes: {num: spy},
+      Component = class extends React.Component {
+        static propTypes = {num: spy};
 
-        render: function() {
+        render() {
           return <div />;
-        },
-      });
+        }
+      };
 
       var instance = <Component num={5} />;
-      instance = ReactTestUtils.renderIntoDocument(instance);
+      ReactTestUtils.renderIntoDocument(instance);
 
-      expect(spy.argsForCall.length).toBe(2); // temp double validation
-      expect(spy.argsForCall[0][1]).toBe('num');
-      expect(spy.argsForCall[0][2]).toBe('Component');
+      expect(spy.calls.count()).toBe(1);
+      expect(spy.calls.argsFor(0)[1]).toBe('num');
     });
 
-    it('should have been called even if the prop is not present', function() {
+    it('should have been called even if the prop is not present', () => {
       var spy = jasmine.createSpy();
-      Component = React.createClass({
-        propTypes: {num: spy},
+      Component = class extends React.Component {
+        static propTypes = {num: spy};
 
-        render: function() {
+        render() {
           return <div />;
-        },
-      });
+        }
+      };
 
       var instance = <Component bla={5} />;
-      instance = ReactTestUtils.renderIntoDocument(instance);
+      ReactTestUtils.renderIntoDocument(instance);
 
-      expect(spy.argsForCall.length).toBe(2); // temp double validation
+      expect(spy.calls.count()).toBe(1);
+      expect(spy.calls.argsFor(0)[1]).toBe('num');
     });
 
-    it('should have received the validator\'s return value', function() {
+    it("should have received the validator's return value", () => {
       spyOn(console, 'error');
-
-      var spy = jasmine.createSpy().andCallFake(
-        function(props, propName, componentName) {
+      var spy = jasmine
+        .createSpy()
+        .and.callFake(function(props, propName, componentName) {
           if (props[propName] !== 5) {
@@ -831,17 +1115,19 @@ describe('ReactPropTypes', function() {
           }
-        }
-      );
-      Component = React.createClass({
-        propTypes: {num: spy},
+        });
+      Component = class extends React.Component {
+        static propTypes = {num: spy};
 
-        render: function() {
+        render() {
           return <div />;
-        },
-      });
+        }
+      };
 
       var instance = <Component num={6} />;
-      instance = ReactTestUtils.renderIntoDocument(instance);
-      expect(console.error.argsForCall.length).toBe(1);
-      expect(console.error.argsForCall[0][0]).toBe(
-        'Warning: Failed propType: num must be 5!'
+      ReactTestUtils.renderIntoDocument(instance);
+      expect(console.error.calls.count()).toBe(1);
+      expect(
+        console.error.calls.argsFor(0)[0].replace(/\(at .+?:\d+\)/g, '(at **)'),
+      ).toBe(
+        'Warning: Failed prop type: num must be 5!\n' +
+          '    in Component (at **)',
       );
@@ -849,24 +1135,21 @@ describe('ReactPropTypes', function() {
 
-    it('should not warn if the validator returned null',
-      function() {
-        spyOn(console, 'error');
-
-        var spy = jasmine.createSpy().andCallFake(
-          function(props, propName, componentName) {
-            return null;
-          }
-        );
-        Component = React.createClass({
-          propTypes: {num: spy},
-
-          render: function() {
-            return <div />;
-          },
+    it('should not warn if the validator returned null', () => {
+      spyOn(console, 'error');
+      var spy = jasmine
+        .createSpy()
+        .and.callFake(function(props, propName, componentName) {
+          return null;
         });
+      Component = class extends React.Component {
+        static propTypes = {num: spy};
 
-        var instance = <Component num={5} />;
-        instance = ReactTestUtils.renderIntoDocument(instance);
-        expect(console.error.argsForCall.length).toBe(0);
-      }
-    );
+        render() {
+          return <div />;
+        }
+      };
+
+      var instance = <Component num={5} />;
+      ReactTestUtils.renderIntoDocument(instance);
+      expect(console.error.calls.count()).toBe(0);
+    });
   });
diff --git a/src/isomorphic/deprecated/OrderedMap.js b/src/isomorphic/deprecated/OrderedMap.js
deleted file mode 100644
index 4336cdc38..000000000
--- a/src/isomorphic/deprecated/OrderedMap.js
+++ /dev/null
@@ -1,505 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @providesModule OrderedMap
- */
-
-'use strict';
-
-var invariant = require('invariant');
-
-var PREFIX = 'key:';
-
-/**
- * Utility to extract a backing object from an initialization `Array`, allowing
- * the caller to assist in resolving the unique ID for each entry via the
- * `keyExtractor` callback. The `keyExtractor` must extract non-empty strings or
- * numbers.
- * @param {Array<Object!>} arr Array of items.
- * @param {function} keyExtractor Extracts a unique key from each item.
- * @return {Object} Map from unique key to originating value that the key was
- * extracted from.
- * @throws Exception if the initialization array has duplicate extracted keys.
- */
-function extractObjectFromArray(arr, keyExtractor) {
-  var normalizedObj = {};
-  for (var i = 0; i < arr.length; i++) {
-    var item = arr[i];
-    var key = keyExtractor(item);
-    assertValidPublicKey(key);
-    var normalizedKey = PREFIX + key;
-    invariant(
-      !(normalizedKey in normalizedObj),
-      'OrderedMap: IDs returned by the key extraction function must be unique.'
-    );
-    normalizedObj[normalizedKey] = item;
-  }
-  return normalizedObj;
-}
-
-/**
- * Utility class for mappings with ordering. This class is to be used in an
- * immutable manner. A `OrderedMap` is very much like the native JavaScript
- * object, where keys map to values via the `get()` function. Also, like the
- * native JavaScript object, there is an ordering associated with the mapping.
- * This class is helpful because it eliminates many of the pitfalls that come
- * with the native JavaScript ordered mappings. Specifically, there are
- * inconsistencies with numeric keys in some JavaScript implementations
- * (enumeration ordering). This class protects against those pitfalls and
- * provides functional utilities for dealing with these `OrderedMap`s.
- *
- * - TODO:
- * - orderedMergeExclusive: Merges mutually exclusive `OrderedMap`s.
- * - mapReverse().
- *
- * @class {OrderedMap}
- * @constructor {OrderedMap}
- * @param {Object} normalizedObj Object that is known to be a defensive copy of
- * caller supplied data. We require a defensive copy to guard against callers
- * mutating.  It is also assumed that the keys of `normalizedObj` have been
- * normalized and do not contain any numeric-appearing strings.
- * @param {number} computedLength The precomputed length of `_normalizedObj`
- * keys.
- * @private
- */
-function OrderedMapImpl(normalizedObj, computedLength) {
-  this._normalizedObj = normalizedObj;
-  this._computedPositions = null;
-  this.length = computedLength;
-}
-
-/**
- * Validates a "public" key - that is, one that the public facing API supplies.
- * The key is then normalized for internal storage. In order to be considered
- * valid, all keys must be non-empty, defined, non-null strings or numbers.
- *
- * @param {string?} key Validates that the key is suitable for use in a
- * `OrderedMap`.
- * @throws Error if key is not appropriate for use in `OrderedMap`.
- */
-function assertValidPublicKey(key) {
-  invariant(
-    key !== '' && (typeof key === 'string' || typeof key === 'number'),
-    'OrderedMap: Key must be non-empty, non-null string or number.'
-  );
-}
-
-/**
- * Validates that arguments to range operations are within the correct limits.
- *
- * @param {number} start Start of range.
- * @param {number} length Length of range.
- * @param {number} actualLen Actual length of range that should not be
- * exceeded.
- * @throws Error if range arguments are out of bounds.
- */
-function assertValidRangeIndices(start, length, actualLen) {
-  invariant(
-    typeof start === 'number' &&
-    typeof length === 'number' &&
-    length >= 0 &&
-    start >= 0 &&
-    start + length <= actualLen,
-    'OrderedMap: `mapRange` and `forEachRange` expect non-negative start and ' +
-    'length arguments within the bounds of the instance.'
-  );
-}
-
-/**
- * Merges two "normalized" objects (objects who's key have been normalized) into
- * a `OrderedMap`.
- *
- * @param {Object} a Object of key value pairs.
- * @param {Object} b Object of key value pairs.
- * @return {OrderedMap} new `OrderedMap` that results in merging `a` and `b`.
- */
-function _fromNormalizedObjects(a, b) {
-  // Second optional, both must be plain JavaScript objects.
-  invariant(
-    a && a.constructor === Object && (!b || b.constructor === Object),
-    'OrderedMap: Corrupted instance of OrderedMap detected.'
-  );
-
-  var newSet = {};
-  var length = 0;
-  var key;
-  for (key in a) {
-    if (a.hasOwnProperty(key)) {
-      newSet[key] = a[key];
-      length++;
-    }
-  }
-
-  for (key in b) {
-    if (b.hasOwnProperty(key)) {
-      // Increment length if not already added via first object (a)
-      if (!(key in newSet)) {
-        length++;
-      }
-      newSet[key] = b[key];
-    }
-  }
-  return new OrderedMapImpl(newSet, length);
-}
-
-/**
- * Methods for `OrderedMap` instances.
- *
- * @lends OrderedMap.prototype
- * TODO: Make this data structure lazy, unify with LazyArray.
- * TODO: Unify this with ImmutableObject - it is to be used immutably.
- * TODO: If so, consider providing `fromObject` API.
- * TODO: Create faster implementation of merging/mapping from original Array,
- * without having to first create an object - simply for the sake of merging.
- */
-var OrderedMapMethods = {
-
-  /**
-   * Returns whether or not a given key is present in the map.
-   *
-   * @param {string} key Valid string key to lookup membership for.
-   * @return {boolean} Whether or not `key` is a member of the map.
-   * @throws Error if provided known invalid key.
-   */
-  has: function(key) {
-    assertValidPublicKey(key);
-    var normalizedKey = PREFIX + key;
-    return normalizedKey in this._normalizedObj;
-  },
-
-  /**
-   * Returns the object for a given key, or `undefined` if not present. To
-   * distinguish an undefined entry vs not being in the set, use `has()`.
-   *
-   * @param {string} key String key to lookup the value for.
-   * @return {Object?} Object at key `key`, or undefined if not in map.
-   * @throws Error if provided known invalid key.
-   */
-  get: function(key) {
-    assertValidPublicKey(key);
-    var normalizedKey = PREFIX + key;
-    return this.has(key) ? this._normalizedObj[normalizedKey] : undefined;
-  },
-
-  /**
-   * Merges, appending new keys to the end of the ordering. Keys in `orderedMap`
-   * that are redundant with `this`, maintain the same ordering index that they
-   * had in `this`.  This is how standard JavaScript object merging would work.
-   * If you wish to prepend a `OrderedMap` to the beginning of another
-   * `OrderedMap` then simply reverse the order of operation. This is the analog
-   * to `merge(x, y)`.
-   *
-   * @param {OrderedMap} orderedMap OrderedMap to merge onto the end.
-   * @return {OrderedMap} New OrderedMap that represents the result of the
-   * merge.
-   */
-  merge: function(orderedMap) {
-    invariant(
-      orderedMap instanceof OrderedMapImpl,
-      'OrderedMap.merge(...): Expected an OrderedMap instance.'
-    );
-    return _fromNormalizedObjects(
-      this._normalizedObj,
-      orderedMap._normalizedObj
-    );
-  },
-
-  /**
-   * Functional map API. Returns a new `OrderedMap`.
-   *
-   * @param {Function} cb Callback to invoke for each item.
-   * @param {Object?=} context Context to invoke callback from.
-   * @return {OrderedMap} OrderedMap that results from mapping.
-   */
-  map: function(cb, context) {
-    return this.mapRange(cb, 0, this.length, context);
-  },
-
-  /**
-   * The callback `cb` is invoked with the arguments (item, key,
-   * indexInOriginal).
-   *
-   * @param {Function} cb Determines result for each item.
-   * @param {number} start Start index of map range.
-   * @param {end} length End index of map range.
-   * @param {*!?} context Context of callback invocation.
-   * @return {OrderedMap} OrderedMap resulting from mapping the range.
-   */
-  mapRange: function(cb, start, length, context) {
-    var thisSet = this._normalizedObj;
-    var newSet = {};
-    var i = 0;
-    assertValidRangeIndices(start, length, this.length);
-    var end = start + length - 1;
-    for (var key in thisSet) {
-      if (thisSet.hasOwnProperty(key)) {
-        if (i >= start) {
-          if (i > end) {
-            break;
-          }
-          var item = thisSet[key];
-          newSet[key] = cb.call(context, item, key.substr(PREFIX.length), i);
-        }
-        i++;
-      }
-    }
-    return new OrderedMapImpl(newSet, length);
-  },
-
-  /**
-   * Function filter API. Returns new `OrderedMap`.
-   *
-   * @param {Function} cb Callback to invoke for each item.
-   * @param {Object?=} context Context to invoke callback from.
-   * @return {OrderedMap} OrderedMap that results from filtering.
-   */
-  filter: function(cb, context) {
-    return this.filterRange(cb, 0, this.length, context);
-  },
-
-  /**
-   * The callback `cb` is invoked with the arguments (item, key,
-   * indexInOriginal).
-   *
-   * @param {Function} cb Returns true if item should be in result.
-   * @param {number} start Start index of filter range.
-   * @param {number} length End index of map range.
-   * @param {*!?} context Context of callback invocation.
-   * @return {OrderedMap} OrderedMap resulting from filtering the range.
-   */
-  filterRange: function(cb, start, length, context) {
-    var newSet = {};
-    var newSetLength = 0;
-    this.forEachRange(function(item, key, originalIndex) {
-      if (cb.call(context, item, key, originalIndex)) {
-        var normalizedKey = PREFIX + key;
-        newSet[normalizedKey] = item;
-        newSetLength++;
-      }
-    }, start, length);
-    return new OrderedMapImpl(newSet, newSetLength);
-  },
-
-  forEach: function(cb, context) {
-    this.forEachRange(cb, 0, this.length, context);
-  },
-
-  forEachRange: function(cb, start, length, context) {
-    assertValidRangeIndices(start, length, this.length);
-    var thisSet = this._normalizedObj;
-    var i = 0;
-    var end = start + length - 1;
-    for (var key in thisSet) {
-      if (thisSet.hasOwnProperty(key)) {
-        if (i >= start) {
-          if (i > end) {
-            break;
-          }
-          var item = thisSet[key];
-          cb.call(context, item, key.substr(PREFIX.length), i);
-        }
-        i++;
-      }
-    }
-  },
-
-  /**
-   * Even though `mapRange`/`forEachKeyRange` allow zero length mappings, we'll
-   * impose an additional restriction here that the length of mapping be greater
-   * than zero - the only reason is that there are many ways to express length
-   * zero in terms of two keys and that is confusing.
-   */
-  mapKeyRange: function(cb, startKey, endKey, context) {
-    var startIndex = this.indexOfKey(startKey);
-    var endIndex = this.indexOfKey(endKey);
-    invariant(
-      startIndex !== undefined && endIndex !== undefined,
-      'mapKeyRange must be given keys that are present.'
-    );
-    invariant(
-      endIndex >= startIndex,
-      'OrderedMap.mapKeyRange(...): `endKey` must not come before `startIndex`.'
-    );
-    return this.mapRange(cb, startIndex, (endIndex - startIndex) + 1, context);
-  },
-
-  forEachKeyRange: function(cb, startKey, endKey, context) {
-    var startIndex = this.indexOfKey(startKey);
-    var endIndex = this.indexOfKey(endKey);
-    invariant(
-      startIndex !== undefined && endIndex !== undefined,
-      'forEachKeyRange must be given keys that are present.'
-    );
-    invariant(
-      endIndex >= startIndex,
-      'OrderedMap.forEachKeyRange(...): `endKey` must not come before ' +
-      '`startIndex`.'
-    );
-    this.forEachRange(cb, startIndex, (endIndex - startIndex) + 1, context);
-  },
-
-  /**
-   * @param {number} pos Index to search for key at.
-   * @return {string|undefined} Either the key at index `pos` or undefined if
-   * not in map.
-   */
-  keyAtIndex: function(pos) {
-    var computedPositions = this._getOrComputePositions();
-    var keyAtPos = computedPositions.keyByIndex[pos];
-    return keyAtPos ? keyAtPos.substr(PREFIX.length) : undefined;
-  },
-
-  /**
-   * @param {string} key String key from which to find the next key.
-   * @return {string|undefined} Either the next key, or undefined if there is no
-   * next key.
-   * @throws Error if `key` is not in this `OrderedMap`.
-   */
-  keyAfter: function(key) {
-    return this.nthKeyAfter(key, 1);
-  },
-
-  /**
-   * @param {string} key String key from which to find the preceding key.
-   * @return {string|undefined} Either the preceding key, or undefined if there
-   * is no preceding.key.
-   * @throws Error if `key` is not in this `OrderedMap`.
-   */
-  keyBefore: function(key) {
-    return this.nthKeyBefore(key, 1);
-  },
-
-  /**
-   * @param {string} key String key from which to find a following key.
-   * @param {number} n Distance to scan forward after `key`.
-   * @return {string|undefined} Either the nth key after `key`, or undefined if
-   * there is no next key.
-   * @throws Error if `key` is not in this `OrderedMap`.
-   */
-  nthKeyAfter: function(key, n) {
-    var curIndex = this.indexOfKey(key);
-    invariant(
-      curIndex !== undefined,
-      'OrderedMap.nthKeyAfter: The key `%s` does not exist in this instance.',
-      key
-    );
-    return this.keyAtIndex(curIndex + n);
-  },
-
-  /**
-   * @param {string} key String key from which to find a preceding key.
-   * @param {number} n Distance to scan backwards before `key`.
-   * @return {string|undefined} Either the nth key before `key`, or undefined if
-   * there is no previous key.
-   * @throws Error if `key` is not in this `OrderedMap`.
-   */
-  nthKeyBefore: function(key, n) {
-    return this.nthKeyAfter(key, -n);
-  },
-
-  /**
-   * @param {string} key Key to find the index of.
-   * @return {number|undefined} Index of the provided key, or `undefined` if the
-   * key is not found.
-   */
-  indexOfKey: function(key) {
-    assertValidPublicKey(key);
-    var normalizedKey = PREFIX + key;
-    var computedPositions = this._getOrComputePositions();
-    var computedPosition = computedPositions.indexByKey[normalizedKey];
-    // Just writing it this way to make it clear this is intentional.
-    return computedPosition === undefined ? undefined : computedPosition;
-  },
-
-  /**
-   * @return {Array} An ordered array of this object's values.
-   */
-  toArray: function() {
-    var result = [];
-    var thisSet = this._normalizedObj;
-    for (var key in thisSet) {
-      if (thisSet.hasOwnProperty(key)) {
-        result.push(thisSet[key]);
-      }
-    }
-    return result;
-  },
-
-  /**
-   * Finds the key at a given position, or indicates via `undefined` that that
-   * position does not exist in the `OrderedMap`. It is appropriate to return
-   * undefined, indicating that the key doesn't exist in the `OrderedMap`
-   * because `undefined` is not ever a valid `OrderedMap` key.
-   *
-   * @private
-   * @return {string?} Name of the item at position `pos`, or `undefined` if
-   * there is no item at that position.
-   */
-  _getOrComputePositions: function() {
-    // TODO: Entertain computing this at construction time in some less
-    // performance critical paths.
-    var computedPositions = this._computedPositions;
-    if (!computedPositions) {
-      this._computePositions();
-    }
-    return this._computedPositions;
-  },
-
-  /**
-   * Precomputes the index/key mapping for future lookup. Since `OrderedMap`s
-   * are immutable, there is only ever a need to perform this once.
-   * @private
-   */
-  _computePositions: function() {
-    this._computedPositions = {
-      keyByIndex: {},
-      indexByKey: {},
-    };
-    var keyByIndex = this._computedPositions.keyByIndex;
-    var indexByKey = this._computedPositions.indexByKey;
-    var index = 0;
-    var thisSet = this._normalizedObj;
-    for (var key in thisSet) {
-      if (thisSet.hasOwnProperty(key)) {
-        keyByIndex[index] = key;
-        indexByKey[key] = index;
-        index++;
-      }
-    }
-  },
-};
-
-Object.assign(OrderedMapImpl.prototype, OrderedMapMethods);
-
-var OrderedMap = {
-  from: function(orderedMap) {
-    invariant(
-      orderedMap instanceof OrderedMapImpl,
-      'OrderedMap.from(...): Expected an OrderedMap instance.'
-    );
-    return _fromNormalizedObjects(orderedMap._normalizedObj, null);
-  },
-
-  fromArray: function(arr, keyExtractor) {
-    invariant(
-      Array.isArray(arr),
-      'OrderedMap.fromArray(...): First argument must be an array.'
-    );
-    invariant(
-      typeof keyExtractor === 'function',
-      'OrderedMap.fromArray(...): Second argument must be a function used ' +
-      'to determine the unique key for each entry.'
-    );
-    return new OrderedMapImpl(
-      extractObjectFromArray(arr, keyExtractor),
-      arr.length
-    );
-  },
-};
-
-module.exports = OrderedMap;
diff --git a/src/isomorphic/deprecated/ReactPropTransferer.js b/src/isomorphic/deprecated/ReactPropTransferer.js
deleted file mode 100644
index da009cafe..000000000
--- a/src/isomorphic/deprecated/ReactPropTransferer.js
+++ /dev/null
@@ -1,107 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @providesModule ReactPropTransferer
- */
-
-'use strict';
-
-var emptyFunction = require('emptyFunction');
-var joinClasses = require('joinClasses');
-
-/**
- * Creates a transfer strategy that will merge prop values using the supplied
- * `mergeStrategy`. If a prop was previously unset, this just sets it.
- *
- * @param {function} mergeStrategy
- * @return {function}
- */
-function createTransferStrategy(mergeStrategy) {
-  return function(props, key, value) {
-    if (!props.hasOwnProperty(key)) {
-      props[key] = value;
-    } else {
-      props[key] = mergeStrategy(props[key], value);
-    }
-  };
-}
-
-var transferStrategyMerge = createTransferStrategy(function(a, b) {
-  // `merge` overrides the first object's (`props[key]` above) keys using the
-  // second object's (`value`) keys. An object's style's existing `propA` would
-  // get overridden. Flip the order here.
-  return Object.assign({}, b, a);
-});
-
-/**
- * Transfer strategies dictate how props are transferred by `transferPropsTo`.
- * NOTE: if you add any more exceptions to this list you should be sure to
- * update `cloneWithProps()` accordingly.
- */
-var TransferStrategies = {
-  /**
-   * Never transfer `children`.
-   */
-  children: emptyFunction,
-  /**
-   * Transfer the `className` prop by merging them.
-   */
-  className: createTransferStrategy(joinClasses),
-  /**
-   * Transfer the `style` prop (which is an object) by merging them.
-   */
-  style: transferStrategyMerge,
-};
-
-/**
- * Mutates the first argument by transferring the properties from the second
- * argument.
- *
- * @param {object} props
- * @param {object} newProps
- * @return {object}
- */
-function transferInto(props, newProps) {
-  for (var thisKey in newProps) {
-    if (!newProps.hasOwnProperty(thisKey)) {
-      continue;
-    }
-
-    var transferStrategy = TransferStrategies[thisKey];
-
-    if (transferStrategy && TransferStrategies.hasOwnProperty(thisKey)) {
-      transferStrategy(props, thisKey, newProps[thisKey]);
-    } else if (!props.hasOwnProperty(thisKey)) {
-      props[thisKey] = newProps[thisKey];
-    }
-  }
-  return props;
-}
-
-/**
- * ReactPropTransferer are capable of transferring props to another component
- * using a `transferPropsTo` method.
- *
- * @class ReactPropTransferer
- */
-var ReactPropTransferer = {
-
-  /**
-   * Merge two props objects using TransferStrategies.
-   *
-   * @param {object} oldProps original props (they take precedence)
-   * @param {object} newProps new props to merge in
-   * @return {object} a new object containing both sets of props merged.
-   */
-  mergeProps: function(oldProps, newProps) {
-    return transferInto(Object.assign({}, oldProps), newProps);
-  },
-
-};
-
-module.exports = ReactPropTransferer;
diff --git a/src/isomorphic/getNextDebugID.js b/src/isomorphic/getNextDebugID.js
new file mode 100644
index 000000000..6e7ecb43b
--- /dev/null
+++ b/src/isomorphic/getNextDebugID.js
@@ -0,0 +1,21 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule getNextDebugID
+ * @flow
+ */
+
+'use strict';
+
+var nextDebugID = 1;
+
+function getNextDebugID(): number {
+  return nextDebugID++;
+}
+
+module.exports = getNextDebugID;
diff --git a/src/isomorphic/ReactInstrumentation.js b/src/isomorphic/hooks/ReactComponentTreeDevtool.js
similarity index 68%
rename from src/isomorphic/ReactInstrumentation.js
rename to src/isomorphic/hooks/ReactComponentTreeDevtool.js
index 066da6aaa..8e9898e3c 100644
--- a/src/isomorphic/ReactInstrumentation.js
+++ b/src/isomorphic/hooks/ReactComponentTreeDevtool.js
@@ -8,9 +8,7 @@
  *
- * @providesModule ReactInstrumentation
+ * @providesModule ReactComponentTreeDevtool
  */
-
 'use strict';
 
-var ReactDebugTool = require('ReactDebugTool');
-
-module.exports = {debugTool: ReactDebugTool};
+// TODO remove this proxy when RN/www gets updated
+module.exports = require('ReactComponentTreeHook');
diff --git a/src/isomorphic/hooks/ReactComponentTreeHook.js b/src/isomorphic/hooks/ReactComponentTreeHook.js
new file mode 100644
index 000000000..6ff41657a
--- /dev/null
+++ b/src/isomorphic/hooks/ReactComponentTreeHook.js
@@ -0,0 +1,458 @@
+/**
+ * Copyright 2016-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @flow
+ * @providesModule ReactComponentTreeHook
+ */
+
+'use strict';
+
+var ReactCurrentOwner = require('ReactCurrentOwner');
+
+var invariant = require('invariant');
+var warning = require('warning');
+
+import type {ReactElement, Source} from 'ReactElementType';
+import type {DebugID} from 'ReactInstanceType';
+
+function isNative(fn) {
+  // Based on isNative() from Lodash
+  var funcToString = Function.prototype.toString;
+  var hasOwnProperty = Object.prototype.hasOwnProperty;
+  var reIsNative = RegExp(
+    '^' +
+      funcToString
+        // Take an example native function source for comparison
+        .call(hasOwnProperty)
+        // Strip regex characters so we can use it for regex
+        .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
+        // Remove hasOwnProperty from the template to make it generic
+        .replace(
+          /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
+          '$1.*?',
+        ) +
+      '$',
+  );
+  try {
+    var source = funcToString.call(fn);
+    return reIsNative.test(source);
+  } catch (err) {
+    return false;
+  }
+}
+
+var canUseCollections =
+  // Array.from
+  typeof Array.from === 'function' &&
+  // Map
+  typeof Map === 'function' &&
+  isNative(Map) &&
+  // Map.prototype.keys
+  Map.prototype != null &&
+  typeof Map.prototype.keys === 'function' &&
+  isNative(Map.prototype.keys) &&
+  // Set
+  typeof Set === 'function' &&
+  isNative(Set) &&
+  // Set.prototype.keys
+  Set.prototype != null &&
+  typeof Set.prototype.keys === 'function' &&
+  isNative(Set.prototype.keys);
+
+var setItem;
+var getItem;
+var removeItem;
+var getItemIDs;
+var addRoot;
+var removeRoot;
+var getRootIDs;
+
+if (canUseCollections) {
+  var itemMap = new Map();
+  var rootIDSet = new Set();
+
+  setItem = function(id, item) {
+    itemMap.set(id, item);
+  };
+  getItem = function(id) {
+    return itemMap.get(id);
+  };
+  removeItem = function(id) {
+    itemMap.delete(id);
+  };
+  getItemIDs = function() {
+    return Array.from(itemMap.keys());
+  };
+
+  addRoot = function(id) {
+    rootIDSet.add(id);
+  };
+  removeRoot = function(id) {
+    rootIDSet.delete(id);
+  };
+  getRootIDs = function() {
+    return Array.from(rootIDSet.keys());
+  };
+} else {
+  var itemByKey = {};
+  var rootByKey = {};
+
+  // Use non-numeric keys to prevent V8 performance issues:
+  // https://github.com/facebook/react/pull/7232
+  var getKeyFromID = function(id: DebugID): string {
+    return '.' + id;
+  };
+  var getIDFromKey = function(key: string): DebugID {
+    return parseInt(key.substr(1), 10);
+  };
+
+  setItem = function(id, item) {
+    var key = getKeyFromID(id);
+    itemByKey[key] = item;
+  };
+  getItem = function(id) {
+    var key = getKeyFromID(id);
+    return itemByKey[key];
+  };
+  removeItem = function(id) {
+    var key = getKeyFromID(id);
+    delete itemByKey[key];
+  };
+  getItemIDs = function() {
+    return Object.keys(itemByKey).map(getIDFromKey);
+  };
+
+  addRoot = function(id) {
+    var key = getKeyFromID(id);
+    rootByKey[key] = true;
+  };
+  removeRoot = function(id) {
+    var key = getKeyFromID(id);
+    delete rootByKey[key];
+  };
+  getRootIDs = function() {
+    return Object.keys(rootByKey).map(getIDFromKey);
+  };
+}
+
+var unmountedIDs: Array<DebugID> = [];
+
+function purgeDeep(id) {
+  var item = getItem(id);
+  if (item) {
+    var {childIDs} = item;
+    removeItem(id);
+    childIDs.forEach(purgeDeep);
+  }
+}
+
+function describeComponentFrame(name, source, ownerName) {
+  return (
+    '\n    in ' +
+    (name || 'Unknown') +
+    (source
+      ? ' (at ' +
+          source.fileName.replace(/^.*[\\\/]/, '') +
+          ':' +
+          source.lineNumber +
+          ')'
+      : ownerName ? ' (created by ' + ownerName + ')' : '')
+  );
+}
+
+function getDisplayName(element: ?ReactElement): string {
+  if (element == null) {
+    return '#empty';
+  } else if (typeof element === 'string' || typeof element === 'number') {
+    return '#text';
+  } else if (typeof element.type === 'string') {
+    return element.type;
+  } else {
+    return element.type.displayName || element.type.name || 'Unknown';
+  }
+}
+
+function describeID(id: DebugID): string {
+  var name = ReactComponentTreeHook.getDisplayName(id);
+  var element = ReactComponentTreeHook.getElement(id);
+  var ownerID = ReactComponentTreeHook.getOwnerID(id);
+  var ownerName;
+  if (ownerID) {
+    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
+  }
+  warning(
+    element,
+    'ReactComponentTreeHook: Missing React element for debugID %s when ' +
+      'building stack',
+    id,
+  );
+  return describeComponentFrame(name, element && element._source, ownerName);
+}
+
+var ReactComponentTreeHook = {
+  onSetChildren(id: DebugID, nextChildIDs: Array<DebugID>): void {
+    var item = getItem(id);
+    invariant(item, 'Item must have been set');
+    item.childIDs = nextChildIDs;
+
+    for (var i = 0; i < nextChildIDs.length; i++) {
+      var nextChildID = nextChildIDs[i];
+      var nextChild = getItem(nextChildID);
+      invariant(
+        nextChild,
+        'Expected hook events to fire for the child ' +
+          'before its parent includes it in onSetChildren().',
+      );
+      invariant(
+        nextChild.childIDs != null ||
+          typeof nextChild.element !== 'object' ||
+          nextChild.element == null,
+        'Expected onSetChildren() to fire for a container child ' +
+          'before its parent includes it in onSetChildren().',
+      );
+      invariant(
+        nextChild.isMounted,
+        'Expected onMountComponent() to fire for the child ' +
+          'before its parent includes it in onSetChildren().',
+      );
+      if (nextChild.parentID == null) {
+        nextChild.parentID = id;
+        // TODO: This shouldn't be necessary but mounting a new root during in
+        // componentWillMount currently causes not-yet-mounted components to
+        // be purged from our tree data so their parent id is missing.
+      }
+      invariant(
+        nextChild.parentID === id,
+        'Expected onBeforeMountComponent() parent and onSetChildren() to ' +
+          'be consistent (%s has parents %s and %s).',
+        nextChildID,
+        nextChild.parentID,
+        id,
+      );
+    }
+  },
+
+  onBeforeMountComponent(
+    id: DebugID,
+    element: ReactElement,
+    parentID: DebugID,
+  ): void {
+    var item = {
+      element,
+      parentID,
+      text: null,
+      childIDs: [],
+      isMounted: false,
+      updateCount: 0,
+    };
+    setItem(id, item);
+  },
+
+  onBeforeUpdateComponent(id: DebugID, element: ReactElement): void {
+    var item = getItem(id);
+    if (!item || !item.isMounted) {
+      // We may end up here as a result of setState() in componentWillUnmount().
+      // In this case, ignore the element.
+      return;
+    }
+    item.element = element;
+  },
+
+  onMountComponent(id: DebugID): void {
+    var item = getItem(id);
+    invariant(item, 'Item must have been set');
+    item.isMounted = true;
+    var isRoot = item.parentID === 0;
+    if (isRoot) {
+      addRoot(id);
+    }
+  },
+
+  onUpdateComponent(id: DebugID): void {
+    var item = getItem(id);
+    if (!item || !item.isMounted) {
+      // We may end up here as a result of setState() in componentWillUnmount().
+      // In this case, ignore the element.
+      return;
+    }
+    item.updateCount++;
+  },
+
+  onUnmountComponent(id: DebugID): void {
+    var item = getItem(id);
+    if (item) {
+      // We need to check if it exists.
+      // `item` might not exist if it is inside an error boundary, and a sibling
+      // error boundary child threw while mounting. Then this instance never
+      // got a chance to mount, but it still gets an unmounting event during
+      // the error boundary cleanup.
+      item.isMounted = false;
+      var isRoot = item.parentID === 0;
+      if (isRoot) {
+        removeRoot(id);
+      }
+    }
+    unmountedIDs.push(id);
+  },
+
+  purgeUnmountedComponents(): void {
+    if (ReactComponentTreeHook._preventPurging) {
+      // Should only be used for testing.
+      return;
+    }
+
+    for (var i = 0; i < unmountedIDs.length; i++) {
+      var id = unmountedIDs[i];
+      purgeDeep(id);
+    }
+    unmountedIDs.length = 0;
+  },
+
+  isMounted(id: DebugID): boolean {
+    var item = getItem(id);
+    return item ? item.isMounted : false;
+  },
+
+  getCurrentStackAddendum(topElement: ?ReactElement): string {
+    var info = '';
+    if (topElement) {
+      var name = getDisplayName(topElement);
+      var owner = topElement._owner;
+      info += describeComponentFrame(
+        name,
+        topElement._source,
+        owner && owner.getName(),
+      );
+    }
+
+    var currentOwner = ReactCurrentOwner.current;
+    var id = currentOwner && currentOwner._debugID;
+
+    info += ReactComponentTreeHook.getStackAddendumByID(id);
+    return info;
+  },
+
+  getStackAddendumByID(id: ?DebugID): string {
+    var info = '';
+    while (id) {
+      info += describeID(id);
+      id = ReactComponentTreeHook.getParentID(id);
+    }
+    return info;
+  },
+
+  getChildIDs(id: DebugID): Array<DebugID> {
+    var item = getItem(id);
+    return item ? item.childIDs : [];
+  },
+
+  getDisplayName(id: DebugID): ?string {
+    var element = ReactComponentTreeHook.getElement(id);
+    if (!element) {
+      return null;
+    }
+    return getDisplayName(element);
+  },
+
+  getElement(id: DebugID): ?ReactElement {
+    var item = getItem(id);
+    return item ? item.element : null;
+  },
+
+  getOwnerID(id: DebugID): ?DebugID {
+    var element = ReactComponentTreeHook.getElement(id);
+    if (!element || !element._owner) {
+      return null;
+    }
+    return element._owner._debugID;
+  },
+
+  getParentID(id: DebugID): ?DebugID {
+    var item = getItem(id);
+    return item ? item.parentID : null;
+  },
+
+  getSource(id: DebugID): ?Source {
+    var item = getItem(id);
+    var element = item ? item.element : null;
+    var source = element != null ? element._source : null;
+    return source;
+  },
+
+  getText(id: DebugID): ?string {
+    var element = ReactComponentTreeHook.getElement(id);
+    if (typeof element === 'string') {
+      return element;
+    } else if (typeof element === 'number') {
+      return '' + element;
+    } else {
+      return null;
+    }
+  },
+
+  getUpdateCount(id: DebugID): number {
+    var item = getItem(id);
+    return item ? item.updateCount : 0;
+  },
+
+  getRootIDs,
+  getRegisteredIDs: getItemIDs,
+
+  pushNonStandardWarningStack(
+    isCreatingElement: boolean,
+    currentSource: ?Source,
+  ) {
+    if (typeof console.reactStack !== 'function') {
+      return;
+    }
+
+    var stack = [];
+    var currentOwner = ReactCurrentOwner.current;
+    var id = currentOwner && currentOwner._debugID;
+
+    try {
+      if (isCreatingElement) {
+        stack.push({
+          name: id ? ReactComponentTreeHook.getDisplayName(id) : null,
+          fileName: currentSource ? currentSource.fileName : null,
+          lineNumber: currentSource ? currentSource.lineNumber : null,
+        });
+      }
+
+      while (id) {
+        var element = ReactComponentTreeHook.getElement(id);
+        var parentID = ReactComponentTreeHook.getParentID(id);
+        var ownerID = ReactComponentTreeHook.getOwnerID(id);
+        var ownerName = ownerID
+          ? ReactComponentTreeHook.getDisplayName(ownerID)
+          : null;
+        var source = element && element._source;
+        stack.push({
+          name: ownerName,
+          fileName: source ? source.fileName : null,
+          lineNumber: source ? source.lineNumber : null,
+        });
+        id = parentID;
+      }
+    } catch (err) {
+      // Internal state is messed up.
+      // Stop building the stack (it's just a nice to have).
+    }
+
+    console.reactStack(stack);
+  },
+
+  popNonStandardWarningStack() {
+    if (typeof console.reactStackEnd !== 'function') {
+      return;
+    }
+    console.reactStackEnd();
+  },
+};
+
+module.exports = ReactComponentTreeHook;
diff --git a/src/isomorphic/modern/class/PropTypes.d.ts b/src/isomorphic/modern/class/PropTypes.d.ts
new file mode 100644
index 000000000..a8802e66f
--- /dev/null
+++ b/src/isomorphic/modern/class/PropTypes.d.ts
@@ -0,0 +1,19 @@
+/*!
+ * Copyright 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ */
+
+/**
+ * TypeScript Definition File for React.
+ *
+ * Full type definitions are not yet officially supported. These are mostly
+ * just helpers for the unit test.
+ */
+
+declare module 'prop-types' {
+  export var string : any;
+}
diff --git a/src/isomorphic/modern/class/ReactComponent.js b/src/isomorphic/modern/class/ReactBaseClasses.js
similarity index 76%
rename from src/isomorphic/modern/class/ReactComponent.js
rename to src/isomorphic/modern/class/ReactBaseClasses.js
index a775abd67..ed8d31e9b 100644
--- a/src/isomorphic/modern/class/ReactComponent.js
+++ b/src/isomorphic/modern/class/ReactBaseClasses.js
@@ -8,3 +8,3 @@
  *
- * @providesModule ReactComponent
+ * @providesModule ReactBaseClasses
  */
@@ -14,3 +14,2 @@
 var ReactNoopUpdateQueue = require('ReactNoopUpdateQueue');
-var ReactInstrumentation = require('ReactInstrumentation');
 
@@ -19,3 +18,3 @@ var emptyObject = require('emptyObject');
 var invariant = require('invariant');
-var warning = require('warning');
+var lowPriorityWarning = require('lowPriorityWarning');
 
@@ -63,15 +62,7 @@ ReactComponent.prototype.setState = function(partialState, callback) {
     typeof partialState === 'object' ||
-    typeof partialState === 'function' ||
-    partialState == null,
+      typeof partialState === 'function' ||
+      partialState == null,
     'setState(...): takes an object of state variables to update or a ' +
-    'function which returns an object of state variables.'
+      'function which returns an object of state variables.',
   );
-  if (__DEV__) {
-    ReactInstrumentation.debugTool.onSetState();
-    warning(
-      partialState != null,
-      'setState(...): You passed an undefined or null state object; ' +
-      'instead, use forceUpdate().'
-    );
-  }
   this.updater.enqueueSetState(this, partialState);
@@ -113,3 +104,3 @@ if (__DEV__) {
       'Instead, make sure to clean up subscriptions and pending requests in ' +
-      'componentWillUnmount to prevent memory leaks.',
+        'componentWillUnmount to prevent memory leaks.',
     ],
@@ -118,3 +109,3 @@ if (__DEV__) {
       'Refactor your code to use setState instead (see ' +
-      'https://github.com/facebook/react/issues/3236).',
+        'https://github.com/facebook/react/issues/3236).',
     ],
@@ -125,3 +116,3 @@ if (__DEV__) {
         get: function() {
-          warning(
+          lowPriorityWarning(
             false,
@@ -129,3 +120,3 @@ if (__DEV__) {
             info[0],
-            info[1]
+            info[1],
           );
@@ -143,2 +134,26 @@ if (__DEV__) {
 
-module.exports = ReactComponent;
+/**
+ * Base class helpers for the updating state of a component.
+ */
+function ReactPureComponent(props, context, updater) {
+  // Duplicated from ReactComponent.
+  this.props = props;
+  this.context = context;
+  this.refs = emptyObject;
+  // We initialize the default updater but the real one gets injected by the
+  // renderer.
+  this.updater = updater || ReactNoopUpdateQueue;
+}
+
+function ComponentDummy() {}
+ComponentDummy.prototype = ReactComponent.prototype;
+ReactPureComponent.prototype = new ComponentDummy();
+ReactPureComponent.prototype.constructor = ReactPureComponent;
+// Avoid an extra prototype jump for these methods.
+Object.assign(ReactPureComponent.prototype, ReactComponent.prototype);
+ReactPureComponent.prototype.isPureReactComponent = true;
+
+module.exports = {
+  Component: ReactComponent,
+  PureComponent: ReactPureComponent,
+};
diff --git a/src/isomorphic/modern/class/ReactNoopUpdateQueue.js b/src/isomorphic/modern/class/ReactNoopUpdateQueue.js
index 2f0be661c..c9e03b723 100644
--- a/src/isomorphic/modern/class/ReactNoopUpdateQueue.js
+++ b/src/isomorphic/modern/class/ReactNoopUpdateQueue.js
@@ -15,4 +15,5 @@ var warning = require('warning');
 
-function warnTDZ(publicInstance, callerName) {
+function warnNoop(publicInstance, callerName) {
   if (__DEV__) {
+    var constructor = publicInstance.constructor;
     warning(
@@ -20,7 +21,8 @@ function warnTDZ(publicInstance, callerName) {
       '%s(...): Can only update a mounted or mounting component. ' +
-      'This usually means you called %s() on an unmounted component. ' +
-      'This is a no-op. Please check the code for the %s component.',
+        'This usually means you called %s() on an unmounted component. ' +
+        'This is a no-op. Please check the code for the %s component.',
       callerName,
       callerName,
-      publicInstance.constructor && publicInstance.constructor.displayName || ''
+      (constructor && (constructor.displayName || constructor.name)) ||
+        'ReactClass',
     );
@@ -33,3 +35,2 @@ function warnTDZ(publicInstance, callerName) {
 var ReactNoopUpdateQueue = {
-
   /**
@@ -53,3 +54,3 @@ var ReactNoopUpdateQueue = {
    */
-  enqueueCallback: function(publicInstance, callback) { },
+  enqueueCallback: function(publicInstance, callback) {},
 
@@ -69,3 +70,3 @@ var ReactNoopUpdateQueue = {
   enqueueForceUpdate: function(publicInstance) {
-    warnTDZ(publicInstance, 'forceUpdate');
+    warnNoop(publicInstance, 'forceUpdate');
   },
@@ -84,3 +85,3 @@ var ReactNoopUpdateQueue = {
   enqueueReplaceState: function(publicInstance, completeState) {
-    warnTDZ(publicInstance, 'replaceState');
+    warnNoop(publicInstance, 'replaceState');
   },
@@ -98,3 +99,3 @@ var ReactNoopUpdateQueue = {
   enqueueSetState: function(publicInstance, partialState) {
-    warnTDZ(publicInstance, 'setState');
+    warnNoop(publicInstance, 'setState');
   },
diff --git a/src/isomorphic/modern/class/__tests__/ReactClassEquivalence-test.js b/src/isomorphic/modern/class/__tests__/ReactClassEquivalence-test.js
index 36cf5c75c..bfa6c3b21 100644
--- a/src/isomorphic/modern/class/__tests__/ReactClassEquivalence-test.js
+++ b/src/isomorphic/modern/class/__tests__/ReactClassEquivalence-test.js
@@ -13,22 +13,62 @@
 
-var MetaMatchers = require('MetaMatchers');
+var spawnSync = require('child_process').spawnSync;
+var path = require('path');
 
-describe('ReactClassEquivalence', function() {
+describe('ReactClassEquivalence', () => {
+  it('tests the same thing for es6 classes and CoffeeScript', () => {
+    var result1 = runJest('ReactCoffeeScriptClass-test.coffee');
+    var result2 = runJest('ReactES6Class-test.js');
+    compareResults(result1, result2);
+  });
 
-  beforeEach(function() {
-    this.addMatchers(MetaMatchers);
+  it('tests the same thing for es6 classes and TypeScript', () => {
+    var result1 = runJest('ReactTypeScriptClass-test.ts');
+    var result2 = runJest('ReactES6Class-test.js');
+    compareResults(result1, result2);
   });
+});
 
-  var es6 = () => require('./ReactES6Class-test.js');
-  var coffee = () => require('./ReactCoffeeScriptClass-test.coffee');
-  var ts = () => require('./ReactTypeScriptClass-test.ts');
+function runJest(testFile) {
+  var cwd = process.cwd();
+  var jestBin = path.resolve('node_modules', '.bin', 'jest');
+  var setupFile = path.resolve(
+    'scripts',
+    'jest',
+    'setupSpecEquivalenceReporter.js',
+  );
+  var result = spawnSync(
+    'node',
+    [jestBin, testFile, '--setupTestFrameworkScriptFile', setupFile],
+    {cwd},
+  );
 
-  it('tests the same thing for es6 classes and CoffeeScript', function() {
-    expect(coffee).toEqualSpecsIn(es6);
-  });
+  if (result.error) {
+    throw result.error;
+  }
 
-  it('tests the same thing for es6 classes and TypeScript', function() {
-    expect(ts).toEqualSpecsIn(es6);
-  });
+  if (result.status !== 0) {
+    throw new Error(
+      'jest process exited with: ' +
+        result.status +
+        '\n' +
+        'stdout: ' +
+        result.stdout.toString() +
+        'stderr: ' +
+        result.stderr.toString(),
+    );
+  }
 
-});
+  return result.stdout.toString();
+}
+
+function compareResults(a, b) {
+  var regexp = /EQUIVALENCE.*$/gm;
+  var aSpecs = (a.match(regexp) || []).sort().join('\n');
+  var bSpecs = (b.match(regexp) || []).sort().join('\n');
+
+  if (aSpecs.length === 0 && bSpecs.length === 0) {
+    throw new Error('No spec results found in the output');
+  }
+
+  expect(aSpecs).toEqual(bSpecs);
+}
diff --git a/src/isomorphic/modern/class/__tests__/ReactCoffeeScriptClass-test.coffee b/src/isomorphic/modern/class/__tests__/ReactCoffeeScriptClass-test.coffee
index e7b1f574c..23661be18 100644
--- a/src/isomorphic/modern/class/__tests__/ReactCoffeeScriptClass-test.coffee
+++ b/src/isomorphic/modern/class/__tests__/ReactCoffeeScriptClass-test.coffee
@@ -9,2 +9,3 @@ of patent rights can be found in the PATENTS file in the same directory.
 
+PropTypes = null
 React = null
@@ -23,2 +24,3 @@ describe 'ReactCoffeeScriptClass', ->
     ReactDOM = require 'ReactDOM'
+    PropTypes = require 'prop-types'
     container = document.createElement 'div'
@@ -53,4 +55,5 @@ describe 'ReactCoffeeScriptClass', ->
     ).toThrow()
-    expect(console.error.calls.length).toBe(1)
-    expect(console.error.argsForCall[0][0]).toContain('No `render` method found on the returned component instance')
+    expect(console.error.calls.count()).toBe(1)
+    expect(console.error.calls.argsFor(0)[0]).toContain('No `render` method found on the returned component instance')
+    undefined
 
@@ -64,2 +67,3 @@ describe 'ReactCoffeeScriptClass', ->
     test React.createElement(Foo, bar: 'bar'), 'DIV', 'bar'
+    undefined
 
@@ -76,2 +80,3 @@ describe 'ReactCoffeeScriptClass', ->
     test React.createElement(Foo, initialValue: 'foo'), 'SPAN', 'foo'
+    undefined
 
@@ -96,2 +101,3 @@ describe 'ReactCoffeeScriptClass', ->
     test React.createElement(Foo), 'SPAN', 'bar'
+    undefined
 
@@ -100,4 +106,4 @@ describe 'ReactCoffeeScriptClass', ->
       @contextTypes:
-        tag: React.PropTypes.string
-        className: React.PropTypes.string
+        tag: PropTypes.string
+        className: PropTypes.string
 
@@ -116,4 +122,4 @@ describe 'ReactCoffeeScriptClass', ->
       @childContextTypes:
-        tag: React.PropTypes.string
-        className: React.PropTypes.string
+        tag: PropTypes.string
+        className: PropTypes.string
 
@@ -127,2 +133,3 @@ describe 'ReactCoffeeScriptClass', ->
     test React.createElement(Outer), 'SPAN', 'foo'
+    undefined
 
@@ -143,2 +150,3 @@ describe 'ReactCoffeeScriptClass', ->
     expect(renderCount).toBe 1
+    undefined
 
@@ -155,5 +163,6 @@ describe 'ReactCoffeeScriptClass', ->
         test React.createElement(Foo), 'span', ''
-      ).toThrow(
+      ).toThrowError(
         'Foo.state: must be set to an object or null'
       )
+    undefined
 
@@ -168,2 +177,3 @@ describe 'ReactCoffeeScriptClass', ->
     test React.createElement(Foo), 'SPAN', ''
+    undefined
 
@@ -185,2 +195,3 @@ describe 'ReactCoffeeScriptClass', ->
     expect(renderedName).toBe 'bar'
+    undefined
 
@@ -201,2 +212,3 @@ describe 'ReactCoffeeScriptClass', ->
     expect(attachedListener).toThrow()
+    undefined
 
@@ -219,2 +231,3 @@ describe 'ReactCoffeeScriptClass', ->
     expect(renderedName).toBe 'bar'
+    undefined
 
@@ -268,2 +281,3 @@ describe 'ReactCoffeeScriptClass', ->
     expect(lifeCycles).toEqual ['will-unmount']
+    undefined
 
@@ -294,15 +308,35 @@ describe 'ReactCoffeeScriptClass', ->
     expect(getDefaultPropsWasCalled).toBe false
-    expect(console.error.calls.length).toBe 4
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe 4
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'getInitialState was defined on Foo, a plain JavaScript class.'
     )
-    expect(console.error.argsForCall[1][0]).toContain(
+    expect(console.error.calls.argsFor(1)[0]).toContain(
       'getDefaultProps was defined on Foo, a plain JavaScript class.'
     )
-    expect(console.error.argsForCall[2][0]).toContain(
+    expect(console.error.calls.argsFor(2)[0]).toContain(
       'propTypes was defined as an instance property on Foo.'
     )
-    expect(console.error.argsForCall[3][0]).toContain(
+    expect(console.error.calls.argsFor(3)[0]).toContain(
       'contextTypes was defined as an instance property on Foo.'
     )
+    undefined
+
+  it 'does not warn about getInitialState() on class components
+      if state is also defined.', ->
+    spyOn console, 'error'
+    class Foo extends React.Component
+      constructor: (props) ->
+        super props
+        @state = bar: @props.initialValue
+
+      getInitialState: ->
+        {}
+
+      render: ->
+        span
+          className: 'foo'
+
+    test React.createElement(Foo), 'SPAN', 'foo'
+    expect(console.error.calls.count()).toBe 0
+    undefined
 
@@ -319,4 +353,4 @@ describe 'ReactCoffeeScriptClass', ->
     test React.createElement(NamedComponent), 'SPAN', 'foo'
-    expect(console.error.calls.length).toBe 1
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe 1
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: NamedComponent has a method called componentShouldUpdate().
@@ -325,2 +359,3 @@ describe 'ReactCoffeeScriptClass', ->
     )
+    undefined
 
@@ -337,4 +372,4 @@ describe 'ReactCoffeeScriptClass', ->
     test React.createElement(NamedComponent), 'SPAN', 'foo'
-    expect(console.error.calls.length).toBe 1
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe 1
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: NamedComponent has a method called componentWillRecieveProps().
@@ -342,5 +377,6 @@ describe 'ReactCoffeeScriptClass', ->
     )
+    undefined
 
   it 'should throw AND warn when trying to access classic APIs', ->
-    spyOn console, 'error'
+    spyOn console, 'warn'
     instance =
@@ -349,11 +385,10 @@ describe 'ReactCoffeeScriptClass', ->
     expect(-> instance.isMounted()).toThrow()
-    expect(-> instance.setProps name: 'bar').toThrow()
-    expect(-> instance.replaceProps name: 'bar').toThrow()
-    expect(console.error.calls.length).toBe 2
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.warn.calls.count()).toBe 2
+    expect(console.warn.calls.argsFor(0)[0]).toContain(
       'replaceState(...) is deprecated in plain JavaScript React classes'
     )
-    expect(console.error.argsForCall[1][0]).toContain(
+    expect(console.warn.calls.argsFor(1)[0]).toContain(
       'isMounted(...) is deprecated in plain JavaScript React classes'
     )
+    undefined
 
@@ -362,3 +397,3 @@ describe 'ReactCoffeeScriptClass', ->
       @contextTypes:
-        bar: React.PropTypes.string
+        bar: PropTypes.string
       render: ->
@@ -368,3 +403,3 @@ describe 'ReactCoffeeScriptClass', ->
       @childContextTypes:
-        bar: React.PropTypes.string
+        bar: PropTypes.string
       getChildContext: ->
@@ -375,2 +410,3 @@ describe 'ReactCoffeeScriptClass', ->
     test React.createElement(Foo), 'DIV', 'bar-through-context'
+    undefined
 
@@ -385,2 +421,3 @@ describe 'ReactCoffeeScriptClass', ->
     expect(instance.refs.inner.getName()).toBe 'foo'
+    undefined
 
@@ -390 +427,2 @@ describe 'ReactCoffeeScriptClass', ->
     expect(node).toBe container.firstChild
+    undefined
diff --git a/src/isomorphic/modern/class/__tests__/ReactES6Class-test.js b/src/isomorphic/modern/class/__tests__/ReactES6Class-test.js
index 17a2414c5..ee63a7af7 100644
--- a/src/isomorphic/modern/class/__tests__/ReactES6Class-test.js
+++ b/src/isomorphic/modern/class/__tests__/ReactES6Class-test.js
@@ -13,2 +13,3 @@
 
+var PropTypes;
 var React;
@@ -16,4 +17,3 @@ var ReactDOM;
 
-describe('ReactES6Class', function() {
-
+describe('ReactES6Class', () => {
   var container;
@@ -27,5 +27,6 @@ describe('ReactES6Class', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     React = require('React');
     ReactDOM = require('ReactDOM');
+    PropTypes = require('prop-types');
     container = document.createElement('div');
@@ -53,4 +54,4 @@ describe('ReactES6Class', function() {
 
-  it('preserves the name of the class for use in error messages', function() {
-    class Foo extends React.Component { }
+  it('preserves the name of the class for use in error messages', () => {
+    class Foo extends React.Component {}
     expect(Foo.name).toBe('Foo');
@@ -58,11 +59,11 @@ describe('ReactES6Class', function() {
 
-  it('throws if no render function is defined', function() {
+  it('throws if no render function is defined', () => {
     spyOn(console, 'error');
-    class Foo extends React.Component { }
+    class Foo extends React.Component {}
     expect(() => ReactDOM.render(<Foo />, container)).toThrow();
 
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: Foo(...): No `render` method found on the returned component ' +
-      'instance: you may have forgotten to define `render`.'
+        'instance: you may have forgotten to define `render`.',
     );
@@ -70,3 +71,3 @@ describe('ReactES6Class', function() {
 
-  it('renders a simple stateless component with prop', function() {
+  it('renders a simple stateless component with prop', () => {
     class Foo extends React.Component {
@@ -80,3 +81,3 @@ describe('ReactES6Class', function() {
 
-  it('renders based on state using initial values in this.props', function() {
+  it('renders based on state using initial values in this.props', () => {
     class Foo extends React.Component {
@@ -93,3 +94,3 @@ describe('ReactES6Class', function() {
 
-  it('renders based on state using props in the constructor', function() {
+  it('renders based on state using props in the constructor', () => {
     class Foo extends React.Component {
@@ -114,3 +115,3 @@ describe('ReactES6Class', function() {
 
-  it('renders based on context in the constructor', function() {
+  it('renders based on context in the constructor', () => {
     class Foo extends React.Component {
@@ -126,4 +127,4 @@ describe('ReactES6Class', function() {
     Foo.contextTypes = {
-      tag: React.PropTypes.string,
-      className: React.PropTypes.string,
+      tag: PropTypes.string,
+      className: PropTypes.string,
     };
@@ -139,4 +140,4 @@ describe('ReactES6Class', function() {
     Outer.childContextTypes = {
-      tag: React.PropTypes.string,
-      className: React.PropTypes.string,
+      tag: PropTypes.string,
+      className: PropTypes.string,
     };
@@ -145,3 +146,3 @@ describe('ReactES6Class', function() {
 
-  it('renders only once when setting state in componentWillMount', function() {
+  it('renders only once when setting state in componentWillMount', () => {
     var renderCount = 0;
@@ -164,3 +165,3 @@ describe('ReactES6Class', function() {
 
-  it('should throw with non-object in the initial state property', function() {
+  it('should throw with non-object in the initial state property', () => {
     [['an array'], 'a string', 1234].forEach(function(state) {
@@ -175,4 +176,4 @@ describe('ReactES6Class', function() {
       }
-      expect(() => test(<Foo />, 'span', '')).toThrow(
-        'Foo.state: must be set to an object or null'
+      expect(() => test(<Foo />, 'span', '')).toThrowError(
+        'Foo.state: must be set to an object or null',
       );
@@ -181,3 +182,3 @@ describe('ReactES6Class', function() {
 
-  it('should render with null in the initial state property', function() {
+  it('should render with null in the initial state property', () => {
     class Foo extends React.Component {
@@ -194,3 +195,3 @@ describe('ReactES6Class', function() {
 
-  it('setState through an event handler', function() {
+  it('setState through an event handler', () => {
     class Foo extends React.Component {
@@ -205,6 +206,3 @@ describe('ReactES6Class', function() {
         return (
-          <Inner
-            name={this.state.bar}
-            onClick={this.handleClick.bind(this)}
-          />
+          <Inner name={this.state.bar} onClick={this.handleClick.bind(this)} />
         );
@@ -217,3 +215,3 @@ describe('ReactES6Class', function() {
 
-  it('should not implicitly bind event handlers', function() {
+  it('should not implicitly bind event handlers', () => {
     class Foo extends React.Component {
@@ -227,8 +225,3 @@ describe('ReactES6Class', function() {
       render() {
-        return (
-          <Inner
-            name={this.state.bar}
-            onClick={this.handleClick}
-          />
-        );
+        return <Inner name={this.state.bar} onClick={this.handleClick} />;
       }
@@ -239,3 +232,3 @@ describe('ReactES6Class', function() {
 
-  it('renders using forceUpdate even when there is no state', function() {
+  it('renders using forceUpdate even when there is no state', () => {
     class Foo extends React.Component {
@@ -263,3 +256,3 @@ describe('ReactES6Class', function() {
 
-  it('will call all the normal life cycle methods', function() {
+  it('will call all the normal life cycle methods', () => {
     var lifeCycles = [];
@@ -297,6 +290,3 @@ describe('ReactES6Class', function() {
     test(<Foo value="foo" />, 'SPAN', 'foo');
-    expect(lifeCycles).toEqual([
-      'will-mount',
-      'did-mount',
-    ]);
+    expect(lifeCycles).toEqual(['will-mount', 'did-mount']);
     lifeCycles = []; // reset
@@ -304,6 +294,13 @@ describe('ReactES6Class', function() {
     expect(lifeCycles).toEqual([
-      'receive-props', freeze({value: 'bar'}),
-      'should-update', freeze({value: 'bar'}), {},
-      'will-update', freeze({value: 'bar'}), {},
-      'did-update', freeze({value: 'foo'}), {},
+      'receive-props',
+      freeze({value: 'bar'}),
+      'should-update',
+      freeze({value: 'bar'}),
+      {},
+      'will-update',
+      freeze({value: 'bar'}),
+      {},
+      'did-update',
+      freeze({value: 'foo'}),
+      {},
     ]);
@@ -311,8 +308,6 @@ describe('ReactES6Class', function() {
     ReactDOM.unmountComponentAtNode(container);
-    expect(lifeCycles).toEqual([
-      'will-unmount',
-    ]);
+    expect(lifeCycles).toEqual(['will-unmount']);
   });
 
-  it('warns when classic properties are defined on the instance, but does not invoke them.', function() {
+  it('warns when classic properties are defined on the instance, but does not invoke them.', () => {
     spyOn(console, 'error');
@@ -341,14 +336,14 @@ describe('ReactES6Class', function() {
     expect(getDefaultPropsWasCalled).toBe(false);
-    expect(console.error.calls.length).toBe(4);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'getInitialState was defined on Foo, a plain JavaScript class.'
+    expect(console.error.calls.count()).toBe(4);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'getInitialState was defined on Foo, a plain JavaScript class.',
     );
-    expect(console.error.argsForCall[1][0]).toContain(
-      'getDefaultProps was defined on Foo, a plain JavaScript class.'
+    expect(console.error.calls.argsFor(1)[0]).toContain(
+      'getDefaultProps was defined on Foo, a plain JavaScript class.',
     );
-    expect(console.error.argsForCall[2][0]).toContain(
-      'propTypes was defined as an instance property on Foo.'
+    expect(console.error.calls.argsFor(2)[0]).toContain(
+      'propTypes was defined as an instance property on Foo.',
     );
-    expect(console.error.argsForCall[3][0]).toContain(
-      'contextTypes was defined as an instance property on Foo.'
+    expect(console.error.calls.argsFor(3)[0]).toContain(
+      'contextTypes was defined as an instance property on Foo.',
     );
@@ -356,3 +351,18 @@ describe('ReactES6Class', function() {
 
-  it('should warn when misspelling shouldComponentUpdate', function() {
+  it('does not warn about getInitialState() on class components if state is also defined.', () => {
+    spyOn(console, 'error');
+    class Foo extends React.Component {
+      state = this.getInitialState();
+      getInitialState() {
+        return {};
+      }
+      render() {
+        return <span className="foo" />;
+      }
+    }
+    test(<Foo />, 'SPAN', 'foo');
+    expect(console.error.calls.count()).toBe(0);
+  });
+
+  it('should warn when misspelling shouldComponentUpdate', () => {
     spyOn(console, 'error');
@@ -369,8 +379,8 @@ describe('ReactES6Class', function() {
 
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: ' +
-      'NamedComponent has a method called componentShouldUpdate(). Did you ' +
-      'mean shouldComponentUpdate()? The name is phrased as a question ' +
-      'because the function is expected to return a value.'
+        'NamedComponent has a method called componentShouldUpdate(). Did you ' +
+        'mean shouldComponentUpdate()? The name is phrased as a question ' +
+        'because the function is expected to return a value.',
     );
@@ -378,3 +388,3 @@ describe('ReactES6Class', function() {
 
-  it('should warn when misspelling componentWillReceiveProps', function() {
+  it('should warn when misspelling componentWillReceiveProps', () => {
     spyOn(console, 'error');
@@ -391,7 +401,7 @@ describe('ReactES6Class', function() {
 
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: ' +
-      'NamedComponent has a method called componentWillRecieveProps(). Did ' +
-      'you mean componentWillReceiveProps()?'
+        'NamedComponent has a method called componentWillRecieveProps(). Did ' +
+        'you mean componentWillReceiveProps()?',
     );
@@ -399,4 +409,4 @@ describe('ReactES6Class', function() {
 
-  it('should throw AND warn when trying to access classic APIs', function() {
-    spyOn(console, 'error');
+  it('should throw AND warn when trying to access classic APIs', () => {
+    spyOn(console, 'warn');
     var instance = test(<Inner name="foo" />, 'DIV', 'foo');
@@ -404,10 +414,8 @@ describe('ReactES6Class', function() {
     expect(() => instance.isMounted()).toThrow();
-    expect(() => instance.setProps({name: 'bar'})).toThrow();
-    expect(() => instance.replaceProps({name: 'bar'})).toThrow();
-    expect(console.error.calls.length).toBe(2);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'replaceState(...) is deprecated in plain JavaScript React classes'
+    expect(console.warn.calls.count()).toBe(2);
+    expect(console.warn.calls.argsFor(0)[0]).toContain(
+      'replaceState(...) is deprecated in plain JavaScript React classes',
     );
-    expect(console.error.argsForCall[1][0]).toContain(
-      'isMounted(...) is deprecated in plain JavaScript React classes'
+    expect(console.warn.calls.argsFor(1)[0]).toContain(
+      'isMounted(...) is deprecated in plain JavaScript React classes',
     );
@@ -415,3 +423,3 @@ describe('ReactES6Class', function() {
 
-  it('supports this.context passed via getChildContext', function() {
+  it('supports this.context passed via getChildContext', () => {
     class Bar extends React.Component {
@@ -421,3 +429,3 @@ describe('ReactES6Class', function() {
     }
-    Bar.contextTypes = {bar: React.PropTypes.string};
+    Bar.contextTypes = {bar: PropTypes.string};
     class Foo extends React.Component {
@@ -430,3 +438,3 @@ describe('ReactES6Class', function() {
     }
-    Foo.childContextTypes = {bar: React.PropTypes.string};
+    Foo.childContextTypes = {bar: PropTypes.string};
     test(<Foo />, 'DIV', 'bar-through-context');
@@ -434,3 +442,3 @@ describe('ReactES6Class', function() {
 
-  it('supports classic refs', function() {
+  it('supports classic refs', () => {
     class Foo extends React.Component {
@@ -444,3 +452,3 @@ describe('ReactES6Class', function() {
 
-  it('supports drilling through to the DOM using findDOMNode', function() {
+  it('supports drilling through to the DOM using findDOMNode', () => {
     var instance = test(<Inner name="foo" />, 'DIV', 'foo');
@@ -449,3 +457,2 @@ describe('ReactES6Class', function() {
   });
-
 });
diff --git a/src/isomorphic/modern/class/__tests__/ReactPureComponent-test.js b/src/isomorphic/modern/class/__tests__/ReactPureComponent-test.js
new file mode 100644
index 000000000..0cf7f751a
--- /dev/null
+++ b/src/isomorphic/modern/class/__tests__/ReactPureComponent-test.js
@@ -0,0 +1,96 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+var React;
+var ReactDOM;
+
+describe('ReactPureComponent', () => {
+  beforeEach(() => {
+    React = require('React');
+    ReactDOM = require('ReactDOM');
+  });
+
+  it('should render', () => {
+    var renders = 0;
+    class Component extends React.PureComponent {
+      constructor() {
+        super();
+        this.state = {type: 'mushrooms'};
+      }
+      render() {
+        renders++;
+        return <div>{this.props.text[0]}</div>;
+      }
+    }
+
+    var container = document.createElement('div');
+    var text;
+    var component;
+
+    text = ['porcini'];
+    component = ReactDOM.render(<Component text={text} />, container);
+    expect(container.textContent).toBe('porcini');
+    expect(renders).toBe(1);
+
+    text = ['morel'];
+    component = ReactDOM.render(<Component text={text} />, container);
+    expect(container.textContent).toBe('morel');
+    expect(renders).toBe(2);
+
+    text[0] = 'portobello';
+    component = ReactDOM.render(<Component text={text} />, container);
+    expect(container.textContent).toBe('morel');
+    expect(renders).toBe(2);
+
+    // Setting state without changing it doesn't cause a rerender.
+    component.setState({type: 'mushrooms'});
+    expect(container.textContent).toBe('morel');
+    expect(renders).toBe(2);
+
+    // But changing state does.
+    component.setState({type: 'portobello mushrooms'});
+    expect(container.textContent).toBe('portobello');
+    expect(renders).toBe(3);
+  });
+
+  it('can override shouldComponentUpdate', () => {
+    var renders = 0;
+    class Component extends React.PureComponent {
+      render() {
+        renders++;
+        return <div />;
+      }
+      shouldComponentUpdate() {
+        return true;
+      }
+    }
+    var container = document.createElement('div');
+    ReactDOM.render(<Component />, container);
+    ReactDOM.render(<Component />, container);
+    expect(renders).toBe(2);
+  });
+
+  it('extends React.Component', () => {
+    var renders = 0;
+    class Component extends React.PureComponent {
+      render() {
+        expect(this instanceof React.Component).toBe(true);
+        expect(this instanceof React.PureComponent).toBe(true);
+        renders++;
+        return <div />;
+      }
+    }
+    ReactDOM.render(<Component />, document.createElement('div'));
+    expect(renders).toBe(1);
+  });
+});
diff --git a/src/isomorphic/modern/class/__tests__/ReactTypeScriptClass-test.ts b/src/isomorphic/modern/class/__tests__/ReactTypeScriptClass-test.ts
index 0078265bc..d7de7469d 100644
--- a/src/isomorphic/modern/class/__tests__/ReactTypeScriptClass-test.ts
+++ b/src/isomorphic/modern/class/__tests__/ReactTypeScriptClass-test.ts
@@ -1 +1,5 @@
+/// <reference path="../PropTypes.d.ts" />
+/// <reference path="../React.d.ts" />
+/// <reference path="../ReactDOM.d.ts" />
+
 /*!
@@ -11,2 +15,3 @@ import React = require('React');
 import ReactDOM = require('ReactDOM');
+import PropTypes = require('prop-types');
 
@@ -84,4 +89,4 @@ class StateBasedOnContext extends React.Component {
   static contextTypes = {
-    tag: React.PropTypes.string,
-    className: React.PropTypes.string
+    tag: PropTypes.string,
+    className: PropTypes.string
   };
@@ -99,4 +104,4 @@ class ProvideChildContextTypes extends React.Component {
   static childContextTypes = {
-    tag: React.PropTypes.string,
-    className: React.PropTypes.string
+    tag: PropTypes.string,
+    className: PropTypes.string
   };
@@ -277,3 +282,3 @@ class MisspelledComponent2 extends React.Component {
 class ReadContext extends React.Component {
-  static contextTypes = { bar: React.PropTypes.string };
+  static contextTypes = { bar: PropTypes.string };
   render() {
@@ -283,3 +288,3 @@ class ReadContext extends React.Component {
 class ProvideContext extends React.Component {
-  static childContextTypes = { bar: React.PropTypes.string };
+  static childContextTypes = { bar: PropTypes.string };
   getChildContext() {
@@ -318,4 +323,4 @@ describe('ReactTypeScriptClass', function() {
 
-    expect((<any>console.error).argsForCall.length).toBe(1);
-    expect((<any>console.error).argsForCall[0][0]).toBe(
+    expect((<any>console.error).calls.count()).toBe(1);
+    expect((<any>console.error).calls.argsFor(0)[0]).toBe(
       'Warning: Empty(...): No `render` method found on the returned ' +
@@ -360,3 +365,3 @@ describe('ReactTypeScriptClass', function() {
     expect(() => test(React.createElement(ArrayState), 'span', ''))
-    .toThrow(
+    .toThrowError(
       'ArrayState.state: must be set to an object or null'
@@ -364,3 +369,3 @@ describe('ReactTypeScriptClass', function() {
     expect(() => test(React.createElement(StringState), 'span', ''))
-    .toThrow(
+    .toThrowError(
       'StringState.state: must be set to an object or null'
@@ -368,3 +373,3 @@ describe('ReactTypeScriptClass', function() {
     expect(() => test(React.createElement(NumberState), 'span', ''))
-    .toThrow(
+    .toThrowError(
       'NumberState.state: must be set to an object or null'
@@ -436,4 +441,4 @@ describe('ReactTypeScriptClass', function() {
     expect(getDefaultPropsWasCalled).toBe(false);
-    expect((<any>console.error).argsForCall.length).toBe(4);
-    expect((<any>console.error).argsForCall[0][0]).toContain(
+    expect((<any>console.error).calls.count()).toBe(4);
+    expect((<any>console.error).calls.argsFor(0)[0]).toContain(
       'getInitialState was defined on ClassicProperties, ' +
@@ -441,3 +446,3 @@ describe('ReactTypeScriptClass', function() {
     );
-    expect((<any>console.error).argsForCall[1][0]).toContain(
+    expect((<any>console.error).calls.argsFor(1)[0]).toContain(
       'getDefaultProps was defined on ClassicProperties, ' +
@@ -445,6 +450,6 @@ describe('ReactTypeScriptClass', function() {
     );
-    expect((<any>console.error).argsForCall[2][0]).toContain(
+    expect((<any>console.error).calls.argsFor(2)[0]).toContain(
       'propTypes was defined as an instance property on ClassicProperties.'
     );
-    expect((<any>console.error).argsForCall[3][0]).toContain(
+    expect((<any>console.error).calls.argsFor(3)[0]).toContain(
       'contextTypes was defined as an instance property on ClassicProperties.'
@@ -453,2 +458,20 @@ describe('ReactTypeScriptClass', function() {
 
+  it('does not warn about getInitialState() on class components ' +
+     'if state is also defined.', () => {
+    spyOn(console, 'error');
+
+    class Example extends React.Component {
+      state = {};
+      getInitialState() {
+        return {};
+      }
+      render() {
+        return React.createElement('span', {className: 'foo'});
+      }
+    }
+
+    test(React.createElement(Example), 'SPAN', 'foo');
+    expect((<any>console.error).calls.count()).toBe(0);
+  });
+
   it('should warn when misspelling shouldComponentUpdate', function() {
@@ -458,4 +481,4 @@ describe('ReactTypeScriptClass', function() {
 
-    expect((<any>console.error).argsForCall.length).toBe(1);
-    expect((<any>console.error).argsForCall[0][0]).toBe(
+    expect((<any>console.error).calls.count()).toBe(1);
+    expect((<any>console.error).calls.argsFor(0)[0]).toBe(
       'Warning: ' +
@@ -472,4 +495,4 @@ describe('ReactTypeScriptClass', function() {
 
-    expect((<any>console.error).argsForCall.length).toBe(1);
-    expect((<any>console.error).argsForCall[0][0]).toBe(
+    expect((<any>console.error).calls.count()).toBe(1);
+    expect((<any>console.error).calls.argsFor(0)[0]).toBe(
       'Warning: ' +
@@ -481,3 +504,3 @@ describe('ReactTypeScriptClass', function() {
   it('should throw AND warn when trying to access classic APIs', function() {
-    spyOn(console, 'error');
+    spyOn(console, 'warn');
     var instance = test(
@@ -488,9 +511,7 @@ describe('ReactTypeScriptClass', function() {
     expect(() => instance.isMounted()).toThrow();
-    expect(() => instance.setProps({ name: 'bar' })).toThrow();
-    expect(() => instance.replaceProps({ name: 'bar' })).toThrow();
-    expect((<any>console.error).argsForCall.length).toBe(2);
-    expect((<any>console.error).argsForCall[0][0]).toContain(
+    expect((<any>console.warn).calls.count()).toBe(2);
+    expect((<any>console.warn).calls.argsFor(0)[0]).toContain(
       'replaceState(...) is deprecated in plain JavaScript React classes'
     );
-    expect((<any>console.error).argsForCall[1][0]).toContain(
+    expect((<any>console.warn).calls.argsFor(1)[0]).toContain(
       'isMounted(...) is deprecated in plain JavaScript React classes'
diff --git a/src/isomorphic/modern/element/__tests__/ReactJSXElement-test.js b/src/isomorphic/modern/element/__tests__/ReactJSXElement-test.js
index 95126ca11..fc494b436 100644
--- a/src/isomorphic/modern/element/__tests__/ReactJSXElement-test.js
+++ b/src/isomorphic/modern/element/__tests__/ReactJSXElement-test.js
@@ -17,6 +17,6 @@ var ReactTestUtils;
 
-describe('ReactJSXElement', function() {
+describe('ReactJSXElement', () => {
   var Component;
 
-  beforeEach(function() {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -33,3 +33,3 @@ describe('ReactJSXElement', function() {
 
-  it('returns a complete element according to spec', function() {
+  it('returns a complete element according to spec', () => {
     var element = <Component />;
@@ -43,3 +43,3 @@ describe('ReactJSXElement', function() {
 
-  it('allows a lower-case to be passed as the string type', function() {
+  it('allows a lower-case to be passed as the string type', () => {
     var element = <div />;
@@ -53,3 +53,3 @@ describe('ReactJSXElement', function() {
 
-  it('allows a string to be passed as the type', function() {
+  it('allows a string to be passed as the type', () => {
     var TagName = 'div';
@@ -64,8 +64,8 @@ describe('ReactJSXElement', function() {
 
-  it('returns an immutable element', function() {
+  it('returns an immutable element', () => {
     var element = <Component />;
-    expect(() => element.type = 'div').toThrow();
+    expect(() => (element.type = 'div')).toThrow();
   });
 
-  it('does not reuse the object that is spread into props', function() {
+  it('does not reuse the object that is spread into props', () => {
     var config = {foo: 1};
@@ -77,3 +77,3 @@ describe('ReactJSXElement', function() {
 
-  it('extracts key and ref from the rest of the props', function() {
+  it('extracts key and ref from the rest of the props', () => {
     var element = <Component key="12" ref="34" foo="56" />;
@@ -82,3 +82,3 @@ describe('ReactJSXElement', function() {
     expect(element.ref).toBe('34');
-    var expectation = {foo:'56'};
+    var expectation = {foo: '56'};
     Object.freeze(expectation);
@@ -87,3 +87,3 @@ describe('ReactJSXElement', function() {
 
-  it('coerces the key to a string', function() {
+  it('coerces the key to a string', () => {
     var element = <Component key={12} foo="56" />;
@@ -92,3 +92,3 @@ describe('ReactJSXElement', function() {
     expect(element.ref).toBe(null);
-    var expectation = {foo:'56'};
+    var expectation = {foo: '56'};
     Object.freeze(expectation);
@@ -97,3 +97,3 @@ describe('ReactJSXElement', function() {
 
-  it('merges JSX children onto the children prop', function() {
+  it('merges JSX children onto the children prop', () => {
     spyOn(console, 'error');
@@ -102,6 +102,6 @@ describe('ReactJSXElement', function() {
     expect(element.props.children).toBe(a);
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('does not override children if no JSX children are provided', function() {
+  it('does not override children if no JSX children are provided', () => {
     spyOn(console, 'error');
@@ -109,6 +109,6 @@ describe('ReactJSXElement', function() {
     expect(element.props.children).toBe('text');
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('overrides children if null is provided as a JSX child', function() {
+  it('overrides children if null is provided as a JSX child', () => {
     spyOn(console, 'error');
@@ -116,6 +116,18 @@ describe('ReactJSXElement', function() {
     expect(element.props.children).toBe(null);
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('merges JSX children onto the children prop in an array', function() {
+  it('overrides children if undefined is provided as an argument', () => {
+    var element = <Component children="text">{undefined}</Component>;
+    expect(element.props.children).toBe(undefined);
+
+    var element2 = React.cloneElement(
+      <Component children="text" />,
+      {},
+      undefined,
+    );
+    expect(element2.props.children).toBe(undefined);
+  });
+
+  it('merges JSX children onto the children prop in an array', () => {
     spyOn(console, 'error');
@@ -126,6 +138,6 @@ describe('ReactJSXElement', function() {
     expect(element.props.children).toEqual([1, 2, 3]);
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('allows static methods to be called using the type property', function() {
+  it('allows static methods to be called using the type property', () => {
     spyOn(console, 'error');
@@ -137,3 +149,3 @@ describe('ReactJSXElement', function() {
       render() {
-        return <div></div>;
+        return <div />;
       }
@@ -143,6 +155,6 @@ describe('ReactJSXElement', function() {
     expect(element.type.someStaticMethod()).toBe('someReturnValue');
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('identifies valid elements', function() {
+  it('identifies valid elements', () => {
     expect(React.isValidElement(<div />)).toEqual(true);
@@ -155,6 +167,6 @@ describe('ReactJSXElement', function() {
     expect(React.isValidElement(Component)).toEqual(false);
-    expect(React.isValidElement({ type: 'div', props: {} })).toEqual(false);
+    expect(React.isValidElement({type: 'div', props: {}})).toEqual(false);
   });
 
-  it('is indistinguishable from a plain object', function() {
+  it('is indistinguishable from a plain object', () => {
     var element = <div className="foo" />;
@@ -164,3 +176,3 @@ describe('ReactJSXElement', function() {
 
-  it('should use default prop value when removing a prop', function() {
+  it('should use default prop value when removing a prop', () => {
     Component.defaultProps = {fruit: 'persimmon'};
@@ -168,6 +180,3 @@ describe('ReactJSXElement', function() {
     var container = document.createElement('div');
-    var instance = ReactDOM.render(
-      <Component fruit="mango" />,
-      container
-    );
+    var instance = ReactDOM.render(<Component fruit="mango" />, container);
     expect(instance.props.fruit).toBe('mango');
@@ -178,3 +187,3 @@ describe('ReactJSXElement', function() {
 
-  it('should normalize props with default values', function() {
+  it('should normalize props with default values', () => {
     class NormalizingComponent extends React.Component {
@@ -189,7 +198,7 @@ describe('ReactJSXElement', function() {
 
-    var inst2 =
-      ReactTestUtils.renderIntoDocument(<NormalizingComponent prop={null} />);
+    var inst2 = ReactTestUtils.renderIntoDocument(
+      <NormalizingComponent prop={null} />,
+    );
     expect(inst2.props.prop).toBe(null);
   });
-
 });
diff --git a/src/isomorphic/modern/element/__tests__/ReactJSXElementValidator-test.js b/src/isomorphic/modern/element/__tests__/ReactJSXElementValidator-test.js
index 1e2890e9f..0502161aa 100644
--- a/src/isomorphic/modern/element/__tests__/ReactJSXElementValidator-test.js
+++ b/src/isomorphic/modern/element/__tests__/ReactJSXElementValidator-test.js
@@ -16,6 +16,12 @@
 
+var PropTypes;
 var React;
+var ReactDOM;
 var ReactTestUtils;
 
-describe('ReactJSXElementValidator', function() {
+describe('ReactJSXElementValidator', () => {
+  function normalizeCodeLocInfo(str) {
+    return str && str.replace(/at .+?:\d+/g, 'at **');
+  }
+
   var Component;
@@ -23,3 +29,3 @@ describe('ReactJSXElementValidator', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -27,3 +33,5 @@ describe('ReactJSXElementValidator', function() {
     React = require('React');
+    ReactDOM = require('ReactDOM');
     ReactTestUtils = require('ReactTestUtils');
+    PropTypes = require('prop-types');
 
@@ -41,6 +49,6 @@ describe('ReactJSXElementValidator', function() {
     RequiredPropComponent.displayName = 'RequiredPropComponent';
-    RequiredPropComponent.propTypes = {prop: React.PropTypes.string.isRequired};
+    RequiredPropComponent.propTypes = {prop: PropTypes.string.isRequired};
   });
 
-  it('warns for keys for arrays of elements in children position', function() {
+  it('warns for keys for arrays of elements in children position', () => {
     spyOn(console, 'error');
@@ -49,5 +57,5 @@ describe('ReactJSXElementValidator', function() {
 
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'Each child in an array or iterator should have a unique "key" prop.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'Each child in an array or iterator should have a unique "key" prop.',
     );
@@ -55,3 +63,3 @@ describe('ReactJSXElementValidator', function() {
 
-  it('warns for keys for arrays of elements with owner info', function() {
+  it('warns for keys for arrays of elements with owner info', () => {
     spyOn(console, 'error');
@@ -66,7 +74,3 @@ describe('ReactJSXElementValidator', function() {
       render() {
-        return (
-          <InnerComponent
-            childSet={[<Component />, <Component />]}
-          />
-        );
+        return <InnerComponent childSet={[<Component />, <Component />]} />;
       }
@@ -76,7 +80,7 @@ describe('ReactJSXElementValidator', function() {
 
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'Each child in an array or iterator should have a unique "key" prop. ' +
-      'Check the render method of `InnerComponent`. ' +
-      'It was passed a child from ComponentWrapper. '
+        'Check the render method of `InnerComponent`. ' +
+        'It was passed a child from ComponentWrapper. ',
     );
@@ -84,3 +88,3 @@ describe('ReactJSXElementValidator', function() {
 
-  it('warns for keys for iterables of elements in rest args', function() {
+  it('warns for keys for iterables of elements in rest args', () => {
     spyOn(console, 'error');
@@ -101,5 +105,5 @@ describe('ReactJSXElementValidator', function() {
 
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'Each child in an array or iterator should have a unique "key" prop.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'Each child in an array or iterator should have a unique "key" prop.',
     );
@@ -107,11 +111,13 @@ describe('ReactJSXElementValidator', function() {
 
-  it('does not warns for arrays of elements with keys', function() {
+  it('does not warns for arrays of elements with keys', () => {
     spyOn(console, 'error');
 
-    void <Component>{[<Component key="#1" />, <Component key="#2" />]}</Component>;
+    void (
+      <Component>{[<Component key="#1" />, <Component key="#2" />]}</Component>
+    );
 
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('does not warns for iterable elements with keys', function() {
+  it('does not warns for iterable elements with keys', () => {
     spyOn(console, 'error');
@@ -135,6 +141,6 @@ describe('ReactJSXElementValidator', function() {
 
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('does not warn for numeric keys in entry iterable as a child', function() {
+  it('does not warn for numeric keys in entry iterable as a child', () => {
     spyOn(console, 'error');
@@ -156,6 +162,6 @@ describe('ReactJSXElementValidator', function() {
 
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('does not warn when the element is directly as children', function() {
+  it('does not warn when the element is directly as children', () => {
     spyOn(console, 'error');
@@ -164,6 +170,6 @@ describe('ReactJSXElementValidator', function() {
 
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('does not warn when the child array contains non-elements', function() {
+  it('does not warn when the child array contains non-elements', () => {
     spyOn(console, 'error');
@@ -172,3 +178,3 @@ describe('ReactJSXElementValidator', function() {
 
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
@@ -189,3 +195,3 @@ describe('ReactJSXElementValidator', function() {
     MyComp.propTypes = {
-      color: React.PropTypes.string,
+      color: PropTypes.string,
     };
@@ -197,6 +203,45 @@ describe('ReactJSXElementValidator', function() {
     ReactTestUtils.renderIntoDocument(<ParentComp />);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: Failed propType: ' +
-      'Invalid prop `color` of type `number` supplied to `MyComp`, ' +
-      'expected `string`. Check the render method of `ParentComp`.'
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
+      'Warning: Failed prop type: ' +
+        'Invalid prop `color` of type `number` supplied to `MyComp`, ' +
+        'expected `string`.\n' +
+        '    in MyComp (at **)\n' +
+        '    in ParentComp (at **)',
+    );
+  });
+
+  it('should update component stack after receiving next element', () => {
+    spyOn(console, 'error');
+    function MyComp() {
+      return null;
+    }
+    MyComp.propTypes = {
+      color: PropTypes.string,
+    };
+    function MiddleComp(props) {
+      return <MyComp color={props.color} />;
+    }
+    function ParentComp(props) {
+      if (props.warn) {
+        // This element has a source thanks to JSX.
+        return <MiddleComp color={42} />;
+      }
+      // This element has no source.
+      return React.createElement(MiddleComp, {color: 'blue'});
+    }
+
+    var container = document.createElement('div');
+    ReactDOM.render(<ParentComp warn={false} />, container);
+    ReactDOM.render(<ParentComp warn={true} />, container);
+
+    expect(console.error.calls.count()).toBe(1);
+    // The warning should have the full stack with line numbers.
+    // If it doesn't, it means we're using information from the old element.
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
+      'Warning: Failed prop type: ' +
+        'Invalid prop `color` of type `number` supplied to `MyComp`, ' +
+        'expected `string`.\n' +
+        '    in MyComp (at **)\n' +
+        '    in MiddleComp (at **)\n' +
+        '    in ParentComp (at **)',
     );
@@ -215,24 +260,33 @@ describe('ReactJSXElementValidator', function() {
     void <Num />;
-    expect(console.error.calls.length).toBe(4);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'type should not be null, undefined, boolean, or number. It should be ' +
-      'a string (for DOM elements) or a ReactClass (for composite components).'
+    expect(console.error.calls.count()).toBe(4);
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
+      'Warning: React.createElement: type is invalid -- expected a string ' +
+        '(for built-in components) or a class/function (for composite ' +
+        'components) but got: undefined. You likely forgot to export your ' +
+        "component from the file it's defined in. " +
+        'Check your code at **.',
     );
-    expect(console.error.argsForCall[1][0]).toContain(
-      'type should not be null, undefined, boolean, or number. It should be ' +
-      'a string (for DOM elements) or a ReactClass (for composite components).'
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(1)[0])).toBe(
+      'Warning: React.createElement: type is invalid -- expected a string ' +
+        '(for built-in components) or a class/function (for composite ' +
+        'components) but got: null. ' +
+        'Check your code at **.',
     );
-    expect(console.error.argsForCall[2][0]).toContain(
-      'type should not be null, undefined, boolean, or number. It should be ' +
-      'a string (for DOM elements) or a ReactClass (for composite components).'
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(2)[0])).toBe(
+      'Warning: React.createElement: type is invalid -- expected a string ' +
+        '(for built-in components) or a class/function (for composite ' +
+        'components) but got: boolean. ' +
+        'Check your code at **.',
     );
-    expect(console.error.argsForCall[3][0]).toContain(
-      'type should not be null, undefined, boolean, or number. It should be ' +
-      'a string (for DOM elements) or a ReactClass (for composite components).'
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(3)[0])).toBe(
+      'Warning: React.createElement: type is invalid -- expected a string ' +
+        '(for built-in components) or a class/function (for composite ' +
+        'components) but got: number. ' +
+        'Check your code at **.',
     );
     void <Div />;
-    expect(console.error.calls.length).toBe(4);
+    expect(console.error.calls.count()).toBe(4);
   });
 
-  it('should check default prop values', function() {
+  it('should check default prop values', () => {
     spyOn(console, 'error');
@@ -243,6 +297,7 @@ describe('ReactJSXElementValidator', function() {
 
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: Failed propType: ' +
-      'Required prop `prop` was not specified in `RequiredPropComponent`.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
+      'Warning: Failed prop type: The prop `prop` is marked as required in ' +
+        '`RequiredPropComponent`, but its value is `null`.\n' +
+        '    in RequiredPropComponent (at **)',
     );
@@ -250,3 +305,3 @@ describe('ReactJSXElementValidator', function() {
 
-  it('should not check the default for explicit null', function() {
+  it('should not check the default for explicit null', () => {
     spyOn(console, 'error');
@@ -255,6 +310,7 @@ describe('ReactJSXElementValidator', function() {
 
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: Failed propType: ' +
-      'Required prop `prop` was not specified in `RequiredPropComponent`.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
+      'Warning: Failed prop type: The prop `prop` is marked as required in ' +
+        '`RequiredPropComponent`, but its value is `null`.\n' +
+        '    in RequiredPropComponent (at **)',
     );
@@ -262,3 +318,3 @@ describe('ReactJSXElementValidator', function() {
 
-  it('should check declared prop types', function() {
+  it('should check declared prop types', () => {
     spyOn(console, 'error');
@@ -268,12 +324,15 @@ describe('ReactJSXElementValidator', function() {
 
-    expect(console.error.calls.length).toBe(2);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: Failed propType: ' +
-      'Required prop `prop` was not specified in `RequiredPropComponent`.'
+    expect(console.error.calls.count()).toBe(2);
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
+      'Warning: Failed prop type: ' +
+        'The prop `prop` is marked as required in `RequiredPropComponent`, but ' +
+        'its value is `undefined`.\n' +
+        '    in RequiredPropComponent (at **)',
     );
 
-    expect(console.error.argsForCall[1][0]).toBe(
-      'Warning: Failed propType: ' +
-      'Invalid prop `prop` of type `number` supplied to ' +
-      '`RequiredPropComponent`, expected `string`.'
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(1)[0])).toBe(
+      'Warning: Failed prop type: ' +
+        'Invalid prop `prop` of type `number` supplied to ' +
+        '`RequiredPropComponent`, expected `string`.\n' +
+        '    in RequiredPropComponent (at **)',
     );
@@ -283,6 +342,6 @@ describe('ReactJSXElementValidator', function() {
     // Should not error for strings
-    expect(console.error.calls.length).toBe(2);
+    expect(console.error.calls.count()).toBe(2);
   });
 
-  it('should warn on invalid prop types', function() {
+  it('should warn on invalid prop types', () => {
     // Since there is no prevalidation step for ES6 classes, there is no hook
@@ -301,6 +360,6 @@ describe('ReactJSXElementValidator', function() {
     ReactTestUtils.renderIntoDocument(<NullPropTypeComponent />);
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'NullPropTypeComponent: prop type `prop` is invalid; it must be a ' +
-      'function, usually from React.PropTypes.'
+        'function, usually from React.PropTypes.',
     );
@@ -308,3 +367,3 @@ describe('ReactJSXElementValidator', function() {
 
-  it('should warn on invalid context types', function() {
+  it('should warn on invalid context types', () => {
     spyOn(console, 'error');
@@ -319,6 +378,6 @@ describe('ReactJSXElementValidator', function() {
     ReactTestUtils.renderIntoDocument(<NullContextTypeComponent />);
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'NullContextTypeComponent: context type `prop` is invalid; it must ' +
-      'be a function, usually from React.PropTypes.'
+        'be a function, usually from React.PropTypes.',
     );
@@ -326,3 +385,3 @@ describe('ReactJSXElementValidator', function() {
 
-  it('should warn if getDefaultProps is specificed on the class', function() {
+  it('should warn if getDefaultProps is specificed on the class', () => {
     spyOn(console, 'error');
@@ -337,6 +396,6 @@ describe('ReactJSXElementValidator', function() {
     ReactTestUtils.renderIntoDocument(<GetDefaultPropsComponent />);
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'getDefaultProps is only used on classic React.createClass definitions.' +
-      ' Use a static property named `defaultProps` instead.'
+        ' Use a static property named `defaultProps` instead.',
     );
@@ -344,2 +403,52 @@ describe('ReactJSXElementValidator', function() {
 
+  it('provides stack via non-standard console.reactStack for invalid types', () => {
+    spyOn(console, 'error');
+
+    function Foo() {
+      var Bad = undefined;
+      return <Bad />;
+    }
+
+    function App() {
+      return <div><Foo /></div>;
+    }
+
+    try {
+      console.reactStack = jest.fn();
+      console.reactStackEnd = jest.fn();
+
+      expect(() => {
+        ReactTestUtils.renderIntoDocument(<App />);
+      }).toThrow(
+        'Element type is invalid: expected a string (for built-in components) ' +
+          'or a class/function (for composite components) but got: undefined. ' +
+          "You likely forgot to export your component from the file it's " +
+          'defined in. Check the render method of `Foo`.',
+      );
+
+      expect(console.reactStack.mock.calls.length).toBe(1);
+      expect(console.reactStackEnd.mock.calls.length).toBe(1);
+
+      var stack = console.reactStack.mock.calls[0][0];
+      expect(Array.isArray(stack)).toBe(true);
+      expect(stack.map(frame => frame.name)).toEqual([
+        'Foo', // <Bad> is inside Foo
+        'App', // <Foo> is inside App
+        'App', // <div> is inside App
+        null, // <App> is outside a component
+      ]);
+      expect(
+        stack.map(frame => frame.fileName && frame.fileName.slice(-8)),
+      ).toEqual(['-test.js', '-test.js', '-test.js', '-test.js']);
+      expect(stack.map(frame => typeof frame.lineNumber)).toEqual([
+        'number',
+        'number',
+        'number',
+        'number',
+      ]);
+    } finally {
+      delete console.reactStack;
+      delete console.reactStackEnd;
+    }
+  });
 });
diff --git a/src/node_modules/react/lib/getNextDebugID.js b/src/node_modules/react/lib/getNextDebugID.js
new file mode 100644
index 000000000..e7e3d8ca6
--- /dev/null
+++ b/src/node_modules/react/lib/getNextDebugID.js
@@ -0,0 +1,9 @@
+/**
+ *  * Copyright 2016-present Facebook. All Rights Reserved.
+ *   *
+ *    * @flow
+ *     */
+
+'use strict';
+
+module.exports = require('getNextDebugID');
diff --git a/src/package.json b/src/package.json
index 8279f8f6d..9d50d45d1 100644
--- a/src/package.json
+++ b/src/package.json
@@ -2,3 +2,3 @@
   "name": "react-haste",
-  "version": "15.0.0",
+  "version": "15.0.1",
   "license": "BSD-3-Clause"
diff --git a/src/renderers/art/ReactART.js b/src/renderers/art/ReactART.js
new file mode 100644
index 000000000..7550e330d
--- /dev/null
+++ b/src/renderers/art/ReactART.js
@@ -0,0 +1,630 @@
+/**
+ * Copyright (c) 2013-present Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactART
+ */
+
+'use strict';
+
+require('art/modes/current').setCurrent(
+  require('art/modes/fast-noSideEffects'), // Flip this to DOM mode for debugging
+);
+
+const Transform = require('art/core/transform');
+const Mode = require('art/modes/current');
+
+const React = require('React');
+const ReactDOM = require('ReactDOM');
+const ReactInstanceMap = require('ReactInstanceMap');
+const ReactMultiChild = require('ReactMultiChild');
+const ReactUpdates = require('ReactUpdates');
+
+const createReactClass = require('createClass');
+const emptyObject = require('emptyObject');
+const invariant = require('invariant');
+
+const assign = require('object-assign');
+const pooledTransform = new Transform();
+
+// Utilities
+
+function childrenAsString(children) {
+  if (!children) {
+    return '';
+  }
+  if (typeof children === 'string') {
+    return children;
+  }
+  if (children.length) {
+    return children.join('\n');
+  }
+  return '';
+}
+
+function createComponent(name) {
+  const ReactARTComponent = function(element) {
+    this.node = null;
+    this.subscriptions = null;
+    this.listeners = null;
+    this._mountImage = null;
+    this._renderedChildren = null;
+    this.construct(element);
+  };
+  ReactARTComponent.displayName = name;
+  for (let i = 1, l = arguments.length; i < l; i++) {
+    assign(ReactARTComponent.prototype, arguments[i]);
+  }
+
+  return ReactARTComponent;
+}
+
+/**
+ * Insert `node` into `parentNode` after `referenceNode`.
+ */
+function injectAfter(parentNode, referenceNode, node) {
+  let beforeNode;
+  if (
+    node.parentNode === parentNode &&
+    node.previousSibling === referenceNode
+  ) {
+    return;
+  }
+  if (referenceNode == null) {
+    // node is supposed to be first.
+    beforeNode = parentNode.firstChild;
+  } else {
+    // node is supposed to be after referenceNode.
+    beforeNode = referenceNode.nextSibling;
+  }
+  if (beforeNode && beforeNode.previousSibling !== node) {
+    // Cases where `node === beforeNode` should get filtered out by earlier
+    // checks and the behavior isn't well-defined.
+    invariant(
+      node !== beforeNode,
+      'ReactART: Can not insert node before itself',
+    );
+    node.injectBefore(beforeNode);
+  } else if (node.parentNode !== parentNode) {
+    node.inject(parentNode);
+  }
+}
+
+// ContainerMixin for components that can hold ART nodes
+
+const ContainerMixin = assign({}, ReactMultiChild.Mixin, {
+  /**
+   * Moves a child component to the supplied index.
+   *
+   * @param {ReactComponent} child Component to move.
+   * @param {number} toIndex Destination index of the element.
+   * @protected
+   */
+  moveChild: function(child, afterNode, toIndex, lastIndex) {
+    const childNode = child._mountImage;
+    injectAfter(this.node, afterNode, childNode);
+  },
+
+  /**
+   * Creates a child component.
+   *
+   * @param {ReactComponent} child Component to create.
+   * @param {object} childNode ART node to insert.
+   * @protected
+   */
+  createChild: function(child, afterNode, childNode) {
+    child._mountImage = childNode;
+    injectAfter(this.node, afterNode, childNode);
+  },
+
+  /**
+   * Removes a child component.
+   *
+   * @param {ReactComponent} child Child to remove.
+   * @protected
+   */
+  removeChild: function(child) {
+    child._mountImage.eject();
+    child._mountImage = null;
+  },
+
+  updateChildrenAtRoot: function(nextChildren, transaction) {
+    this.updateChildren(nextChildren, transaction, emptyObject);
+  },
+
+  mountAndInjectChildrenAtRoot: function(children, transaction) {
+    this.mountAndInjectChildren(children, transaction, emptyObject);
+  },
+
+  /**
+   * Override to bypass batch updating because it is not necessary.
+   *
+   * @param {?object} nextChildren.
+   * @param {ReactReconcileTransaction} transaction
+   * @internal
+   * @override {ReactMultiChild.Mixin.updateChildren}
+   */
+  updateChildren: function(nextChildren, transaction, context) {
+    this._updateChildren(nextChildren, transaction, context);
+  },
+
+  // Shorthands
+
+  mountAndInjectChildren: function(children, transaction, context) {
+    const mountedImages = this.mountChildren(children, transaction, context);
+    // Each mount image corresponds to one of the flattened children
+    let i = 0;
+    for (let key in this._renderedChildren) {
+      if (this._renderedChildren.hasOwnProperty(key)) {
+        const child = this._renderedChildren[key];
+        child._mountImage = mountedImages[i];
+        mountedImages[i].inject(this.node);
+        i++;
+      }
+    }
+  },
+});
+
+// Surface is a React DOM Component, not an ART component. It serves as the
+// entry point into the ART reconciler.
+
+const Surface = createReactClass({
+  displayName: 'Surface',
+
+  mixins: [ContainerMixin],
+
+  componentDidMount: function() {
+    const domNode = ReactDOM.findDOMNode(this);
+
+    this.node = Mode.Surface(+this.props.width, +this.props.height, domNode);
+
+    const transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
+    transaction.perform(
+      this.mountAndInjectChildren,
+      this,
+      this.props.children,
+      transaction,
+      ReactInstanceMap.get(this)._context,
+    );
+    ReactUpdates.ReactReconcileTransaction.release(transaction);
+  },
+
+  componentDidUpdate: function(oldProps) {
+    const node = this.node;
+    if (
+      this.props.width != oldProps.width ||
+      this.props.height != oldProps.height
+    ) {
+      node.resize(+this.props.width, +this.props.height);
+    }
+
+    const transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
+    transaction.perform(
+      this.updateChildren,
+      this,
+      this.props.children,
+      transaction,
+      ReactInstanceMap.get(this)._context,
+    );
+    ReactUpdates.ReactReconcileTransaction.release(transaction);
+
+    if (node.render) {
+      node.render();
+    }
+  },
+
+  componentWillUnmount: function() {
+    this.unmountChildren();
+  },
+
+  render: function() {
+    // This is going to be a placeholder because we don't know what it will
+    // actually resolve to because ART may render canvas, vml or svg tags here.
+    // We only allow a subset of properties since others might conflict with
+    // ART's properties.
+    const props = this.props;
+
+    // TODO: ART's Canvas Mode overrides surface title and cursor
+    const Tag = Mode.Surface.tagName;
+    return (
+      <Tag
+        className={props.className}
+        draggable={props.draggable}
+        role={props.role}
+        style={props.style}
+        title={props.title}
+      />
+    );
+  },
+});
+
+// Various nodes that can go into a surface
+
+const EventTypes = {
+  onMouseMove: 'mousemove',
+  onMouseOver: 'mouseover',
+  onMouseOut: 'mouseout',
+  onMouseUp: 'mouseup',
+  onMouseDown: 'mousedown',
+  onClick: 'click',
+};
+
+const NodeMixin = {
+  construct: function(element) {
+    this._currentElement = element;
+  },
+
+  getNativeNode: function() {
+    return this.node;
+  },
+
+  getPublicInstance: function() {
+    return this.node;
+  },
+
+  putEventListener: function(type, listener) {
+    const subscriptions = this.subscriptions || (this.subscriptions = {});
+    const listeners = this.listeners || (this.listeners = {});
+    listeners[type] = listener;
+    if (listener) {
+      if (!subscriptions[type]) {
+        subscriptions[type] = this.node.subscribe(type, listener, this);
+      }
+    } else {
+      if (subscriptions[type]) {
+        subscriptions[type]();
+        delete subscriptions[type];
+      }
+    }
+  },
+
+  handleEvent: function(event) {
+    const listener = this.listeners[event.type];
+    if (!listener) {
+      return;
+    }
+    if (typeof listener === 'function') {
+      listener.call(this, event);
+    } else if (listener.handleEvent) {
+      listener.handleEvent(event);
+    }
+  },
+
+  destroyEventListeners: function() {
+    const subscriptions = this.subscriptions;
+    if (subscriptions) {
+      for (let type in subscriptions) {
+        subscriptions[type]();
+      }
+    }
+    this.subscriptions = null;
+    this.listeners = null;
+  },
+
+  applyNodeProps: function(oldProps, props) {
+    const node = this.node;
+
+    const scaleX = props.scaleX != null
+      ? props.scaleX
+      : props.scale != null ? props.scale : 1;
+    const scaleY = props.scaleY != null
+      ? props.scaleY
+      : props.scale != null ? props.scale : 1;
+
+    pooledTransform
+      .transformTo(1, 0, 0, 1, 0, 0)
+      .move(props.x || 0, props.y || 0)
+      .rotate(props.rotation || 0, props.originX, props.originY)
+      .scale(scaleX, scaleY, props.originX, props.originY);
+
+    if (props.transform != null) {
+      pooledTransform.transform(props.transform);
+    }
+
+    if (
+      node.xx !== pooledTransform.xx ||
+      node.yx !== pooledTransform.yx ||
+      node.xy !== pooledTransform.xy ||
+      node.yy !== pooledTransform.yy ||
+      node.x !== pooledTransform.x ||
+      node.y !== pooledTransform.y
+    ) {
+      node.transformTo(pooledTransform);
+    }
+
+    if (props.cursor !== oldProps.cursor || props.title !== oldProps.title) {
+      node.indicate(props.cursor, props.title);
+    }
+
+    if (node.blend && props.opacity !== oldProps.opacity) {
+      node.blend(props.opacity == null ? 1 : props.opacity);
+    }
+
+    if (props.visible !== oldProps.visible) {
+      if (props.visible == null || props.visible) {
+        node.show();
+      } else {
+        node.hide();
+      }
+    }
+
+    for (let type in EventTypes) {
+      this.putEventListener(EventTypes[type], props[type]);
+    }
+  },
+
+  mountComponentIntoNode: function(rootID, container) {
+    throw new Error(
+      'You cannot render an ART component standalone. ' +
+        'You need to wrap it in a Surface.',
+    );
+  },
+};
+
+// Group
+
+const Group = createComponent('Group', NodeMixin, ContainerMixin, {
+  mountComponent: function(
+    transaction,
+    nativeParent,
+    nativeContainerInfo,
+    context,
+  ) {
+    this.node = Mode.Group();
+    const props = this._currentElement.props;
+    this.applyGroupProps(emptyObject, props);
+    this.mountAndInjectChildren(props.children, transaction, context);
+    return this.node;
+  },
+
+  receiveComponent: function(nextComponent, transaction, context) {
+    const props = nextComponent.props;
+    const oldProps = this._currentElement.props;
+    this.applyGroupProps(oldProps, props);
+    this.updateChildren(props.children, transaction, context);
+    this._currentElement = nextComponent;
+  },
+
+  applyGroupProps: function(oldProps, props) {
+    this.node.width = props.width;
+    this.node.height = props.height;
+    this.applyNodeProps(oldProps, props);
+  },
+
+  unmountComponent: function() {
+    this.destroyEventListeners();
+    this.unmountChildren();
+  },
+});
+
+// ClippingRectangle
+const ClippingRectangle = createComponent(
+  'ClippingRectangle',
+  NodeMixin,
+  ContainerMixin,
+  {
+    mountComponent: function(
+      transaction,
+      nativeParent,
+      nativeContainerInfo,
+      context,
+    ) {
+      this.node = Mode.ClippingRectangle();
+      const props = this._currentElement.props;
+      this.applyClippingProps(emptyObject, props);
+      this.mountAndInjectChildren(props.children, transaction, context);
+      return this.node;
+    },
+
+    receiveComponent: function(nextComponent, transaction, context) {
+      const props = nextComponent.props;
+      const oldProps = this._currentElement.props;
+      this.applyClippingProps(oldProps, props);
+      this.updateChildren(props.children, transaction, context);
+      this._currentElement = nextComponent;
+    },
+
+    applyClippingProps: function(oldProps, props) {
+      this.node.width = props.width;
+      this.node.height = props.height;
+      this.node.x = props.x;
+      this.node.y = props.y;
+      this.applyNodeProps(oldProps, props);
+    },
+
+    unmountComponent: function() {
+      this.destroyEventListeners();
+      this.unmountChildren();
+    },
+  },
+);
+
+// Renderables
+
+const RenderableMixin = assign({}, NodeMixin, {
+  applyRenderableProps: function(oldProps, props) {
+    if (oldProps.fill !== props.fill) {
+      if (props.fill && props.fill.applyFill) {
+        props.fill.applyFill(this.node);
+      } else {
+        this.node.fill(props.fill);
+      }
+    }
+    if (
+      oldProps.stroke !== props.stroke ||
+      oldProps.strokeWidth !== props.strokeWidth ||
+      oldProps.strokeCap !== props.strokeCap ||
+      oldProps.strokeJoin !== props.strokeJoin ||
+      // TODO: Consider a deep check of stokeDash.
+      // This may benefit the VML version in IE.
+      oldProps.strokeDash !== props.strokeDash
+    ) {
+      this.node.stroke(
+        props.stroke,
+        props.strokeWidth,
+        props.strokeCap,
+        props.strokeJoin,
+        props.strokeDash,
+      );
+    }
+    this.applyNodeProps(oldProps, props);
+  },
+
+  unmountComponent: function() {
+    this.destroyEventListeners();
+  },
+});
+
+// Shape
+
+const Shape = createComponent('Shape', RenderableMixin, {
+  construct: function(element) {
+    this._currentElement = element;
+    this._oldDelta = null;
+    this._oldPath = null;
+  },
+
+  mountComponent: function(
+    transaction,
+    nativeParent,
+    nativeContainerInfo,
+    context,
+  ) {
+    this.node = Mode.Shape();
+    const props = this._currentElement.props;
+    this.applyShapeProps(emptyObject, props);
+    return this.node;
+  },
+
+  receiveComponent: function(nextComponent, transaction, context) {
+    const props = nextComponent.props;
+    const oldProps = this._currentElement.props;
+    this.applyShapeProps(oldProps, props);
+    this._currentElement = nextComponent;
+  },
+
+  applyShapeProps: function(oldProps, props) {
+    const oldDelta = this._oldDelta;
+    const oldPath = this._oldPath;
+    const path = props.d || childrenAsString(props.children);
+
+    if (
+      path.delta !== oldDelta ||
+      path !== oldPath ||
+      oldProps.width !== props.width ||
+      oldProps.height !== props.height
+    ) {
+      this.node.draw(path, props.width, props.height);
+
+      this._oldPath = path;
+      this._oldDelta = path.delta;
+    }
+
+    this.applyRenderableProps(oldProps, props);
+  },
+});
+
+// Text
+
+const Text = createComponent('Text', RenderableMixin, {
+  construct: function(element) {
+    this._currentElement = element;
+    this._oldString = null;
+  },
+
+  mountComponent: function(
+    transaction,
+    nativeParent,
+    nativeContainerInfo,
+    context,
+  ) {
+    const props = this._currentElement.props;
+    const newString = childrenAsString(props.children);
+    this.node = Mode.Text(newString, props.font, props.alignment, props.path);
+    this._oldString = newString;
+    this.applyRenderableProps(emptyObject, props);
+    return this.node;
+  },
+
+  isSameFont: function(oldFont, newFont) {
+    if (oldFont === newFont) {
+      return true;
+    }
+    if (typeof newFont === 'string' || typeof oldFont === 'string') {
+      return false;
+    }
+    return (
+      newFont.fontSize === oldFont.fontSize &&
+      newFont.fontStyle === oldFont.fontStyle &&
+      newFont.fontVariant === oldFont.fontVariant &&
+      newFont.fontWeight === oldFont.fontWeight &&
+      newFont.fontFamily === oldFont.fontFamily
+    );
+  },
+
+  receiveComponent: function(nextComponent, transaction, context) {
+    const props = nextComponent.props;
+    const oldProps = this._currentElement.props;
+
+    const oldString = this._oldString;
+    const newString = childrenAsString(props.children);
+
+    if (
+      oldString !== newString ||
+      !this.isSameFont(oldProps.font, props.font) ||
+      oldProps.alignment !== props.alignment ||
+      oldProps.path !== props.path
+    ) {
+      this.node.draw(newString, props.font, props.alignment, props.path);
+      this._oldString = newString;
+    }
+
+    this.applyRenderableProps(oldProps, props);
+    this._currentElement = nextComponent;
+  },
+});
+
+// Declarative fill type objects - API design not finalized
+
+const slice = Array.prototype.slice;
+
+function LinearGradient(stops, x1, y1, x2, y2) {
+  this.args = slice.call(arguments);
+}
+
+LinearGradient.prototype.applyFill = function(node) {
+  node.fillLinear.apply(node, this.args);
+};
+
+function RadialGradient(stops, fx, fy, rx, ry, cx, cy) {
+  this.args = slice.call(arguments);
+}
+
+RadialGradient.prototype.applyFill = function(node) {
+  node.fillRadial.apply(node, this.args);
+};
+
+function Pattern(url, width, height, left, top) {
+  this.args = slice.call(arguments);
+}
+
+Pattern.prototype.applyFill = function(node) {
+  node.fillImage.apply(node, this.args);
+};
+
+module.exports = {
+  ClippingRectangle,
+  Group,
+  LinearGradient,
+  Path: Mode.Path,
+  Pattern,
+  RadialGradient,
+  Shape,
+  Surface,
+  Text,
+  Transform,
+};
diff --git a/src/renderers/art/__tests__/ReactART-test.js b/src/renderers/art/__tests__/ReactART-test.js
new file mode 100644
index 000000000..7d9ce37ff
--- /dev/null
+++ b/src/renderers/art/__tests__/ReactART-test.js
@@ -0,0 +1,301 @@
+/**
+ * Copyright (c) 2013-present Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+/*jslint evil: true */
+
+'use strict';
+
+var React = require('React');
+var ReactDOM = require('ReactDOM');
+var ReactTestUtils = require('ReactTestUtils');
+
+var Group;
+var Shape;
+var Surface;
+var TestComponent;
+
+var Missing = {};
+
+var ReactART = require('ReactART');
+var ARTSVGMode = require('art/modes/svg');
+var ARTCurrentMode = require('art/modes/current');
+
+function testDOMNodeStructure(domNode, expectedStructure) {
+  expect(domNode).toBeDefined();
+  expect(domNode.nodeName).toBe(expectedStructure.nodeName);
+  for (var prop in expectedStructure) {
+    if (!expectedStructure.hasOwnProperty(prop)) continue;
+    if (prop != 'nodeName' && prop != 'children') {
+      if (expectedStructure[prop] === Missing) {
+        expect(domNode.hasAttribute(prop)).toBe(false);
+      } else {
+        expect(domNode.getAttribute(prop)).toBe(expectedStructure[prop]);
+      }
+    }
+  }
+  if (expectedStructure.children) {
+    expectedStructure.children.forEach(function(subTree, index) {
+      testDOMNodeStructure(domNode.childNodes[index], subTree);
+    });
+  }
+}
+
+describe('ReactART', () => {
+  beforeEach(() => {
+    ARTCurrentMode.setCurrent(ARTSVGMode);
+
+    Group = ReactART.Group;
+    Shape = ReactART.Shape;
+    Surface = ReactART.Surface;
+
+    TestComponent = class extends React.Component {
+      render() {
+        var a = (
+          <Shape
+            d="M0,0l50,0l0,50l-50,0z"
+            fill={new ReactART.LinearGradient(['black', 'white'])}
+            key="a"
+            width={50}
+            height={50}
+            x={50}
+            y={50}
+            opacity={0.1}
+          />
+        );
+
+        var b = (
+          <Shape
+            fill="#3C5A99"
+            key="b"
+            scale={0.5}
+            x={50}
+            y={50}
+            title="This is an F"
+            cursor="pointer">
+            M64.564,38.583H54l0.008-5.834c0-3.035,0.293-4.666,4.657-4.666
+            h5.833V16.429h-9.33c-11.213,0-15.159,5.654-15.159,15.16v6.994
+            h-6.99v11.652h6.99v33.815H54V50.235h9.331L64.564,38.583z
+          </Shape>
+        );
+
+        var c = <Group key="c" />;
+
+        return (
+          <Surface width={150} height={200}>
+            <Group ref="group">
+              {this.props.flipped ? [b, a, c] : [a, b, c]}
+            </Group>
+          </Surface>
+        );
+      }
+    };
+  });
+
+  it('should have the correct lifecycle state', () => {
+    var instance = <TestComponent />;
+    instance = ReactTestUtils.renderIntoDocument(instance);
+    var group = instance.refs.group;
+    // Duck type test for an ART group
+    expect(typeof group.indicate).toBe('function');
+  });
+
+  it('should render a reasonable SVG structure in SVG mode', () => {
+    var instance = <TestComponent />;
+    instance = ReactTestUtils.renderIntoDocument(instance);
+
+    var expectedStructure = {
+      nodeName: 'svg',
+      width: '150',
+      height: '200',
+      children: [
+        {nodeName: 'defs'},
+        {
+          nodeName: 'g',
+          children: [
+            {
+              nodeName: 'defs',
+              children: [{nodeName: 'linearGradient'}],
+            },
+            {nodeName: 'path'},
+            {nodeName: 'path'},
+            {nodeName: 'g'},
+          ],
+        },
+      ],
+    };
+
+    var realNode = ReactDOM.findDOMNode(instance);
+    testDOMNodeStructure(realNode, expectedStructure);
+  });
+
+  it('should be able to reorder components', () => {
+    var container = document.createElement('div');
+    var instance = ReactDOM.render(
+      <TestComponent flipped={false} />,
+      container,
+    );
+
+    var expectedStructure = {
+      nodeName: 'svg',
+      children: [
+        {nodeName: 'defs'},
+        {
+          nodeName: 'g',
+          children: [
+            {nodeName: 'defs'},
+            {nodeName: 'path', opacity: '0.1'},
+            {nodeName: 'path', opacity: Missing},
+            {nodeName: 'g'},
+          ],
+        },
+      ],
+    };
+
+    var realNode = ReactDOM.findDOMNode(instance);
+    testDOMNodeStructure(realNode, expectedStructure);
+
+    ReactDOM.render(<TestComponent flipped={true} />, container);
+
+    var expectedNewStructure = {
+      nodeName: 'svg',
+      children: [
+        {nodeName: 'defs'},
+        {
+          nodeName: 'g',
+          children: [
+            {nodeName: 'defs'},
+            {nodeName: 'path', opacity: Missing},
+            {nodeName: 'path', opacity: '0.1'},
+            {nodeName: 'g'},
+          ],
+        },
+      ],
+    };
+
+    testDOMNodeStructure(realNode, expectedNewStructure);
+  });
+
+  it('should be able to reorder many components', () => {
+    var container = document.createElement('div');
+
+    class Component extends React.Component {
+      render() {
+        var chars = this.props.chars.split('');
+        return (
+          <Surface>
+            {chars.map(text => <Shape key={text} title={text} />)}
+          </Surface>
+        );
+      }
+    }
+
+    // Mini multi-child stress test: lots of reorders, some adds, some removes.
+    var before = 'abcdefghijklmnopqrst';
+    var after = 'mxhpgwfralkeoivcstzy';
+
+    var instance = ReactDOM.render(<Component chars={before} />, container);
+    var realNode = ReactDOM.findDOMNode(instance);
+    expect(realNode.textContent).toBe(before);
+
+    instance = ReactDOM.render(<Component chars={after} />, container);
+    expect(realNode.textContent).toBe(after);
+
+    ReactDOM.unmountComponentAtNode(container);
+  });
+
+  it('renders composite with lifecycle inside group', () => {
+    var mounted = false;
+
+    class CustomShape extends React.Component {
+      render() {
+        return <Shape />;
+      }
+
+      componentDidMount() {
+        mounted = true;
+      }
+    }
+
+    ReactTestUtils.renderIntoDocument(
+      <Surface>
+        <Group>
+          <CustomShape />
+        </Group>
+      </Surface>,
+    );
+    expect(mounted).toBe(true);
+  });
+
+  it('resolves refs before componentDidMount', () => {
+    class CustomShape extends React.Component {
+      render() {
+        return <Shape />;
+      }
+    }
+
+    var ref = null;
+
+    class Outer extends React.Component {
+      componentDidMount() {
+        ref = this.refs.test;
+      }
+
+      render() {
+        return (
+          <Surface>
+            <Group>
+              <CustomShape ref="test" />
+            </Group>
+          </Surface>
+        );
+      }
+    }
+
+    ReactTestUtils.renderIntoDocument(<Outer />);
+    expect(ref.constructor).toBe(CustomShape);
+  });
+
+  it('resolves refs before componentDidUpdate', () => {
+    class CustomShape extends React.Component {
+      render() {
+        return <Shape />;
+      }
+    }
+
+    var ref = {};
+
+    class Outer extends React.Component {
+      componentDidMount() {
+        ref = this.refs.test;
+      }
+
+      componentDidUpdate() {
+        ref = this.refs.test;
+      }
+
+      render() {
+        return (
+          <Surface>
+            <Group>
+              {this.props.mountCustomShape && <CustomShape ref="test" />}
+            </Group>
+          </Surface>
+        );
+      }
+    }
+
+    var container = document.createElement('div');
+    ReactDOM.render(<Outer />, container);
+    expect(ref).not.toBeDefined();
+    ReactDOM.render(<Outer mountCustomShape={true} />, container);
+    expect(ref.constructor).toBe(CustomShape);
+  });
+});
diff --git a/src/renderers/dom/ReactDOM.js b/src/renderers/dom/ReactDOM.js
index 75644b120..a30ee9af4 100644
--- a/src/renderers/dom/ReactDOM.js
+++ b/src/renderers/dom/ReactDOM.js
@@ -18,3 +18,2 @@ var ReactDefaultInjection = require('ReactDefaultInjection');
 var ReactMount = require('ReactMount');
-var ReactPerf = require('ReactPerf');
 var ReactReconciler = require('ReactReconciler');
@@ -24,3 +23,3 @@ var ReactVersion = require('ReactVersion');
 var findDOMNode = require('findDOMNode');
-var getNativeComponentFromComposite = require('getNativeComponentFromComposite');
+var getHostComponentFromComposite = require('getHostComponentFromComposite');
 var renderSubtreeIntoContainer = require('renderSubtreeIntoContainer');
@@ -30,7 +29,5 @@ ReactDefaultInjection.inject();
 
-var render = ReactPerf.measure('React', 'render', ReactMount.render);
-
-var React = {
+var ReactDOM = {
   findDOMNode: findDOMNode,
-  render: render,
+  render: ReactMount.render,
   unmountComponentAtNode: ReactMount.unmountComponentAtNode,
@@ -48,3 +45,4 @@ if (
   typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
-  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
+  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function'
+) {
   __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
@@ -56,3 +54,3 @@ if (
         if (inst._renderedComponent) {
-          inst = getNativeComponentFromComposite(inst);
+          inst = getHostComponentFromComposite(inst);
         }
@@ -73,3 +71,2 @@ if (__DEV__) {
   if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
-
     // First check if devtools is not installed
@@ -77,7 +74,10 @@ if (__DEV__) {
       // If we're in Chrome or Firefox, provide a download link if not installed.
-      if ((navigator.userAgent.indexOf('Chrome') > -1 &&
+      if (
+        (navigator.userAgent.indexOf('Chrome') > -1 &&
           navigator.userAgent.indexOf('Edge') === -1) ||
-          navigator.userAgent.indexOf('Firefox') > -1) {
+        navigator.userAgent.indexOf('Firefox') > -1
+      ) {
         // Firefox does not have the issue with devtools loaded over file://
-        var showFileUrlMessage = window.location.protocol.indexOf('http') === -1 &&
+        var showFileUrlMessage =
+          window.location.protocol.indexOf('http') === -1 &&
           navigator.userAgent.indexOf('Firefox') === -1;
@@ -85,5 +85,7 @@ if (__DEV__) {
           'Download the React DevTools ' +
-          (showFileUrlMessage ? 'and use an HTTP server (instead of a file: URL) ' : '') +
-          'for a better development experience: ' +
-          'https://fb.me/react-devtools'
+            (showFileUrlMessage
+              ? 'and use an HTTP server (instead of a file: URL) '
+              : '') +
+            'for a better development experience: ' +
+            'https://fb.me/react-devtools',
         );
@@ -95,6 +97,6 @@ if (__DEV__) {
       (testFunc.name || testFunc.toString()).indexOf('testFn') !== -1,
-      'It looks like you\'re using a minified copy of the development build ' +
-      'of React. When deploying React apps to production, make sure to use ' +
-      'the production build which skips development warnings and is faster. ' +
-      'See https://fb.me/react-minification for more details.'
+      "It looks like you're using a minified copy of the development build " +
+        'of React. When deploying React apps to production, make sure to use ' +
+        'the production build which skips development warnings and is faster. ' +
+        'See https://fb.me/react-minification for more details.',
     );
@@ -109,4 +111,4 @@ if (__DEV__) {
       'Internet Explorer is running in compatibility mode; please add the ' +
-      'following tag to your HTML to prevent this from happening: ' +
-      '<meta http-equiv="X-UA-Compatible" content="IE=edge" />'
+        'following tag to your HTML to prevent this from happening: ' +
+        '<meta http-equiv="X-UA-Compatible" content="IE=edge" />',
     );
@@ -123,3 +125,2 @@ if (__DEV__) {
       Object.keys,
-      String.prototype.split,
       String.prototype.trim,
@@ -132,3 +133,3 @@ if (__DEV__) {
           'One or more ES5 shims expected by React are not available: ' +
-          'https://fb.me/react-warning-polyfills'
+            'https://fb.me/react-warning-polyfills',
         );
@@ -140,2 +141,13 @@ if (__DEV__) {
 
-module.exports = React;
+if (__DEV__) {
+  var ReactInstrumentation = require('ReactInstrumentation');
+  var ReactDOMUnknownPropertyHook = require('ReactDOMUnknownPropertyHook');
+  var ReactDOMNullInputValuePropHook = require('ReactDOMNullInputValuePropHook');
+  var ReactDOMInvalidARIAHook = require('ReactDOMInvalidARIAHook');
+
+  ReactInstrumentation.debugTool.addHook(ReactDOMUnknownPropertyHook);
+  ReactInstrumentation.debugTool.addHook(ReactDOMNullInputValuePropHook);
+  ReactInstrumentation.debugTool.addHook(ReactDOMInvalidARIAHook);
+}
+
+module.exports = ReactDOM;
diff --git a/src/renderers/dom/__mocks__/ReactDOM.js b/src/renderers/dom/__mocks__/ReactDOM.js
new file mode 100644
index 000000000..c5965c9ec
--- /dev/null
+++ b/src/renderers/dom/__mocks__/ReactDOM.js
@@ -0,0 +1,18 @@
+/**
+ * Copyright 2013-2015, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ */
+
+'use strict';
+
+var ReactDOMFeatureFlags = require('ReactDOMFeatureFlags');
+
+var useFiber = ReactDOMFeatureFlags.useFiber;
+
+module.exports = useFiber
+  ? require('ReactDOMFiber')
+  : require.requireActual('ReactDOM');
diff --git a/src/renderers/dom/__tests__/ReactDOMProduction-test.js b/src/renderers/dom/__tests__/ReactDOMProduction-test.js
index dd5a96a98..f2b4a7fc1 100644
--- a/src/renderers/dom/__tests__/ReactDOMProduction-test.js
+++ b/src/renderers/dom/__tests__/ReactDOMProduction-test.js
@@ -10,6 +10,5 @@
  */
-
 'use strict';
 
-describe('ReactDOMProduction', function() {
+describe('ReactDOMProduction', () => {
   var oldProcess;
@@ -19,3 +18,3 @@ describe('ReactDOMProduction', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     __DEV__ = false;
@@ -29,3 +28,3 @@ describe('ReactDOMProduction', function() {
 
-  afterEach(function() {
+  afterEach(() => {
     __DEV__ = true;
@@ -34,3 +33,3 @@ describe('ReactDOMProduction', function() {
 
-  it('should use prod fbjs', function() {
+  it('should use prod fbjs', () => {
     var warning = require('warning');
@@ -39,6 +38,6 @@ describe('ReactDOMProduction', function() {
     warning(false, 'Do cows go moo?');
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('should use prod React', function() {
+  it('should use prod React', () => {
     spyOn(console, 'error');
@@ -48,11 +47,11 @@ describe('ReactDOMProduction', function() {
 
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('should handle a simple flow', function() {
-    var Component = React.createClass({
-      render: function() {
+  it('should handle a simple flow', () => {
+    class Component extends React.Component {
+      render() {
         return <span>{this.props.children}</span>;
-      },
-    });
+      }
+    }
 
@@ -65,3 +64,3 @@ describe('ReactDOMProduction', function() {
       </div>,
-      container
+      container,
     );
@@ -78,3 +77,3 @@ describe('ReactDOMProduction', function() {
       </div>,
-      container
+      container,
     );
@@ -89,2 +88,94 @@ describe('ReactDOMProduction', function() {
 
+  it('should call lifecycle methods', () => {
+    var log = [];
+    class Component extends React.Component {
+      state = {y: 1};
+      shouldComponentUpdate(nextProps, nextState) {
+        log.push(['shouldComponentUpdate', nextProps, nextState]);
+        return nextProps.x !== this.props.x || nextState.y !== this.state.y;
+      }
+      componentWillMount() {
+        log.push(['componentWillMount']);
+      }
+      componentDidMount() {
+        log.push(['componentDidMount']);
+      }
+      componentWillReceiveProps(nextProps) {
+        log.push(['componentWillReceiveProps', nextProps]);
+      }
+      componentWillUpdate(nextProps, nextState) {
+        log.push(['componentWillUpdate', nextProps, nextState]);
+      }
+      componentDidUpdate(prevProps, prevState) {
+        log.push(['componentDidUpdate', prevProps, prevState]);
+      }
+      componentWillUnmount() {
+        log.push(['componentWillUnmount']);
+      }
+      render() {
+        log.push(['render']);
+        return null;
+      }
+    }
+
+    var container = document.createElement('div');
+    var inst = ReactDOM.render(<Component x={1} />, container);
+    expect(log).toEqual([
+      ['componentWillMount'],
+      ['render'],
+      ['componentDidMount'],
+    ]);
+    log = [];
+
+    inst.setState({y: 2});
+    expect(log).toEqual([
+      ['shouldComponentUpdate', {x: 1}, {y: 2}],
+      ['componentWillUpdate', {x: 1}, {y: 2}],
+      ['render'],
+      ['componentDidUpdate', {x: 1}, {y: 1}],
+    ]);
+    log = [];
+
+    inst.setState({y: 2});
+    expect(log).toEqual([['shouldComponentUpdate', {x: 1}, {y: 2}]]);
+    log = [];
+
+    ReactDOM.render(<Component x={2} />, container);
+    expect(log).toEqual([
+      ['componentWillReceiveProps', {x: 2}],
+      ['shouldComponentUpdate', {x: 2}, {y: 2}],
+      ['componentWillUpdate', {x: 2}, {y: 2}],
+      ['render'],
+      ['componentDidUpdate', {x: 1}, {y: 2}],
+    ]);
+    log = [];
+
+    ReactDOM.render(<Component x={2} />, container);
+    expect(log).toEqual([
+      ['componentWillReceiveProps', {x: 2}],
+      ['shouldComponentUpdate', {x: 2}, {y: 2}],
+    ]);
+    log = [];
+
+    ReactDOM.unmountComponentAtNode(container);
+    expect(log).toEqual([['componentWillUnmount']]);
+  });
+
+  it('should throw with an error code in production', () => {
+    expect(function() {
+      class Component extends React.Component {
+        render() {
+          return ['this is wrong'];
+        }
+      }
+
+      var container = document.createElement('div');
+      ReactDOM.render(<Component />, container);
+    }).toThrowError(
+      'Minified React error #109; visit ' +
+        'http://facebook.github.io/react/docs/error-decoder.html?invariant=109&args[]=Component' +
+        ' for the full message or use the non-minified dev environment' +
+        ' for full errors and additional helpful warnings.',
+    );
+  });
 });
diff --git a/src/renderers/dom/client/ReactBrowserEventEmitter.js b/src/renderers/dom/client/ReactBrowserEventEmitter.js
index dd7334f48..e51837c11 100644
--- a/src/renderers/dom/client/ReactBrowserEventEmitter.js
+++ b/src/renderers/dom/client/ReactBrowserEventEmitter.js
@@ -13,3 +13,2 @@
 
-var EventConstants = require('EventConstants');
 var EventPluginRegistry = require('EventPluginRegistry');
@@ -87,4 +86,6 @@ var topEventMapping = {
   topAnimationEnd: getVendorPrefixedEventName('animationend') || 'animationend',
-  topAnimationIteration: getVendorPrefixedEventName('animationiteration') || 'animationiteration',
-  topAnimationStart: getVendorPrefixedEventName('animationstart') || 'animationstart',
+  topAnimationIteration:
+    getVendorPrefixedEventName('animationiteration') || 'animationiteration',
+  topAnimationStart:
+    getVendorPrefixedEventName('animationstart') || 'animationstart',
   topBlur: 'blur',
@@ -145,3 +146,4 @@ var topEventMapping = {
   topTouchStart: 'touchstart',
-  topTransitionEnd: getVendorPrefixedEventName('transitionend') || 'transitionend',
+  topTransitionEnd:
+    getVendorPrefixedEventName('transitionend') || 'transitionend',
   topVolumeChange: 'volumechange',
@@ -177,3 +179,2 @@ function getListeningForDocument(mountAt) {
 var ReactBrowserEventEmitter = Object.assign({}, ReactEventEmitterMixin, {
-
   /**
@@ -189,3 +190,3 @@ var ReactBrowserEventEmitter = Object.assign({}, ReactEventEmitterMixin, {
       ReactEventListener.setHandleTopLevel(
-        ReactBrowserEventEmitter.handleTopLevel
+        ReactBrowserEventEmitter.handleTopLevel,
       );
@@ -243,15 +244,13 @@ var ReactBrowserEventEmitter = Object.assign({}, ReactEventEmitterMixin, {
 
-    var topLevelTypes = EventConstants.topLevelTypes;
     for (var i = 0; i < dependencies.length; i++) {
       var dependency = dependencies[i];
-      if (!(
-            isListening.hasOwnProperty(dependency) &&
-            isListening[dependency]
-          )) {
-        if (dependency === topLevelTypes.topWheel) {
+      if (
+        !(isListening.hasOwnProperty(dependency) && isListening[dependency])
+      ) {
+        if (dependency === 'topWheel') {
           if (isEventSupported('wheel')) {
             ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
-              topLevelTypes.topWheel,
+              'topWheel',
               'wheel',
-              mountAt
+              mountAt,
             );
@@ -259,5 +258,5 @@ var ReactBrowserEventEmitter = Object.assign({}, ReactEventEmitterMixin, {
             ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
-              topLevelTypes.topWheel,
+              'topWheel',
               'mousewheel',
-              mountAt
+              mountAt,
             );
@@ -267,14 +266,13 @@ var ReactBrowserEventEmitter = Object.assign({}, ReactEventEmitterMixin, {
             ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
-              topLevelTypes.topWheel,
+              'topWheel',
               'DOMMouseScroll',
-              mountAt
+              mountAt,
             );
           }
-        } else if (dependency === topLevelTypes.topScroll) {
-
+        } else if (dependency === 'topScroll') {
           if (isEventSupported('scroll', true)) {
             ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
-              topLevelTypes.topScroll,
+              'topScroll',
               'scroll',
-              mountAt
+              mountAt,
             );
@@ -282,20 +280,18 @@ var ReactBrowserEventEmitter = Object.assign({}, ReactEventEmitterMixin, {
             ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
-              topLevelTypes.topScroll,
+              'topScroll',
               'scroll',
-              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE
+              ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE,
             );
           }
-        } else if (dependency === topLevelTypes.topFocus ||
-            dependency === topLevelTypes.topBlur) {
-
+        } else if (dependency === 'topFocus' || dependency === 'topBlur') {
           if (isEventSupported('focus', true)) {
             ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
-              topLevelTypes.topFocus,
+              'topFocus',
               'focus',
-              mountAt
+              mountAt,
             );
             ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(
-              topLevelTypes.topBlur,
+              'topBlur',
               'blur',
-              mountAt
+              mountAt,
             );
@@ -305,10 +301,10 @@ var ReactBrowserEventEmitter = Object.assign({}, ReactEventEmitterMixin, {
             ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
-              topLevelTypes.topFocus,
+              'topFocus',
               'focusin',
-              mountAt
+              mountAt,
             );
             ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(
-              topLevelTypes.topBlur,
+              'topBlur',
               'focusout',
-              mountAt
+              mountAt,
             );
@@ -317,4 +313,4 @@ var ReactBrowserEventEmitter = Object.assign({}, ReactEventEmitterMixin, {
           // to make sure blur and focus event listeners are only attached once
-          isListening[topLevelTypes.topBlur] = true;
-          isListening[topLevelTypes.topFocus] = true;
+          isListening.topBlur = true;
+          isListening.topFocus = true;
         } else if (topEventMapping.hasOwnProperty(dependency)) {
@@ -323,3 +319,3 @@ var ReactBrowserEventEmitter = Object.assign({}, ReactEventEmitterMixin, {
             topEventMapping[dependency],
-            mountAt
+            mountAt,
           );
@@ -336,3 +332,3 @@ var ReactBrowserEventEmitter = Object.assign({}, ReactEventEmitterMixin, {
       handlerBaseName,
-      handle
+      handle,
     );
@@ -344,3 +340,3 @@ var ReactBrowserEventEmitter = Object.assign({}, ReactEventEmitterMixin, {
       handlerBaseName,
-      handle
+      handle,
     );
@@ -348,2 +344,15 @@ var ReactBrowserEventEmitter = Object.assign({}, ReactEventEmitterMixin, {
 
+  /**
+   * Protect against document.createEvent() returning null
+   * Some popup blocker extensions appear to do this:
+   * https://github.com/facebook/react/issues/6887
+   */
+  supportsEventPageXY: function() {
+    if (!document.createEvent) {
+      return false;
+    }
+    var ev = document.createEvent('MouseEvent');
+    return ev != null && 'pageX' in ev;
+  },
+
   /**
@@ -361,4 +370,3 @@ var ReactBrowserEventEmitter = Object.assign({}, ReactEventEmitterMixin, {
     if (hasEventPageXY === undefined) {
-      hasEventPageXY =
-        document.createEvent && 'pageX' in document.createEvent('MouseEvent');
+      hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
     }
@@ -370,3 +378,2 @@ var ReactBrowserEventEmitter = Object.assign({}, ReactEventEmitterMixin, {
   },
-
 });
diff --git a/src/renderers/dom/client/ReactDOMComponentTree.js b/src/renderers/dom/client/ReactDOMComponentTree.js
index ec95b26c6..88e2b4bf1 100644
--- a/src/renderers/dom/client/ReactDOMComponentTree.js
+++ b/src/renderers/dom/client/ReactDOMComponentTree.js
@@ -25,4 +25,16 @@ var internalInstanceKey =
 /**
- * Drill down (through composites and empty components) until we get a native or
- * native text component.
+ * Check if a given node should be cached.
+ */
+function shouldPrecacheNode(node, nodeID) {
+  return (
+    (node.nodeType === 1 && node.getAttribute(ATTR_NAME) === String(nodeID)) ||
+    (node.nodeType === 8 &&
+      node.nodeValue === ' react-text: ' + nodeID + ' ') ||
+    (node.nodeType === 8 && node.nodeValue === ' react-empty: ' + nodeID + ' ')
+  );
+}
+
+/**
+ * Drill down (through composites and empty components) until we get a host or
+ * host text component.
  *
@@ -31,3 +43,3 @@ var internalInstanceKey =
  */
-function getRenderedNativeOrTextFromComponent(component) {
+function getRenderedHostOrTextFromComponent(component) {
   var rendered;
@@ -40,3 +52,3 @@ function getRenderedNativeOrTextFromComponent(component) {
 /**
- * Populate `_nativeNode` on the rendered native/text component with the given
+ * Populate `_hostNode` on the rendered host/text component with the given
  * DOM node. The passed `inst` can be a composite.
@@ -44,5 +56,5 @@ function getRenderedNativeOrTextFromComponent(component) {
 function precacheNode(inst, node) {
-  var nativeInst = getRenderedNativeOrTextFromComponent(inst);
-  nativeInst._nativeNode = node;
-  node[internalInstanceKey] = nativeInst;
+  var hostInst = getRenderedHostOrTextFromComponent(inst);
+  hostInst._hostNode = node;
+  node[internalInstanceKey] = hostInst;
 }
@@ -50,6 +62,6 @@ function precacheNode(inst, node) {
 function uncacheNode(inst) {
-  var node = inst._nativeNode;
+  var node = inst._hostNode;
   if (node) {
     delete node[internalInstanceKey];
-    inst._nativeNode = null;
+    inst._hostNode = null;
   }
@@ -58,3 +70,3 @@ function uncacheNode(inst) {
 /**
- * Populate `_nativeNode` on each child of `inst`, assuming that the children
+ * Populate `_hostNode` on each child of `inst`, assuming that the children
  * match up with the DOM (element) children of `node`.
@@ -82,4 +94,4 @@ function precacheChildNodes(inst, node) {
     var childInst = children[name];
-    var childID = getRenderedNativeOrTextFromComponent(childInst)._domID;
-    if (childID == null) {
+    var childID = getRenderedHostOrTextFromComponent(childInst)._domID;
+    if (childID === 0) {
       // We're currently unmounting this child in ReactMultiChild; skip it.
@@ -89,8 +101,3 @@ function precacheChildNodes(inst, node) {
     for (; childNode !== null; childNode = childNode.nextSibling) {
-      if ((childNode.nodeType === 1 &&
-           childNode.getAttribute(ATTR_NAME) === String(childID)) ||
-          (childNode.nodeType === 8 &&
-           childNode.nodeValue === ' react-text: ' + childID + ' ') ||
-          (childNode.nodeType === 8 &&
-           childNode.nodeValue === ' react-empty: ' + childID + ' ')) {
+      if (shouldPrecacheNode(childNode, childID)) {
         precacheNode(childInst, childNode);
@@ -145,3 +152,3 @@ function getInstanceFromNode(node) {
   var inst = getClosestInstanceFromNode(node);
-  if (inst != null && inst._nativeNode === node) {
+  if (inst != null && inst._hostNode === node) {
     return inst;
@@ -160,8 +167,8 @@ function getNodeFromInstance(inst) {
   invariant(
-    inst._nativeNode !== undefined,
-    'getNodeFromInstance: Invalid argument.'
+    inst._hostNode !== undefined,
+    'getNodeFromInstance: Invalid argument.',
   );
 
-  if (inst._nativeNode) {
-    return inst._nativeNode;
+  if (inst._hostNode) {
+    return inst._hostNode;
   }
@@ -170,9 +177,9 @@ function getNodeFromInstance(inst) {
   var parents = [];
-  while (!inst._nativeNode) {
+  while (!inst._hostNode) {
     parents.push(inst);
     invariant(
-      inst._nativeParent,
-      'React DOM tree root should always have a node reference.'
+      inst._hostParent,
+      'React DOM tree root should always have a node reference.',
     );
-    inst = inst._nativeParent;
+    inst = inst._hostParent;
   }
@@ -182,6 +189,6 @@ function getNodeFromInstance(inst) {
   for (; parents.length; inst = parents.pop()) {
-    precacheChildNodes(inst, inst._nativeNode);
+    precacheChildNodes(inst, inst._hostNode);
   }
 
-  return inst._nativeNode;
+  return inst._hostNode;
 }
diff --git a/src/renderers/dom/client/ReactDOMIDOperations.js b/src/renderers/dom/client/ReactDOMIDOperations.js
index cb03d3f06..e24335341 100644
--- a/src/renderers/dom/client/ReactDOMIDOperations.js
+++ b/src/renderers/dom/client/ReactDOMIDOperations.js
@@ -15,3 +15,2 @@ var DOMChildrenOperations = require('DOMChildrenOperations');
 var ReactDOMComponentTree = require('ReactDOMComponentTree');
-var ReactPerf = require('ReactPerf');
 
@@ -21,3 +20,2 @@ var ReactPerf = require('ReactPerf');
 var ReactDOMIDOperations = {
-
   /**
@@ -34,6 +32,2 @@ var ReactDOMIDOperations = {
 
-ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
-  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates',
-});
-
 module.exports = ReactDOMIDOperations;
diff --git a/src/renderers/dom/client/ReactDOMSelection.js b/src/renderers/dom/client/ReactDOMSelection.js
index aff9e894b..307d5c340 100644
--- a/src/renderers/dom/client/ReactDOMSelection.js
+++ b/src/renderers/dom/client/ReactDOMSelection.js
@@ -101,3 +101,3 @@ function getModernOffsets(node) {
     selection.focusNode,
-    selection.focusOffset
+    selection.focusOffset,
   );
@@ -114,3 +114,3 @@ function getModernOffsets(node) {
     tempRange.endContainer,
-    tempRange.endOffset
+    tempRange.endOffset,
   );
@@ -178,4 +178,3 @@ function setModernOffsets(node, offsets) {
   var start = Math.min(offsets.start, length);
-  var end = offsets.end === undefined ?
-            start : Math.min(offsets.end, length);
+  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);
 
@@ -207,7 +206,6 @@ function setModernOffsets(node, offsets) {
 
-var useIEOffsets = (
+var useIEOffsets =
   ExecutionEnvironment.canUseDOM &&
   'selection' in document &&
-  !('getSelection' in window)
-);
+  !('getSelection' in window);
 
diff --git a/src/renderers/dom/client/ReactDOMTreeTraversal.js b/src/renderers/dom/client/ReactDOMTreeTraversal.js
index c4767736b..4d809cfdb 100644
--- a/src/renderers/dom/client/ReactDOMTreeTraversal.js
+++ b/src/renderers/dom/client/ReactDOMTreeTraversal.js
@@ -20,7 +20,7 @@ var invariant = require('invariant');
 function getLowestCommonAncestor(instA, instB) {
-  invariant('_nativeNode' in instA, 'getNodeFromInstance: Invalid argument.');
-  invariant('_nativeNode' in instB, 'getNodeFromInstance: Invalid argument.');
+  invariant('_hostNode' in instA, 'getNodeFromInstance: Invalid argument.');
+  invariant('_hostNode' in instB, 'getNodeFromInstance: Invalid argument.');
 
   var depthA = 0;
-  for (var tempA = instA; tempA; tempA = tempA._nativeParent) {
+  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
     depthA++;
@@ -28,3 +28,3 @@ function getLowestCommonAncestor(instA, instB) {
   var depthB = 0;
-  for (var tempB = instB; tempB; tempB = tempB._nativeParent) {
+  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
     depthB++;
@@ -34,3 +34,3 @@ function getLowestCommonAncestor(instA, instB) {
   while (depthA - depthB > 0) {
-    instA = instA._nativeParent;
+    instA = instA._hostParent;
     depthA--;
@@ -40,3 +40,3 @@ function getLowestCommonAncestor(instA, instB) {
   while (depthB - depthA > 0) {
-    instB = instB._nativeParent;
+    instB = instB._hostParent;
     depthB--;
@@ -50,4 +50,4 @@ function getLowestCommonAncestor(instA, instB) {
     }
-    instA = instA._nativeParent;
-    instB = instB._nativeParent;
+    instA = instA._hostParent;
+    instB = instB._hostParent;
   }
@@ -60,4 +60,4 @@ function getLowestCommonAncestor(instA, instB) {
 function isAncestor(instA, instB) {
-  invariant('_nativeNode' in instA, 'isAncestor: Invalid argument.');
-  invariant('_nativeNode' in instB, 'isAncestor: Invalid argument.');
+  invariant('_hostNode' in instA, 'isAncestor: Invalid argument.');
+  invariant('_hostNode' in instB, 'isAncestor: Invalid argument.');
 
@@ -67,3 +67,3 @@ function isAncestor(instA, instB) {
     }
-    instB = instB._nativeParent;
+    instB = instB._hostParent;
   }
@@ -76,5 +76,5 @@ function isAncestor(instA, instB) {
 function getParentInstance(inst) {
-  invariant('_nativeNode' in inst, 'getParentInstance: Invalid argument.');
+  invariant('_hostNode' in inst, 'getParentInstance: Invalid argument.');
 
-  return inst._nativeParent;
+  return inst._hostParent;
 }
@@ -88,10 +88,10 @@ function traverseTwoPhase(inst, fn, arg) {
     path.push(inst);
-    inst = inst._nativeParent;
+    inst = inst._hostParent;
   }
   var i;
-  for (i = path.length; i-- > 0;) {
-    fn(path[i], false, arg);
+  for (i = path.length; i-- > 0; ) {
+    fn(path[i], 'captured', arg);
   }
   for (i = 0; i < path.length; i++) {
-    fn(path[i], true, arg);
+    fn(path[i], 'bubbled', arg);
   }
@@ -111,3 +111,3 @@ function traverseEnterLeave(from, to, fn, argFrom, argTo) {
     pathFrom.push(from);
-    from = from._nativeParent;
+    from = from._hostParent;
   }
@@ -116,3 +116,3 @@ function traverseEnterLeave(from, to, fn, argFrom, argTo) {
     pathTo.push(to);
-    to = to._nativeParent;
+    to = to._hostParent;
   }
@@ -120,6 +120,6 @@ function traverseEnterLeave(from, to, fn, argFrom, argTo) {
   for (i = 0; i < pathFrom.length; i++) {
-    fn(pathFrom[i], true, argFrom);
+    fn(pathFrom[i], 'bubbled', argFrom);
   }
-  for (i = pathTo.length; i-- > 0;) {
-    fn(pathTo[i], false, argTo);
+  for (i = pathTo.length; i-- > 0; ) {
+    fn(pathTo[i], 'captured', argTo);
   }
diff --git a/src/renderers/dom/client/ReactEventListener.js b/src/renderers/dom/client/ReactEventListener.js
index bbdbbcf29..a885cb9b9 100644
--- a/src/renderers/dom/client/ReactEventListener.js
+++ b/src/renderers/dom/client/ReactEventListener.js
@@ -31,4 +31,4 @@ function findParent(inst) {
   // mutation observer to listen for all DOM changes.
-  while (inst._nativeParent) {
-    inst = inst._nativeParent;
+  while (inst._hostParent) {
+    inst = inst._hostParent;
   }
@@ -54,3 +54,3 @@ PooledClass.addPoolingTo(
   TopLevelCallbackBookKeeping,
-  PooledClass.twoArgumentPooler
+  PooledClass.twoArgumentPooler,
 );
@@ -60,3 +60,3 @@ function handleTopLevelImpl(bookKeeping) {
   var targetInst = ReactDOMComponentTree.getClosestInstanceFromNode(
-    nativeEventTarget
+    nativeEventTarget,
   );
@@ -79,3 +79,3 @@ function handleTopLevelImpl(bookKeeping) {
       bookKeeping.nativeEvent,
-      getEventTarget(bookKeeping.nativeEvent)
+      getEventTarget(bookKeeping.nativeEvent),
     );
@@ -107,3 +107,2 @@ var ReactEventListener = {
 
-
   /**
@@ -113,3 +112,3 @@ var ReactEventListener = {
    * @param {string} handlerBaseName Event name (e.g. "click").
-   * @param {object} handle Element on which to attach listener.
+   * @param {object} element Element on which to attach listener.
    * @return {?object} An object with a remove function which will forcefully
@@ -118,4 +117,3 @@ var ReactEventListener = {
    */
-  trapBubbledEvent: function(topLevelType, handlerBaseName, handle) {
-    var element = handle;
+  trapBubbledEvent: function(topLevelType, handlerBaseName, element) {
     if (!element) {
@@ -126,3 +124,3 @@ var ReactEventListener = {
       handlerBaseName,
-      ReactEventListener.dispatchEvent.bind(null, topLevelType)
+      ReactEventListener.dispatchEvent.bind(null, topLevelType),
     );
@@ -135,3 +133,3 @@ var ReactEventListener = {
    * @param {string} handlerBaseName Event name (e.g. "click").
-   * @param {object} handle Element on which to attach listener.
+   * @param {object} element Element on which to attach listener.
    * @return {?object} An object with a remove function which will forcefully
@@ -140,4 +138,3 @@ var ReactEventListener = {
    */
-  trapCapturedEvent: function(topLevelType, handlerBaseName, handle) {
-    var element = handle;
+  trapCapturedEvent: function(topLevelType, handlerBaseName, element) {
     if (!element) {
@@ -148,3 +145,3 @@ var ReactEventListener = {
       handlerBaseName,
-      ReactEventListener.dispatchEvent.bind(null, topLevelType)
+      ReactEventListener.dispatchEvent.bind(null, topLevelType),
     );
@@ -164,3 +161,3 @@ var ReactEventListener = {
       topLevelType,
-      nativeEvent
+      nativeEvent,
     );
diff --git a/src/renderers/dom/client/ReactInputSelection.js b/src/renderers/dom/client/ReactInputSelection.js
index 46e6931a6..ee9d33ddc 100644
--- a/src/renderers/dom/client/ReactInputSelection.js
+++ b/src/renderers/dom/client/ReactInputSelection.js
@@ -30,9 +30,9 @@ function isInDocument(node) {
 var ReactInputSelection = {
-
   hasSelectionCapabilities: function(elem) {
     var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
-    return nodeName && (
-      (nodeName === 'input' && elem.type === 'text') ||
-      nodeName === 'textarea' ||
-      elem.contentEditable === 'true'
+    return (
+      nodeName &&
+      ((nodeName === 'input' && elem.type === 'text') ||
+        nodeName === 'textarea' ||
+        elem.contentEditable === 'true')
     );
@@ -44,6 +44,5 @@ var ReactInputSelection = {
       focusedElem: focusedElem,
-      selectionRange:
-          ReactInputSelection.hasSelectionCapabilities(focusedElem) ?
-          ReactInputSelection.getSelection(focusedElem) :
-          null,
+      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem)
+        ? ReactInputSelection.getSelection(focusedElem)
+        : null,
     };
@@ -60,9 +59,5 @@ var ReactInputSelection = {
     var priorSelectionRange = priorSelectionInformation.selectionRange;
-    if (curFocusedElem !== priorFocusedElem &&
-        isInDocument(priorFocusedElem)) {
+    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
       if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
-        ReactInputSelection.setSelection(
-          priorFocusedElem,
-          priorSelectionRange
-        );
+        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
       }
@@ -87,4 +82,6 @@ var ReactInputSelection = {
       };
-    } else if (document.selection &&
-        (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
+    } else if (
+      document.selection &&
+      (input.nodeName && input.nodeName.toLowerCase() === 'input')
+    ) {
       // IE8 input.
@@ -123,4 +120,6 @@ var ReactInputSelection = {
       input.selectionEnd = Math.min(end, input.value.length);
-    } else if (document.selection &&
-        (input.nodeName && input.nodeName.toLowerCase() === 'input')) {
+    } else if (
+      document.selection &&
+      (input.nodeName && input.nodeName.toLowerCase() === 'input')
+    ) {
       var range = input.createTextRange();
diff --git a/src/renderers/dom/client/ReactMount.js b/src/renderers/dom/client/ReactMount.js
index 7f6f8cac6..382aff890 100644
--- a/src/renderers/dom/client/ReactMount.js
+++ b/src/renderers/dom/client/ReactMount.js
@@ -15,2 +15,3 @@ var DOMLazyTree = require('DOMLazyTree');
 var DOMProperty = require('DOMProperty');
+var React = require('React');
 var ReactBrowserEventEmitter = require('ReactBrowserEventEmitter');
@@ -20,7 +21,6 @@ var ReactDOMContainerInfo = require('ReactDOMContainerInfo');
 var ReactDOMFeatureFlags = require('ReactDOMFeatureFlags');
-var ReactElement = require('ReactElement');
 var ReactFeatureFlags = require('ReactFeatureFlags');
+var ReactInstanceMap = require('ReactInstanceMap');
 var ReactInstrumentation = require('ReactInstrumentation');
 var ReactMarkupChecksum = require('ReactMarkupChecksum');
-var ReactPerf = require('ReactPerf');
 var ReactReconciler = require('ReactReconciler');
@@ -82,3 +82,3 @@ function internalGetID(node) {
   // the empty string, as if the attribute were missing.
-  return node.getAttribute && node.getAttribute(ATTR_NAME) || '';
+  return (node.getAttribute && node.getAttribute(ATTR_NAME)) || '';
 }
@@ -98,3 +98,3 @@ function mountComponentIntoNode(
   shouldReuseMarkup,
-  context
+  context,
 ) {
@@ -102,8 +102,7 @@ function mountComponentIntoNode(
   if (ReactFeatureFlags.logTopLevelRenders) {
-    var wrappedElement = wrapperInstance._currentElement.props;
+    var wrappedElement = wrapperInstance._currentElement.props.child;
     var type = wrappedElement.type;
-    markerName = 'React mount: ' + (
-      typeof type === 'string' ? type :
-      type.displayName || type.name
-    );
+    markerName =
+      'React mount: ' +
+      (typeof type === 'string' ? type : type.displayName || type.name);
     console.time(markerName);
@@ -116,3 +115,4 @@ function mountComponentIntoNode(
     ReactDOMContainerInfo(wrapperInstance, container),
-    context
+    context,
+    0 /* parentDebugID */,
   );
@@ -129,3 +129,3 @@ function mountComponentIntoNode(
     shouldReuseMarkup,
-    transaction
+    transaction,
   );
@@ -144,3 +144,3 @@ function batchedMountComponentIntoNode(
   shouldReuseMarkup,
-  context
+  context,
 ) {
@@ -148,3 +148,3 @@ function batchedMountComponentIntoNode(
     /* useCreateElement */
-    !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement
+    !shouldReuseMarkup && ReactDOMFeatureFlags.useCreateElement,
   );
@@ -157,3 +157,3 @@ function batchedMountComponentIntoNode(
     shouldReuseMarkup,
-    context
+    context,
   );
@@ -172,3 +172,9 @@ function batchedMountComponentIntoNode(
 function unmountComponentFromNode(instance, container, safely) {
+  if (__DEV__) {
+    ReactInstrumentation.debugTool.onBeginFlush();
+  }
   ReactReconciler.unmountComponent(instance, safely);
+  if (__DEV__) {
+    ReactInstrumentation.debugTool.onEndFlush();
+  }
 
@@ -198,3 +204,3 @@ function hasNonRootReactChild(container) {
     var inst = ReactDOMComponentTree.getInstanceFromNode(rootEl);
-    return !!(inst && inst._nativeParent);
+    return !!(inst && inst._hostParent);
   }
@@ -202,9 +208,46 @@ function hasNonRootReactChild(container) {
 
-function getNativeRootInstanceInContainer(container) {
+/**
+ * True if the supplied DOM node is a React DOM element and
+ * it has been rendered by another copy of React.
+ *
+ * @param {?DOMElement} node The candidate DOM node.
+ * @return {boolean} True if the DOM has been rendered by another copy of React
+ * @internal
+ */
+function nodeIsRenderedByOtherInstance(container) {
   var rootEl = getReactRootElementInContainer(container);
-  var prevNativeInstance =
-    rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
+  return !!(
+    rootEl &&
+    isReactNode(rootEl) &&
+    !ReactDOMComponentTree.getInstanceFromNode(rootEl)
+  );
+}
+
+/**
+ * True if the supplied DOM node is a valid node element.
+ *
+ * @param {?DOMElement} node The candidate DOM node.
+ * @return {boolean} True if the DOM is a valid DOM node.
+ * @internal
+ */
+function isValidContainer(node) {
+  return !!(
+    node &&
+    (node.nodeType === ELEMENT_NODE_TYPE ||
+      node.nodeType === DOC_NODE_TYPE ||
+      node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)
+  );
+}
+
+/**
+ * True if the supplied DOM node is a valid React node element.
+ *
+ * @param {?DOMElement} node The candidate DOM node.
+ * @return {boolean} True if the DOM is a valid React DOM node.
+ * @internal
+ */
+function isReactNode(node) {
   return (
-    prevNativeInstance && !prevNativeInstance._nativeParent ?
-    prevNativeInstance : null
+    isValidContainer(node) &&
+    (node.hasAttribute(ROOT_ATTR_NAME) || node.hasAttribute(ATTR_NAME))
   );
@@ -212,5 +255,14 @@ function getNativeRootInstanceInContainer(container) {
 
+function getHostRootInstanceInContainer(container) {
+  var rootEl = getReactRootElementInContainer(container);
+  var prevHostInstance =
+    rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl);
+  return prevHostInstance && !prevHostInstance._hostParent
+    ? prevHostInstance
+    : null;
+}
+
 function getTopLevelWrapperInContainer(container) {
-  var root = getNativeRootInstanceInContainer(container);
-  return root ? root._nativeContainerInfo._topLevelWrapper : null;
+  var root = getHostRootInstanceInContainer(container);
+  return root ? root._hostContainerInfo._topLevelWrapper : null;
 }
@@ -231,5 +283,5 @@ if (__DEV__) {
 TopLevelWrapper.prototype.render = function() {
-  // this.props is actually a ReactElement
-  return this.props;
+  return this.props.child;
 };
+TopLevelWrapper.isReactTopLevelWrapper = true;
 
@@ -254,3 +306,2 @@ TopLevelWrapper.prototype.render = function() {
 var ReactMount = {
-
   TopLevelWrapper: TopLevelWrapper,
@@ -282,8 +333,14 @@ var ReactMount = {
   _updateRootComponent: function(
-      prevComponent,
-      nextElement,
-      container,
-      callback) {
+    prevComponent,
+    nextElement,
+    nextContext,
+    container,
+    callback,
+  ) {
     ReactMount.scrollMonitor(container, function() {
-      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
+      ReactUpdateQueue.enqueueElementInternal(
+        prevComponent,
+        nextElement,
+        nextContext,
+      );
       if (callback) {
@@ -297,3 +354,3 @@ var ReactMount = {
   /**
-   * Render a new component into the DOM. Hooked by devtools!
+   * Render a new component into the DOM. Hooked by hooks!
    *
@@ -308,3 +365,3 @@ var ReactMount = {
     shouldReuseMarkup,
-    context
+    context,
   ) {
@@ -316,7 +373,7 @@ var ReactMount = {
       '_renderNewRootComponent(): Render methods should be a pure function ' +
-      'of props and state; triggering nested component updates from ' +
-      'render is not allowed. If necessary, trigger nested updates in ' +
-      'componentDidUpdate. Check the render method of %s.',
-      ReactCurrentOwner.current && ReactCurrentOwner.current.getName() ||
-        'ReactCompositeComponent'
+        'of props and state; triggering nested component updates from ' +
+        'render is not allowed. If necessary, trigger nested updates in ' +
+        'componentDidUpdate. Check the render method of %s.',
+      (ReactCurrentOwner.current && ReactCurrentOwner.current.getName()) ||
+        'ReactCompositeComponent',
     );
@@ -324,8 +381,4 @@ var ReactMount = {
     invariant(
-      container && (
-        container.nodeType === ELEMENT_NODE_TYPE ||
-        container.nodeType === DOC_NODE_TYPE ||
-        container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE
-      ),
-      '_registerComponent(...): Target container is not a DOM element.'
+      isValidContainer(container),
+      '_registerComponent(...): Target container is not a DOM element.',
     );
@@ -333,3 +386,3 @@ var ReactMount = {
     ReactBrowserEventEmitter.ensureScrollValueMonitoring();
-    var componentInstance = instantiateReactComponent(nextElement);
+    var componentInstance = instantiateReactComponent(nextElement, false);
 
@@ -344,3 +397,3 @@ var ReactMount = {
       shouldReuseMarkup,
-      context
+      context,
     );
@@ -350,6 +403,2 @@ var ReactMount = {
 
-    if (__DEV__) {
-      ReactInstrumentation.debugTool.onMountRootComponent(componentInstance);
-    }
-
     return componentInstance;
@@ -370,6 +419,11 @@ var ReactMount = {
    */
-  renderSubtreeIntoContainer: function(parentComponent, nextElement, container, callback) {
+  renderSubtreeIntoContainer: function(
+    parentComponent,
+    nextElement,
+    container,
+    callback,
+  ) {
     invariant(
-      parentComponent != null && parentComponent._reactInternalInstance != null,
-      'parentComponent must be a valid React Component'
+      parentComponent != null && ReactInstanceMap.has(parentComponent),
+      'parentComponent must be a valid React Component',
     );
@@ -379,3 +433,3 @@ var ReactMount = {
       container,
-      callback
+      callback,
     );
@@ -383,20 +437,23 @@ var ReactMount = {
 
-  _renderSubtreeIntoContainer: function(parentComponent, nextElement, container, callback) {
+  _renderSubtreeIntoContainer: function(
+    parentComponent,
+    nextElement,
+    container,
+    callback,
+  ) {
     ReactUpdateQueue.validateCallback(callback, 'ReactDOM.render');
     invariant(
-      ReactElement.isValidElement(nextElement),
+      React.isValidElement(nextElement),
       'ReactDOM.render(): Invalid component element.%s',
-      (
-        typeof nextElement === 'string' ?
-          ' Instead of passing a string like \'div\', pass ' +
-          'React.createElement(\'div\') or <div />.' :
-        typeof nextElement === 'function' ?
-          ' Instead of passing a class like Foo, pass ' +
-          'React.createElement(Foo) or <Foo />.' :
-        // Check if it quacks like an element
-        nextElement != null && nextElement.props !== undefined ?
-          ' This may be caused by unintentionally loading two independent ' +
-          'copies of React.' :
-          ''
-      )
+      typeof nextElement === 'string'
+        ? " Instead of passing a string like 'div', pass " +
+            "React.createElement('div') or <div />."
+        : typeof nextElement === 'function'
+          ? ' Instead of passing a class like Foo, pass ' +
+              'React.createElement(Foo) or <Foo />.'
+          : // Check if it quacks like an element
+            nextElement != null && nextElement.props !== undefined
+            ? ' This may be caused by unintentionally loading two independent ' +
+                'copies of React.'
+            : '',
     );
@@ -404,20 +461,23 @@ var ReactMount = {
     warning(
-      !container || !container.tagName ||
-      container.tagName.toUpperCase() !== 'BODY',
+      !container ||
+        !container.tagName ||
+        container.tagName.toUpperCase() !== 'BODY',
       'render(): Rendering components directly into document.body is ' +
-      'discouraged, since its children are often manipulated by third-party ' +
-      'scripts and browser extensions. This may lead to subtle ' +
-      'reconciliation issues. Try rendering into a container element created ' +
-      'for your app.'
+        'discouraged, since its children are often manipulated by third-party ' +
+        'scripts and browser extensions. This may lead to subtle ' +
+        'reconciliation issues. Try rendering into a container element created ' +
+        'for your app.',
     );
 
-    var nextWrappedElement = ReactElement(
-      TopLevelWrapper,
-      null,
-      null,
-      null,
-      null,
-      null,
-      nextElement
-    );
+    var nextWrappedElement = React.createElement(TopLevelWrapper, {
+      child: nextElement,
+    });
+
+    var nextContext;
+    if (parentComponent) {
+      var parentInst = ReactInstanceMap.get(parentComponent);
+      nextContext = parentInst._processChildContext(parentInst._context);
+    } else {
+      nextContext = emptyObject;
+    }
 
@@ -427,8 +487,10 @@ var ReactMount = {
       var prevWrappedElement = prevComponent._currentElement;
-      var prevElement = prevWrappedElement.props;
+      var prevElement = prevWrappedElement.props.child;
       if (shouldUpdateReactComponent(prevElement, nextElement)) {
         var publicInst = prevComponent._renderedComponent.getPublicInstance();
-        var updatedCallback = callback && function() {
-          callback.call(publicInst);
-        };
+        var updatedCallback =
+          callback &&
+          function() {
+            callback.call(publicInst);
+          };
         ReactMount._updateRootComponent(
@@ -436,4 +498,5 @@ var ReactMount = {
           nextWrappedElement,
+          nextContext,
           container,
-          updatedCallback
+          updatedCallback,
         );
@@ -454,5 +517,5 @@ var ReactMount = {
         'render(...): Replacing React-rendered children with a new root ' +
-        'component. If you intended to update the children of this node, ' +
-        'you should instead have the existing children update their state ' +
-        'and render the new components instead of calling ReactDOM.render.'
+          'component. If you intended to update the children of this node, ' +
+          'you should instead have the existing children update their state ' +
+          'and render the new components instead of calling ReactDOM.render.',
       );
@@ -466,4 +529,4 @@ var ReactMount = {
               'render(): Target node has markup rendered by React, but there ' +
-              'are unrelated nodes as well. This is most commonly caused by ' +
-              'white-space inserted around server-rendered markup.'
+                'are unrelated nodes as well. This is most commonly caused by ' +
+                'white-space inserted around server-rendered markup.',
             );
@@ -484,7 +547,3 @@ var ReactMount = {
       shouldReuseMarkup,
-      parentComponent != null ?
-        parentComponent._reactInternalInstance._processChildContext(
-          parentComponent._reactInternalInstance._context
-        ) :
-        emptyObject
+      nextContext,
     )._renderedComponent.getPublicInstance();
@@ -496,5 +555,5 @@ var ReactMount = {
 
-
   /**
    * Renders a React component into the DOM in the supplied `container`.
+   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.render
    *
@@ -510,3 +569,8 @@ var ReactMount = {
   render: function(nextElement, container, callback) {
-    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
+    return ReactMount._renderSubtreeIntoContainer(
+      null,
+      nextElement,
+      container,
+      callback,
+    );
   },
@@ -515,2 +579,3 @@ var ReactMount = {
    * Unmounts and destroys the React component rendered in the `container`.
+   * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.unmountcomponentatnode
    *
@@ -528,7 +593,7 @@ var ReactMount = {
       'unmountComponentAtNode(): Render methods should be a pure function ' +
-      'of props and state; triggering nested component updates from render ' +
-      'is not allowed. If necessary, trigger nested updates in ' +
-      'componentDidUpdate. Check the render method of %s.',
-      ReactCurrentOwner.current && ReactCurrentOwner.current.getName() ||
-        'ReactCompositeComponent'
+        'of props and state; triggering nested component updates from render ' +
+        'is not allowed. If necessary, trigger nested updates in ' +
+        'componentDidUpdate. Check the render method of %s.',
+      (ReactCurrentOwner.current && ReactCurrentOwner.current.getName()) ||
+        'ReactCompositeComponent',
     );
@@ -536,10 +601,14 @@ var ReactMount = {
     invariant(
-      container && (
-        container.nodeType === ELEMENT_NODE_TYPE ||
-        container.nodeType === DOC_NODE_TYPE ||
-        container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE
-      ),
-      'unmountComponentAtNode(...): Target container is not a DOM element.'
+      isValidContainer(container),
+      'unmountComponentAtNode(...): Target container is not a DOM element.',
     );
 
+    if (__DEV__) {
+      warning(
+        !nodeIsRenderedByOtherInstance(container),
+        "unmountComponentAtNode(): The node you're attempting to unmount " +
+          'was rendered by another copy of React.',
+      );
+    }
+
     var prevComponent = getTopLevelWrapperInContainer(container);
@@ -557,11 +626,9 @@ var ReactMount = {
           !containerHasNonRootReactChild,
-          'unmountComponentAtNode(): The node you\'re attempting to unmount ' +
-          'was rendered by React and is not a top-level container. %s',
-          (
-            isContainerReactRoot ?
-              'You may have accidentally passed in a React root node instead ' +
-              'of its container.' :
-              'Instead, have the parent component update its state and ' +
-              'rerender in order to remove this component.'
-          )
+          "unmountComponentAtNode(): The node you're attempting to unmount " +
+            'was rendered by React and is not a top-level container. %s',
+          isContainerReactRoot
+            ? 'You may have accidentally passed in a React root node instead ' +
+                'of its container.'
+            : 'Instead, have the parent component update its state and ' +
+                'rerender in order to remove this component.',
         );
@@ -576,3 +643,3 @@ var ReactMount = {
       container,
-      false
+      false,
     );
@@ -586,11 +653,7 @@ var ReactMount = {
     shouldReuseMarkup,
-    transaction
+    transaction,
   ) {
     invariant(
-      container && (
-        container.nodeType === ELEMENT_NODE_TYPE ||
-        container.nodeType === DOC_NODE_TYPE ||
-        container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE
-      ),
-      'mountComponentIntoNode(...): Target container is not valid.'
+      isValidContainer(container),
+      'mountComponentIntoNode(...): Target container is not valid.',
     );
@@ -604,3 +667,3 @@ var ReactMount = {
         var checksum = rootElement.getAttribute(
-          ReactMarkupChecksum.CHECKSUM_ATTR_NAME
+          ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
         );
@@ -611,3 +674,3 @@ var ReactMount = {
           ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
-          checksum
+          checksum,
         );
@@ -629,3 +692,4 @@ var ReactMount = {
             normalizer.contentDocument.write(markup);
-            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
+            normalizedMarkup =
+              normalizer.contentDocument.documentElement.outerHTML;
             document.body.removeChild(normalizer);
@@ -635,5 +699,7 @@ var ReactMount = {
         var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
-        var difference = ' (client) ' +
+        var difference =
+          ' (client) ' +
           normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) +
-          '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
+          '\n (server) ' +
+          rootMarkup.substring(diffIndex - 20, diffIndex + 20);
 
@@ -641,11 +707,11 @@ var ReactMount = {
           container.nodeType !== DOC_NODE_TYPE,
-          'You\'re trying to render a component to the document using ' +
-          'server rendering but the checksum was invalid. This usually ' +
-          'means you rendered a different component type or props on ' +
-          'the client from the one on the server, or your render() ' +
-          'methods are impure. React cannot handle this case due to ' +
-          'cross-browser quirks by rendering at the document root. You ' +
-          'should look for environment dependent code in your components ' +
-          'and ensure the props are the same client and server side:\n%s',
-          difference
+          "You're trying to render a component to the document using " +
+            'server rendering but the checksum was invalid. This usually ' +
+            'means you rendered a different component type or props on ' +
+            'the client from the one on the server, or your render() ' +
+            'methods are impure. React cannot handle this case due to ' +
+            'cross-browser quirks by rendering at the document root. You ' +
+            'should look for environment dependent code in your components ' +
+            'and ensure the props are the same client and server side:\n%s',
+          difference,
         );
@@ -656,10 +722,10 @@ var ReactMount = {
             'React attempted to reuse markup in a container but the ' +
-            'checksum was invalid. This generally means that you are ' +
-            'using server rendering and the markup generated on the ' +
-            'server was not what the client was expecting. React injected ' +
-            'new markup to compensate which works but you have lost many ' +
-            'of the benefits of server rendering. Instead, figure out ' +
-            'why the markup being generated is different on the client ' +
-            'or server:\n%s',
-            difference
+              'checksum was invalid. This generally means that you are ' +
+              'using server rendering and the markup generated on the ' +
+              'server was not what the client was expecting. React injected ' +
+              'new markup to compensate which works but you have lost many ' +
+              'of the benefits of server rendering. Instead, figure out ' +
+              'why the markup being generated is different on the client ' +
+              'or server:\n%s',
+            difference,
           );
@@ -671,6 +737,6 @@ var ReactMount = {
       container.nodeType !== DOC_NODE_TYPE,
-      'You\'re trying to render a component to the document but ' +
-        'you didn\'t use server rendering. We can\'t do this ' +
+      "You're trying to render a component to the document but " +
+        "you didn't use server rendering. We can't do this " +
         'without using server rendering due to cross-browser quirks. ' +
-        'See ReactDOMServer.renderToString() for server rendering.'
+        'See ReactDOMServer.renderToString() for server rendering.',
     );
@@ -686,2 +752,15 @@ var ReactMount = {
     }
+
+    if (__DEV__) {
+      var hostNode = ReactDOMComponentTree.getInstanceFromNode(
+        container.firstChild,
+      );
+      if (hostNode._debugID !== 0) {
+        ReactInstrumentation.debugTool.onHostOperation({
+          instanceID: hostNode._debugID,
+          type: 'mount',
+          payload: markup.toString(),
+        });
+      }
+    }
   },
@@ -689,7 +768,2 @@ var ReactMount = {
 
-ReactPerf.measureMethods(ReactMount, 'ReactMount', {
-  _renderNewRootComponent: '_renderNewRootComponent',
-  _mountImageIntoNode: '_mountImageIntoNode',
-});
-
 module.exports = ReactMount;
diff --git a/src/renderers/dom/client/ReactReconcileTransaction.js b/src/renderers/dom/client/ReactReconcileTransaction.js
index fedd883bf..4b3950bbf 100644
--- a/src/renderers/dom/client/ReactReconcileTransaction.js
+++ b/src/renderers/dom/client/ReactReconcileTransaction.js
@@ -17,4 +17,5 @@ var ReactBrowserEventEmitter = require('ReactBrowserEventEmitter');
 var ReactInputSelection = require('ReactInputSelection');
+var ReactInstrumentation = require('ReactInstrumentation');
 var Transaction = require('Transaction');
-
+var ReactUpdateQueue = require('ReactUpdateQueue');
 
@@ -92,2 +93,9 @@ var TRANSACTION_WRAPPERS = [
 
+if (__DEV__) {
+  TRANSACTION_WRAPPERS.push({
+    initialize: ReactInstrumentation.debugTool.onBeginFlush,
+    close: ReactInstrumentation.debugTool.onEndFlush,
+  });
+}
+
 /**
@@ -106,3 +114,3 @@ var TRANSACTION_WRAPPERS = [
  */
-function ReactReconcileTransaction(useCreateElement) {
+function ReactReconcileTransaction(useCreateElement: boolean) {
   this.reinitializeTransaction();
@@ -112,3 +120,3 @@ function ReactReconcileTransaction(useCreateElement) {
   // accessible and defaults to false when `ReactDOMComponent` and
-  // `ReactTextComponent` checks it in `mountComponent`.`
+  // `ReactDOMTextComponent` checks it in `mountComponent`.`
   this.renderToStaticMarkup = false;
@@ -137,2 +145,9 @@ var Mixin = {
 
+  /**
+   * @return {object} The queue to collect React async events.
+   */
+  getUpdateQueue: function() {
+    return ReactUpdateQueue;
+  },
+
   /**
@@ -160,4 +175,3 @@ var Mixin = {
 
-
-Object.assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);
+Object.assign(ReactReconcileTransaction.prototype, Transaction, Mixin);
 
diff --git a/src/renderers/dom/client/__tests__/ReactBrowserEventEmitter-test.js b/src/renderers/dom/client/__tests__/ReactBrowserEventEmitter-test.js
index 5dbf91c2c..fb0f0619b 100644
--- a/src/renderers/dom/client/__tests__/ReactBrowserEventEmitter-test.js
+++ b/src/renderers/dom/client/__tests__/ReactBrowserEventEmitter-test.js
@@ -13,4 +13,2 @@
 
-var keyOf = require('keyOf');
-
 var EventListener;
@@ -37,7 +35,7 @@ var recordIDAndReturnFalse = function(id, event) {
 };
-var LISTENER = jest.genMockFn();
-var ON_CLICK_KEY = keyOf({onClick: null});
-var ON_TOUCH_TAP_KEY = keyOf({onTouchTap: null});
-var ON_CHANGE_KEY = keyOf({onChange: null});
-var ON_MOUSE_ENTER_KEY = keyOf({onMouseEnter: null});
+var LISTENER = jest.fn();
+var ON_CLICK_KEY = 'onClick';
+var ON_TOUCH_TAP_KEY = 'onTouchTap';
+var ON_CHANGE_KEY = 'onChange';
+var ON_MOUSE_ENTER_KEY = 'onMouseEnter';
 
@@ -58,5 +56,4 @@ function getInternal(node) {
 
-
-describe('ReactBrowserEventEmitter', function() {
-  beforeEach(function() {
+describe('ReactBrowserEventEmitter', () => {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -73,7 +70,7 @@ describe('ReactBrowserEventEmitter', function() {
     ReactTestUtils.renderIntoDocument(
-      <div ref={(c) => GRANDPARENT = c}>
-        <div ref={(c) => PARENT = c}>
-          <div ref={(c) => CHILD = c} />
+      <div ref={c => (GRANDPARENT = c)}>
+        <div ref={c => (PARENT = c)}>
+          <div ref={c => (CHILD = c)} />
         </div>
-      </div>
+      </div>,
     );
@@ -87,3 +84,3 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it('should store a listener correctly', function() {
+  it('should store a listener correctly', () => {
     registerSimpleTestHandler();
@@ -93,3 +90,3 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it('should retrieve a listener correctly', function() {
+  it('should retrieve a listener correctly', () => {
     registerSimpleTestHandler();
@@ -99,3 +96,3 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it('should clear all handlers when asked to', function() {
+  it('should clear all handlers when asked to', () => {
     registerSimpleTestHandler();
@@ -106,3 +103,3 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it('should invoke a simple handler registered on a node', function() {
+  it('should invoke a simple handler registered on a node', () => {
     registerSimpleTestHandler();
@@ -112,16 +109,13 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it(
-    'should not invoke handlers if ReactBrowserEventEmitter is disabled',
-    function() {
-      registerSimpleTestHandler();
-      ReactBrowserEventEmitter.setEnabled(false);
-      ReactTestUtils.SimulateNative.click(CHILD);
-      expect(LISTENER.mock.calls.length).toBe(0);
-      ReactBrowserEventEmitter.setEnabled(true);
-      ReactTestUtils.SimulateNative.click(CHILD);
-      expect(LISTENER.mock.calls.length).toBe(1);
-    }
-  );
+  it('should not invoke handlers if ReactBrowserEventEmitter is disabled', () => {
+    registerSimpleTestHandler();
+    ReactBrowserEventEmitter.setEnabled(false);
+    ReactTestUtils.SimulateNative.click(CHILD);
+    expect(LISTENER.mock.calls.length).toBe(0);
+    ReactBrowserEventEmitter.setEnabled(true);
+    ReactTestUtils.SimulateNative.click(CHILD);
+    expect(LISTENER.mock.calls.length).toBe(1);
+  });
 
-  it('should bubble simply', function() {
+  it('should bubble simply', () => {
     EventPluginHub.putListener(
@@ -129,3 +123,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_CLICK_KEY,
-      recordID.bind(null, getInternal(CHILD))
+      recordID.bind(null, getInternal(CHILD)),
     );
@@ -134,3 +128,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_CLICK_KEY,
-      recordID.bind(null, getInternal(PARENT))
+      recordID.bind(null, getInternal(PARENT)),
     );
@@ -139,3 +133,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_CLICK_KEY,
-      recordID.bind(null, getInternal(GRANDPARENT))
+      recordID.bind(null, getInternal(GRANDPARENT)),
     );
@@ -148,3 +142,3 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it('should continue bubbling if an error is thrown', function() {
+  it('should continue bubbling if an error is thrown', () => {
     EventPluginHub.putListener(
@@ -152,12 +146,8 @@ describe('ReactBrowserEventEmitter', function() {
       ON_CLICK_KEY,
-      recordID.bind(null, getInternal(CHILD))
-    );
-    EventPluginHub.putListener(
-      getInternal(PARENT),
-      ON_CLICK_KEY,
-      function() {
-        recordID(getInternal(PARENT));
-        throw new Error('Handler interrupted');
-      }
+      recordID.bind(null, getInternal(CHILD)),
     );
+    EventPluginHub.putListener(getInternal(PARENT), ON_CLICK_KEY, function() {
+      recordID(getInternal(PARENT));
+      throw new Error('Handler interrupted');
+    });
     EventPluginHub.putListener(
@@ -165,3 +155,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_CLICK_KEY,
-      recordID.bind(null, getInternal(GRANDPARENT))
+      recordID.bind(null, getInternal(GRANDPARENT)),
     );
@@ -176,27 +166,21 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it('should set currentTarget', function() {
-    EventPluginHub.putListener(
-      getInternal(CHILD),
-      ON_CLICK_KEY,
-      function(event) {
-        recordID(getInternal(CHILD));
-        expect(event.currentTarget).toBe(CHILD);
-      }
-    );
-    EventPluginHub.putListener(
-      getInternal(PARENT),
-      ON_CLICK_KEY,
-      function(event) {
-        recordID(getInternal(PARENT));
-        expect(event.currentTarget).toBe(PARENT);
-      }
-    );
-    EventPluginHub.putListener(
-      getInternal(GRANDPARENT),
-      ON_CLICK_KEY,
-      function(event) {
-        recordID(getInternal(GRANDPARENT));
-        expect(event.currentTarget).toBe(GRANDPARENT);
-      }
-    );
+  it('should set currentTarget', () => {
+    EventPluginHub.putListener(getInternal(CHILD), ON_CLICK_KEY, function(
+      event,
+    ) {
+      recordID(getInternal(CHILD));
+      expect(event.currentTarget).toBe(CHILD);
+    });
+    EventPluginHub.putListener(getInternal(PARENT), ON_CLICK_KEY, function(
+      event,
+    ) {
+      recordID(getInternal(PARENT));
+      expect(event.currentTarget).toBe(PARENT);
+    });
+    EventPluginHub.putListener(getInternal(GRANDPARENT), ON_CLICK_KEY, function(
+      event,
+    ) {
+      recordID(getInternal(GRANDPARENT));
+      expect(event.currentTarget).toBe(GRANDPARENT);
+    });
     ReactTestUtils.Simulate.click(CHILD);
@@ -208,3 +192,3 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it('should support stopPropagation()', function() {
+  it('should support stopPropagation()', () => {
     EventPluginHub.putListener(
@@ -212,3 +196,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_CLICK_KEY,
-      recordID.bind(null, getInternal(CHILD))
+      recordID.bind(null, getInternal(CHILD)),
     );
@@ -217,3 +201,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_CLICK_KEY,
-      recordIDAndStopPropagation.bind(null, getInternal(PARENT))
+      recordIDAndStopPropagation.bind(null, getInternal(PARENT)),
     );
@@ -222,3 +206,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_CLICK_KEY,
-      recordID.bind(null, getInternal(GRANDPARENT))
+      recordID.bind(null, getInternal(GRANDPARENT)),
     );
@@ -230,3 +214,3 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it('should stop after first dispatch if stopPropagation', function() {
+  it('should stop after first dispatch if stopPropagation', () => {
     EventPluginHub.putListener(
@@ -234,3 +218,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_CLICK_KEY,
-      recordIDAndStopPropagation.bind(null, getInternal(CHILD))
+      recordIDAndStopPropagation.bind(null, getInternal(CHILD)),
     );
@@ -239,3 +223,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_CLICK_KEY,
-      recordID.bind(null, getInternal(PARENT))
+      recordID.bind(null, getInternal(PARENT)),
     );
@@ -244,3 +228,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_CLICK_KEY,
-      recordID.bind(null, getInternal(GRANDPARENT))
+      recordID.bind(null, getInternal(GRANDPARENT)),
     );
@@ -251,3 +235,3 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it('should not stopPropagation if false is returned', function() {
+  it('should not stopPropagation if false is returned', () => {
     EventPluginHub.putListener(
@@ -255,3 +239,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_CLICK_KEY,
-      recordIDAndReturnFalse.bind(null, getInternal(CHILD))
+      recordIDAndReturnFalse.bind(null, getInternal(CHILD)),
     );
@@ -260,3 +244,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_CLICK_KEY,
-      recordID.bind(null, getInternal(PARENT))
+      recordID.bind(null, getInternal(PARENT)),
     );
@@ -265,3 +249,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_CLICK_KEY,
-      recordID.bind(null, getInternal(GRANDPARENT))
+      recordID.bind(null, getInternal(GRANDPARENT)),
     );
@@ -273,3 +257,3 @@ describe('ReactBrowserEventEmitter', function() {
     expect(idCallOrder[2]).toBe(getInternal(GRANDPARENT));
-    expect(console.error.calls.length).toEqual(0);
+    expect(console.error.calls.count()).toEqual(0);
   });
@@ -285,4 +269,4 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it('should invoke handlers that were removed while bubbling', function() {
-    var handleParentClick = jest.genMockFn();
+  it('should invoke handlers that were removed while bubbling', () => {
+    var handleParentClick = jest.fn();
     var handleChildClick = function(event) {
@@ -293,3 +277,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_CLICK_KEY,
-      handleChildClick
+      handleChildClick,
     );
@@ -298,3 +282,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_CLICK_KEY,
-      handleParentClick
+      handleParentClick,
     );
@@ -304,4 +288,4 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it('should not invoke newly inserted handlers while bubbling', function() {
-    var handleParentClick = jest.genMockFn();
+  it('should not invoke newly inserted handlers while bubbling', () => {
+    var handleParentClick = jest.fn();
     var handleChildClick = function(event) {
@@ -310,3 +294,3 @@ describe('ReactBrowserEventEmitter', function() {
         ON_CLICK_KEY,
-        handleParentClick
+        handleParentClick,
       );
@@ -316,3 +300,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_CLICK_KEY,
-      handleChildClick
+      handleChildClick,
     );
@@ -322,3 +306,3 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it('should have mouse enter simulated by test utils', function() {
+  it('should have mouse enter simulated by test utils', () => {
     EventPluginHub.putListener(
@@ -326,3 +310,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_MOUSE_ENTER_KEY,
-      recordID.bind(null, getInternal(CHILD))
+      recordID.bind(null, getInternal(CHILD)),
     );
@@ -333,3 +317,3 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it('should infer onTouchTap from a touchStart/End', function() {
+  it('should infer onTouchTap from a touchStart/End', () => {
     EventPluginHub.putListener(
@@ -337,3 +321,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_TOUCH_TAP_KEY,
-      recordID.bind(null, getInternal(CHILD))
+      recordID.bind(null, getInternal(CHILD)),
     );
@@ -341,3 +325,3 @@ describe('ReactBrowserEventEmitter', function() {
       CHILD,
-      ReactTestUtils.nativeTouchData(0, 0)
+      ReactTestUtils.nativeTouchData(0, 0),
     );
@@ -345,3 +329,3 @@ describe('ReactBrowserEventEmitter', function() {
       CHILD,
-      ReactTestUtils.nativeTouchData(0, 0)
+      ReactTestUtils.nativeTouchData(0, 0),
     );
@@ -351,3 +335,3 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it('should infer onTouchTap from when dragging below threshold', function() {
+  it('should infer onTouchTap from when dragging below threshold', () => {
     EventPluginHub.putListener(
@@ -355,3 +339,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_TOUCH_TAP_KEY,
-      recordID.bind(null, getInternal(CHILD))
+      recordID.bind(null, getInternal(CHILD)),
     );
@@ -359,3 +343,3 @@ describe('ReactBrowserEventEmitter', function() {
       CHILD,
-      ReactTestUtils.nativeTouchData(0, 0)
+      ReactTestUtils.nativeTouchData(0, 0),
     );
@@ -363,3 +347,3 @@ describe('ReactBrowserEventEmitter', function() {
       CHILD,
-      ReactTestUtils.nativeTouchData(0, tapMoveThreshold - 1)
+      ReactTestUtils.nativeTouchData(0, tapMoveThreshold - 1),
     );
@@ -369,3 +353,3 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it('should not onTouchTap from when dragging beyond threshold', function() {
+  it('should not onTouchTap from when dragging beyond threshold', () => {
     EventPluginHub.putListener(
@@ -373,3 +357,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_TOUCH_TAP_KEY,
-      recordID.bind(null, getInternal(CHILD))
+      recordID.bind(null, getInternal(CHILD)),
     );
@@ -377,3 +361,3 @@ describe('ReactBrowserEventEmitter', function() {
       CHILD,
-      ReactTestUtils.nativeTouchData(0, 0)
+      ReactTestUtils.nativeTouchData(0, 0),
     );
@@ -381,3 +365,3 @@ describe('ReactBrowserEventEmitter', function() {
       CHILD,
-      ReactTestUtils.nativeTouchData(0, tapMoveThreshold + 1)
+      ReactTestUtils.nativeTouchData(0, tapMoveThreshold + 1),
     );
@@ -386,3 +370,3 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it('should listen to events only once', function() {
+  it('should listen to events only once', () => {
     spyOn(EventListener, 'listen');
@@ -390,6 +374,6 @@ describe('ReactBrowserEventEmitter', function() {
     ReactBrowserEventEmitter.listenTo(ON_CLICK_KEY, document);
-    expect(EventListener.listen.calls.length).toBe(1);
+    expect(EventListener.listen.calls.count()).toBe(1);
   });
 
-  it('should work with event plugins without dependencies', function() {
+  it('should work with event plugins without dependencies', () => {
     spyOn(EventListener, 'listen');
@@ -398,6 +382,6 @@ describe('ReactBrowserEventEmitter', function() {
 
-    expect(EventListener.listen.argsForCall[0][1]).toBe('click');
+    expect(EventListener.listen.calls.argsFor(0)[1]).toBe('click');
   });
 
-  it('should work with event plugins with dependencies', function() {
+  it('should work with event plugins with dependencies', () => {
     spyOn(EventListener, 'listen');
@@ -408,4 +392,4 @@ describe('ReactBrowserEventEmitter', function() {
     var setEventListeners = [];
-    var listenCalls = EventListener.listen.argsForCall;
-    var captureCalls = EventListener.capture.argsForCall;
+    var listenCalls = EventListener.listen.calls.allArgs();
+    var captureCalls = EventListener.capture.calls.allArgs();
     for (var i = 0; i < listenCalls.length; i++) {
@@ -426,3 +410,3 @@ describe('ReactBrowserEventEmitter', function() {
 
-  it('should bubble onTouchTap', function() {
+  it('should bubble onTouchTap', () => {
     EventPluginHub.putListener(
@@ -430,3 +414,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_TOUCH_TAP_KEY,
-      recordID.bind(null, getInternal(CHILD))
+      recordID.bind(null, getInternal(CHILD)),
     );
@@ -435,3 +419,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_TOUCH_TAP_KEY,
-      recordID.bind(null, getInternal(PARENT))
+      recordID.bind(null, getInternal(PARENT)),
     );
@@ -440,3 +424,3 @@ describe('ReactBrowserEventEmitter', function() {
       ON_TOUCH_TAP_KEY,
-      recordID.bind(null, getInternal(GRANDPARENT))
+      recordID.bind(null, getInternal(GRANDPARENT)),
     );
@@ -444,3 +428,3 @@ describe('ReactBrowserEventEmitter', function() {
       CHILD,
-      ReactTestUtils.nativeTouchData(0, 0)
+      ReactTestUtils.nativeTouchData(0, 0),
     );
@@ -448,3 +432,3 @@ describe('ReactBrowserEventEmitter', function() {
       CHILD,
-      ReactTestUtils.nativeTouchData(0, 0)
+      ReactTestUtils.nativeTouchData(0, 0),
     );
@@ -456,2 +440,17 @@ describe('ReactBrowserEventEmitter', function() {
 
+  it('should not crash ensureScrollValueMonitoring when createEvent returns null', () => {
+    var originalCreateEvent = document.createEvent;
+    document.createEvent = function() {
+      return null;
+    };
+    spyOn(document, 'createEvent');
+
+    try {
+      var hasEventPageXY = ReactBrowserEventEmitter.supportsEventPageXY();
+      expect(document.createEvent.calls.count()).toBe(1);
+      expect(hasEventPageXY).toBe(false);
+    } finally {
+      document.createEvent = originalCreateEvent;
+    }
+  });
 });
diff --git a/src/renderers/dom/client/__tests__/ReactDOM-test.js b/src/renderers/dom/client/__tests__/ReactDOM-test.js
index 9c3cef57f..b55e913ff 100644
--- a/src/renderers/dom/client/__tests__/ReactDOM-test.js
+++ b/src/renderers/dom/client/__tests__/ReactDOM-test.js
@@ -18,3 +18,3 @@ var div = React.createFactory('div');
 
-describe('ReactDOM', function() {
+describe('ReactDOM', () => {
   // TODO: uncomment this test once we can run in phantom, which
@@ -48,3 +48,3 @@ describe('ReactDOM', function() {
 
-  it('allows a DOM element to be used with a string', function() {
+  it('allows a DOM element to be used with a string', () => {
     var element = React.createElement('div', {className: 'foo'});
@@ -54,6 +54,4 @@ describe('ReactDOM', function() {
 
-  it('should allow children to be passed as an argument', function() {
-    var argDiv = ReactTestUtils.renderIntoDocument(
-      div(null, 'child')
-    );
+  it('should allow children to be passed as an argument', () => {
+    var argDiv = ReactTestUtils.renderIntoDocument(div(null, 'child'));
     var argNode = ReactDOM.findDOMNode(argDiv);
@@ -62,5 +60,5 @@ describe('ReactDOM', function() {
 
-  it('should overwrite props.children with children argument', function() {
+  it('should overwrite props.children with children argument', () => {
     var conflictDiv = ReactTestUtils.renderIntoDocument(
-      div({children: 'fakechild'}, 'child')
+      div({children: 'fakechild'}, 'child'),
     );
@@ -74,3 +72,3 @@ describe('ReactDOM', function() {
    */
-  it('should purge the DOM cache when removing nodes', function() {
+  it('should purge the DOM cache when removing nodes', () => {
     var myDiv = ReactTestUtils.renderIntoDocument(
@@ -79,3 +77,3 @@ describe('ReactDOM', function() {
         <div key="theBird" className="bird" />
-      </div>
+      </div>,
     );
@@ -86,3 +84,3 @@ describe('ReactDOM', function() {
         <div key="theBird" className="bird" />,
-      </div>
+      </div>,
     );
@@ -92,3 +90,3 @@ describe('ReactDOM', function() {
         <div key="theBird" className="bird" />,
-      </div>
+      </div>,
     );
@@ -99,3 +97,3 @@ describe('ReactDOM', function() {
         <div key="theBird" className="bird" />,
-      </div>
+      </div>,
     );
@@ -106,3 +104,3 @@ describe('ReactDOM', function() {
         <div key="theBird" className="bird" />,
-      </div>
+      </div>,
     );
@@ -113,10 +111,10 @@ describe('ReactDOM', function() {
 
-  it('allow React.DOM factories to be called without warnings', function() {
-    spyOn(console, 'error');
+  it('throws warning when  React.DOM factories are called', () => {
+    spyOn(console, 'warn');
     var element = React.DOM.div();
     expect(element.type).toBe('div');
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.warn.calls.count()).toBe(1);
   });
 
-  it('throws in render() if the mount callback is not a function', function() {
+  it('throws in render() if the mount callback is not a function', () => {
     function Foo() {
@@ -125,23 +123,23 @@ describe('ReactDOM', function() {
     }
-    var A = React.createClass({
-      getInitialState: function() {
-        return {};
-      },
-      render: function() {
+
+    class A extends React.Component {
+      state = {};
+
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
     var myDiv = document.createElement('div');
-    expect(() => ReactDOM.render(<A />, myDiv, 'no')).toThrow(
+    expect(() => ReactDOM.render(<A />, myDiv, 'no')).toThrowError(
       'ReactDOM.render(...): Expected the last optional `callback` argument ' +
-      'to be a function. Instead received: string.'
+        'to be a function. Instead received: string.',
     );
-    expect(() => ReactDOM.render(<A />, myDiv, {})).toThrow(
+    expect(() => ReactDOM.render(<A />, myDiv, {})).toThrowError(
       'ReactDOM.render(...): Expected the last optional `callback` argument ' +
-      'to be a function. Instead received: Object.'
+        'to be a function. Instead received: Object.',
     );
-    expect(() => ReactDOM.render(<A />, myDiv, new Foo())).toThrow(
+    expect(() => ReactDOM.render(<A />, myDiv, new Foo())).toThrowError(
       'ReactDOM.render(...): Expected the last optional `callback` argument ' +
-      'to be a function. Instead received: Foo (keys: a, b).'
+        'to be a function. Instead received: Foo (keys: a, b).',
     );
@@ -149,3 +147,3 @@ describe('ReactDOM', function() {
 
-  it('throws in render() if the update callback is not a function', function() {
+  it('throws in render() if the update callback is not a function', () => {
     function Foo() {
@@ -154,10 +152,10 @@ describe('ReactDOM', function() {
     }
-    var A = React.createClass({
-      getInitialState: function() {
-        return {};
-      },
-      render: function() {
+
+    class A extends React.Component {
+      state = {};
+
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
@@ -166,13 +164,13 @@ describe('ReactDOM', function() {
 
-    expect(() => ReactDOM.render(<A />, myDiv, 'no')).toThrow(
+    expect(() => ReactDOM.render(<A />, myDiv, 'no')).toThrowError(
       'ReactDOM.render(...): Expected the last optional `callback` argument ' +
-      'to be a function. Instead received: string.'
+        'to be a function. Instead received: string.',
     );
-    expect(() => ReactDOM.render(<A />, myDiv, {})).toThrow(
+    expect(() => ReactDOM.render(<A />, myDiv, {})).toThrowError(
       'ReactDOM.render(...): Expected the last optional `callback` argument ' +
-      'to be a function. Instead received: Object.'
+        'to be a function. Instead received: Object.',
     );
-    expect(() => ReactDOM.render(<A />, myDiv, new Foo())).toThrow(
+    expect(() => ReactDOM.render(<A />, myDiv, new Foo())).toThrowError(
       'ReactDOM.render(...): Expected the last optional `callback` argument ' +
-      'to be a function. Instead received: Foo (keys: a, b).'
+        'to be a function. Instead received: Foo (keys: a, b).',
     );
diff --git a/src/renderers/dom/client/__tests__/ReactDOMComponentTree-test.js b/src/renderers/dom/client/__tests__/ReactDOMComponentTree-test.js
index 89ec35d58..f6ce6f428 100644
--- a/src/renderers/dom/client/__tests__/ReactDOMComponentTree-test.js
+++ b/src/renderers/dom/client/__tests__/ReactDOMComponentTree-test.js
@@ -13,3 +13,3 @@
 
-describe('ReactDOMComponentTree', function() {
+describe('ReactDOMComponentTree', () => {
   var React;
@@ -26,3 +26,3 @@ describe('ReactDOMComponentTree', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     React = require('React');
@@ -33,3 +33,3 @@ describe('ReactDOMComponentTree', function() {
 
-  it('finds nodes for instances', function() {
+  it('finds nodes for instances', () => {
     // This is a little hard to test directly. But refs rely on it -- so we
@@ -37,4 +37,4 @@ describe('ReactDOMComponentTree', function() {
     // other nodes don't have a ref.
-    var Component = React.createClass({
-      render: function() {
+    class Component extends React.Component {
+      render() {
         var toRef = this.props.toRef;
@@ -49,4 +49,4 @@ describe('ReactDOMComponentTree', function() {
         );
-      },
-    });
+      }
+    }
 
@@ -63,5 +63,5 @@ describe('ReactDOMComponentTree', function() {
 
-  it('finds instances for nodes', function() {
-    var Component = React.createClass({
-      render: function() {
+  it('finds instances for nodes', () => {
+    class Component extends React.Component {
+      render() {
         return (
@@ -76,4 +76,4 @@ describe('ReactDOMComponentTree', function() {
         );
-      },
-    });
+      }
+    }
 
@@ -90,3 +90,3 @@ describe('ReactDOMComponentTree', function() {
       return ReactDOMComponentTree.getClosestInstanceFromNode(
-        renderAndQuery(sel)
+        renderAndQuery(sel),
       );
@@ -103,3 +103,5 @@ describe('ReactDOMComponentTree', function() {
     var root = renderAndQuery(null);
-    var inst = ReactDOMComponentTree.getInstanceFromNode(root.children[0].childNodes[2]);
+    var inst = ReactDOMComponentTree.getInstanceFromNode(
+      root.children[0].childNodes[2],
+    );
     expect(inst._stringText).toBe('goodbye.');
@@ -109,3 +111,2 @@ describe('ReactDOMComponentTree', function() {
   });
-
 });
diff --git a/src/renderers/dom/client/__tests__/ReactDOMIDOperations-test.js b/src/renderers/dom/client/__tests__/ReactDOMIDOperations-test.js
index bdeb485e2..1187c9bf5 100644
--- a/src/renderers/dom/client/__tests__/ReactDOMIDOperations-test.js
+++ b/src/renderers/dom/client/__tests__/ReactDOMIDOperations-test.js
@@ -13,19 +13,23 @@
 
-describe('ReactDOMIDOperations', function() {
+describe('ReactDOMIDOperations', () => {
+  var ReactDOMComponentTree = require('ReactDOMComponentTree');
   var ReactDOMIDOperations = require('ReactDOMIDOperations');
-  var ReactMultiChildUpdateTypes = require('ReactMultiChildUpdateTypes');
 
-  it('should update innerHTML and preserve whitespace', function() {
+  it('should update innerHTML and preserve whitespace', () => {
     var stubNode = document.createElement('div');
-    var html = '\n  \t  <span>  \n  testContent  \t  </span>  \n  \t';
+    var stubInstance = {_debugID: 1};
+    ReactDOMComponentTree.precacheNode(stubInstance, stubNode);
 
+    var html = '\n  \t  <span>  \n  testContent  \t  </span>  \n  \t';
     ReactDOMIDOperations.dangerouslyProcessChildrenUpdates(
-      {_nativeNode: stubNode},
-      [{
-        type: ReactMultiChildUpdateTypes.SET_MARKUP,
-        content: html,
-        fromIndex: null,
-        toIndex: null,
-      }],
-      []
+      stubInstance,
+      [
+        {
+          type: 'SET_MARKUP',
+          content: html,
+          fromIndex: null,
+          toIndex: null,
+        },
+      ],
+      [],
     );
diff --git a/src/renderers/dom/client/__tests__/ReactDOMSVG-test.js b/src/renderers/dom/client/__tests__/ReactDOMSVG-test.js
index 84fb2711f..d7904b003 100644
--- a/src/renderers/dom/client/__tests__/ReactDOMSVG-test.js
+++ b/src/renderers/dom/client/__tests__/ReactDOMSVG-test.js
@@ -16,5 +16,4 @@ var ReactDOMServer;
 
-describe('ReactDOMSVG', function() {
-
-  beforeEach(function() {
+describe('ReactDOMSVG', () => {
+  beforeEach(() => {
     React = require('React');
@@ -23,3 +22,3 @@ describe('ReactDOMSVG', function() {
 
-  it('creates initial namespaced markup', function() {
+  it('creates initial namespaced markup', () => {
     var markup = ReactDOMServer.renderToString(
@@ -27,3 +26,3 @@ describe('ReactDOMSVG', function() {
         <image xlinkHref="http://i.imgur.com/w7GCRPb.png" />
-      </svg>
+      </svg>,
     );
@@ -31,3 +30,2 @@ describe('ReactDOMSVG', function() {
   });
-
 });
diff --git a/src/renderers/dom/client/__tests__/ReactDOMTreeTraversal-test.js b/src/renderers/dom/client/__tests__/ReactDOMTreeTraversal-test.js
index 888e17d15..ed40c8112 100644
--- a/src/renderers/dom/client/__tests__/ReactDOMTreeTraversal-test.js
+++ b/src/renderers/dom/client/__tests__/ReactDOMTreeTraversal-test.js
@@ -23,4 +23,4 @@ var ARG2 = {arg2: true};
 
-var ChildComponent = React.createClass({
-  render: function() {
+class ChildComponent extends React.Component {
+  render() {
     return (
@@ -31,7 +31,7 @@ var ChildComponent = React.createClass({
     );
-  },
-});
+  }
+}
 
-var ParentComponent = React.createClass({
-  render: function() {
+class ParentComponent extends React.Component {
+  render() {
     return (
@@ -45,4 +45,4 @@ var ParentComponent = React.createClass({
     );
-  },
-});
+  }
+}
 
@@ -52,3 +52,3 @@ function renderParentIntoDocument() {
 
-describe('ReactDOMTreeTraversal', function() {
+describe('ReactDOMTreeTraversal', () => {
   var ReactDOMTreeTraversal;
@@ -56,6 +56,6 @@ describe('ReactDOMTreeTraversal', function() {
   var aggregatedArgs;
-  function argAggregator(inst, isUp, arg) {
+  function argAggregator(inst, phase, arg) {
     aggregatedArgs.push({
       node: ReactDOMComponentTree.getNodeFromInstance(inst),
-      isUp: isUp,
+      phase: phase,
       arg: arg,
@@ -68,3 +68,3 @@ describe('ReactDOMTreeTraversal', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     ReactDOMTreeTraversal = require('ReactDOMTreeTraversal');
@@ -73,4 +73,4 @@ describe('ReactDOMTreeTraversal', function() {
 
-  describe('traverseTwoPhase', function() {
-    it('should not traverse when traversing outside DOM', function() {
+  describe('traverseTwoPhase', () => {
+    it('should not traverse when traversing outside DOM', () => {
       var expectedAggregation = [];
@@ -80,3 +80,3 @@ describe('ReactDOMTreeTraversal', function() {
 
-    it('should traverse two phase across component boundary', function() {
+    it('should traverse two phase across component boundary', () => {
       var parent = renderParentIntoDocument();
@@ -84,11 +84,11 @@ describe('ReactDOMTreeTraversal', function() {
       var expectedAggregation = [
-        {node: parent.refs.P, isUp: false, arg: ARG},
-        {node: parent.refs.P_P1, isUp: false, arg: ARG},
-        {node: parent.refs.P_P1_C1.refs.DIV, isUp: false, arg: ARG},
-        {node: parent.refs.P_P1_C1.refs.DIV_1, isUp: false, arg: ARG},
+        {node: parent.refs.P, phase: 'captured', arg: ARG},
+        {node: parent.refs.P_P1, phase: 'captured', arg: ARG},
+        {node: parent.refs.P_P1_C1.refs.DIV, phase: 'captured', arg: ARG},
+        {node: parent.refs.P_P1_C1.refs.DIV_1, phase: 'captured', arg: ARG},
 
-        {node: parent.refs.P_P1_C1.refs.DIV_1, isUp: true, arg: ARG},
-        {node: parent.refs.P_P1_C1.refs.DIV, isUp: true, arg: ARG},
-        {node: parent.refs.P_P1, isUp: true, arg: ARG},
-        {node: parent.refs.P, isUp: true, arg: ARG},
+        {node: parent.refs.P_P1_C1.refs.DIV_1, phase: 'bubbled', arg: ARG},
+        {node: parent.refs.P_P1_C1.refs.DIV, phase: 'bubbled', arg: ARG},
+        {node: parent.refs.P_P1, phase: 'bubbled', arg: ARG},
+        {node: parent.refs.P, phase: 'bubbled', arg: ARG},
       ];
@@ -98,3 +98,3 @@ describe('ReactDOMTreeTraversal', function() {
 
-    it('should traverse two phase at shallowest node', function() {
+    it('should traverse two phase at shallowest node', () => {
       var parent = renderParentIntoDocument();
@@ -102,4 +102,4 @@ describe('ReactDOMTreeTraversal', function() {
       var expectedAggregation = [
-        {node: parent.refs.P, isUp: false, arg: ARG},
-        {node: parent.refs.P, isUp: true, arg: ARG},
+        {node: parent.refs.P, phase: 'captured', arg: ARG},
+        {node: parent.refs.P, phase: 'bubbled', arg: ARG},
       ];
@@ -110,4 +110,4 @@ describe('ReactDOMTreeTraversal', function() {
 
-  describe('traverseEnterLeave', function() {
-    it('should not traverse when enter/leaving outside DOM', function() {
+  describe('traverseEnterLeave', () => {
+    it('should not traverse when enter/leaving outside DOM', () => {
       var target = null;
@@ -115,3 +115,7 @@ describe('ReactDOMTreeTraversal', function() {
       ReactDOMTreeTraversal.traverseEnterLeave(
-        target, target, argAggregator, ARG, ARG2
+        target,
+        target,
+        argAggregator,
+        ARG,
+        ARG2,
       );
@@ -120,3 +124,3 @@ describe('ReactDOMTreeTraversal', function() {
 
-    it('should not traverse if enter/leave the same node', function() {
+    it('should not traverse if enter/leave the same node', () => {
       var parent = renderParentIntoDocument();
@@ -126,3 +130,7 @@ describe('ReactDOMTreeTraversal', function() {
       ReactDOMTreeTraversal.traverseEnterLeave(
-        leave, enter, argAggregator, ARG, ARG2
+        leave,
+        enter,
+        argAggregator,
+        ARG,
+        ARG2,
       );
@@ -131,3 +139,3 @@ describe('ReactDOMTreeTraversal', function() {
 
-    it('should traverse enter/leave to sibling - avoids parent', function() {
+    it('should traverse enter/leave to sibling - avoids parent', () => {
       var parent = renderParentIntoDocument();
@@ -136,8 +144,12 @@ describe('ReactDOMTreeTraversal', function() {
       var expectedAggregation = [
-        {node: parent.refs.P_P1_C1.refs.DIV_1, isUp: true, arg: ARG},
+        {node: parent.refs.P_P1_C1.refs.DIV_1, phase: 'bubbled', arg: ARG},
         // enter/leave shouldn't fire anything on the parent
-        {node: parent.refs.P_P1_C1.refs.DIV_2, isUp: false, arg: ARG2},
+        {node: parent.refs.P_P1_C1.refs.DIV_2, phase: 'captured', arg: ARG2},
       ];
       ReactDOMTreeTraversal.traverseEnterLeave(
-        leave, enter, argAggregator, ARG, ARG2
+        leave,
+        enter,
+        argAggregator,
+        ARG,
+        ARG2,
       );
@@ -146,3 +158,3 @@ describe('ReactDOMTreeTraversal', function() {
 
-    it('should traverse enter/leave to parent - avoids parent', function() {
+    it('should traverse enter/leave to parent - avoids parent', () => {
       var parent = renderParentIntoDocument();
@@ -151,6 +163,10 @@ describe('ReactDOMTreeTraversal', function() {
       var expectedAggregation = [
-        {node: parent.refs.P_P1_C1.refs.DIV_1, isUp: true, arg: ARG},
+        {node: parent.refs.P_P1_C1.refs.DIV_1, phase: 'bubbled', arg: ARG},
       ];
       ReactDOMTreeTraversal.traverseEnterLeave(
-        leave, enter, argAggregator, ARG, ARG2
+        leave,
+        enter,
+        argAggregator,
+        ARG,
+        ARG2,
       );
@@ -159,3 +175,3 @@ describe('ReactDOMTreeTraversal', function() {
 
-    it('should enter from the window', function() {
+    it('should enter from the window', () => {
       var parent = renderParentIntoDocument();
@@ -164,8 +180,12 @@ describe('ReactDOMTreeTraversal', function() {
       var expectedAggregation = [
-        {node: parent.refs.P, isUp: false, arg: ARG2},
-        {node: parent.refs.P_P1, isUp: false, arg: ARG2},
-        {node: parent.refs.P_P1_C1.refs.DIV, isUp: false, arg: ARG2},
+        {node: parent.refs.P, phase: 'captured', arg: ARG2},
+        {node: parent.refs.P_P1, phase: 'captured', arg: ARG2},
+        {node: parent.refs.P_P1_C1.refs.DIV, phase: 'captured', arg: ARG2},
       ];
       ReactDOMTreeTraversal.traverseEnterLeave(
-        leave, enter, argAggregator, ARG, ARG2
+        leave,
+        enter,
+        argAggregator,
+        ARG,
+        ARG2,
       );
@@ -174,3 +194,3 @@ describe('ReactDOMTreeTraversal', function() {
 
-    it('should enter from the window to the shallowest', function() {
+    it('should enter from the window to the shallowest', () => {
       var parent = renderParentIntoDocument();
@@ -179,6 +199,10 @@ describe('ReactDOMTreeTraversal', function() {
       var expectedAggregation = [
-        {node: parent.refs.P, isUp: false, arg: ARG2},
+        {node: parent.refs.P, phase: 'captured', arg: ARG2},
       ];
       ReactDOMTreeTraversal.traverseEnterLeave(
-        leave, enter, argAggregator, ARG, ARG2
+        leave,
+        enter,
+        argAggregator,
+        ARG,
+        ARG2,
       );
@@ -187,3 +211,3 @@ describe('ReactDOMTreeTraversal', function() {
 
-    it('should leave to the window', function() {
+    it('should leave to the window', () => {
       var parent = renderParentIntoDocument();
@@ -192,8 +216,12 @@ describe('ReactDOMTreeTraversal', function() {
       var expectedAggregation = [
-        {node: parent.refs.P_P1_C1.refs.DIV, isUp: true, arg: ARG},
-        {node: parent.refs.P_P1, isUp: true, arg: ARG},
-        {node: parent.refs.P, isUp: true, arg: ARG},
+        {node: parent.refs.P_P1_C1.refs.DIV, phase: 'bubbled', arg: ARG},
+        {node: parent.refs.P_P1, phase: 'bubbled', arg: ARG},
+        {node: parent.refs.P, phase: 'bubbled', arg: ARG},
       ];
       ReactDOMTreeTraversal.traverseEnterLeave(
-        leave, enter, argAggregator, ARG, ARG2
+        leave,
+        enter,
+        argAggregator,
+        ARG,
+        ARG2,
       );
@@ -202,3 +230,3 @@ describe('ReactDOMTreeTraversal', function() {
 
-    it('should leave to the window from the shallowest', function() {
+    it('should leave to the window from the shallowest', () => {
       var parent = renderParentIntoDocument();
@@ -207,8 +235,12 @@ describe('ReactDOMTreeTraversal', function() {
       var expectedAggregation = [
-        {node: parent.refs.P_P1_C1.refs.DIV, isUp: true, arg: ARG},
-        {node: parent.refs.P_P1, isUp: true, arg: ARG},
-        {node: parent.refs.P, isUp: true, arg: ARG},
+        {node: parent.refs.P_P1_C1.refs.DIV, phase: 'bubbled', arg: ARG},
+        {node: parent.refs.P_P1, phase: 'bubbled', arg: ARG},
+        {node: parent.refs.P, phase: 'bubbled', arg: ARG},
       ];
       ReactDOMTreeTraversal.traverseEnterLeave(
-        leave, enter, argAggregator, ARG, ARG2
+        leave,
+        enter,
+        argAggregator,
+        ARG,
+        ARG2,
       );
@@ -218,4 +250,4 @@ describe('ReactDOMTreeTraversal', function() {
 
-  describe('getFirstCommonAncestor', function() {
-    it('should determine the first common ancestor correctly', function() {
+  describe('getFirstCommonAncestor', () => {
+    it('should determine the first common ancestor correctly', () => {
       var parent = renderParentIntoDocument();
@@ -223,3 +255,4 @@ describe('ReactDOMTreeTraversal', function() {
         // Common ancestor with self is self.
-        {one: parent.refs.P_P1_C1.refs.DIV_1,
+        {
+          one: parent.refs.P_P1_C1.refs.DIV_1,
           two: parent.refs.P_P1_C1.refs.DIV_1,
@@ -265,3 +298,3 @@ describe('ReactDOMTreeTraversal', function() {
           getInst(plan.one),
-          getInst(plan.two)
+          getInst(plan.two),
         );
@@ -271,3 +304,2 @@ describe('ReactDOMTreeTraversal', function() {
   });
-
 });
diff --git a/src/renderers/dom/client/__tests__/ReactEventIndependence-test.js b/src/renderers/dom/client/__tests__/ReactEventIndependence-test.js
index e652e9e1c..ed5ce813f 100644
--- a/src/renderers/dom/client/__tests__/ReactEventIndependence-test.js
+++ b/src/renderers/dom/client/__tests__/ReactEventIndependence-test.js
@@ -17,4 +17,4 @@ var ReactTestUtils;
 
-describe('ReactEventIndependence', function() {
-  beforeEach(function() {
+describe('ReactEventIndependence', () => {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -26,3 +26,3 @@ describe('ReactEventIndependence', function() {
 
-  it('does not crash with other react inside', function() {
+  it('does not crash with other react inside', () => {
     var clicks = 0;
@@ -34,3 +34,3 @@ describe('ReactEventIndependence', function() {
         }}
-      />
+      />,
     );
@@ -40,3 +40,3 @@ describe('ReactEventIndependence', function() {
 
-  it('does not crash with other react outside', function() {
+  it('does not crash with other react outside', () => {
     var clicks = 0;
@@ -46,3 +46,3 @@ describe('ReactEventIndependence', function() {
       <button onClick={() => clicks++}>click me</button>,
-      outer
+      outer,
     );
@@ -52,3 +52,3 @@ describe('ReactEventIndependence', function() {
 
-  it('does not when event fired on unmounted tree', function() {
+  it('does not when event fired on unmounted tree', () => {
     var clicks = 0;
@@ -57,3 +57,3 @@ describe('ReactEventIndependence', function() {
       <button onClick={() => clicks++}>click me</button>,
-      container
+      container,
     );
@@ -68,3 +68,2 @@ describe('ReactEventIndependence', function() {
   });
-
 });
diff --git a/src/renderers/dom/client/__tests__/ReactEventListener-test.js b/src/renderers/dom/client/__tests__/ReactEventListener-test.js
index 49d4f195d..598da2c6f 100644
--- a/src/renderers/dom/client/__tests__/ReactEventListener-test.js
+++ b/src/renderers/dom/client/__tests__/ReactEventListener-test.js
@@ -13,6 +13,5 @@
 
-
 var EVENT_TARGET_PARAM = 1;
 
-describe('ReactEventListener', function() {
+describe('ReactEventListener', () => {
   var React;
@@ -24,3 +23,3 @@ describe('ReactEventListener', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -32,3 +31,3 @@ describe('ReactEventListener', function() {
 
-    handleTopLevel = jest.genMockFn();
+    handleTopLevel = jest.fn();
     ReactEventListener._handleTopLevel = handleTopLevel;
@@ -36,3 +35,3 @@ describe('ReactEventListener', function() {
 
-  it('should dispatch events from outside React tree', function() {
+  it('should dispatch events from outside React tree', () => {
     var otherNode = document.createElement('h1');
@@ -40,15 +39,12 @@ describe('ReactEventListener', function() {
     expect(handleTopLevel.mock.calls.length).toBe(0);
-    ReactEventListener.dispatchEvent(
-      'topMouseOut',
-      {
-        type: 'mouseout',
-        fromElement: otherNode,
-        target: otherNode,
-        srcElement: otherNode,
-        toElement: ReactDOM.findDOMNode(component),
-        relatedTarget: ReactDOM.findDOMNode(component),
-        view: window,
-        path: [otherNode, otherNode],
-      },
-    );
+    ReactEventListener.dispatchEvent('topMouseOut', {
+      type: 'mouseout',
+      fromElement: otherNode,
+      target: otherNode,
+      srcElement: otherNode,
+      toElement: ReactDOM.findDOMNode(component),
+      relatedTarget: ReactDOM.findDOMNode(component),
+      view: window,
+      path: [otherNode, otherNode],
+    });
     expect(handleTopLevel.mock.calls.length).toBe(1);
@@ -56,4 +52,4 @@ describe('ReactEventListener', function() {
 
-  describe('Propagation', function() {
-    it('should propagate events one level down', function() {
+  describe('Propagation', () => {
+    it('should propagate events one level down', () => {
       var childContainer = document.createElement('div');
@@ -63,4 +59,3 @@ describe('ReactEventListener', function() {
       childControl = ReactDOM.render(childControl, childContainer);
-      parentControl =
-        ReactDOM.render(parentControl, parentContainer);
+      parentControl = ReactDOM.render(parentControl, parentContainer);
       ReactDOM.findDOMNode(parentControl).appendChild(childContainer);
@@ -74,9 +69,11 @@ describe('ReactEventListener', function() {
       expect(calls.length).toBe(2);
-      expect(calls[0][EVENT_TARGET_PARAM])
-        .toBe(ReactDOMComponentTree.getInstanceFromNode(childControl));
-      expect(calls[1][EVENT_TARGET_PARAM])
-        .toBe(ReactDOMComponentTree.getInstanceFromNode(parentControl));
+      expect(calls[0][EVENT_TARGET_PARAM]).toBe(
+        ReactDOMComponentTree.getInstanceFromNode(childControl),
+      );
+      expect(calls[1][EVENT_TARGET_PARAM]).toBe(
+        ReactDOMComponentTree.getInstanceFromNode(parentControl),
+      );
     });
 
-    it('should propagate events two levels down', function() {
+    it('should propagate events two levels down', () => {
       var childContainer = document.createElement('div');
@@ -88,6 +85,7 @@ describe('ReactEventListener', function() {
       childControl = ReactDOM.render(childControl, childContainer);
-      parentControl =
-        ReactDOM.render(parentControl, parentContainer);
-      grandParentControl =
-        ReactDOM.render(grandParentControl, grandParentContainer);
+      parentControl = ReactDOM.render(parentControl, parentContainer);
+      grandParentControl = ReactDOM.render(
+        grandParentControl,
+        grandParentContainer,
+      );
       ReactDOM.findDOMNode(parentControl).appendChild(childContainer);
@@ -102,11 +100,14 @@ describe('ReactEventListener', function() {
       expect(calls.length).toBe(3);
-      expect(calls[0][EVENT_TARGET_PARAM])
-        .toBe(ReactDOMComponentTree.getInstanceFromNode(childControl));
-      expect(calls[1][EVENT_TARGET_PARAM])
-        .toBe(ReactDOMComponentTree.getInstanceFromNode(parentControl));
-      expect(calls[2][EVENT_TARGET_PARAM])
-        .toBe(ReactDOMComponentTree.getInstanceFromNode(grandParentControl));
+      expect(calls[0][EVENT_TARGET_PARAM]).toBe(
+        ReactDOMComponentTree.getInstanceFromNode(childControl),
+      );
+      expect(calls[1][EVENT_TARGET_PARAM]).toBe(
+        ReactDOMComponentTree.getInstanceFromNode(parentControl),
+      );
+      expect(calls[2][EVENT_TARGET_PARAM]).toBe(
+        ReactDOMComponentTree.getInstanceFromNode(grandParentControl),
+      );
     });
 
-    it('should not get confused by disappearing elements', function() {
+    it('should not get confused by disappearing elements', () => {
       var childContainer = document.createElement('div');
@@ -116,4 +117,3 @@ describe('ReactEventListener', function() {
       childControl = ReactDOM.render(childControl, childContainer);
-      parentControl =
-        ReactDOM.render(parentControl, parentContainer);
+      parentControl = ReactDOM.render(parentControl, parentContainer);
       ReactDOM.findDOMNode(parentControl).appendChild(childContainer);
@@ -125,9 +125,12 @@ describe('ReactEventListener', function() {
       var childNode = ReactDOM.findDOMNode(childControl);
-      handleTopLevel.mockImplementation(
-        function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {
-          if (topLevelTarget === childNode) {
-            ReactDOM.unmountComponentAtNode(childContainer);
-          }
+      handleTopLevel.mockImplementation(function(
+        topLevelType,
+        topLevelTarget,
+        topLevelTargetID,
+        nativeEvent,
+      ) {
+        if (topLevelTarget === childNode) {
+          ReactDOM.unmountComponentAtNode(childContainer);
         }
-      );
+      });
 
@@ -140,19 +143,15 @@ describe('ReactEventListener', function() {
       expect(calls.length).toBe(2);
-      expect(calls[0][EVENT_TARGET_PARAM])
-        .toBe(ReactDOMComponentTree.getInstanceFromNode(childNode));
-      expect(calls[1][EVENT_TARGET_PARAM])
-        .toBe(ReactDOMComponentTree.getInstanceFromNode(parentControl));
+      expect(calls[0][EVENT_TARGET_PARAM]).toBe(
+        ReactDOMComponentTree.getInstanceFromNode(childNode),
+      );
+      expect(calls[1][EVENT_TARGET_PARAM]).toBe(
+        ReactDOMComponentTree.getInstanceFromNode(parentControl),
+      );
     });
 
-    it('should batch between handlers from different roots', function() {
+    it('should batch between handlers from different roots', () => {
       var childContainer = document.createElement('div');
       var parentContainer = document.createElement('div');
-      var childControl = ReactDOM.render(
-        <div>Child</div>,
-        childContainer
-      );
-      var parentControl = ReactDOM.render(
-        <div>Parent</div>,
-        parentContainer
-      );
+      var childControl = ReactDOM.render(<div>Child</div>, childContainer);
+      var parentControl = ReactDOM.render(<div>Parent</div>, parentContainer);
       ReactDOM.findDOMNode(parentControl).appendChild(childContainer);
@@ -162,15 +161,20 @@ describe('ReactEventListener', function() {
       var childNode = ReactDOM.findDOMNode(childControl);
-      handleTopLevel.mockImplementation(
-        function(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent) {
-          ReactDOM.render(
-            <div>{topLevelTarget === childNode ? '1' : '2'}</div>,
-            childContainer
-          );
-          // Since we're batching, neither update should yet have gone through.
-          expect(childNode.textContent).toBe('Child');
-        }
-      );
+      handleTopLevel.mockImplementation(function(
+        topLevelType,
+        topLevelTarget,
+        topLevelTargetID,
+        nativeEvent,
+      ) {
+        ReactDOM.render(
+          <div>{topLevelTarget === childNode ? '1' : '2'}</div>,
+          childContainer,
+        );
+        // Since we're batching, neither update should yet have gone through.
+        expect(childNode.textContent).toBe('Child');
+      });
 
-      var callback =
-        ReactEventListener.dispatchEvent.bind(ReactEventListener, 'test');
+      var callback = ReactEventListener.dispatchEvent.bind(
+        ReactEventListener,
+        'test',
+      );
       callback({
@@ -185,15 +189,13 @@ describe('ReactEventListener', function() {
 
-  it('should not fire duplicate events for a React DOM tree', function() {
-    var Wrapper = React.createClass({
-
-      getInner: function() {
+  it('should not fire duplicate events for a React DOM tree', () => {
+    class Wrapper extends React.Component {
+      getInner = () => {
         return this.refs.inner;
-      },
+      };
 
-      render: function() {
+      render() {
         var inner = <div ref="inner">Inner</div>;
         return <div><div id="outer">{inner}</div></div>;
-      },
-
-    });
+      }
+    }
 
@@ -208,4 +210,5 @@ describe('ReactEventListener', function() {
     expect(calls.length).toBe(1);
-    expect(calls[0][EVENT_TARGET_PARAM])
-      .toBe(ReactDOMComponentTree.getInstanceFromNode(instance.getInner()));
+    expect(calls[0][EVENT_TARGET_PARAM]).toBe(
+      ReactDOMComponentTree.getInstanceFromNode(instance.getInner()),
+    );
   });
diff --git a/src/renderers/dom/client/__tests__/ReactMount-test.js b/src/renderers/dom/client/__tests__/ReactMount-test.js
index 06b1c1641..d83bd1108 100644
--- a/src/renderers/dom/client/__tests__/ReactMount-test.js
+++ b/src/renderers/dom/client/__tests__/ReactMount-test.js
@@ -20,4 +20,4 @@ var WebComponents;
 
-describe('ReactMount', function() {
-  beforeEach(function() {
+describe('ReactMount', () => {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -41,4 +41,4 @@ describe('ReactMount', function() {
 
-  describe('unmountComponentAtNode', function() {
-    it('throws when given a non-node', function() {
+  describe('unmountComponentAtNode', () => {
+    it('throws when given a non-node', () => {
       var nodeArray = document.getElementsByTagName('div');
@@ -46,4 +46,4 @@ describe('ReactMount', function() {
         ReactDOM.unmountComponentAtNode(nodeArray);
-      }).toThrow(
-        'unmountComponentAtNode(...): Target container is not a DOM element.'
+      }).toThrowError(
+        'unmountComponentAtNode(...): Target container is not a DOM element.',
       );
@@ -52,8 +52,8 @@ describe('ReactMount', function() {
 
-  it('throws when given a string', function() {
+  it('throws when given a string', () => {
     expect(function() {
       ReactTestUtils.renderIntoDocument('div');
-    }).toThrow(
+    }).toThrowError(
       'ReactDOM.render(): Invalid component element. Instead of passing a ' +
-      'string like \'div\', pass React.createElement(\'div\') or <div />.'
+        "string like 'div', pass React.createElement('div') or <div />.",
     );
@@ -61,13 +61,14 @@ describe('ReactMount', function() {
 
-  it('throws when given a factory', function() {
-    var Component = React.createClass({
-      render: function() {
+  it('throws when given a factory', () => {
+    class Component extends React.Component {
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
+
     expect(function() {
       ReactTestUtils.renderIntoDocument(Component);
-    }).toThrow(
+    }).toThrowError(
       'ReactDOM.render(): Invalid component element. Instead of passing a ' +
-      'class like Foo, pass React.createElement(Foo) or <Foo />.'
+        'class like Foo, pass React.createElement(Foo) or <Foo />.',
     );
@@ -75,3 +76,3 @@ describe('ReactMount', function() {
 
-  it('should render different components in same root', function() {
+  it('should render different components in same root', () => {
     var container = document.createElement('container');
@@ -79,6 +80,6 @@ describe('ReactMount', function() {
 
-    ReactMount.render(<div></div>, container);
+    ReactMount.render(<div />, container);
     expect(container.firstChild.nodeName).toBe('DIV');
 
-    ReactMount.render(<span></span>, container);
+    ReactMount.render(<span />, container);
     expect(container.firstChild.nodeName).toBe('SPAN');
@@ -86,15 +87,15 @@ describe('ReactMount', function() {
 
-  it('should unmount and remount if the key changes', function() {
+  it('should unmount and remount if the key changes', () => {
     var container = document.createElement('container');
 
-    var mockMount = jest.genMockFn();
-    var mockUnmount = jest.genMockFn();
+    var mockMount = jest.fn();
+    var mockUnmount = jest.fn();
 
-    var Component = React.createClass({
-      componentDidMount: mockMount,
-      componentWillUnmount: mockUnmount,
-      render: function() {
+    class Component extends React.Component {
+      componentDidMount = mockMount;
+      componentWillUnmount = mockUnmount;
+      render() {
         return <span>{this.props.text}</span>;
-      },
-    });
+      }
+    }
 
@@ -121,3 +122,3 @@ describe('ReactMount', function() {
 
-  it('should reuse markup if rendering to the same target twice', function() {
+  it('should reuse markup if rendering to the same target twice', () => {
     var container = document.createElement('container');
@@ -129,3 +130,3 @@ describe('ReactMount', function() {
 
-  it('should warn if mounting into dirty rendered markup', function() {
+  it('should warn if mounting into dirty rendered markup', () => {
     var container = document.createElement('container');
@@ -135,3 +136,3 @@ describe('ReactMount', function() {
     ReactMount.render(<div />, container);
-    expect(console.error.calls.length).toBe(1);
+    expect(console.error.calls.count()).toBe(1);
 
@@ -140,6 +141,6 @@ describe('ReactMount', function() {
     ReactMount.render(<div />, container);
-    expect(console.error.calls.length).toBe(2);
+    expect(console.error.calls.count()).toBe(2);
   });
 
-  it('should not warn if mounting into non-empty node', function() {
+  it('should not warn if mounting into non-empty node', () => {
     var container = document.createElement('container');
@@ -149,6 +150,6 @@ describe('ReactMount', function() {
     ReactMount.render(<div />, container);
-    expect(console.error.calls.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('should warn when mounting into document.body', function() {
+  it('should warn when mounting into document.body', () => {
     var iFrame = document.createElement('iframe');
@@ -159,5 +160,5 @@ describe('ReactMount', function() {
 
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'Rendering components directly into document.body is discouraged'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'Rendering components directly into document.body is discouraged',
     );
@@ -165,6 +166,7 @@ describe('ReactMount', function() {
 
-  it('should account for escaping on a checksum mismatch', function() {
+  it('should account for escaping on a checksum mismatch', () => {
     var div = document.createElement('div');
     var markup = ReactDOMServer.renderToString(
-      <div>This markup contains an nbsp entity: &nbsp; server text</div>);
+      <div>This markup contains an nbsp entity: &nbsp; server text</div>,
+    );
     div.innerHTML = markup;
@@ -174,8 +176,8 @@ describe('ReactMount', function() {
       <div>This markup contains an nbsp entity: &nbsp; client text</div>,
-      div
+      div,
     );
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       ' (client) nbsp entity: &nbsp; client text</div>\n' +
-      ' (server) nbsp entity: &nbsp; server text</div>'
+        ' (server) nbsp entity: &nbsp; server text</div>',
     );
@@ -184,3 +186,3 @@ describe('ReactMount', function() {
   if (WebComponents !== undefined) {
-    it('should allow mounting/unmounting to document fragment container', function() {
+    it('should allow mounting/unmounting to document fragment container', () => {
       var shadowRoot;
@@ -206,9 +208,11 @@ describe('ReactMount', function() {
 
-  it('should warn if render removes React-rendered children', function() {
+  it('should warn if render removes React-rendered children', () => {
     var container = document.createElement('container');
-    var Component = React.createClass({
-      render: function() {
+
+    class Component extends React.Component {
+      render() {
         return <div><div /></div>;
-      },
-    });
+      }
+    }
+
     ReactDOM.render(<Component />, container);
@@ -219,8 +223,8 @@ describe('ReactMount', function() {
     ReactDOM.render(<span />, rootNode);
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: render(...): Replacing React-rendered children with a new ' +
-      'root component. If you intended to update the children of this node, ' +
-      'you should instead have the existing children update their state and ' +
-      'render the new components instead of calling ReactDOM.render.'
+        'root component. If you intended to update the children of this node, ' +
+        'you should instead have the existing children update their state and ' +
+        'render the new components instead of calling ReactDOM.render.',
     );
@@ -228,3 +232,31 @@ describe('ReactMount', function() {
 
-  it('passes the correct callback context', function() {
+  it('should warn if the unmounted node was rendered by another copy of React', () => {
+    jest.resetModuleRegistry();
+    var ReactDOMOther = require('ReactDOM');
+    var container = document.createElement('div');
+
+    class Component extends React.Component {
+      render() {
+        return <div><div /></div>;
+      }
+    }
+
+    ReactDOM.render(<Component />, container);
+    // Make sure ReactDOM and ReactDOMOther are different copies
+    expect(ReactDOM).not.toEqual(ReactDOMOther);
+
+    spyOn(console, 'error');
+    ReactDOMOther.unmountComponentAtNode(container);
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      "Warning: unmountComponentAtNode(): The node you're attempting to unmount " +
+        'was rendered by another copy of React.',
+    );
+
+    // Don't throw a warning if the correct React copy unmounts the node
+    ReactDOM.unmountComponentAtNode(container);
+    expect(console.error.calls.count()).toBe(1);
+  });
+
+  it('passes the correct callback context', () => {
     var container = document.createElement('div');
@@ -268,3 +300,3 @@ describe('ReactMount', function() {
 
-  it('tracks root instances', function() {
+  it('tracks root instances', () => {
     // Used by devtools.
@@ -280,16 +312,16 @@ describe('ReactMount', function() {
 
-  it('marks top-level mounts', function() {
+  it('marks top-level mounts', () => {
     var ReactFeatureFlags = require('ReactFeatureFlags');
 
-    var Foo = React.createClass({
-      render: function() {
+    class Foo extends React.Component {
+      render() {
         return <Bar />;
-      },
-    });
+      }
+    }
 
-    var Bar = React.createClass({
-      render: function() {
+    class Bar extends React.Component {
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
@@ -302,6 +334,6 @@ describe('ReactMount', function() {
 
-      expect(console.time.argsForCall.length).toBe(1);
-      expect(console.time.argsForCall[0][0]).toBe('React mount: Foo');
-      expect(console.timeEnd.argsForCall.length).toBe(1);
-      expect(console.timeEnd.argsForCall[0][0]).toBe('React mount: Foo');
+      expect(console.time.calls.count()).toBe(1);
+      expect(console.time.calls.argsFor(0)[0]).toBe('React mount: Foo');
+      expect(console.timeEnd.calls.count()).toBe(1);
+      expect(console.timeEnd.calls.argsFor(0)[0]).toBe('React mount: Foo');
     } finally {
diff --git a/src/renderers/dom/client/__tests__/ReactMountDestruction-test.js b/src/renderers/dom/client/__tests__/ReactMountDestruction-test.js
index a4d8e3997..37cc4f5b9 100644
--- a/src/renderers/dom/client/__tests__/ReactMountDestruction-test.js
+++ b/src/renderers/dom/client/__tests__/ReactMountDestruction-test.js
@@ -16,4 +16,4 @@ var ReactDOM = require('ReactDOM');
 
-describe('ReactMount', function() {
-  it('should destroy a react root upon request', function() {
+describe('ReactMount', () => {
+  it('should destroy a react root upon request', () => {
     var mainContainerDiv = document.createElement('div');
@@ -42,9 +42,10 @@ describe('ReactMount', function() {
 
-  it('should warn when unmounting a non-container root node', function() {
+  it('should warn when unmounting a non-container root node', () => {
     var mainContainerDiv = document.createElement('div');
 
-    var component =
+    var component = (
       <div>
         <div />
-      </div>;
+      </div>
+    );
     ReactDOM.render(component, mainContainerDiv);
@@ -55,8 +56,8 @@ describe('ReactMount', function() {
     ReactDOM.unmountComponentAtNode(rootDiv);
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: unmountComponentAtNode(): The node you\'re attempting to ' +
-      'unmount was rendered by React and is not a top-level container. You ' +
-      'may have accidentally passed in a React root node instead of its ' +
-      'container.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      "Warning: unmountComponentAtNode(): The node you're attempting to " +
+        'unmount was rendered by React and is not a top-level container. You ' +
+        'may have accidentally passed in a React root node instead of its ' +
+        'container.',
     );
@@ -64,6 +65,6 @@ describe('ReactMount', function() {
 
-  it('should warn when unmounting a non-container, non-root node', function() {
+  it('should warn when unmounting a non-container, non-root node', () => {
     var mainContainerDiv = document.createElement('div');
 
-    var component =
+    var component = (
       <div>
@@ -72,3 +73,4 @@ describe('ReactMount', function() {
         </div>
-      </div>;
+      </div>
+    );
     ReactDOM.render(component, mainContainerDiv);
@@ -79,8 +81,8 @@ describe('ReactMount', function() {
     ReactDOM.unmountComponentAtNode(nonRootDiv);
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: unmountComponentAtNode(): The node you\'re attempting to ' +
-      'unmount was rendered by React and is not a top-level container. ' +
-      'Instead, have the parent component update its state and rerender in ' +
-      'order to remove this component.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      "Warning: unmountComponentAtNode(): The node you're attempting to " +
+        'unmount was rendered by React and is not a top-level container. ' +
+        'Instead, have the parent component update its state and rerender in ' +
+        'order to remove this component.',
     );
diff --git a/src/renderers/dom/client/__tests__/ReactRenderDocument-test.js b/src/renderers/dom/client/__tests__/ReactRenderDocument-test.js
index 1d9682662..8150a17f7 100644
--- a/src/renderers/dom/client/__tests__/ReactRenderDocument-test.js
+++ b/src/renderers/dom/client/__tests__/ReactRenderDocument-test.js
@@ -28,4 +28,4 @@ var UNMOUNT_INVARIANT_MESSAGE =
 
-describe('rendering React components at document', function() {
-  beforeEach(function() {
+describe('rendering React components at document', () => {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -40,7 +40,7 @@ describe('rendering React components at document', function() {
 
-  it('should be able to adopt server markup', function() {
+  it('should be able to adopt server markup', () => {
     expect(testDocument).not.toBeUndefined();
 
-    var Root = React.createClass({
-      render: function() {
+    class Root extends React.Component {
+      render() {
         return (
@@ -55,4 +55,4 @@ describe('rendering React components at document', function() {
         );
-      },
-    });
+      }
+    }
 
@@ -71,7 +71,7 @@ describe('rendering React components at document', function() {
 
-  it('should not be able to unmount component from document node', function() {
+  it('should not be able to unmount component from document node', () => {
     expect(testDocument).not.toBeUndefined();
 
-    var Root = React.createClass({
-      render: function() {
+    class Root extends React.Component {
+      render() {
         return (
@@ -86,4 +86,4 @@ describe('rendering React components at document', function() {
         );
-      },
-    });
+      }
+    }
 
@@ -96,3 +96,3 @@ describe('rendering React components at document', function() {
       ReactDOM.unmountComponentAtNode(testDocument);
-    }).toThrow(UNMOUNT_INVARIANT_MESSAGE);
+    }).toThrowError(UNMOUNT_INVARIANT_MESSAGE);
 
@@ -101,7 +101,7 @@ describe('rendering React components at document', function() {
 
-  it('should not be able to switch root constructors', function() {
+  it('should not be able to switch root constructors', () => {
     expect(testDocument).not.toBeUndefined();
 
-    var Component = React.createClass({
-      render: function() {
+    class Component extends React.Component {
+      render() {
         return (
@@ -116,7 +116,7 @@ describe('rendering React components at document', function() {
         );
-      },
-    });
+      }
+    }
 
-    var Component2 = React.createClass({
-      render: function() {
+    class Component2 extends React.Component {
+      render() {
         return (
@@ -131,4 +131,4 @@ describe('rendering React components at document', function() {
         );
-      },
-    });
+      }
+    }
 
@@ -144,3 +144,3 @@ describe('rendering React components at document', function() {
       ReactDOM.render(<Component2 />, testDocument);
-    }).toThrow(UNMOUNT_INVARIANT_MESSAGE);
+    }).toThrowError(UNMOUNT_INVARIANT_MESSAGE);
 
@@ -149,7 +149,7 @@ describe('rendering React components at document', function() {
 
-  it('should be able to mount into document', function() {
+  it('should be able to mount into document', () => {
     expect(testDocument).not.toBeUndefined();
 
-    var Component = React.createClass({
-      render: function() {
+    class Component extends React.Component {
+      render() {
         return (
@@ -164,7 +164,7 @@ describe('rendering React components at document', function() {
         );
-      },
-    });
+      }
+    }
 
     var markup = ReactDOMServer.renderToString(
-      <Component text="Hello world" />
+      <Component text="Hello world" />,
     );
@@ -177,7 +177,7 @@ describe('rendering React components at document', function() {
 
-  it('should give helpful errors on state desync', function() {
+  it('should give helpful errors on state desync', () => {
     expect(testDocument).not.toBeUndefined();
 
-    var Component = React.createClass({
-      render: function() {
+    class Component extends React.Component {
+      render() {
         return (
@@ -192,7 +192,7 @@ describe('rendering React components at document', function() {
         );
-      },
-    });
+      }
+    }
 
     var markup = ReactDOMServer.renderToString(
-      <Component text="Goodbye world" />
+      <Component text="Goodbye world" />,
     );
@@ -203,13 +203,13 @@ describe('rendering React components at document', function() {
       ReactDOM.render(<Component text="Hello world" />, testDocument);
-    }).toThrow(
-      'You\'re trying to render a component to the document using ' +
-      'server rendering but the checksum was invalid. This usually ' +
-      'means you rendered a different component type or props on ' +
-      'the client from the one on the server, or your render() methods ' +
-      'are impure. React cannot handle this case due to cross-browser ' +
-      'quirks by rendering at the document root. You should look for ' +
-      'environment dependent code in your components and ensure ' +
-      'the props are the same client and server side:\n' +
-      ' (client) dy data-reactid="4">Hello world</body></\n' +
-      ' (server) dy data-reactid="4">Goodbye world</body>'
+    }).toThrowError(
+      "You're trying to render a component to the document using " +
+        'server rendering but the checksum was invalid. This usually ' +
+        'means you rendered a different component type or props on ' +
+        'the client from the one on the server, or your render() methods ' +
+        'are impure. React cannot handle this case due to cross-browser ' +
+        'quirks by rendering at the document root. You should look for ' +
+        'environment dependent code in your components and ensure ' +
+        'the props are the same client and server side:\n' +
+        ' (client) dy data-reactid="4">Hello world</body></\n' +
+        ' (server) dy data-reactid="4">Goodbye world</body>',
     );
@@ -217,3 +217,3 @@ describe('rendering React components at document', function() {
 
-  it('should throw on full document render w/ no markup', function() {
+  it('should throw on full document render w/ no markup', () => {
     expect(testDocument).not.toBeUndefined();
@@ -222,4 +222,4 @@ describe('rendering React components at document', function() {
 
-    var Component = React.createClass({
-      render: function() {
+    class Component extends React.Component {
+      render() {
         return (
@@ -234,4 +234,4 @@ describe('rendering React components at document', function() {
         );
-      },
-    });
+      }
+    }
 
@@ -239,7 +239,7 @@ describe('rendering React components at document', function() {
       ReactDOM.render(<Component />, container);
-    }).toThrow(
-      'You\'re trying to render a component to the document but you didn\'t ' +
-      'use server rendering. We can\'t do this without using server ' +
-      'rendering due to cross-browser quirks. See ' +
-      'ReactDOMServer.renderToString() for server rendering.'
+    }).toThrowError(
+      "You're trying to render a component to the document but you didn't " +
+        "use server rendering. We can't do this without using server " +
+        'rendering due to cross-browser quirks. See ' +
+        'ReactDOMServer.renderToString() for server rendering.',
     );
@@ -247,4 +247,4 @@ describe('rendering React components at document', function() {
 
-  it('supports findDOMNode on full-page components', function() {
-    var tree =
+  it('supports findDOMNode on full-page components', () => {
+    var tree = (
       <html>
@@ -256,3 +256,4 @@ describe('rendering React components at document', function() {
         </body>
-      </html>;
+      </html>
+    );
 
diff --git a/src/renderers/dom/client/__tests__/findDOMNode-test.js b/src/renderers/dom/client/__tests__/findDOMNode-test.js
index 1f861dd34..502e24fe7 100644
--- a/src/renderers/dom/client/__tests__/findDOMNode-test.js
+++ b/src/renderers/dom/client/__tests__/findDOMNode-test.js
@@ -17,4 +17,4 @@ var ReactTestUtils = require('ReactTestUtils');
 
-describe('findDOMNode', function() {
-  it('findDOMNode should return null if passed null', function() {
+describe('findDOMNode', () => {
+  it('findDOMNode should return null if passed null', () => {
     expect(ReactDOM.findDOMNode(null)).toBe(null);
@@ -22,8 +22,8 @@ describe('findDOMNode', function() {
 
-  it('findDOMNode should find dom element', function() {
-    var MyNode = React.createClass({
-      render: function() {
+  it('findDOMNode should find dom element', () => {
+    class MyNode extends React.Component {
+      render() {
         return <div><span>Noise</span></div>;
-      },
-    });
+      }
+    }
 
@@ -36,7 +36,7 @@ describe('findDOMNode', function() {
 
-  it('findDOMNode should reject random objects', function() {
+  it('findDOMNode should reject random objects', () => {
     expect(function() {
       ReactDOM.findDOMNode({foo: 'bar'});
-    }).toThrow(
-      'Element appears to be neither ReactComponent nor DOMNode (keys: foo)'
+    }).toThrowError(
+      'Element appears to be neither ReactComponent nor DOMNode (keys: foo)',
     );
@@ -44,8 +44,8 @@ describe('findDOMNode', function() {
 
-  it('findDOMNode should reject unmounted objects with render func', function() {
-    var Foo = React.createClass({
-      render: function() {
+  it('findDOMNode should reject unmounted objects with render func', () => {
+    class Foo extends React.Component {
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
@@ -55,4 +55,4 @@ describe('findDOMNode', function() {
 
-    expect(() => ReactDOM.findDOMNode(inst)).toThrow(
-      'findDOMNode was called on an unmounted component.'
+    expect(() => ReactDOM.findDOMNode(inst)).toThrowError(
+      'findDOMNode was called on an unmounted component.',
     );
@@ -60,15 +60,15 @@ describe('findDOMNode', function() {
 
-  it('findDOMNode should not throw an error when called within a component that is not mounted', function() {
-    var Bar = React.createClass({
-      componentWillMount: function() {
+  it('findDOMNode should not throw an error when called within a component that is not mounted', () => {
+    class Bar extends React.Component {
+      componentWillMount() {
         expect(ReactDOM.findDOMNode(this)).toBeNull();
-      },
-      render: function() {
-        return <div/>;
-      },
-    });
+      }
 
-    expect(() => ReactTestUtils.renderIntoDocument(<Bar/>)).not.toThrow();
-  });
+      render() {
+        return <div />;
+      }
+    }
 
+    expect(() => ReactTestUtils.renderIntoDocument(<Bar />)).not.toThrow();
+  });
 });
diff --git a/src/renderers/dom/client/__tests__/inputValueTracking-test.js b/src/renderers/dom/client/__tests__/inputValueTracking-test.js
new file mode 100644
index 000000000..103964cc1
--- /dev/null
+++ b/src/renderers/dom/client/__tests__/inputValueTracking-test.js
@@ -0,0 +1,158 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+'use strict';
+
+var React = require('React');
+var ReactTestUtils = require('ReactTestUtils');
+var inputValueTracking = require('inputValueTracking');
+
+describe('inputValueTracking', function() {
+  var input, checkbox, mockComponent;
+
+  beforeEach(function() {
+    input = document.createElement('input');
+    input.type = 'text';
+    checkbox = document.createElement('input');
+    checkbox.type = 'checkbox';
+    mockComponent = {_hostNode: input, _wrapperState: {}};
+  });
+
+  it('should attach tracker to wrapper state', function() {
+    inputValueTracking.track(mockComponent);
+
+    expect(mockComponent._wrapperState.hasOwnProperty('valueTracker')).toBe(
+      true,
+    );
+  });
+
+  it('should define `value` on the instance node', function() {
+    inputValueTracking.track(mockComponent);
+
+    expect(input.hasOwnProperty('value')).toBe(true);
+  });
+
+  it('should define `checked` on the instance node', function() {
+    mockComponent._hostNode = checkbox;
+    inputValueTracking.track(mockComponent);
+
+    expect(checkbox.hasOwnProperty('checked')).toBe(true);
+  });
+
+  it('should initialize with the current value', function() {
+    input.value = 'foo';
+
+    inputValueTracking.track(mockComponent);
+
+    var tracker = mockComponent._wrapperState.valueTracker;
+
+    expect(tracker.getValue()).toEqual('foo');
+  });
+
+  it('should initialize with the current `checked`', function() {
+    mockComponent._hostNode = checkbox;
+    checkbox.checked = true;
+    inputValueTracking.track(mockComponent);
+
+    var tracker = mockComponent._wrapperState.valueTracker;
+
+    expect(tracker.getValue()).toEqual('true');
+  });
+
+  it('should track value changes', function() {
+    input.value = 'foo';
+
+    inputValueTracking.track(mockComponent);
+
+    var tracker = mockComponent._wrapperState.valueTracker;
+
+    input.value = 'bar';
+    expect(tracker.getValue()).toEqual('bar');
+  });
+
+  it('should tracked`checked` changes', function() {
+    mockComponent._hostNode = checkbox;
+    checkbox.checked = true;
+    inputValueTracking.track(mockComponent);
+
+    var tracker = mockComponent._wrapperState.valueTracker;
+
+    checkbox.checked = false;
+    expect(tracker.getValue()).toEqual('false');
+  });
+
+  it('should update value manually', function() {
+    input.value = 'foo';
+    inputValueTracking.track(mockComponent);
+
+    var tracker = mockComponent._wrapperState.valueTracker;
+
+    tracker.setValue('bar');
+    expect(tracker.getValue()).toEqual('bar');
+  });
+
+  it('should coerce value to a string', function() {
+    input.value = 'foo';
+    inputValueTracking.track(mockComponent);
+
+    var tracker = mockComponent._wrapperState.valueTracker;
+
+    tracker.setValue(500);
+    expect(tracker.getValue()).toEqual('500');
+  });
+
+  it('should update value if it changed and return result', function() {
+    inputValueTracking.track(mockComponent);
+    input.value = 'foo';
+
+    var tracker = mockComponent._wrapperState.valueTracker;
+
+    expect(inputValueTracking.updateValueIfChanged(mockComponent)).toBe(false);
+
+    tracker.setValue('bar');
+
+    expect(inputValueTracking.updateValueIfChanged(mockComponent)).toBe(true);
+
+    expect(tracker.getValue()).toEqual('foo');
+  });
+
+  it('should track value and return true when updating untracked instance', function() {
+    input.value = 'foo';
+
+    expect(inputValueTracking.updateValueIfChanged(mockComponent)).toBe(true);
+
+    var tracker = mockComponent._wrapperState.valueTracker;
+    expect(tracker.getValue()).toEqual('foo');
+  });
+
+  it('should return tracker from node', function() {
+    var node = ReactTestUtils.renderIntoDocument(
+      <input type="text" defaultValue="foo" />,
+    );
+    var tracker = inputValueTracking._getTrackerFromNode(node);
+    expect(tracker.getValue()).toEqual('foo');
+  });
+
+  it('should stop tracking', function() {
+    inputValueTracking.track(mockComponent);
+
+    expect(mockComponent._wrapperState.hasOwnProperty('valueTracker')).toBe(
+      true,
+    );
+
+    inputValueTracking.stopTracking(mockComponent);
+
+    expect(mockComponent._wrapperState.hasOwnProperty('valueTracker')).toBe(
+      false,
+    );
+
+    expect(input.hasOwnProperty('value')).toBe(false);
+  });
+});
diff --git a/src/renderers/dom/client/__tests__/validateDOMNesting-test.js b/src/renderers/dom/client/__tests__/validateDOMNesting-test.js
index e0bdfe959..97aac29a5 100644
--- a/src/renderers/dom/client/__tests__/validateDOMNesting-test.js
+++ b/src/renderers/dom/client/__tests__/validateDOMNesting-test.js
@@ -17,12 +17,85 @@ var validateDOMNesting;
 var specialTags = [
-  'address', 'applet', 'area', 'article', 'aside', 'base', 'basefont',
-  'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col',
-  'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset',
-  'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2',
-  'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe',
-  'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu',
-  'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol',
-  'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source',
-  'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot',
-  'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp',
+  'address',
+  'applet',
+  'area',
+  'article',
+  'aside',
+  'base',
+  'basefont',
+  'bgsound',
+  'blockquote',
+  'body',
+  'br',
+  'button',
+  'caption',
+  'center',
+  'col',
+  'colgroup',
+  'dd',
+  'details',
+  'dir',
+  'div',
+  'dl',
+  'dt',
+  'embed',
+  'fieldset',
+  'figcaption',
+  'figure',
+  'footer',
+  'form',
+  'frame',
+  'frameset',
+  'h1',
+  'h2',
+  'h3',
+  'h4',
+  'h5',
+  'h6',
+  'head',
+  'header',
+  'hgroup',
+  'hr',
+  'html',
+  'iframe',
+  'img',
+  'input',
+  'isindex',
+  'li',
+  'link',
+  'listing',
+  'main',
+  'marquee',
+  'menu',
+  'menuitem',
+  'meta',
+  'nav',
+  'noembed',
+  'noframes',
+  'noscript',
+  'object',
+  'ol',
+  'p',
+  'param',
+  'plaintext',
+  'pre',
+  'script',
+  'section',
+  'select',
+  'source',
+  'style',
+  'summary',
+  'table',
+  'tbody',
+  'td',
+  'template',
+  'textarea',
+  'tfoot',
+  'th',
+  'thead',
+  'title',
+  'tr',
+  'track',
+  'ul',
+  'wbr',
+  'xmp',
 ];
@@ -31,4 +104,16 @@ var specialTags = [
 var formattingTags = [
-  'a', 'b', 'big', 'code', 'em', 'font', 'i', 'nobr', 's', 'small', 'strike',
-  'strong', 'tt', 'u',
+  'a',
+  'b',
+  'big',
+  'code',
+  'em',
+  'font',
+  'i',
+  'nobr',
+  's',
+  'small',
+  'strike',
+  'strong',
+  'tt',
+  'u',
 ];
@@ -41,4 +126,7 @@ function isTagStackValid(stack) {
     }
-    ancestorInfo =
-      validateDOMNesting.updatedAncestorInfo(ancestorInfo, stack[i], null);
+    ancestorInfo = validateDOMNesting.updatedAncestorInfo(
+      ancestorInfo,
+      stack[i],
+      null,
+    );
   }
@@ -47,4 +135,4 @@ function isTagStackValid(stack) {
 
-describe('ReactContextValidator', function() {
-  beforeEach(function() {
+describe('ReactContextValidator', () => {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -54,3 +142,3 @@ describe('ReactContextValidator', function() {
 
-  it('allows any tag with no context', function() {
+  it('allows any tag with no context', () => {
     // With renderToString (for example), we don't know where we're mounting the
@@ -63,3 +151,3 @@ describe('ReactContextValidator', function() {
 
-  it('allows valid nestings', function() {
+  it('allows valid nestings', () => {
     expect(isTagStackValid(['table', 'tbody', 'tr', 'td', 'b'])).toBe(true);
@@ -78,3 +166,3 @@ describe('ReactContextValidator', function() {
 
-  it('prevents problematic nestings', function() {
+  it('prevents problematic nestings', () => {
     expect(isTagStackValid(['a', 'a'])).toBe(false);
@@ -85,2 +173,4 @@ describe('ReactContextValidator', function() {
     expect(isTagStackValid(['div', 'html'])).toBe(false);
+    expect(isTagStackValid(['body', 'body'])).toBe(false);
+    expect(isTagStackValid(['svg', 'foreignObject', 'body', 'p'])).toBe(false);
   });
diff --git a/src/renderers/dom/client/eventPlugins/BeforeInputEventPlugin.js b/src/renderers/dom/client/eventPlugins/BeforeInputEventPlugin.js
index 794e13661..5f0df7e47 100644
--- a/src/renderers/dom/client/eventPlugins/BeforeInputEventPlugin.js
+++ b/src/renderers/dom/client/eventPlugins/BeforeInputEventPlugin.js
@@ -13,3 +13,2 @@
 
-var EventConstants = require('EventConstants');
 var EventPropagators = require('EventPropagators');
@@ -20,3 +19,3 @@ var SyntheticInputEvent = require('SyntheticInputEvent');
 
-var keyOf = require('keyOf');
+import type {TopLevelTypes} from 'EventConstants';
 
@@ -25,6 +24,4 @@ var START_KEYCODE = 229;
 
-var canUseCompositionEvent = (
-  ExecutionEnvironment.canUseDOM &&
-  'CompositionEvent' in window
-);
+var canUseCompositionEvent =
+  ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
 
@@ -38,3 +35,3 @@ if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
 // useful, so we don't use it.
-var canUseTextInputEvent = (
+var canUseTextInputEvent =
   ExecutionEnvironment.canUseDOM &&
@@ -42,4 +39,3 @@ var canUseTextInputEvent = (
   !documentMode &&
-  !isPresto()
-);
+  !isPresto();
 
@@ -48,9 +44,6 @@ var canUseTextInputEvent = (
 // spaces, for instance (\u3000) are not recorded correctly.
-var useFallbackCompositionData = (
+var useFallbackCompositionData =
   ExecutionEnvironment.canUseDOM &&
-  (
-    !canUseCompositionEvent ||
-    (documentMode && documentMode > 8 && documentMode <= 11)
-  )
-);
+  (!canUseCompositionEvent ||
+    (documentMode && documentMode > 8 && documentMode <= 11));
 
@@ -72,4 +65,2 @@ var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
 
-var topLevelTypes = EventConstants.topLevelTypes;
-
 // Events and their corresponding property names.
@@ -78,10 +69,10 @@ var eventTypes = {
     phasedRegistrationNames: {
-      bubbled: keyOf({onBeforeInput: null}),
-      captured: keyOf({onBeforeInputCapture: null}),
+      bubbled: 'onBeforeInput',
+      captured: 'onBeforeInputCapture',
     },
     dependencies: [
-      topLevelTypes.topCompositionEnd,
-      topLevelTypes.topKeyPress,
-      topLevelTypes.topTextInput,
-      topLevelTypes.topPaste,
+      'topCompositionEnd',
+      'topKeyPress',
+      'topTextInput',
+      'topPaste',
     ],
@@ -90,12 +81,12 @@ var eventTypes = {
     phasedRegistrationNames: {
-      bubbled: keyOf({onCompositionEnd: null}),
-      captured: keyOf({onCompositionEndCapture: null}),
+      bubbled: 'onCompositionEnd',
+      captured: 'onCompositionEndCapture',
     },
     dependencies: [
-      topLevelTypes.topBlur,
-      topLevelTypes.topCompositionEnd,
-      topLevelTypes.topKeyDown,
-      topLevelTypes.topKeyPress,
-      topLevelTypes.topKeyUp,
-      topLevelTypes.topMouseDown,
+      'topBlur',
+      'topCompositionEnd',
+      'topKeyDown',
+      'topKeyPress',
+      'topKeyUp',
+      'topMouseDown',
     ],
@@ -104,12 +95,12 @@ var eventTypes = {
     phasedRegistrationNames: {
-      bubbled: keyOf({onCompositionStart: null}),
-      captured: keyOf({onCompositionStartCapture: null}),
+      bubbled: 'onCompositionStart',
+      captured: 'onCompositionStartCapture',
     },
     dependencies: [
-      topLevelTypes.topBlur,
-      topLevelTypes.topCompositionStart,
-      topLevelTypes.topKeyDown,
-      topLevelTypes.topKeyPress,
-      topLevelTypes.topKeyUp,
-      topLevelTypes.topMouseDown,
+      'topBlur',
+      'topCompositionStart',
+      'topKeyDown',
+      'topKeyPress',
+      'topKeyUp',
+      'topMouseDown',
     ],
@@ -118,12 +109,12 @@ var eventTypes = {
     phasedRegistrationNames: {
-      bubbled: keyOf({onCompositionUpdate: null}),
-      captured: keyOf({onCompositionUpdateCapture: null}),
+      bubbled: 'onCompositionUpdate',
+      captured: 'onCompositionUpdateCapture',
     },
     dependencies: [
-      topLevelTypes.topBlur,
-      topLevelTypes.topCompositionUpdate,
-      topLevelTypes.topKeyDown,
-      topLevelTypes.topKeyPress,
-      topLevelTypes.topKeyUp,
-      topLevelTypes.topMouseDown,
+      'topBlur',
+      'topCompositionUpdate',
+      'topKeyDown',
+      'topKeyPress',
+      'topKeyUp',
+      'topMouseDown',
     ],
@@ -148,3 +139,2 @@ function isKeypressCommand(nativeEvent) {
 
-
 /**
@@ -157,7 +147,7 @@ function getCompositionEventType(topLevelType) {
   switch (topLevelType) {
-    case topLevelTypes.topCompositionStart:
+    case 'topCompositionStart':
       return eventTypes.compositionStart;
-    case topLevelTypes.topCompositionEnd:
+    case 'topCompositionEnd':
       return eventTypes.compositionEnd;
-    case topLevelTypes.topCompositionUpdate:
+    case 'topCompositionUpdate':
       return eventTypes.compositionUpdate;
@@ -175,6 +165,3 @@ function getCompositionEventType(topLevelType) {
 function isFallbackCompositionStart(topLevelType, nativeEvent) {
-  return (
-    topLevelType === topLevelTypes.topKeyDown &&
-    nativeEvent.keyCode === START_KEYCODE
-  );
+  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;
 }
@@ -190,12 +177,12 @@ function isFallbackCompositionEnd(topLevelType, nativeEvent) {
   switch (topLevelType) {
-    case topLevelTypes.topKeyUp:
+    case 'topKeyUp':
       // Command keys insert or clear IME input.
-      return (END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1);
-    case topLevelTypes.topKeyDown:
+      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
+    case 'topKeyDown':
       // Expect IME keyCode on each keydown. If we get any other
       // code we must have exited earlier.
-      return (nativeEvent.keyCode !== START_KEYCODE);
-    case topLevelTypes.topKeyPress:
-    case topLevelTypes.topMouseDown:
-    case topLevelTypes.topBlur:
+      return nativeEvent.keyCode !== START_KEYCODE;
+    case 'topKeyPress':
+    case 'topMouseDown':
+    case 'topBlur':
       // Events are not possible without cancelling IME.
@@ -234,3 +221,3 @@ function extractCompositionEvent(
   nativeEvent,
-  nativeEventTarget
+  nativeEventTarget,
 ) {
@@ -257,4 +244,5 @@ function extractCompositionEvent(
     if (!currentComposition && eventType === eventTypes.compositionStart) {
-      currentComposition =
-        FallbackCompositionState.getPooled(nativeEventTarget);
+      currentComposition = FallbackCompositionState.getPooled(
+        nativeEventTarget,
+      );
     } else if (eventType === eventTypes.compositionEnd) {
@@ -270,3 +258,3 @@ function extractCompositionEvent(
     nativeEvent,
-    nativeEventTarget
+    nativeEventTarget,
   );
@@ -293,7 +281,7 @@ function extractCompositionEvent(
  */
-function getNativeBeforeInputChars(topLevelType, nativeEvent) {
+function getNativeBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {
   switch (topLevelType) {
-    case topLevelTypes.topCompositionEnd:
+    case 'topCompositionEnd':
       return getDataFromCustomEvent(nativeEvent);
-    case topLevelTypes.topKeyPress:
+    case 'topKeyPress':
       /**
@@ -320,3 +308,3 @@ function getNativeBeforeInputChars(topLevelType, nativeEvent) {
 
-    case topLevelTypes.topTextInput:
+    case 'topTextInput':
       // Record the characters to be added to the DOM.
@@ -347,9 +335,12 @@ function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  */
-function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
+function getFallbackBeforeInputChars(topLevelType: TopLevelTypes, nativeEvent) {
   // If we are currently composing (IME) and using a fallback to do so,
   // try to extract the composed characters from the fallback object.
+  // If composition event is available, we extract a string only at
+  // compositionevent, otherwise extract it at fallback events.
   if (currentComposition) {
     if (
-      topLevelType === topLevelTypes.topCompositionEnd ||
-      isFallbackCompositionEnd(topLevelType, nativeEvent)
+      topLevelType === 'topCompositionEnd' ||
+      (!canUseCompositionEvent &&
+        isFallbackCompositionEnd(topLevelType, nativeEvent))
     ) {
@@ -364,3 +355,3 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
   switch (topLevelType) {
-    case topLevelTypes.topPaste:
+    case 'topPaste':
       // If a paste event occurs after a keypress, throw out the input
@@ -368,3 +359,3 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
       return null;
-    case topLevelTypes.topKeyPress:
+    case 'topKeyPress':
       /**
@@ -389,3 +380,3 @@ function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
       return null;
-    case topLevelTypes.topCompositionEnd:
+    case 'topCompositionEnd':
       return useFallbackCompositionData ? null : nativeEvent.data;
@@ -406,3 +397,3 @@ function extractBeforeInputEvent(
   nativeEvent,
-  nativeEventTarget
+  nativeEventTarget,
 ) {
@@ -426,3 +417,3 @@ function extractBeforeInputEvent(
     nativeEvent,
-    nativeEventTarget
+    nativeEventTarget,
   );
@@ -453,3 +444,2 @@ function extractBeforeInputEvent(
 var BeforeInputEventPlugin = {
-
   eventTypes: eventTypes,
@@ -460,3 +450,3 @@ var BeforeInputEventPlugin = {
     nativeEvent,
-    nativeEventTarget
+    nativeEventTarget,
   ) {
@@ -467,3 +457,3 @@ var BeforeInputEventPlugin = {
         nativeEvent,
-        nativeEventTarget
+        nativeEventTarget,
       ),
@@ -473,3 +463,3 @@ var BeforeInputEventPlugin = {
         nativeEvent,
-        nativeEventTarget
+        nativeEventTarget,
       ),
diff --git a/src/renderers/dom/client/eventPlugins/ChangeEventPlugin.js b/src/renderers/dom/client/eventPlugins/ChangeEventPlugin.js
index 1a6855d28..473aef515 100644
--- a/src/renderers/dom/client/eventPlugins/ChangeEventPlugin.js
+++ b/src/renderers/dom/client/eventPlugins/ChangeEventPlugin.js
@@ -13,3 +13,2 @@
 
-var EventConstants = require('EventConstants');
 var EventPluginHub = require('EventPluginHub');
@@ -21,2 +20,3 @@ var SyntheticEvent = require('SyntheticEvent');
 
+var inputValueTracking = require('inputValueTracking');
 var getEventTarget = require('getEventTarget');
@@ -24,5 +24,2 @@ var isEventSupported = require('isEventSupported');
 var isTextInputElement = require('isTextInputElement');
-var keyOf = require('keyOf');
-
-var topLevelTypes = EventConstants.topLevelTypes;
 
@@ -31,14 +28,14 @@ var eventTypes = {
     phasedRegistrationNames: {
-      bubbled: keyOf({onChange: null}),
-      captured: keyOf({onChangeCapture: null}),
+      bubbled: 'onChange',
+      captured: 'onChangeCapture',
     },
     dependencies: [
-      topLevelTypes.topBlur,
-      topLevelTypes.topChange,
-      topLevelTypes.topClick,
-      topLevelTypes.topFocus,
-      topLevelTypes.topInput,
-      topLevelTypes.topKeyDown,
-      topLevelTypes.topKeyUp,
-      topLevelTypes.topSelectionChange,
+      'topBlur',
+      'topChange',
+      'topClick',
+      'topFocus',
+      'topInput',
+      'topKeyDown',
+      'topKeyUp',
+      'topSelectionChange',
     ],
@@ -47,2 +44,13 @@ var eventTypes = {
 
+function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
+  var event = SyntheticEvent.getPooled(
+    eventTypes.change,
+    inst,
+    nativeEvent,
+    target,
+  );
+  event.type = 'change';
+  EventPropagators.accumulateTwoPhaseDispatches(event);
+  return event;
+}
 /**
@@ -52,4 +60,2 @@ var activeElement = null;
 var activeElementInst = null;
-var activeElementValue = null;
-var activeElementValueProp = null;
 
@@ -61,4 +67,3 @@ function shouldUseChangeEvent(elem) {
   return (
-    nodeName === 'select' ||
-    (nodeName === 'input' && elem.type === 'file')
+    nodeName === 'select' || (nodeName === 'input' && elem.type === 'file')
   );
@@ -69,5 +74,5 @@ if (ExecutionEnvironment.canUseDOM) {
   // See `handleChange` comment below
-  doesChangeEventBubble = isEventSupported('change') && (
-    !('documentMode' in document) || document.documentMode > 8
-  );
+  doesChangeEventBubble =
+    isEventSupported('change') &&
+    (!document.documentMode || document.documentMode > 8);
 }
@@ -75,9 +80,7 @@ if (ExecutionEnvironment.canUseDOM) {
 function manualDispatchChangeEvent(nativeEvent) {
-  var event = SyntheticEvent.getPooled(
-    eventTypes.change,
+  var event = createAndAccumulateChangeEvent(
     activeElementInst,
     nativeEvent,
-    getEventTarget(nativeEvent)
+    getEventTarget(nativeEvent),
   );
-  EventPropagators.accumulateTwoPhaseDispatches(event);
 
@@ -117,7 +120,9 @@ function stopWatchingForChangeEventIE8() {
 
-function getTargetInstForChangeEvent(
-  topLevelType,
-  targetInst
-) {
-  if (topLevelType === topLevelTypes.topChange) {
+function getInstIfValueChanged(targetInst, nativeEvent) {
+  var updated = inputValueTracking.updateValueIfChanged(targetInst);
+  var simulated =
+    nativeEvent.simulated === true &&
+    ChangeEventPlugin._allowSimulatedPassThrough;
+
+  if (updated || simulated) {
     return targetInst;
@@ -125,8 +130,11 @@ function getTargetInstForChangeEvent(
 }
-function handleEventsForChangeEventIE8(
-  topLevelType,
-  target,
-  targetInst
-) {
-  if (topLevelType === topLevelTypes.topFocus) {
+
+function getTargetInstForChangeEvent(topLevelType, targetInst) {
+  if (topLevelType === 'topChange') {
+    return targetInst;
+  }
+}
+
+function handleEventsForChangeEventIE8(topLevelType, target, targetInst) {
+  if (topLevelType === 'topFocus') {
     // stopWatching() should be a noop here but we call it just in case we
@@ -135,3 +143,3 @@ function handleEventsForChangeEventIE8(
     startWatchingForChangeEventIE8(target, targetInst);
-  } else if (topLevelType === topLevelTypes.topBlur) {
+  } else if (topLevelType === 'topBlur') {
     stopWatchingForChangeEventIE8();
@@ -140,3 +148,2 @@ function handleEventsForChangeEventIE8(
 
-
 /**
@@ -148,26 +155,10 @@ if (ExecutionEnvironment.canUseDOM) {
   // deleting text, so we ignore its input events.
-  // IE10+ fire input events to often, such when a placeholder
-  // changes or when an input with a placeholder is focused.
-  isInputEventSupported = isEventSupported('input') && (
-    !('documentMode' in document) || document.documentMode > 11
-  );
-}
 
-/**
- * (For IE <=11) Replacement getter/setter for the `value` property that gets
- * set on the active element.
- */
-var newValueProp = {
-  get: function() {
-    return activeElementValueProp.get.call(this);
-  },
-  set: function(val) {
-    // Cast to a string so we can do equality checks.
-    activeElementValue = '' + val;
-    activeElementValueProp.set.call(this, val);
-  },
-};
+  isInputEventSupported =
+    isEventSupported('input') &&
+    (!('documentMode' in document) || document.documentMode > 9);
+}
 
 /**
- * (For IE <=11) Starts tracking propertychange events on the passed-in element
+ * (For IE <=9) Starts tracking propertychange events on the passed-in element
  * and override the value property so that we can distinguish user events from
@@ -178,16 +169,3 @@ function startWatchingForValueChange(target, targetInst) {
   activeElementInst = targetInst;
-  activeElementValue = target.value;
-  activeElementValueProp = Object.getOwnPropertyDescriptor(
-    target.constructor.prototype,
-    'value'
-  );
-
-  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
-  // on DOM elements
-  Object.defineProperty(activeElement, 'value', newValueProp);
-  if (activeElement.attachEvent) {
-    activeElement.attachEvent('onpropertychange', handlePropertyChange);
-  } else {
-    activeElement.addEventListener('propertychange', handlePropertyChange, false);
-  }
+  activeElement.attachEvent('onpropertychange', handlePropertyChange);
 }
@@ -195,3 +173,3 @@ function startWatchingForValueChange(target, targetInst) {
 /**
- * (For IE <=11) Removes the event listeners from the currently-tracked element,
+ * (For IE <=9) Removes the event listeners from the currently-tracked element,
  * if any exists.
@@ -202,11 +180,3 @@ function stopWatchingForValueChange() {
   }
-
-  // delete restores the original property definition
-  delete activeElement.value;
-
-  if (activeElement.detachEvent) {
-    activeElement.detachEvent('onpropertychange', handlePropertyChange);
-  } else {
-    activeElement.removeEventListener('propertychange', handlePropertyChange, false);
-  }
+  activeElement.detachEvent('onpropertychange', handlePropertyChange);
 
@@ -214,4 +184,2 @@ function stopWatchingForValueChange() {
   activeElementInst = null;
-  activeElementValue = null;
-  activeElementValueProp = null;
 }
@@ -219,3 +187,3 @@ function stopWatchingForValueChange() {
 /**
- * (For IE <=11) Handles a propertychange event, sending a `change` event if
+ * (For IE <=9) Handles a propertychange event, sending a `change` event if
  * the value of the active element has changed.
@@ -226,22 +194,4 @@ function handlePropertyChange(nativeEvent) {
   }
-  var value = nativeEvent.srcElement.value;
-  if (value === activeElementValue) {
-    return;
-  }
-  activeElementValue = value;
-
-  manualDispatchChangeEvent(nativeEvent);
-}
-
-/**
- * If a `change` event should be fired, returns the target's ID.
- */
-function getTargetInstForInputEvent(
-  topLevelType,
-  targetInst
-) {
-  if (topLevelType === topLevelTypes.topInput) {
-    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
-    // what we want so fall through here and trigger an abstract event
-    return targetInst;
+  if (getInstIfValueChanged(activeElementInst, nativeEvent)) {
+    manualDispatchChangeEvent(nativeEvent);
   }
@@ -249,8 +199,4 @@ function getTargetInstForInputEvent(
 
-function handleEventsForInputEventIE(
-  topLevelType,
-  target,
-  targetInst
-) {
-  if (topLevelType === topLevelTypes.topFocus) {
+function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
+  if (topLevelType === 'topFocus') {
     // In IE8, we can capture almost all .value changes by adding a
@@ -258,3 +204,3 @@ function handleEventsForInputEventIE(
     // equal to 'value'
-    // In IE9-11, propertychange fires for most input events but is buggy and
+    // In IE9, propertychange fires for most input events but is buggy and
     // doesn't fire when text is deleted, but conveniently, selectionchange
@@ -270,3 +216,3 @@ function handleEventsForInputEventIE(
     startWatchingForValueChange(target, targetInst);
-  } else if (topLevelType === topLevelTypes.topBlur) {
+  } else if (topLevelType === 'topBlur') {
     stopWatchingForValueChange();
@@ -276,9 +222,12 @@ function handleEventsForInputEventIE(
 // For IE8 and IE9.
-function getTargetInstForInputEventIE(
+function getTargetInstForInputEventPolyfill(
   topLevelType,
-  targetInst
+  targetInst,
+  nativeEvent,
 ) {
-  if (topLevelType === topLevelTypes.topSelectionChange ||
-      topLevelType === topLevelTypes.topKeyUp ||
-      topLevelType === topLevelTypes.topKeyDown) {
+  if (
+    topLevelType === 'topSelectionChange' ||
+    topLevelType === 'topKeyUp' ||
+    topLevelType === 'topKeyDown'
+  ) {
     // On the selectionchange event, the target is just document which isn't
@@ -293,6 +242,3 @@ function getTargetInstForInputEventIE(
     // fire selectionchange normally.
-    if (activeElement && activeElement.value !== activeElementValue) {
-      activeElementValue = activeElement.value;
-      return activeElementInst;
-    }
+    return getInstIfValueChanged(activeElementInst, nativeEvent);
   }
@@ -300,3 +246,2 @@ function getTargetInstForInputEventIE(
 
-
 /**
@@ -308,4 +253,6 @@ function shouldUseClickEvent(elem) {
   // until `blur` in IE8.
+  var nodeName = elem.nodeName;
   return (
-    (elem.nodeName && elem.nodeName.toLowerCase() === 'input') &&
+    nodeName &&
+    nodeName.toLowerCase() === 'input' &&
     (elem.type === 'checkbox' || elem.type === 'radio')
@@ -314,8 +261,35 @@ function shouldUseClickEvent(elem) {
 
-function getTargetInstForClickEvent(
+function getTargetInstForClickEvent(topLevelType, targetInst, nativeEvent) {
+  if (topLevelType === 'topClick') {
+    return getInstIfValueChanged(targetInst, nativeEvent);
+  }
+}
+
+function getTargetInstForInputOrChangeEvent(
   topLevelType,
-  targetInst
+  targetInst,
+  nativeEvent,
 ) {
-  if (topLevelType === topLevelTypes.topClick) {
-    return targetInst;
+  if (topLevelType === 'topInput' || topLevelType === 'topChange') {
+    return getInstIfValueChanged(targetInst, nativeEvent);
+  }
+}
+
+function handleControlledInputBlur(inst, node) {
+  // TODO: In IE, inst is occasionally null. Why?
+  if (inst == null) {
+    return;
+  }
+
+  // Fiber and ReactDOM keep wrapper state in separate places
+  let state = inst._wrapperState || node._wrapperState;
+
+  if (!state || !state.controlled || node.type !== 'number') {
+    return;
+  }
+
+  // If controlled, assign the value attribute to the current value on blur
+  let value = '' + node.value;
+  if (node.getAttribute('value') !== value) {
+    node.setAttribute('value', value);
   }
@@ -334,5 +308,7 @@ function getTargetInstForClickEvent(
 var ChangeEventPlugin = {
-
   eventTypes: eventTypes,
 
+  _allowSimulatedPassThrough: true,
+  _isInputEventSupported: isInputEventSupported,
+
   extractEvents: function(
@@ -341,6 +317,7 @@ var ChangeEventPlugin = {
     nativeEvent,
-    nativeEventTarget
+    nativeEventTarget,
   ) {
-    var targetNode = targetInst ?
-      ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
+    var targetNode = targetInst
+      ? ReactDOMComponentTree.getNodeFromInstance(targetInst)
+      : window;
 
@@ -355,6 +332,6 @@ var ChangeEventPlugin = {
       if (isInputEventSupported) {
-        getTargetInstFunc = getTargetInstForInputEvent;
+        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
       } else {
-        getTargetInstFunc = getTargetInstForInputEventIE;
-        handleEventFunc = handleEventsForInputEventIE;
+        getTargetInstFunc = getTargetInstForInputEventPolyfill;
+        handleEventFunc = handleEventsForInputEventPolyfill;
       }
@@ -365,12 +342,9 @@ var ChangeEventPlugin = {
     if (getTargetInstFunc) {
-      var inst = getTargetInstFunc(topLevelType, targetInst);
+      var inst = getTargetInstFunc(topLevelType, targetInst, nativeEvent);
       if (inst) {
-        var event = SyntheticEvent.getPooled(
-          eventTypes.change,
+        var event = createAndAccumulateChangeEvent(
           inst,
           nativeEvent,
-          nativeEventTarget
+          nativeEventTarget,
         );
-        event.type = 'change';
-        EventPropagators.accumulateTwoPhaseDispatches(event);
         return event;
@@ -380,10 +354,10 @@ var ChangeEventPlugin = {
     if (handleEventFunc) {
-      handleEventFunc(
-        topLevelType,
-        targetNode,
-        targetInst
-      );
+      handleEventFunc(topLevelType, targetNode, targetInst);
     }
-  },
 
+    // When blurring, set the value attribute for number inputs
+    if (topLevelType === 'topBlur') {
+      handleControlledInputBlur(targetInst, targetNode);
+    }
+  },
 };
diff --git a/src/renderers/dom/client/eventPlugins/DefaultEventPluginOrder.js b/src/renderers/dom/client/eventPlugins/DefaultEventPluginOrder.js
index a57172105..a04c61244 100644
--- a/src/renderers/dom/client/eventPlugins/DefaultEventPluginOrder.js
+++ b/src/renderers/dom/client/eventPlugins/DefaultEventPluginOrder.js
@@ -13,4 +13,2 @@
 
-var keyOf = require('keyOf');
-
 /**
@@ -25,9 +23,9 @@ var keyOf = require('keyOf');
 var DefaultEventPluginOrder = [
-  keyOf({ResponderEventPlugin: null}),
-  keyOf({SimpleEventPlugin: null}),
-  keyOf({TapEventPlugin: null}),
-  keyOf({EnterLeaveEventPlugin: null}),
-  keyOf({ChangeEventPlugin: null}),
-  keyOf({SelectEventPlugin: null}),
-  keyOf({BeforeInputEventPlugin: null}),
+  'ResponderEventPlugin',
+  'SimpleEventPlugin',
+  'TapEventPlugin',
+  'EnterLeaveEventPlugin',
+  'ChangeEventPlugin',
+  'SelectEventPlugin',
+  'BeforeInputEventPlugin',
 ];
diff --git a/src/renderers/dom/client/eventPlugins/EnterLeaveEventPlugin.js b/src/renderers/dom/client/eventPlugins/EnterLeaveEventPlugin.js
index d50b0d370..fa9925f14 100644
--- a/src/renderers/dom/client/eventPlugins/EnterLeaveEventPlugin.js
+++ b/src/renderers/dom/client/eventPlugins/EnterLeaveEventPlugin.js
@@ -13,3 +13,2 @@
 
-var EventConstants = require('EventConstants');
 var EventPropagators = require('EventPropagators');
@@ -18,20 +17,10 @@ var SyntheticMouseEvent = require('SyntheticMouseEvent');
 
-var keyOf = require('keyOf');
-
-var topLevelTypes = EventConstants.topLevelTypes;
-
 var eventTypes = {
   mouseEnter: {
-    registrationName: keyOf({onMouseEnter: null}),
-    dependencies: [
-      topLevelTypes.topMouseOut,
-      topLevelTypes.topMouseOver,
-    ],
+    registrationName: 'onMouseEnter',
+    dependencies: ['topMouseOut', 'topMouseOver'],
   },
   mouseLeave: {
-    registrationName: keyOf({onMouseLeave: null}),
-    dependencies: [
-      topLevelTypes.topMouseOut,
-      topLevelTypes.topMouseOver,
-    ],
+    registrationName: 'onMouseLeave',
+    dependencies: ['topMouseOut', 'topMouseOver'],
   },
@@ -40,3 +29,2 @@ var eventTypes = {
 var EnterLeaveEventPlugin = {
-
   eventTypes: eventTypes,
@@ -54,10 +42,11 @@ var EnterLeaveEventPlugin = {
     nativeEvent,
-    nativeEventTarget
+    nativeEventTarget,
   ) {
-    if (topLevelType === topLevelTypes.topMouseOver &&
-        (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
+    if (
+      topLevelType === 'topMouseOver' &&
+      (nativeEvent.relatedTarget || nativeEvent.fromElement)
+    ) {
       return null;
     }
-    if (topLevelType !== topLevelTypes.topMouseOut &&
-        topLevelType !== topLevelTypes.topMouseOver) {
+    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {
       // Must not be a mouse in or mouse out - ignoring.
@@ -82,7 +71,8 @@ var EnterLeaveEventPlugin = {
     var to;
-    if (topLevelType === topLevelTypes.topMouseOut) {
+    if (topLevelType === 'topMouseOut') {
       from = targetInst;
       var related = nativeEvent.relatedTarget || nativeEvent.toElement;
-      to = related ?
-        ReactDOMComponentTree.getClosestInstanceFromNode(related) : null;
+      to = related
+        ? ReactDOMComponentTree.getClosestInstanceFromNode(related)
+        : null;
     } else {
@@ -98,6 +88,8 @@ var EnterLeaveEventPlugin = {
 
-    var fromNode =
-      from == null ? win : ReactDOMComponentTree.getNodeFromInstance(from);
-    var toNode =
-      to == null ? win : ReactDOMComponentTree.getNodeFromInstance(to);
+    var fromNode = from == null
+      ? win
+      : ReactDOMComponentTree.getNodeFromInstance(from);
+    var toNode = to == null
+      ? win
+      : ReactDOMComponentTree.getNodeFromInstance(to);
 
@@ -107,3 +99,3 @@ var EnterLeaveEventPlugin = {
       nativeEvent,
-      nativeEventTarget
+      nativeEventTarget,
     );
@@ -117,3 +109,3 @@ var EnterLeaveEventPlugin = {
       nativeEvent,
-      nativeEventTarget
+      nativeEventTarget,
     );
@@ -127,3 +119,2 @@ var EnterLeaveEventPlugin = {
   },
-
 };
diff --git a/src/renderers/dom/client/eventPlugins/SelectEventPlugin.js b/src/renderers/dom/client/eventPlugins/SelectEventPlugin.js
index 9aa84b213..8b89dc377 100644
--- a/src/renderers/dom/client/eventPlugins/SelectEventPlugin.js
+++ b/src/renderers/dom/client/eventPlugins/SelectEventPlugin.js
@@ -13,3 +13,2 @@
 
-var EventConstants = require('EventConstants');
 var EventPropagators = require('EventPropagators');
@@ -22,12 +21,8 @@ var getActiveElement = require('getActiveElement');
 var isTextInputElement = require('isTextInputElement');
-var keyOf = require('keyOf');
 var shallowEqual = require('shallowEqual');
 
-var topLevelTypes = EventConstants.topLevelTypes;
-
-var skipSelectionChangeEvent = (
+var skipSelectionChangeEvent =
   ExecutionEnvironment.canUseDOM &&
   'documentMode' in document &&
-  document.documentMode <= 11
-);
+  document.documentMode <= 11;
 
@@ -36,13 +31,14 @@ var eventTypes = {
     phasedRegistrationNames: {
-      bubbled: keyOf({onSelect: null}),
-      captured: keyOf({onSelectCapture: null}),
+      bubbled: 'onSelect',
+      captured: 'onSelectCapture',
     },
     dependencies: [
-      topLevelTypes.topBlur,
-      topLevelTypes.topContextMenu,
-      topLevelTypes.topFocus,
-      topLevelTypes.topKeyDown,
-      topLevelTypes.topMouseDown,
-      topLevelTypes.topMouseUp,
-      topLevelTypes.topSelectionChange,
+      'topBlur',
+      'topContextMenu',
+      'topFocus',
+      'topKeyDown',
+      'topKeyUp',
+      'topMouseDown',
+      'topMouseUp',
+      'topSelectionChange',
     ],
@@ -59,3 +55,2 @@ var mouseDown = false;
 var hasListener = false;
-var ON_SELECT_KEY = keyOf({onSelect: null});
 
@@ -71,4 +66,6 @@ var ON_SELECT_KEY = keyOf({onSelect: null});
 function getSelection(node) {
-  if ('selectionStart' in node &&
-      ReactInputSelection.hasSelectionCapabilities(node)) {
+  if (
+    'selectionStart' in node &&
+    ReactInputSelection.hasSelectionCapabilities(node)
+  ) {
     return {
@@ -107,5 +104,7 @@ function constructSelectEvent(nativeEvent, nativeEventTarget) {
   // won't dispatch.
-  if (mouseDown ||
-      activeElement == null ||
-      activeElement !== getActiveElement()) {
+  if (
+    mouseDown ||
+    activeElement == null ||
+    activeElement !== getActiveElement()
+  ) {
     return null;
@@ -122,3 +121,3 @@ function constructSelectEvent(nativeEvent, nativeEventTarget) {
       nativeEvent,
-      nativeEventTarget
+      nativeEventTarget,
     );
@@ -151,3 +150,2 @@ function constructSelectEvent(nativeEvent, nativeEventTarget) {
 var SelectEventPlugin = {
-
   eventTypes: eventTypes,
@@ -158,3 +156,3 @@ var SelectEventPlugin = {
     nativeEvent,
-    nativeEventTarget
+    nativeEventTarget,
   ) {
@@ -164,4 +162,5 @@ var SelectEventPlugin = {
 
-    var targetNode = targetInst ?
-      ReactDOMComponentTree.getNodeFromInstance(targetInst) : window;
+    var targetNode = targetInst
+      ? ReactDOMComponentTree.getNodeFromInstance(targetInst)
+      : window;
 
@@ -169,5 +168,7 @@ var SelectEventPlugin = {
       // Track the input node that has focus.
-      case topLevelTypes.topFocus:
-        if (isTextInputElement(targetNode) ||
-            targetNode.contentEditable === 'true') {
+      case 'topFocus':
+        if (
+          isTextInputElement(targetNode) ||
+          targetNode.contentEditable === 'true'
+        ) {
           activeElement = targetNode;
@@ -177,3 +178,3 @@ var SelectEventPlugin = {
         break;
-      case topLevelTypes.topBlur:
+      case 'topBlur':
         activeElement = null;
@@ -182,13 +183,11 @@ var SelectEventPlugin = {
         break;
-
       // Don't fire the event while the user is dragging. This matches the
       // semantics of the native select event.
-      case topLevelTypes.topMouseDown:
+      case 'topMouseDown':
         mouseDown = true;
         break;
-      case topLevelTypes.topContextMenu:
-      case topLevelTypes.topMouseUp:
+      case 'topContextMenu':
+      case 'topMouseUp':
         mouseDown = false;
         return constructSelectEvent(nativeEvent, nativeEventTarget);
-
       // Chrome and IE fire non-standard event when selection is changed (and
@@ -202,3 +201,3 @@ var SelectEventPlugin = {
       // This is also our approach for IE handling, for the reason above.
-      case topLevelTypes.topSelectionChange:
+      case 'topSelectionChange':
         if (skipSelectionChangeEvent) {
@@ -206,5 +205,5 @@ var SelectEventPlugin = {
         }
-        // falls through
-      case topLevelTypes.topKeyDown:
-      case topLevelTypes.topKeyUp:
+      // falls through
+      case 'topKeyDown':
+      case 'topKeyUp':
         return constructSelectEvent(nativeEvent, nativeEventTarget);
@@ -216,3 +215,3 @@ var SelectEventPlugin = {
   didPutListener: function(inst, registrationName, listener) {
-    if (registrationName === ON_SELECT_KEY) {
+    if (registrationName === 'onSelect') {
       hasListener = true;
diff --git a/src/renderers/dom/client/eventPlugins/SimpleEventPlugin.js b/src/renderers/dom/client/eventPlugins/SimpleEventPlugin.js
index f790e3fe9..6acaf74a5 100644
--- a/src/renderers/dom/client/eventPlugins/SimpleEventPlugin.js
+++ b/src/renderers/dom/client/eventPlugins/SimpleEventPlugin.js
@@ -9,2 +9,3 @@
  * @providesModule SimpleEventPlugin
+ * @flow
  */
@@ -13,3 +14,2 @@
 
-var EventConstants = require('EventConstants');
 var EventListener = require('EventListener');
@@ -32,457 +32,128 @@ var getEventCharCode = require('getEventCharCode');
 var invariant = require('invariant');
-var keyOf = require('keyOf');
 
-var topLevelTypes = EventConstants.topLevelTypes;
+import type {TopLevelTypes} from 'EventConstants';
+import type {
+  DispatchConfig,
+  ReactSyntheticEvent,
+} from 'ReactSyntheticEventType';
+import type {ReactInstance} from 'ReactInstanceType';
+import type {EventTypes, PluginModule} from 'PluginModuleType';
 
-var eventTypes = {
-  abort: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onAbort: true}),
-      captured: keyOf({onAbortCapture: true}),
-    },
-  },
-  animationEnd: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onAnimationEnd: true}),
-      captured: keyOf({onAnimationEndCapture: true}),
-    },
-  },
-  animationIteration: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onAnimationIteration: true}),
-      captured: keyOf({onAnimationIterationCapture: true}),
-    },
-  },
-  animationStart: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onAnimationStart: true}),
-      captured: keyOf({onAnimationStartCapture: true}),
-    },
-  },
-  blur: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onBlur: true}),
-      captured: keyOf({onBlurCapture: true}),
-    },
-  },
-  canPlay: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onCanPlay: true}),
-      captured: keyOf({onCanPlayCapture: true}),
-    },
-  },
-  canPlayThrough: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onCanPlayThrough: true}),
-      captured: keyOf({onCanPlayThroughCapture: true}),
-    },
-  },
-  click: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onClick: true}),
-      captured: keyOf({onClickCapture: true}),
-    },
-  },
-  contextMenu: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onContextMenu: true}),
-      captured: keyOf({onContextMenuCapture: true}),
-    },
-  },
-  copy: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onCopy: true}),
-      captured: keyOf({onCopyCapture: true}),
-    },
-  },
-  cut: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onCut: true}),
-      captured: keyOf({onCutCapture: true}),
-    },
-  },
-  doubleClick: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onDoubleClick: true}),
-      captured: keyOf({onDoubleClickCapture: true}),
-    },
-  },
-  drag: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onDrag: true}),
-      captured: keyOf({onDragCapture: true}),
-    },
-  },
-  dragEnd: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onDragEnd: true}),
-      captured: keyOf({onDragEndCapture: true}),
-    },
-  },
-  dragEnter: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onDragEnter: true}),
-      captured: keyOf({onDragEnterCapture: true}),
-    },
-  },
-  dragExit: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onDragExit: true}),
-      captured: keyOf({onDragExitCapture: true}),
-    },
-  },
-  dragLeave: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onDragLeave: true}),
-      captured: keyOf({onDragLeaveCapture: true}),
-    },
-  },
-  dragOver: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onDragOver: true}),
-      captured: keyOf({onDragOverCapture: true}),
-    },
-  },
-  dragStart: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onDragStart: true}),
-      captured: keyOf({onDragStartCapture: true}),
-    },
-  },
-  drop: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onDrop: true}),
-      captured: keyOf({onDropCapture: true}),
-    },
-  },
-  durationChange: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onDurationChange: true}),
-      captured: keyOf({onDurationChangeCapture: true}),
-    },
-  },
-  emptied: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onEmptied: true}),
-      captured: keyOf({onEmptiedCapture: true}),
-    },
-  },
-  encrypted: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onEncrypted: true}),
-      captured: keyOf({onEncryptedCapture: true}),
-    },
-  },
-  ended: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onEnded: true}),
-      captured: keyOf({onEndedCapture: true}),
-    },
-  },
-  error: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onError: true}),
-      captured: keyOf({onErrorCapture: true}),
-    },
-  },
-  focus: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onFocus: true}),
-      captured: keyOf({onFocusCapture: true}),
-    },
-  },
-  input: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onInput: true}),
-      captured: keyOf({onInputCapture: true}),
-    },
-  },
-  invalid: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onInvalid: true}),
-      captured: keyOf({onInvalidCapture: true}),
-    },
-  },
-  keyDown: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onKeyDown: true}),
-      captured: keyOf({onKeyDownCapture: true}),
-    },
-  },
-  keyPress: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onKeyPress: true}),
-      captured: keyOf({onKeyPressCapture: true}),
-    },
-  },
-  keyUp: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onKeyUp: true}),
-      captured: keyOf({onKeyUpCapture: true}),
-    },
-  },
-  load: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onLoad: true}),
-      captured: keyOf({onLoadCapture: true}),
-    },
-  },
-  loadedData: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onLoadedData: true}),
-      captured: keyOf({onLoadedDataCapture: true}),
-    },
-  },
-  loadedMetadata: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onLoadedMetadata: true}),
-      captured: keyOf({onLoadedMetadataCapture: true}),
-    },
-  },
-  loadStart: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onLoadStart: true}),
-      captured: keyOf({onLoadStartCapture: true}),
-    },
-  },
-  // Note: We do not allow listening to mouseOver events. Instead, use the
-  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
-  mouseDown: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onMouseDown: true}),
-      captured: keyOf({onMouseDownCapture: true}),
-    },
-  },
-  mouseMove: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onMouseMove: true}),
-      captured: keyOf({onMouseMoveCapture: true}),
-    },
-  },
-  mouseOut: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onMouseOut: true}),
-      captured: keyOf({onMouseOutCapture: true}),
-    },
-  },
-  mouseOver: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onMouseOver: true}),
-      captured: keyOf({onMouseOverCapture: true}),
-    },
-  },
-  mouseUp: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onMouseUp: true}),
-      captured: keyOf({onMouseUpCapture: true}),
-    },
-  },
-  paste: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onPaste: true}),
-      captured: keyOf({onPasteCapture: true}),
-    },
-  },
-  pause: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onPause: true}),
-      captured: keyOf({onPauseCapture: true}),
-    },
-  },
-  play: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onPlay: true}),
-      captured: keyOf({onPlayCapture: true}),
-    },
-  },
-  playing: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onPlaying: true}),
-      captured: keyOf({onPlayingCapture: true}),
-    },
-  },
-  progress: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onProgress: true}),
-      captured: keyOf({onProgressCapture: true}),
-    },
-  },
-  rateChange: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onRateChange: true}),
-      captured: keyOf({onRateChangeCapture: true}),
-    },
-  },
-  reset: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onReset: true}),
-      captured: keyOf({onResetCapture: true}),
-    },
-  },
-  scroll: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onScroll: true}),
-      captured: keyOf({onScrollCapture: true}),
-    },
-  },
-  seeked: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onSeeked: true}),
-      captured: keyOf({onSeekedCapture: true}),
-    },
-  },
-  seeking: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onSeeking: true}),
-      captured: keyOf({onSeekingCapture: true}),
-    },
-  },
-  stalled: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onStalled: true}),
-      captured: keyOf({onStalledCapture: true}),
-    },
-  },
-  submit: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onSubmit: true}),
-      captured: keyOf({onSubmitCapture: true}),
-    },
-  },
-  suspend: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onSuspend: true}),
-      captured: keyOf({onSuspendCapture: true}),
-    },
-  },
-  timeUpdate: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onTimeUpdate: true}),
-      captured: keyOf({onTimeUpdateCapture: true}),
-    },
-  },
-  touchCancel: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onTouchCancel: true}),
-      captured: keyOf({onTouchCancelCapture: true}),
-    },
-  },
-  touchEnd: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onTouchEnd: true}),
-      captured: keyOf({onTouchEndCapture: true}),
-    },
-  },
-  touchMove: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onTouchMove: true}),
-      captured: keyOf({onTouchMoveCapture: true}),
-    },
-  },
-  touchStart: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onTouchStart: true}),
-      captured: keyOf({onTouchStartCapture: true}),
-    },
-  },
-  transitionEnd: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onTransitionEnd: true}),
-      captured: keyOf({onTransitionEndCapture: true}),
-    },
-  },
-  volumeChange: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onVolumeChange: true}),
-      captured: keyOf({onVolumeChangeCapture: true}),
-    },
-  },
-  waiting: {
-    phasedRegistrationNames: {
-      bubbled: keyOf({onWaiting: true}),
-      captured: keyOf({onWaitingCapture: true}),
-    },
-  },
-  wheel: {
+/**
+ * Turns
+ * ['abort', ...]
+ * into
+ * eventTypes = {
+ *   'abort': {
+ *     phasedRegistrationNames: {
+ *       bubbled: 'onAbort',
+ *       captured: 'onAbortCapture',
+ *     },
+ *     dependencies: ['topAbort'],
+ *   },
+ *   ...
+ * };
+ * topLevelEventsToDispatchConfig = {
+ *   'topAbort': { sameConfig }
+ * };
+ */
+var eventTypes: EventTypes = {};
+var topLevelEventsToDispatchConfig: {[key: TopLevelTypes]: DispatchConfig} = {};
+[
+  'abort',
+  'animationEnd',
+  'animationIteration',
+  'animationStart',
+  'blur',
+  'canPlay',
+  'canPlayThrough',
+  'click',
+  'contextMenu',
+  'copy',
+  'cut',
+  'doubleClick',
+  'drag',
+  'dragEnd',
+  'dragEnter',
+  'dragExit',
+  'dragLeave',
+  'dragOver',
+  'dragStart',
+  'drop',
+  'durationChange',
+  'emptied',
+  'encrypted',
+  'ended',
+  'error',
+  'focus',
+  'input',
+  'invalid',
+  'keyDown',
+  'keyPress',
+  'keyUp',
+  'load',
+  'loadedData',
+  'loadedMetadata',
+  'loadStart',
+  'mouseDown',
+  'mouseMove',
+  'mouseOut',
+  'mouseOver',
+  'mouseUp',
+  'paste',
+  'pause',
+  'play',
+  'playing',
+  'progress',
+  'rateChange',
+  'reset',
+  'scroll',
+  'seeked',
+  'seeking',
+  'stalled',
+  'submit',
+  'suspend',
+  'timeUpdate',
+  'touchCancel',
+  'touchEnd',
+  'touchMove',
+  'touchStart',
+  'transitionEnd',
+  'volumeChange',
+  'waiting',
+  'wheel',
+].forEach(event => {
+  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
+  var onEvent = 'on' + capitalizedEvent;
+  var topEvent = 'top' + capitalizedEvent;
+
+  var type = {
     phasedRegistrationNames: {
-      bubbled: keyOf({onWheel: true}),
-      captured: keyOf({onWheelCapture: true}),
+      bubbled: onEvent,
+      captured: onEvent + 'Capture',
     },
-  },
-};
+    dependencies: [topEvent],
+  };
+  eventTypes[event] = type;
+  topLevelEventsToDispatchConfig[topEvent] = type;
+});
 
-var topLevelEventsToDispatchConfig = {
-  topAbort:           eventTypes.abort,
-  topAnimationEnd:    eventTypes.animationEnd,
-  topAnimationIteration: eventTypes.animationIteration,
-  topAnimationStart:  eventTypes.animationStart,
-  topBlur:            eventTypes.blur,
-  topCanPlay:         eventTypes.canPlay,
-  topCanPlayThrough:  eventTypes.canPlayThrough,
-  topClick:           eventTypes.click,
-  topContextMenu:     eventTypes.contextMenu,
-  topCopy:            eventTypes.copy,
-  topCut:             eventTypes.cut,
-  topDoubleClick:     eventTypes.doubleClick,
-  topDrag:            eventTypes.drag,
-  topDragEnd:         eventTypes.dragEnd,
-  topDragEnter:       eventTypes.dragEnter,
-  topDragExit:        eventTypes.dragExit,
-  topDragLeave:       eventTypes.dragLeave,
-  topDragOver:        eventTypes.dragOver,
-  topDragStart:       eventTypes.dragStart,
-  topDrop:            eventTypes.drop,
-  topDurationChange:  eventTypes.durationChange,
-  topEmptied:         eventTypes.emptied,
-  topEncrypted:       eventTypes.encrypted,
-  topEnded:           eventTypes.ended,
-  topError:           eventTypes.error,
-  topFocus:           eventTypes.focus,
-  topInput:           eventTypes.input,
-  topInvalid:         eventTypes.invalid,
-  topKeyDown:         eventTypes.keyDown,
-  topKeyPress:        eventTypes.keyPress,
-  topKeyUp:           eventTypes.keyUp,
-  topLoad:            eventTypes.load,
-  topLoadedData:      eventTypes.loadedData,
-  topLoadedMetadata:  eventTypes.loadedMetadata,
-  topLoadStart:       eventTypes.loadStart,
-  topMouseDown:       eventTypes.mouseDown,
-  topMouseMove:       eventTypes.mouseMove,
-  topMouseOut:        eventTypes.mouseOut,
-  topMouseOver:       eventTypes.mouseOver,
-  topMouseUp:         eventTypes.mouseUp,
-  topPaste:           eventTypes.paste,
-  topPause:           eventTypes.pause,
-  topPlay:            eventTypes.play,
-  topPlaying:         eventTypes.playing,
-  topProgress:        eventTypes.progress,
-  topRateChange:      eventTypes.rateChange,
-  topReset:           eventTypes.reset,
-  topScroll:          eventTypes.scroll,
-  topSeeked:          eventTypes.seeked,
-  topSeeking:         eventTypes.seeking,
-  topStalled:         eventTypes.stalled,
-  topSubmit:          eventTypes.submit,
-  topSuspend:         eventTypes.suspend,
-  topTimeUpdate:      eventTypes.timeUpdate,
-  topTouchCancel:     eventTypes.touchCancel,
-  topTouchEnd:        eventTypes.touchEnd,
-  topTouchMove:       eventTypes.touchMove,
-  topTouchStart:      eventTypes.touchStart,
-  topTransitionEnd:   eventTypes.transitionEnd,
-  topVolumeChange:    eventTypes.volumeChange,
-  topWaiting:         eventTypes.waiting,
-  topWheel:           eventTypes.wheel,
-};
+var onClickListeners = {};
 
-for (var type in topLevelEventsToDispatchConfig) {
-  topLevelEventsToDispatchConfig[type].dependencies = [type];
+function getDictionaryKey(inst: ReactInstance): string {
+  // Prevents V8 performance issue:
+  // https://github.com/facebook/react/pull/7232
+  return '.' + inst._rootNodeID;
 }
 
-var ON_CLICK_KEY = keyOf({onClick: null});
-var onClickListeners = {};
-
-var SimpleEventPlugin = {
+function isInteractive(tag) {
+  return (
+    tag === 'button' ||
+    tag === 'input' ||
+    tag === 'select' ||
+    tag === 'textarea'
+  );
+}
 
+var SimpleEventPlugin: PluginModule<MouseEvent> = {
   eventTypes: eventTypes,
@@ -490,7 +161,7 @@ var SimpleEventPlugin = {
   extractEvents: function(
-    topLevelType,
-    targetInst,
-    nativeEvent,
-    nativeEventTarget
-  ) {
+    topLevelType: TopLevelTypes,
+    targetInst: ReactInstance,
+    nativeEvent: MouseEvent,
+    nativeEventTarget: EventTarget,
+  ): null | ReactSyntheticEvent {
     var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
@@ -501,30 +172,30 @@ var SimpleEventPlugin = {
     switch (topLevelType) {
-      case topLevelTypes.topAbort:
-      case topLevelTypes.topCanPlay:
-      case topLevelTypes.topCanPlayThrough:
-      case topLevelTypes.topDurationChange:
-      case topLevelTypes.topEmptied:
-      case topLevelTypes.topEncrypted:
-      case topLevelTypes.topEnded:
-      case topLevelTypes.topError:
-      case topLevelTypes.topInput:
-      case topLevelTypes.topInvalid:
-      case topLevelTypes.topLoad:
-      case topLevelTypes.topLoadedData:
-      case topLevelTypes.topLoadedMetadata:
-      case topLevelTypes.topLoadStart:
-      case topLevelTypes.topPause:
-      case topLevelTypes.topPlay:
-      case topLevelTypes.topPlaying:
-      case topLevelTypes.topProgress:
-      case topLevelTypes.topRateChange:
-      case topLevelTypes.topReset:
-      case topLevelTypes.topSeeked:
-      case topLevelTypes.topSeeking:
-      case topLevelTypes.topStalled:
-      case topLevelTypes.topSubmit:
-      case topLevelTypes.topSuspend:
-      case topLevelTypes.topTimeUpdate:
-      case topLevelTypes.topVolumeChange:
-      case topLevelTypes.topWaiting:
+      case 'topAbort':
+      case 'topCanPlay':
+      case 'topCanPlayThrough':
+      case 'topDurationChange':
+      case 'topEmptied':
+      case 'topEncrypted':
+      case 'topEnded':
+      case 'topError':
+      case 'topInput':
+      case 'topInvalid':
+      case 'topLoad':
+      case 'topLoadedData':
+      case 'topLoadedMetadata':
+      case 'topLoadStart':
+      case 'topPause':
+      case 'topPlay':
+      case 'topPlaying':
+      case 'topProgress':
+      case 'topRateChange':
+      case 'topReset':
+      case 'topSeeked':
+      case 'topSeeking':
+      case 'topStalled':
+      case 'topSubmit':
+      case 'topSuspend':
+      case 'topTimeUpdate':
+      case 'topVolumeChange':
+      case 'topWaiting':
         // HTML Events
@@ -533,3 +204,3 @@ var SimpleEventPlugin = {
         break;
-      case topLevelTypes.topKeyPress:
+      case 'topKeyPress':
         // Firefox creates a keypress event for function keys too. This removes
@@ -540,12 +211,12 @@ var SimpleEventPlugin = {
         }
-        /* falls through */
-      case topLevelTypes.topKeyDown:
-      case topLevelTypes.topKeyUp:
+      /* falls through */
+      case 'topKeyDown':
+      case 'topKeyUp':
         EventConstructor = SyntheticKeyboardEvent;
         break;
-      case topLevelTypes.topBlur:
-      case topLevelTypes.topFocus:
+      case 'topBlur':
+      case 'topFocus':
         EventConstructor = SyntheticFocusEvent;
         break;
-      case topLevelTypes.topClick:
+      case 'topClick':
         // Firefox creates a click event on right mouse clicks. This removes the
@@ -555,45 +226,47 @@ var SimpleEventPlugin = {
         }
-        /* falls through */
-      case topLevelTypes.topContextMenu:
-      case topLevelTypes.topDoubleClick:
-      case topLevelTypes.topMouseDown:
-      case topLevelTypes.topMouseMove:
-      case topLevelTypes.topMouseOut:
-      case topLevelTypes.topMouseOver:
-      case topLevelTypes.topMouseUp:
+      /* falls through */
+      case 'topDoubleClick':
+      case 'topMouseDown':
+      case 'topMouseMove':
+      case 'topMouseUp':
+      // TODO: Disabled elements should not respond to mouse events
+      /* falls through */
+      case 'topMouseOut':
+      case 'topMouseOver':
+      case 'topContextMenu':
         EventConstructor = SyntheticMouseEvent;
         break;
-      case topLevelTypes.topDrag:
-      case topLevelTypes.topDragEnd:
-      case topLevelTypes.topDragEnter:
-      case topLevelTypes.topDragExit:
-      case topLevelTypes.topDragLeave:
-      case topLevelTypes.topDragOver:
-      case topLevelTypes.topDragStart:
-      case topLevelTypes.topDrop:
+      case 'topDrag':
+      case 'topDragEnd':
+      case 'topDragEnter':
+      case 'topDragExit':
+      case 'topDragLeave':
+      case 'topDragOver':
+      case 'topDragStart':
+      case 'topDrop':
         EventConstructor = SyntheticDragEvent;
         break;
-      case topLevelTypes.topTouchCancel:
-      case topLevelTypes.topTouchEnd:
-      case topLevelTypes.topTouchMove:
-      case topLevelTypes.topTouchStart:
+      case 'topTouchCancel':
+      case 'topTouchEnd':
+      case 'topTouchMove':
+      case 'topTouchStart':
         EventConstructor = SyntheticTouchEvent;
         break;
-      case topLevelTypes.topAnimationEnd:
-      case topLevelTypes.topAnimationIteration:
-      case topLevelTypes.topAnimationStart:
+      case 'topAnimationEnd':
+      case 'topAnimationIteration':
+      case 'topAnimationStart':
         EventConstructor = SyntheticAnimationEvent;
         break;
-      case topLevelTypes.topTransitionEnd:
+      case 'topTransitionEnd':
         EventConstructor = SyntheticTransitionEvent;
         break;
-      case topLevelTypes.topScroll:
+      case 'topScroll':
         EventConstructor = SyntheticUIEvent;
         break;
-      case topLevelTypes.topWheel:
+      case 'topWheel':
         EventConstructor = SyntheticWheelEvent;
         break;
-      case topLevelTypes.topCopy:
-      case topLevelTypes.topCut:
-      case topLevelTypes.topPaste:
+      case 'topCopy':
+      case 'topCut':
+      case 'topPaste':
         EventConstructor = SyntheticClipboardEvent;
@@ -604,3 +277,3 @@ var SimpleEventPlugin = {
       'SimpleEventPlugin: Unhandled event type, `%s`.',
-      topLevelType
+      topLevelType,
     );
@@ -610,3 +283,3 @@ var SimpleEventPlugin = {
       nativeEvent,
-      nativeEventTarget
+      nativeEventTarget,
     );
@@ -616,3 +289,7 @@ var SimpleEventPlugin = {
 
-  didPutListener: function(inst, registrationName, listener) {
+  didPutListener: function(
+    inst: ReactInstance,
+    registrationName: string,
+    listener: () => void,
+  ): void {
     // Mobile Safari does not fire properly bubble click events on
@@ -621,10 +298,11 @@ var SimpleEventPlugin = {
     // listener on the target node.
-    if (registrationName === ON_CLICK_KEY) {
-      var id = inst._rootNodeID;
+    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
+    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
+      var key = getDictionaryKey(inst);
       var node = ReactDOMComponentTree.getNodeFromInstance(inst);
-      if (!onClickListeners[id]) {
-        onClickListeners[id] = EventListener.listen(
+      if (!onClickListeners[key]) {
+        onClickListeners[key] = EventListener.listen(
           node,
           'click',
-          emptyFunction
+          emptyFunction,
         );
@@ -634,10 +312,12 @@ var SimpleEventPlugin = {
 
-  willDeleteListener: function(inst, registrationName) {
-    if (registrationName === ON_CLICK_KEY) {
-      var id = inst._rootNodeID;
-      onClickListeners[id].remove();
-      delete onClickListeners[id];
+  willDeleteListener: function(
+    inst: ReactInstance,
+    registrationName: string,
+  ): void {
+    if (registrationName === 'onClick' && !isInteractive(inst._tag)) {
+      var key = getDictionaryKey(inst);
+      onClickListeners[key].remove();
+      delete onClickListeners[key];
     }
   },
-
 };
diff --git a/src/renderers/dom/client/eventPlugins/TapEventPlugin.js b/src/renderers/dom/client/eventPlugins/TapEventPlugin.js
index 670eb936a..a5b46a07e 100644
--- a/src/renderers/dom/client/eventPlugins/TapEventPlugin.js
+++ b/src/renderers/dom/client/eventPlugins/TapEventPlugin.js
@@ -9,2 +9,3 @@
  * @providesModule TapEventPlugin
+ * @flow
  */
@@ -13,3 +14,2 @@
 
-var EventConstants = require('EventConstants');
 var EventPluginUtils = require('EventPluginUtils');
@@ -20,5 +20,2 @@ var ViewportMetrics = require('ViewportMetrics');
 
-var keyOf = require('keyOf');
-var topLevelTypes = EventConstants.topLevelTypes;
-
 var isStartish = EventPluginUtils.isStartish;
@@ -26,2 +23,35 @@ var isEndish = EventPluginUtils.isEndish;
 
+import type {EventTypes, PluginModule} from 'PluginModuleType';
+import type {ReactInstance} from 'ReactInstanceType';
+import type {TopLevelTypes} from 'EventConstants';
+
+/**
+ * We are extending the Flow 'Touch' declaration to enable using bracket
+ * notation to access properties.
+ * Without this adjustment Flow throws
+ * "Indexable signature not found in Touch".
+ * See https://github.com/facebook/flow/issues/1323
+ */
+type TouchPropertyKey = 'clientX' | 'clientY' | 'pageX' | 'pageY';
+
+declare class _Touch extends Touch {
+  [key: TouchPropertyKey]: number,
+}
+
+type AxisCoordinateData = {
+  page: TouchPropertyKey,
+  client: TouchPropertyKey,
+  envScroll: 'currentPageScrollLeft' | 'currentPageScrollTop',
+};
+
+type AxisType = {
+  x: AxisCoordinateData,
+  y: AxisCoordinateData,
+};
+
+type CoordinatesType = {
+  x: number,
+  y: number,
+};
+
 /**
@@ -31,5 +61,5 @@ var isEndish = EventPluginUtils.isEndish;
 var tapMoveThreshold = 10;
-var startCoords = {x: null, y: null};
+var startCoords: CoordinatesType = {x: 0, y: 0};
 
-var Axis = {
+var Axis: AxisType = {
   x: {page: 'pageX', client: 'clientX', envScroll: 'currentPageScrollLeft'},
@@ -38,3 +68,6 @@ var Axis = {
 
-function getAxisCoordOfEvent(axis, nativeEvent) {
+function getAxisCoordOfEvent(
+  axis: AxisCoordinateData,
+  nativeEvent: _Touch,
+): number {
   var singleTouch = TouchEventUtils.extractSingleTouch(nativeEvent);
@@ -43,8 +76,8 @@ function getAxisCoordOfEvent(axis, nativeEvent) {
   }
-  return axis.page in nativeEvent ?
-    nativeEvent[axis.page] :
-    nativeEvent[axis.client] + ViewportMetrics[axis.envScroll];
+  return axis.page in nativeEvent
+    ? nativeEvent[axis.page]
+    : nativeEvent[axis.client] + ViewportMetrics[axis.envScroll];
 }
 
-function getDistance(coords, nativeEvent) {
+function getDistance(coords: CoordinatesType, nativeEvent: _Touch): number {
   var pageX = getAxisCoordOfEvent(Axis.x, nativeEvent);
@@ -53,3 +86,3 @@ function getDistance(coords, nativeEvent) {
     Math.pow(pageX - coords.x, 2) + Math.pow(pageY - coords.y, 2),
-    0.5
+    0.5,
   );
@@ -58,19 +91,17 @@ function getDistance(coords, nativeEvent) {
 var touchEvents = [
-  topLevelTypes.topTouchStart,
-  topLevelTypes.topTouchCancel,
-  topLevelTypes.topTouchEnd,
-  topLevelTypes.topTouchMove,
+  'topTouchStart',
+  'topTouchCancel',
+  'topTouchEnd',
+  'topTouchMove',
 ];
 
-var dependencies = [
-  topLevelTypes.topMouseDown,
-  topLevelTypes.topMouseMove,
-  topLevelTypes.topMouseUp,
-].concat(touchEvents);
+var dependencies = ['topMouseDown', 'topMouseMove', 'topMouseUp'].concat(
+  touchEvents,
+);
 
-var eventTypes = {
+var eventTypes: EventTypes = {
   touchTap: {
     phasedRegistrationNames: {
-      bubbled: keyOf({onTouchTap: null}),
-      captured: keyOf({onTouchTapCapture: null}),
+      bubbled: 'onTouchTap',
+      captured: 'onTouchTapCapture',
     },
@@ -84,4 +115,3 @@ var TOUCH_DELAY = 1000;
 
-var TapEventPlugin = {
-
+var TapEventPlugin: PluginModule<_Touch> = {
   tapMoveThreshold: tapMoveThreshold,
@@ -91,6 +121,6 @@ var TapEventPlugin = {
   extractEvents: function(
-    topLevelType,
-    targetInst,
-    nativeEvent,
-    nativeEventTarget
+    topLevelType: TopLevelTypes,
+    targetInst: ReactInstance,
+    nativeEvent: _Touch,
+    nativeEventTarget: EventTarget,
   ) {
@@ -106,3 +136,3 @@ var TapEventPlugin = {
     } else {
-      if (usedTouch && (Date.now() - usedTouchTime < TOUCH_DELAY)) {
+      if (usedTouch && Date.now() - usedTouchTime < TOUCH_DELAY) {
         return null;
@@ -117,3 +147,3 @@ var TapEventPlugin = {
         nativeEvent,
-        nativeEventTarget
+        nativeEventTarget,
       );
@@ -130,3 +160,2 @@ var TapEventPlugin = {
   },
-
 };
diff --git a/src/renderers/dom/client/eventPlugins/__tests__/BeforeInputEventPlugin-test.js b/src/renderers/dom/client/eventPlugins/__tests__/BeforeInputEventPlugin-test.js
new file mode 100644
index 000000000..265ca820b
--- /dev/null
+++ b/src/renderers/dom/client/eventPlugins/__tests__/BeforeInputEventPlugin-test.js
@@ -0,0 +1,240 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+var React = require('React');
+var ReactTestUtils = require('ReactTestUtils');
+
+var EventMapping = {
+  compositionstart: 'topCompositionStart',
+  compositionend: 'topCompositionEnd',
+  keyup: 'topKeyUp',
+  keydown: 'topKeyDown',
+  textInput: 'topTextInput',
+  textinput: null, // Not defined now
+};
+
+describe('BeforeInputEventPlugin', function() {
+  var ModuleCache;
+
+  function simulateIE11() {
+    document.documentMode = 11;
+    window.CompositionEvent = {};
+    delete window.TextEvent;
+  }
+
+  function simulateWebkit() {
+    delete document.documentMode;
+    window.CompositionEvent = {};
+    window.TextEvent = {};
+  }
+
+  function initialize(simulator) {
+    // Need to delete cached modules before executing simulator
+    jest.resetModuleRegistry();
+
+    // Initialize variables in the scope of BeforeInputEventPlugin
+    simulator();
+
+    // Modules which have dependency on BeforeInputEventPlugin are stored
+    // in ModuleCache so that we can use these modules ouside test functions.
+    this.ReactDOM = require('ReactDOM');
+    this.ReactDOMComponentTree = require('ReactDOMComponentTree');
+    this.SyntheticCompositionEvent = require('SyntheticCompositionEvent');
+    this.SyntheticInputEvent = require('SyntheticInputEvent');
+    this.BeforeInputEventPlugin = require('BeforeInputEventPlugin');
+  }
+
+  function extract(node, eventType, optionalData) {
+    var evt = document.createEvent('HTMLEvents');
+    evt.initEvent(eventType, true, true);
+    evt = Object.assign(evt, optionalData);
+    return ModuleCache.BeforeInputEventPlugin.extractEvents(
+      EventMapping[eventType],
+      ModuleCache.ReactDOMComponentTree.getInstanceFromNode(node),
+      evt,
+      node,
+    );
+  }
+
+  function setElementText(node) {
+    return args => (node.innerHTML = args);
+  }
+
+  function accumulateEvents(node, events) {
+    // We don't use accumulateInto module to apply partial application.
+    return function() {
+      var newArgs = [node].concat(Array.prototype.slice.call(arguments));
+      var newEvents = extract.apply(this, newArgs);
+      Array.prototype.push.apply(events, newEvents);
+    };
+  }
+
+  function EventMismatchError(idx, message) {
+    this.name = 'EventMismatchError';
+    this.message = '[' + idx + '] ' + message;
+  }
+  EventMismatchError.prototype = Object.create(Error.prototype);
+
+  function verifyEvents(actualEvents, expectedEvents) {
+    expect(actualEvents.length).toBe(expectedEvents.length);
+    expectedEvents.forEach(function(expected, idx) {
+      var actual = actualEvents[idx];
+      expect(function() {
+        if (actual === null && expected.type === null) {
+          // Both are null.  Expected.
+        } else if (actual === null) {
+          throw new EventMismatchError(idx, 'Expected not to be null');
+        } else if (
+          expected.type === null ||
+          !(actual instanceof expected.type)
+        ) {
+          throw new EventMismatchError(idx, 'Unexpected type: ' + actual);
+        } else {
+          // Type match.
+          Object.keys(expected.data).forEach(function(expectedKey) {
+            if (!(expectedKey in actual)) {
+              throw new EventMismatchError(idx, 'KeyNotFound: ' + expectedKey);
+            } else if (actual[expectedKey] !== expected.data[expectedKey]) {
+              throw new EventMismatchError(
+                idx,
+                'ValueMismatch: ' + actual[expectedKey],
+              );
+            }
+          });
+        }
+      }).not.toThrow();
+    });
+  }
+
+  // IE fires an event named `textinput` with all lowercase characters,
+  // instead of a standard name `textInput`.  As of now, React does not have
+  // a corresponding topEvent to IE's textinput, but both events are added to
+  // this scenario data for future use.
+  var Scenario_Composition = [
+    {run: accumulateEvents, arg: ['compositionstart', {data: ''}]},
+    {run: accumulateEvents, arg: ['textInput', {data: 'A'}]},
+    {run: accumulateEvents, arg: ['textinput', {data: 'A'}]},
+    {run: accumulateEvents, arg: ['keyup', {keyCode: 65}]},
+    {run: setElementText, arg: ['ABC']},
+    {run: accumulateEvents, arg: ['textInput', {data: 'abc'}]},
+    {run: accumulateEvents, arg: ['textinput', {data: 'abc'}]},
+    {run: accumulateEvents, arg: ['keyup', {keyCode: 32}]},
+    {run: setElementText, arg: ['XYZ']},
+    {run: accumulateEvents, arg: ['textInput', {data: 'xyz'}]},
+    {run: accumulateEvents, arg: ['textinput', {data: 'xyz'}]},
+    {run: accumulateEvents, arg: ['keyup', {keyCode: 32}]},
+    {run: accumulateEvents, arg: ['compositionend', {data: 'Hello'}]},
+  ];
+
+  /* Defined expected results as a factory of result data because we need
+     lazy evaluation for event modules.
+     Event modules are reloaded to simulate a different platform per testcase.
+     If we define expected results as a simple dictionary here, the comparison
+     of 'instanceof' fails after module cache is reset.  */
+
+  // Webkit behavior is simple.  We expect SyntheticInputEvent at each
+  // textInput, SyntheticCompositionEvent at composition, and nothing from
+  // keyUp.
+  var Expected_Webkit = () => [
+    {type: ModuleCache.SyntheticCompositionEvent, data: {}},
+    {type: null},
+    {type: null},
+    {type: ModuleCache.SyntheticInputEvent, data: {data: 'A'}},
+    {type: null},
+    {type: null}, // textinput of A
+    {type: null},
+    {type: null}, // keyUp of 65
+    {type: null},
+    {type: ModuleCache.SyntheticInputEvent, data: {data: 'abc'}},
+    {type: null},
+    {type: null}, // textinput of abc
+    {type: null},
+    {type: null}, // keyUp of 32
+    {type: null},
+    {type: ModuleCache.SyntheticInputEvent, data: {data: 'xyz'}},
+    {type: null},
+    {type: null}, // textinput of xyz
+    {type: null},
+    {type: null}, // keyUp of 32
+    {type: ModuleCache.SyntheticCompositionEvent, data: {data: 'Hello'}},
+    {type: null},
+  ];
+
+  // For IE11, we use fallback data instead of IE's textinput events.
+  // We expect no SyntheticInputEvent from textinput. Fallback beforeInput is
+  // expected to be triggered at compositionend with a text of the target
+  // element, not event data.
+  var Expected_IE11 = () => [
+    {type: ModuleCache.SyntheticCompositionEvent, data: {}},
+    {type: null},
+    {type: null},
+    {type: null}, // textInput of A
+    {type: null},
+    {type: null}, // textinput of A
+    {type: null},
+    {type: null}, // keyUp of 65
+    {type: null},
+    {type: null}, // textInput of abc
+    {type: null},
+    {type: null}, // textinput of abc
+
+    // fallbackData should NOT be set at keyUp with any of END_KEYCODES
+    {type: null},
+    {type: null}, // keyUp of 32
+
+    {type: null},
+    {type: null}, // textInput of xyz
+    {type: null},
+    {type: null}, // textinput of xyz
+    {type: null},
+    {type: null}, // keyUp of 32
+
+    // fallbackData is retrieved from the element, which is XYZ,
+    // at a time of compositionend
+    {type: ModuleCache.SyntheticCompositionEvent, data: {}},
+    {type: ModuleCache.SyntheticInputEvent, data: {data: 'XYZ'}},
+  ];
+
+  function TestEditableReactComponent(Emulator, Scenario, ExpectedResult) {
+    ModuleCache = new initialize(Emulator);
+
+    class EditableDiv extends React.Component {
+      render() {
+        return <div contentEditable="true" />;
+      }
+    }
+    var rendered = ReactTestUtils.renderIntoDocument(<EditableDiv />);
+
+    var node = ModuleCache.ReactDOM.findDOMNode(rendered);
+    var events = [];
+
+    Scenario.forEach(el => el.run.call(this, node, events).apply(this, el.arg));
+    verifyEvents(events, ExpectedResult());
+  }
+
+  it('extract onBeforeInput from native textinput events', function() {
+    TestEditableReactComponent(
+      simulateWebkit,
+      Scenario_Composition,
+      Expected_Webkit,
+    );
+  });
+
+  it('extract onBeforeInput from fallback objects', function() {
+    TestEditableReactComponent(
+      simulateIE11,
+      Scenario_Composition,
+      Expected_IE11,
+    );
+  });
+});
diff --git a/src/renderers/dom/client/eventPlugins/__tests__/ChangeEventPlugin-test.js b/src/renderers/dom/client/eventPlugins/__tests__/ChangeEventPlugin-test.js
index 0d29c6664..d85970cec 100644
--- a/src/renderers/dom/client/eventPlugins/__tests__/ChangeEventPlugin-test.js
+++ b/src/renderers/dom/client/eventPlugins/__tests__/ChangeEventPlugin-test.js
@@ -14,6 +14,39 @@
 var React = require('React');
+var ReactDOM = require('ReactDOM');
 var ReactTestUtils = require('ReactTestUtils');
+var ChangeEventPlugin = require('ChangeEventPlugin');
+var inputValueTracking = require('inputValueTracking');
 
-describe('ChangeEventPlugin', function() {
-  it('should fire change for checkbox input', function() {
+function getTrackedValue(elem) {
+  var tracker = inputValueTracking._getTrackerFromNode(elem);
+  return tracker.getValue();
+}
+
+function setTrackedValue(elem, value) {
+  var tracker = inputValueTracking._getTrackerFromNode(elem);
+  tracker.setValue(value);
+}
+
+function setUntrackedValue(elem, value) {
+  var tracker = inputValueTracking._getTrackerFromNode(elem);
+  var current = tracker.getValue();
+
+  if (elem.type === 'checkbox' || elem.type === 'radio') {
+    elem.checked = value;
+  } else {
+    elem.value = value;
+  }
+  tracker.setValue(current);
+}
+
+describe('ChangeEventPlugin', () => {
+  beforeEach(() => {
+    ChangeEventPlugin._allowSimulatedPassThrough = false;
+  });
+
+  afterEach(() => {
+    ChangeEventPlugin._allowSimulatedPassThrough = true;
+  });
+
+  it('should fire change for checkbox input', () => {
     var called = 0;
@@ -25,6 +58,174 @@ describe('ChangeEventPlugin', function() {
 
-    var input = ReactTestUtils.renderIntoDocument(<input type="checkbox" onChange={cb}/>);
+    var input = ReactTestUtils.renderIntoDocument(
+      <input type="checkbox" onChange={cb} />,
+    );
+
+    setUntrackedValue(input, true);
+    ReactTestUtils.SimulateNative.click(input);
+
+    expect(called).toBe(1);
+  });
+
+  it('should catch setting the value programmatically', function() {
+    var input = ReactTestUtils.renderIntoDocument(
+      <input type="text" defaultValue="foo" />,
+    );
+
+    input.value = 'bar';
+    expect(getTrackedValue(input)).toBe('bar');
+  });
+
+  it('should not fire change when setting the value programmatically', function() {
+    var called = 0;
+
+    function cb(e) {
+      called += 1;
+      expect(e.type).toBe('change');
+    }
+
+    var input = ReactTestUtils.renderIntoDocument(
+      <input type="text" onChange={cb} defaultValue="foo" />,
+    );
+
+    input.value = 'bar';
+    ReactTestUtils.SimulateNative.change(input);
+    expect(called).toBe(0);
+
+    setUntrackedValue(input, 'foo');
+    ReactTestUtils.SimulateNative.change(input);
+
+    expect(called).toBe(1);
+  });
+
+  it('should not fire change when setting checked programmatically', function() {
+    var called = 0;
+
+    function cb(e) {
+      called += 1;
+      expect(e.type).toBe('change');
+    }
+
+    var input = ReactTestUtils.renderIntoDocument(
+      <input type="checkbox" onChange={cb} defaultChecked={true} />,
+    );
+
+    input.checked = true;
     ReactTestUtils.SimulateNative.click(input);
+    expect(called).toBe(0);
+
+    input.checked = false;
+    setTrackedValue(input, undefined);
+    ReactTestUtils.SimulateNative.click(input);
+
     expect(called).toBe(1);
   });
+
+  it('should unmount', function() {
+    var container = document.createElement('div');
+    var input = ReactDOM.render(<input />, container);
+
+    ReactDOM.unmountComponentAtNode(container);
+  });
+
+  it('should only fire change for checked radio button once', function() {
+    var called = 0;
+
+    function cb(e) {
+      called += 1;
+    }
+
+    var input = ReactTestUtils.renderIntoDocument(
+      <input type="radio" onChange={cb} />,
+    );
+    setUntrackedValue(input, true);
+    ReactTestUtils.SimulateNative.click(input);
+    ReactTestUtils.SimulateNative.click(input);
+    expect(called).toBe(1);
+  });
+
+  it('should deduplicate input value change events', function() {
+    var input;
+    var called = 0;
+
+    function cb(e) {
+      called += 1;
+      expect(e.type).toBe('change');
+    }
+
+    [
+      <input type="text" onChange={cb} />,
+      <input type="number" onChange={cb} />,
+      <input type="range" onChange={cb} />,
+    ].forEach(function(element) {
+      called = 0;
+      input = ReactTestUtils.renderIntoDocument(element);
+
+      setUntrackedValue(input, '40');
+      ReactTestUtils.SimulateNative.change(input);
+      ReactTestUtils.SimulateNative.change(input);
+      expect(called).toBe(1);
+
+      called = 0;
+      input = ReactTestUtils.renderIntoDocument(element);
+      setUntrackedValue(input, '40');
+      ReactTestUtils.SimulateNative.input(input);
+      ReactTestUtils.SimulateNative.input(input);
+      expect(called).toBe(1);
+
+      called = 0;
+      input = ReactTestUtils.renderIntoDocument(element);
+      setUntrackedValue(input, '40');
+      ReactTestUtils.SimulateNative.input(input);
+      ReactTestUtils.SimulateNative.change(input);
+      expect(called).toBe(1);
+    });
+  });
+
+  it('should listen for both change and input events when supported', function() {
+    var called = 0;
+
+    function cb(e) {
+      called += 1;
+      expect(e.type).toBe('change');
+    }
+
+    if (!ChangeEventPlugin._isInputEventSupported) {
+      return;
+    }
+
+    var input = ReactTestUtils.renderIntoDocument(
+      <input type="range" onChange={cb} />,
+    );
+    setUntrackedValue(input, 'bar');
+
+    ReactTestUtils.SimulateNative.input(input);
+
+    setUntrackedValue(input, 'foo');
+
+    ReactTestUtils.SimulateNative.change(input);
+
+    expect(called).toBe(2);
+  });
+
+  it('should only fire events when the value changes for range inputs', function() {
+    var called = 0;
+
+    function cb(e) {
+      called += 1;
+      expect(e.type).toBe('change');
+    }
+
+    var input = ReactTestUtils.renderIntoDocument(
+      <input type="range" onChange={cb} />,
+    );
+    setUntrackedValue(input, '40');
+    ReactTestUtils.SimulateNative.input(input);
+    ReactTestUtils.SimulateNative.change(input);
+
+    setUntrackedValue(input, 'foo');
+
+    ReactTestUtils.SimulateNative.input(input);
+    ReactTestUtils.SimulateNative.change(input);
+    expect(called).toBe(2);
+  });
 });
diff --git a/src/renderers/dom/client/eventPlugins/__tests__/EnterLeaveEventPlugin-test.js b/src/renderers/dom/client/eventPlugins/__tests__/EnterLeaveEventPlugin-test.js
index 68606ead4..5fbf06893 100644
--- a/src/renderers/dom/client/eventPlugins/__tests__/EnterLeaveEventPlugin-test.js
+++ b/src/renderers/dom/client/eventPlugins/__tests__/EnterLeaveEventPlugin-test.js
@@ -14,3 +14,2 @@
 var EnterLeaveEventPlugin;
-var EventConstants;
 var React;
@@ -19,6 +18,4 @@ var ReactDOMComponentTree;
 
-var topLevelTypes;
-
-describe('EnterLeaveEventPlugin', function() {
-  beforeEach(function() {
+describe('EnterLeaveEventPlugin', () => {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -26,3 +23,2 @@ describe('EnterLeaveEventPlugin', function() {
     EnterLeaveEventPlugin = require('EnterLeaveEventPlugin');
-    EventConstants = require('EventConstants');
     React = require('React');
@@ -30,7 +26,5 @@ describe('EnterLeaveEventPlugin', function() {
     ReactDOMComponentTree = require('ReactDOMComponentTree');
-
-    topLevelTypes = EventConstants.topLevelTypes;
   });
 
-  it('should set relatedTarget properly in iframe', function() {
+  it('should set relatedTarget properly in iframe', () => {
     var iframe = document.createElement('iframe');
@@ -41,3 +35,3 @@ describe('EnterLeaveEventPlugin', function() {
     iframeDocument.write(
-      '<!DOCTYPE html><html><head></head><body><div></div></body></html>'
+      '<!DOCTYPE html><html><head></head><body><div></div></body></html>',
     );
@@ -45,3 +39,6 @@ describe('EnterLeaveEventPlugin', function() {
 
-    var component = ReactDOM.render(<div />, iframeDocument.body.getElementsByTagName('div')[0]);
+    var component = ReactDOM.render(
+      <div />,
+      iframeDocument.body.getElementsByTagName('div')[0],
+    );
     var div = ReactDOM.findDOMNode(component);
@@ -49,6 +46,6 @@ describe('EnterLeaveEventPlugin', function() {
     var extracted = EnterLeaveEventPlugin.extractEvents(
-      topLevelTypes.topMouseOver,
+      'topMouseOver',
       ReactDOMComponentTree.getInstanceFromNode(div),
       {target: div},
-      div
+      div,
     );
diff --git a/src/renderers/dom/client/eventPlugins/__tests__/FallbackCompositionState-test.js b/src/renderers/dom/client/eventPlugins/__tests__/FallbackCompositionState-test.js
index 04e09ea28..35eca38ac 100644
--- a/src/renderers/dom/client/eventPlugins/__tests__/FallbackCompositionState-test.js
+++ b/src/renderers/dom/client/eventPlugins/__tests__/FallbackCompositionState-test.js
@@ -13,3 +13,3 @@
 
-describe('FallbackCompositionState', function() {
+describe('FallbackCompositionState', () => {
   var FallbackCompositionState;
@@ -18,3 +18,3 @@ describe('FallbackCompositionState', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     FallbackCompositionState = require('FallbackCompositionState');
@@ -50,3 +50,3 @@ describe('FallbackCompositionState', function() {
 
-  it('extracts value via `getText()`', function() {
+  it('extracts value via `getText()`', () => {
     var composition = FallbackCompositionState.getPooled(getInput());
@@ -64,4 +64,4 @@ describe('FallbackCompositionState', function() {
 
-  describe('Extract fallback data inserted at collapsed cursor', function() {
-    it('extracts when inserted at start of text', function() {
+  describe('Extract fallback data inserted at collapsed cursor', () => {
+    it('extracts when inserted at start of text', () => {
       assertExtractedData('XXXHello world', 'XXX');
@@ -69,3 +69,3 @@ describe('FallbackCompositionState', function() {
 
-    it('extracts when inserted within text', function() {
+    it('extracts when inserted within text', () => {
       assertExtractedData('Hello XXXworld', 'XXX');
@@ -73,3 +73,3 @@ describe('FallbackCompositionState', function() {
 
-    it('extracts when inserted at end of text', function() {
+    it('extracts when inserted at end of text', () => {
       assertExtractedData('Hello worldXXX', 'XXX');
@@ -78,4 +78,4 @@ describe('FallbackCompositionState', function() {
 
-  describe('Extract fallback data for non-collapsed range', function() {
-    it('extracts when inserted at start of text', function() {
+  describe('Extract fallback data for non-collapsed range', () => {
+    it('extracts when inserted at start of text', () => {
       assertExtractedData('XXX world', 'XXX');
@@ -83,3 +83,3 @@ describe('FallbackCompositionState', function() {
 
-    it('extracts when inserted within text', function() {
+    it('extracts when inserted within text', () => {
       assertExtractedData('HelXXXrld', 'XXX');
@@ -87,3 +87,3 @@ describe('FallbackCompositionState', function() {
 
-    it('extracts when inserted at end of text', function() {
+    it('extracts when inserted at end of text', () => {
       assertExtractedData('Hello XXX', 'XXX');
diff --git a/src/renderers/dom/client/eventPlugins/__tests__/SelectEventPlugin-test.js b/src/renderers/dom/client/eventPlugins/__tests__/SelectEventPlugin-test.js
index 0f032902d..41707da4f 100644
--- a/src/renderers/dom/client/eventPlugins/__tests__/SelectEventPlugin-test.js
+++ b/src/renderers/dom/client/eventPlugins/__tests__/SelectEventPlugin-test.js
@@ -13,3 +13,2 @@
 
-var EventConstants;
 var React;
@@ -20,5 +19,3 @@ var SelectEventPlugin;
 
-var topLevelTypes;
-
-describe('SelectEventPlugin', function() {
+describe('SelectEventPlugin', () => {
   function extract(node, topLevelEvent) {
@@ -28,3 +25,3 @@ describe('SelectEventPlugin', function() {
       {target: node},
-      node
+      node,
     );
@@ -32,4 +29,3 @@ describe('SelectEventPlugin', function() {
 
-  beforeEach(function() {
-    EventConstants = require('EventConstants');
+  beforeEach(() => {
     React = require('React');
@@ -39,12 +35,10 @@ describe('SelectEventPlugin', function() {
     SelectEventPlugin = require('SelectEventPlugin');
-
-    topLevelTypes = EventConstants.topLevelTypes;
   });
 
-  it('should skip extraction if no listeners are present', function() {
-    var WithoutSelect = React.createClass({
-      render: function() {
+  it('should skip extraction if no listeners are present', () => {
+    class WithoutSelect extends React.Component {
+      render() {
         return <input type="text" />;
-      },
-    });
+      }
+    }
 
@@ -54,6 +48,6 @@ describe('SelectEventPlugin', function() {
 
-    var mousedown = extract(node, topLevelTypes.topMouseDown);
+    var mousedown = extract(node, 'topMouseDown');
     expect(mousedown).toBe(null);
 
-    var mouseup = extract(node, topLevelTypes.topMouseUp);
+    var mouseup = extract(node, 'topMouseUp');
     expect(mouseup).toBe(null);
@@ -61,13 +55,13 @@ describe('SelectEventPlugin', function() {
 
-  it('should extract if an `onSelect` listener is present', function() {
-    var WithSelect = React.createClass({
-      render: function() {
+  it('should extract if an `onSelect` listener is present', () => {
+    class WithSelect extends React.Component {
+      render() {
         return <input type="text" onSelect={this.props.onSelect} />;
-      },
-    });
+      }
+    }
 
-    var cb = jest.genMockFn();
+    var cb = jest.fn();
 
     var rendered = ReactTestUtils.renderIntoDocument(
-      <WithSelect onSelect={cb} />
+      <WithSelect onSelect={cb} />,
     );
@@ -79,9 +73,9 @@ describe('SelectEventPlugin', function() {
 
-    var focus = extract(node, topLevelTypes.topFocus);
+    var focus = extract(node, 'topFocus');
     expect(focus).toBe(null);
 
-    var mousedown = extract(node, topLevelTypes.topMouseDown);
+    var mousedown = extract(node, 'topMouseDown');
     expect(mousedown).toBe(null);
 
-    var mouseup = extract(node, topLevelTypes.topMouseUp);
+    var mouseup = extract(node, 'topMouseUp');
     expect(mouseup).not.toBe(null);
diff --git a/src/renderers/dom/client/eventPlugins/__tests__/SimpleEventPlugin-test.js b/src/renderers/dom/client/eventPlugins/__tests__/SimpleEventPlugin-test.js
new file mode 100644
index 000000000..09dbea866
--- /dev/null
+++ b/src/renderers/dom/client/eventPlugins/__tests__/SimpleEventPlugin-test.js
@@ -0,0 +1,188 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+describe('SimpleEventPlugin', function() {
+  var React;
+  var ReactDOM;
+  var ReactTestUtils;
+
+  var onClick;
+
+  function expectClickThru(element) {
+    ReactTestUtils.SimulateNative.click(ReactDOM.findDOMNode(element));
+    expect(onClick.mock.calls.length).toBe(1);
+  }
+
+  function expectNoClickThru(element) {
+    ReactTestUtils.SimulateNative.click(ReactDOM.findDOMNode(element));
+    expect(onClick.mock.calls.length).toBe(0);
+  }
+
+  function mounted(element) {
+    element = ReactTestUtils.renderIntoDocument(element);
+    return element;
+  }
+
+  beforeEach(function() {
+    React = require('React');
+    ReactDOM = require('ReactDOM');
+    ReactTestUtils = require('ReactTestUtils');
+
+    onClick = jest.fn();
+  });
+
+  it('A non-interactive tags click when disabled', function() {
+    var element = <div onClick={onClick} />;
+    expectClickThru(mounted(element));
+  });
+
+  it('A non-interactive tags clicks bubble when disabled', function() {
+    var element = ReactTestUtils.renderIntoDocument(
+      <div onClick={onClick}><div /></div>,
+    );
+    var child = ReactDOM.findDOMNode(element).firstChild;
+
+    ReactTestUtils.SimulateNative.click(child);
+    expect(onClick.mock.calls.length).toBe(1);
+  });
+
+  it('does not register a click when clicking a child of a disabled element', function() {
+    var element = ReactTestUtils.renderIntoDocument(
+      <button onClick={onClick} disabled={true}><span /></button>,
+    );
+    var child = ReactDOM.findDOMNode(element).querySelector('span');
+
+    ReactTestUtils.SimulateNative.click(child);
+    expect(onClick.mock.calls.length).toBe(0);
+  });
+
+  it('triggers click events for children of disabled elements', function() {
+    var element = ReactTestUtils.renderIntoDocument(
+      <button disabled={true}><span onClick={onClick} /></button>,
+    );
+    var child = ReactDOM.findDOMNode(element).querySelector('span');
+
+    ReactTestUtils.SimulateNative.click(child);
+    expect(onClick.mock.calls.length).toBe(1);
+  });
+
+  it('triggers parent captured click events when target is a child of a disabled elements', function() {
+    var element = ReactTestUtils.renderIntoDocument(
+      <div onClickCapture={onClick}>
+        <button disabled={true}><span /></button>
+      </div>,
+    );
+    var child = ReactDOM.findDOMNode(element).querySelector('span');
+
+    ReactTestUtils.SimulateNative.click(child);
+    expect(onClick.mock.calls.length).toBe(1);
+  });
+
+  it('triggers captured click events for children of disabled elements', function() {
+    var element = ReactTestUtils.renderIntoDocument(
+      <button disabled={true}><span onClickCapture={onClick} /></button>,
+    );
+    var child = ReactDOM.findDOMNode(element).querySelector('span');
+
+    ReactTestUtils.SimulateNative.click(child);
+    expect(onClick.mock.calls.length).toBe(1);
+  });
+
+  ['button', 'input', 'select', 'textarea'].forEach(function(tagName) {
+    describe(tagName, function() {
+      it('should forward clicks when it starts out not disabled', () => {
+        var element = React.createElement(tagName, {
+          onClick: onClick,
+        });
+
+        expectClickThru(mounted(element));
+      });
+
+      it('should not forward clicks when it starts out disabled', () => {
+        var element = React.createElement(tagName, {
+          onClick: onClick,
+          disabled: true,
+        });
+
+        expectNoClickThru(mounted(element));
+      });
+
+      it('should forward clicks when it becomes not disabled', () => {
+        var container = document.createElement('div');
+        var element = ReactDOM.render(
+          React.createElement(tagName, {onClick: onClick, disabled: true}),
+          container,
+        );
+        element = ReactDOM.render(
+          React.createElement(tagName, {onClick: onClick}),
+          container,
+        );
+        expectClickThru(element);
+      });
+
+      it('should not forward clicks when it becomes disabled', () => {
+        var container = document.createElement('div');
+        var element = ReactDOM.render(
+          React.createElement(tagName, {onClick: onClick}),
+          container,
+        );
+        element = ReactDOM.render(
+          React.createElement(tagName, {onClick: onClick, disabled: true}),
+          container,
+        );
+        expectNoClickThru(element);
+      });
+
+      it('should work correctly if the listener is changed', () => {
+        var container = document.createElement('div');
+        var element = ReactDOM.render(
+          React.createElement(tagName, {onClick: onClick, disabled: true}),
+          container,
+        );
+        element = ReactDOM.render(
+          React.createElement(tagName, {onClick: onClick, disabled: false}),
+          container,
+        );
+        expectClickThru(element);
+      });
+    });
+  });
+
+  describe('iOS bubbling click fix', function() {
+    // See http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
+
+    it('does not add a local click to interactive elements', function() {
+      var container = document.createElement('div');
+
+      ReactDOM.render(<button onClick={onClick} />, container);
+
+      var node = container.firstChild;
+
+      node.dispatchEvent(new MouseEvent('click'));
+
+      expect(onClick.mock.calls.length).toBe(0);
+    });
+
+    it('adds a local click listener to non-interactive elements', function() {
+      var container = document.createElement('div');
+
+      ReactDOM.render(<div onClick={onClick} />, container);
+
+      var node = container.firstChild;
+
+      node.dispatchEvent(new MouseEvent('click'));
+
+      expect(onClick.mock.calls.length).toBe(0);
+    });
+  });
+});
diff --git a/src/renderers/dom/client/findDOMNode.js b/src/renderers/dom/client/findDOMNode.js
index 65c807009..9af446e20 100644
--- a/src/renderers/dom/client/findDOMNode.js
+++ b/src/renderers/dom/client/findDOMNode.js
@@ -17,3 +17,3 @@ var ReactInstanceMap = require('ReactInstanceMap');
 
-var getNativeComponentFromComposite = require('getNativeComponentFromComposite');
+var getHostComponentFromComposite = require('getHostComponentFromComposite');
 var invariant = require('invariant');
@@ -24,2 +24,4 @@ var warning = require('warning');
  *
+ * See https://facebook.github.io/react/docs/top-level-api.html#reactdom.finddomnode
+ *
  * @param {ReactComponent|DOMElement} componentOrElement
@@ -34,7 +36,7 @@ function findDOMNode(componentOrElement) {
         '%s is accessing findDOMNode inside its render(). ' +
-        'render() should be a pure function of props and state. It should ' +
-        'never access something that requires stale data from the previous ' +
-        'render, such as refs. Move this logic to componentDidMount and ' +
-        'componentDidUpdate instead.',
-        owner.getName() || 'A component'
+          'render() should be a pure function of props and state. It should ' +
+          'never access something that requires stale data from the previous ' +
+          'render, such as refs. Move this logic to componentDidMount and ' +
+          'componentDidUpdate instead.',
+        owner.getName() || 'A component',
       );
@@ -52,3 +54,3 @@ function findDOMNode(componentOrElement) {
   if (inst) {
-    inst = getNativeComponentFromComposite(inst);
+    inst = getHostComponentFromComposite(inst);
     return inst ? ReactDOMComponentTree.getNodeFromInstance(inst) : null;
@@ -57,6 +59,3 @@ function findDOMNode(componentOrElement) {
   if (typeof componentOrElement.render === 'function') {
-    invariant(
-      false,
-      'findDOMNode was called on an unmounted component.'
-    );
+    invariant(false, 'findDOMNode was called on an unmounted component.');
   } else {
@@ -65,3 +64,3 @@ function findDOMNode(componentOrElement) {
       'Element appears to be neither ReactComponent nor DOMNode (keys: %s)',
-      Object.keys(componentOrElement)
+      Object.keys(componentOrElement),
     );
diff --git a/src/renderers/dom/client/inputValueTracking.js b/src/renderers/dom/client/inputValueTracking.js
new file mode 100644
index 000000000..f0086f03a
--- /dev/null
+++ b/src/renderers/dom/client/inputValueTracking.js
@@ -0,0 +1,135 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule inputValueTracking
+ */
+
+'use strict';
+var ReactDOMComponentTree = require('ReactDOMComponentTree');
+
+function isCheckable(elem) {
+  var type = elem.type;
+  var nodeName = elem.nodeName;
+  return (
+    nodeName &&
+    nodeName.toLowerCase() === 'input' &&
+    (type === 'checkbox' || type === 'radio')
+  );
+}
+
+function getTracker(inst) {
+  return inst._wrapperState.valueTracker;
+}
+
+function attachTracker(inst, tracker) {
+  inst._wrapperState.valueTracker = tracker;
+}
+
+function detachTracker(inst) {
+  delete inst._wrapperState.valueTracker;
+}
+
+function getValueFromNode(node) {
+  var value;
+  if (node) {
+    value = isCheckable(node) ? '' + node.checked : node.value;
+  }
+  return value;
+}
+
+var inputValueTracking = {
+  // exposed for testing
+  _getTrackerFromNode(node) {
+    return getTracker(ReactDOMComponentTree.getInstanceFromNode(node));
+  },
+
+  track: function(inst) {
+    if (getTracker(inst)) {
+      return;
+    }
+
+    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
+    var valueField = isCheckable(node) ? 'checked' : 'value';
+    var descriptor = Object.getOwnPropertyDescriptor(
+      node.constructor.prototype,
+      valueField,
+    );
+
+    var currentValue = '' + node[valueField];
+
+    // if someone has already defined a value or Safari, then bail
+    // and don't track value will cause over reporting of changes,
+    // but it's better then a hard failure
+    // (needed for certain tests that spyOn input values and Safari)
+    if (
+      node.hasOwnProperty(valueField) ||
+      typeof descriptor.get !== 'function' ||
+      typeof descriptor.set !== 'function'
+    ) {
+      return;
+    }
+
+    Object.defineProperty(node, valueField, {
+      enumerable: descriptor.enumerable,
+      configurable: true,
+      get: function() {
+        return descriptor.get.call(this);
+      },
+      set: function(value) {
+        currentValue = '' + value;
+        descriptor.set.call(this, value);
+      },
+    });
+
+    attachTracker(inst, {
+      getValue() {
+        return currentValue;
+      },
+      setValue(value) {
+        currentValue = '' + value;
+      },
+      stopTracking() {
+        detachTracker(inst);
+        delete node[valueField];
+      },
+    });
+  },
+
+  updateValueIfChanged(inst) {
+    if (!inst) {
+      return false;
+    }
+    var tracker = getTracker(inst);
+
+    if (!tracker) {
+      inputValueTracking.track(inst);
+      return true;
+    }
+
+    var lastValue = tracker.getValue();
+    var nextValue = getValueFromNode(
+      ReactDOMComponentTree.getNodeFromInstance(inst),
+    );
+
+    if (nextValue !== lastValue) {
+      tracker.setValue(nextValue);
+      return true;
+    }
+
+    return false;
+  },
+
+  stopTracking(inst) {
+    var tracker = getTracker(inst);
+    if (tracker) {
+      tracker.stopTracking();
+    }
+  },
+};
+
+module.exports = inputValueTracking;
diff --git a/src/addons/renderSubtreeIntoContainer.js b/src/renderers/dom/client/renderSubtreeIntoContainer.js
similarity index 89%
rename from src/addons/renderSubtreeIntoContainer.js
rename to src/renderers/dom/client/renderSubtreeIntoContainer.js
index e1e7e3f09..d47e2ad2e 100644
--- a/src/addons/renderSubtreeIntoContainer.js
+++ b/src/renderers/dom/client/renderSubtreeIntoContainer.js
@@ -8,4 +8,4 @@
  *
-* @providesModule renderSubtreeIntoContainer
-*/
+ * @providesModule renderSubtreeIntoContainer
+ */
 
diff --git a/src/renderers/dom/client/syntheticEvents/SyntheticAnimationEvent.js b/src/renderers/dom/client/syntheticEvents/SyntheticAnimationEvent.js
index 17b6f368b..1a6925a11 100644
--- a/src/renderers/dom/client/syntheticEvents/SyntheticAnimationEvent.js
+++ b/src/renderers/dom/client/syntheticEvents/SyntheticAnimationEvent.js
@@ -36,11 +36,14 @@ function SyntheticAnimationEvent(
   nativeEvent,
-  nativeEventTarget
+  nativeEventTarget,
 ) {
-  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
+  return SyntheticEvent.call(
+    this,
+    dispatchConfig,
+    dispatchMarker,
+    nativeEvent,
+    nativeEventTarget,
+  );
 }
 
-SyntheticEvent.augmentClass(
-  SyntheticAnimationEvent,
-  AnimationEventInterface
-);
+SyntheticEvent.augmentClass(SyntheticAnimationEvent, AnimationEventInterface);
 
diff --git a/src/renderers/dom/client/syntheticEvents/SyntheticClipboardEvent.js b/src/renderers/dom/client/syntheticEvents/SyntheticClipboardEvent.js
index cd0d4b226..e277334b6 100644
--- a/src/renderers/dom/client/syntheticEvents/SyntheticClipboardEvent.js
+++ b/src/renderers/dom/client/syntheticEvents/SyntheticClipboardEvent.js
@@ -21,7 +21,5 @@ var ClipboardEventInterface = {
   clipboardData: function(event) {
-    return (
-      'clipboardData' in event ?
-        event.clipboardData :
-        window.clipboardData
-    );
+    return 'clipboardData' in event
+      ? event.clipboardData
+      : window.clipboardData;
   },
@@ -35,4 +33,15 @@ var ClipboardEventInterface = {
  */
-function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
-  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
+function SyntheticClipboardEvent(
+  dispatchConfig,
+  dispatchMarker,
+  nativeEvent,
+  nativeEventTarget,
+) {
+  return SyntheticEvent.call(
+    this,
+    dispatchConfig,
+    dispatchMarker,
+    nativeEvent,
+    nativeEventTarget,
+  );
 }
diff --git a/src/renderers/dom/client/syntheticEvents/SyntheticCompositionEvent.js b/src/renderers/dom/client/syntheticEvents/SyntheticCompositionEvent.js
index 35b7f7ce1..77c53c5c9 100644
--- a/src/renderers/dom/client/syntheticEvents/SyntheticCompositionEvent.js
+++ b/src/renderers/dom/client/syntheticEvents/SyntheticCompositionEvent.js
@@ -33,5 +33,11 @@ function SyntheticCompositionEvent(
   nativeEvent,
-  nativeEventTarget
+  nativeEventTarget,
 ) {
-  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
+  return SyntheticEvent.call(
+    this,
+    dispatchConfig,
+    dispatchMarker,
+    nativeEvent,
+    nativeEventTarget,
+  );
 }
@@ -40,3 +46,3 @@ SyntheticEvent.augmentClass(
   SyntheticCompositionEvent,
-  CompositionEventInterface
+  CompositionEventInterface,
 );
diff --git a/src/renderers/dom/client/syntheticEvents/SyntheticDragEvent.js b/src/renderers/dom/client/syntheticEvents/SyntheticDragEvent.js
index f5d97420b..3f74638f9 100644
--- a/src/renderers/dom/client/syntheticEvents/SyntheticDragEvent.js
+++ b/src/renderers/dom/client/syntheticEvents/SyntheticDragEvent.js
@@ -29,4 +29,15 @@ var DragEventInterface = {
  */
-function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
-  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
+function SyntheticDragEvent(
+  dispatchConfig,
+  dispatchMarker,
+  nativeEvent,
+  nativeEventTarget,
+) {
+  return SyntheticMouseEvent.call(
+    this,
+    dispatchConfig,
+    dispatchMarker,
+    nativeEvent,
+    nativeEventTarget,
+  );
 }
diff --git a/src/renderers/dom/client/syntheticEvents/SyntheticFocusEvent.js b/src/renderers/dom/client/syntheticEvents/SyntheticFocusEvent.js
index e145b8a43..de0616834 100644
--- a/src/renderers/dom/client/syntheticEvents/SyntheticFocusEvent.js
+++ b/src/renderers/dom/client/syntheticEvents/SyntheticFocusEvent.js
@@ -29,4 +29,15 @@ var FocusEventInterface = {
  */
-function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
-  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
+function SyntheticFocusEvent(
+  dispatchConfig,
+  dispatchMarker,
+  nativeEvent,
+  nativeEventTarget,
+) {
+  return SyntheticUIEvent.call(
+    this,
+    dispatchConfig,
+    dispatchMarker,
+    nativeEvent,
+    nativeEventTarget,
+  );
 }
diff --git a/src/renderers/dom/client/syntheticEvents/SyntheticInputEvent.js b/src/renderers/dom/client/syntheticEvents/SyntheticInputEvent.js
index ba99c7c89..2639d3b53 100644
--- a/src/renderers/dom/client/syntheticEvents/SyntheticInputEvent.js
+++ b/src/renderers/dom/client/syntheticEvents/SyntheticInputEvent.js
@@ -34,11 +34,14 @@ function SyntheticInputEvent(
   nativeEvent,
-  nativeEventTarget
+  nativeEventTarget,
 ) {
-  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
+  return SyntheticEvent.call(
+    this,
+    dispatchConfig,
+    dispatchMarker,
+    nativeEvent,
+    nativeEventTarget,
+  );
 }
 
-SyntheticEvent.augmentClass(
-  SyntheticInputEvent,
-  InputEventInterface
-);
+SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
 
diff --git a/src/renderers/dom/client/syntheticEvents/SyntheticKeyboardEvent.js b/src/renderers/dom/client/syntheticEvents/SyntheticKeyboardEvent.js
index ce71c17ca..8cc554b93 100644
--- a/src/renderers/dom/client/syntheticEvents/SyntheticKeyboardEvent.js
+++ b/src/renderers/dom/client/syntheticEvents/SyntheticKeyboardEvent.js
@@ -77,4 +77,15 @@ var KeyboardEventInterface = {
  */
-function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
-  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
+function SyntheticKeyboardEvent(
+  dispatchConfig,
+  dispatchMarker,
+  nativeEvent,
+  nativeEventTarget,
+) {
+  return SyntheticUIEvent.call(
+    this,
+    dispatchConfig,
+    dispatchMarker,
+    nativeEvent,
+    nativeEventTarget,
+  );
 }
diff --git a/src/renderers/dom/client/syntheticEvents/SyntheticMouseEvent.js b/src/renderers/dom/client/syntheticEvents/SyntheticMouseEvent.js
index e8962b9ad..786d20c79 100644
--- a/src/renderers/dom/client/syntheticEvents/SyntheticMouseEvent.js
+++ b/src/renderers/dom/client/syntheticEvents/SyntheticMouseEvent.js
@@ -48,6 +48,7 @@ var MouseEventInterface = {
   relatedTarget: function(event) {
-    return event.relatedTarget || (
-      event.fromElement === event.srcElement ?
-        event.toElement :
-        event.fromElement
+    return (
+      event.relatedTarget ||
+      (event.fromElement === event.srcElement
+        ? event.toElement
+        : event.fromElement)
     );
@@ -56,10 +57,10 @@ var MouseEventInterface = {
   pageX: function(event) {
-    return 'pageX' in event ?
-      event.pageX :
-      event.clientX + ViewportMetrics.currentScrollLeft;
+    return 'pageX' in event
+      ? event.pageX
+      : event.clientX + ViewportMetrics.currentScrollLeft;
   },
   pageY: function(event) {
-    return 'pageY' in event ?
-      event.pageY :
-      event.clientY + ViewportMetrics.currentScrollTop;
+    return 'pageY' in event
+      ? event.pageY
+      : event.clientY + ViewportMetrics.currentScrollTop;
   },
@@ -73,4 +74,15 @@ var MouseEventInterface = {
  */
-function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
-  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
+function SyntheticMouseEvent(
+  dispatchConfig,
+  dispatchMarker,
+  nativeEvent,
+  nativeEventTarget,
+) {
+  return SyntheticUIEvent.call(
+    this,
+    dispatchConfig,
+    dispatchMarker,
+    nativeEvent,
+    nativeEventTarget,
+  );
 }
diff --git a/src/renderers/dom/client/syntheticEvents/SyntheticTouchEvent.js b/src/renderers/dom/client/syntheticEvents/SyntheticTouchEvent.js
index 38078a732..a954c9fec 100644
--- a/src/renderers/dom/client/syntheticEvents/SyntheticTouchEvent.js
+++ b/src/renderers/dom/client/syntheticEvents/SyntheticTouchEvent.js
@@ -38,4 +38,15 @@ var TouchEventInterface = {
  */
-function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
-  return SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
+function SyntheticTouchEvent(
+  dispatchConfig,
+  dispatchMarker,
+  nativeEvent,
+  nativeEventTarget,
+) {
+  return SyntheticUIEvent.call(
+    this,
+    dispatchConfig,
+    dispatchMarker,
+    nativeEvent,
+    nativeEventTarget,
+  );
 }
diff --git a/src/renderers/dom/client/syntheticEvents/SyntheticTransitionEvent.js b/src/renderers/dom/client/syntheticEvents/SyntheticTransitionEvent.js
index 982410f78..4b9087a1c 100644
--- a/src/renderers/dom/client/syntheticEvents/SyntheticTransitionEvent.js
+++ b/src/renderers/dom/client/syntheticEvents/SyntheticTransitionEvent.js
@@ -36,11 +36,14 @@ function SyntheticTransitionEvent(
   nativeEvent,
-  nativeEventTarget
+  nativeEventTarget,
 ) {
-  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
+  return SyntheticEvent.call(
+    this,
+    dispatchConfig,
+    dispatchMarker,
+    nativeEvent,
+    nativeEventTarget,
+  );
 }
 
-SyntheticEvent.augmentClass(
-  SyntheticTransitionEvent,
-  TransitionEventInterface
-);
+SyntheticEvent.augmentClass(SyntheticTransitionEvent, TransitionEventInterface);
 
diff --git a/src/renderers/dom/client/syntheticEvents/SyntheticUIEvent.js b/src/renderers/dom/client/syntheticEvents/SyntheticUIEvent.js
index b0eae7bed..308d19048 100644
--- a/src/renderers/dom/client/syntheticEvents/SyntheticUIEvent.js
+++ b/src/renderers/dom/client/syntheticEvents/SyntheticUIEvent.js
@@ -28,3 +28,3 @@ var UIEventInterface = {
     var target = getEventTarget(event);
-    if (target != null && target.window === target) {
+    if (target.window === target) {
       // target is a window object
@@ -52,4 +52,15 @@ var UIEventInterface = {
  */
-function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
-  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
+function SyntheticUIEvent(
+  dispatchConfig,
+  dispatchMarker,
+  nativeEvent,
+  nativeEventTarget,
+) {
+  return SyntheticEvent.call(
+    this,
+    dispatchConfig,
+    dispatchMarker,
+    nativeEvent,
+    nativeEventTarget,
+  );
 }
diff --git a/src/renderers/dom/client/syntheticEvents/SyntheticWheelEvent.js b/src/renderers/dom/client/syntheticEvents/SyntheticWheelEvent.js
index eea628e33..e1359a250 100644
--- a/src/renderers/dom/client/syntheticEvents/SyntheticWheelEvent.js
+++ b/src/renderers/dom/client/syntheticEvents/SyntheticWheelEvent.js
@@ -21,16 +21,15 @@ var WheelEventInterface = {
   deltaX: function(event) {
-    return (
-      'deltaX' in event ? event.deltaX :
-      // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
-      'wheelDeltaX' in event ? -event.wheelDeltaX : 0
-    );
+    return 'deltaX' in event
+      ? event.deltaX
+      : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
+        'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
   },
   deltaY: function(event) {
-    return (
-      'deltaY' in event ? event.deltaY :
-      // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
-      'wheelDeltaY' in event ? -event.wheelDeltaY :
-      // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
-      'wheelDelta' in event ? -event.wheelDelta : 0
-    );
+    return 'deltaY' in event
+      ? event.deltaY
+      : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
+        'wheelDeltaY' in event
+        ? -event.wheelDeltaY
+        : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
+          'wheelDelta' in event ? -event.wheelDelta : 0;
   },
@@ -51,4 +50,15 @@ var WheelEventInterface = {
  */
-function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
-  return SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
+function SyntheticWheelEvent(
+  dispatchConfig,
+  dispatchMarker,
+  nativeEvent,
+  nativeEventTarget,
+) {
+  return SyntheticMouseEvent.call(
+    this,
+    dispatchConfig,
+    dispatchMarker,
+    nativeEvent,
+    nativeEventTarget,
+  );
 }
diff --git a/src/renderers/dom/client/syntheticEvents/__tests__/SyntheticClipboardEvent-test.js b/src/renderers/dom/client/syntheticEvents/__tests__/SyntheticClipboardEvent-test.js
index 7776f5420..97f1a47f0 100644
--- a/src/renderers/dom/client/syntheticEvents/__tests__/SyntheticClipboardEvent-test.js
+++ b/src/renderers/dom/client/syntheticEvents/__tests__/SyntheticClipboardEvent-test.js
@@ -15,6 +15,6 @@ var SyntheticClipboardEvent;
 
-describe('SyntheticClipboardEvent', function() {
+describe('SyntheticClipboardEvent', () => {
   var createEvent;
 
-  beforeEach(function() {
+  beforeEach(() => {
     SyntheticClipboardEvent = require('SyntheticClipboardEvent');
@@ -26,13 +26,16 @@ describe('SyntheticClipboardEvent', function() {
 
-  describe('ClipboardEvent interface', function() {
-    describe('clipboardData', function() {
-      describe('when event has clipboardData', function() {
-        it("returns event's clipboardData", function() {
+  describe('ClipboardEvent interface', () => {
+    describe('clipboardData', () => {
+      describe('when event has clipboardData', () => {
+        it("returns event's clipboardData", () => {
           // Mock clipboardData since native implementation doesn't have a constructor
-          var clipboardData = jasmine.createSpyObj(
-            'clipboardData',
-            ['dropEffect', 'effectAllowed', 'files', 'items', 'types']
-          );
+          var clipboardData = jasmine.createSpyObj('clipboardData', [
+            'dropEffect',
+            'effectAllowed',
+            'files',
+            'items',
+            'types',
+          ]);
           var clipboardEvent = createEvent({clipboardData: clipboardData});
-          
+
           expect(clipboardEvent.clipboardData).toBe(clipboardData);
@@ -43,4 +46,4 @@ describe('SyntheticClipboardEvent', function() {
 
-  describe('EventInterface', function() {
-    it('normalizes properties from the Event interface', function() {
+  describe('EventInterface', () => {
+    it('normalizes properties from the Event interface', () => {
       var target = document.createElement('div');
@@ -52,3 +55,3 @@ describe('SyntheticClipboardEvent', function() {
 
-    it('is able to `preventDefault` and `stopPropagation`', function() {
+    it('is able to `preventDefault` and `stopPropagation`', () => {
       var nativeEvent = {};
@@ -65,3 +68,3 @@ describe('SyntheticClipboardEvent', function() {
 
-    it('is able to `persist`', function() {
+    it('is able to `persist`', () => {
       var syntheticEvent = createEvent({});
diff --git a/src/renderers/dom/client/syntheticEvents/__tests__/SyntheticEvent-test.js b/src/renderers/dom/client/syntheticEvents/__tests__/SyntheticEvent-test.js
index a8799c8f8..d5c678201 100644
--- a/src/renderers/dom/client/syntheticEvents/__tests__/SyntheticEvent-test.js
+++ b/src/renderers/dom/client/syntheticEvents/__tests__/SyntheticEvent-test.js
@@ -18,6 +18,6 @@ var ReactTestUtils;
 
-describe('SyntheticEvent', function() {
+describe('SyntheticEvent', () => {
   var createEvent;
 
-  beforeEach(function() {
+  beforeEach(() => {
     SyntheticEvent = require('SyntheticEvent');
@@ -33,3 +33,3 @@ describe('SyntheticEvent', function() {
 
-  it('should normalize `target` from the nativeEvent', function() {
+  it('should normalize `target` from the nativeEvent', () => {
     var target = document.createElement('div');
@@ -41,3 +41,3 @@ describe('SyntheticEvent', function() {
 
-  it('should be able to `preventDefault`', function() {
+  it('should be able to `preventDefault`', () => {
     var nativeEvent = {};
@@ -54,6 +54,6 @@ describe('SyntheticEvent', function() {
 
-  it('should be prevented if nativeEvent is prevented', function() {
-    expect(
-      createEvent({defaultPrevented: true}).isDefaultPrevented()
-    ).toBe(true);
+  it('should be prevented if nativeEvent is prevented', () => {
+    expect(createEvent({defaultPrevented: true}).isDefaultPrevented()).toBe(
+      true,
+    );
     expect(createEvent({returnValue: false}).isDefaultPrevented()).toBe(true);
@@ -61,3 +61,3 @@ describe('SyntheticEvent', function() {
 
-  it('should be able to `stopPropagation`', function() {
+  it('should be able to `stopPropagation`', () => {
     var nativeEvent = {};
@@ -72,3 +72,3 @@ describe('SyntheticEvent', function() {
 
-  it('should be able to `persist`', function() {
+  it('should be able to `persist`', () => {
     var syntheticEvent = createEvent({});
@@ -80,3 +80,3 @@ describe('SyntheticEvent', function() {
 
-  it('should be nullified if the synthetic event has called destructor and log warnings', function() {
+  it('should be nullified if the synthetic event has called destructor and log warnings', () => {
     spyOn(console, 'error');
@@ -89,10 +89,10 @@ describe('SyntheticEvent', function() {
     // once for each property accessed
-    expect(console.error.calls.length).toBe(3);
+    expect(console.error.calls.count()).toBe(3);
     // assert the first warning for accessing `type`
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: This synthetic event is reused for performance reasons. If ' +
-      'you\'re seeing this, you\'re accessing the property `type` on a ' +
-      'released/nullified synthetic event. This is set to null. If you must ' +
-      'keep the original synthetic event around, use event.persist(). ' +
-      'See https://fb.me/react-event-pooling for more information.'
+        "you're seeing this, you're accessing the property `type` on a " +
+        'released/nullified synthetic event. This is set to null. If you must ' +
+        'keep the original synthetic event around, use event.persist(). ' +
+        'See https://fb.me/react-event-pooling for more information.',
     );
@@ -100,3 +100,3 @@ describe('SyntheticEvent', function() {
 
-  it('should warn when setting properties of a destructored synthetic event', function() {
+  it('should warn when setting properties of a destructored synthetic event', () => {
     spyOn(console, 'error');
@@ -105,10 +105,10 @@ describe('SyntheticEvent', function() {
     syntheticEvent.destructor();
-    expect(syntheticEvent.type = 'MouseEvent').toBe('MouseEvent');
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect((syntheticEvent.type = 'MouseEvent')).toBe('MouseEvent');
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: This synthetic event is reused for performance reasons. If ' +
-      'you\'re seeing this, you\'re setting the property `type` on a ' +
-      'released/nullified synthetic event. This is effectively a no-op. If you must ' +
-      'keep the original synthetic event around, use event.persist(). ' +
-      'See https://fb.me/react-event-pooling for more information.'
+        "you're seeing this, you're setting the property `type` on a " +
+        'released/nullified synthetic event. This is effectively a no-op. If you must ' +
+        'keep the original synthetic event around, use event.persist(). ' +
+        'See https://fb.me/react-event-pooling for more information.',
     );
@@ -116,3 +116,3 @@ describe('SyntheticEvent', function() {
 
-  it('should warn if the synthetic event has been released when calling `preventDefault`', function() {
+  it('should warn if the synthetic event has been released when calling `preventDefault`', () => {
     spyOn(console, 'error');
@@ -121,9 +121,9 @@ describe('SyntheticEvent', function() {
     syntheticEvent.preventDefault();
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: This synthetic event is reused for performance reasons. If ' +
-      'you\'re seeing this, you\'re accessing the method `preventDefault` on a ' +
-      'released/nullified synthetic event. This is a no-op function. If you must ' +
-      'keep the original synthetic event around, use event.persist(). ' +
-      'See https://fb.me/react-event-pooling for more information.'
+        "you're seeing this, you're accessing the method `preventDefault` on a " +
+        'released/nullified synthetic event. This is a no-op function. If you must ' +
+        'keep the original synthetic event around, use event.persist(). ' +
+        'See https://fb.me/react-event-pooling for more information.',
     );
@@ -131,3 +131,3 @@ describe('SyntheticEvent', function() {
 
-  it('should warn if the synthetic event has been released when calling `stopPropagation`', function() {
+  it('should warn if the synthetic event has been released when calling `stopPropagation`', () => {
     spyOn(console, 'error');
@@ -136,9 +136,9 @@ describe('SyntheticEvent', function() {
     syntheticEvent.stopPropagation();
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: This synthetic event is reused for performance reasons. If ' +
-      'you\'re seeing this, you\'re accessing the method `stopPropagation` on a ' +
-      'released/nullified synthetic event. This is a no-op function. If you must ' +
-      'keep the original synthetic event around, use event.persist(). ' +
-      'See https://fb.me/react-event-pooling for more information.'
+        "you're seeing this, you're accessing the method `stopPropagation` on a " +
+        'released/nullified synthetic event. This is a no-op function. If you must ' +
+        'keep the original synthetic event around, use event.persist(). ' +
+        'See https://fb.me/react-event-pooling for more information.',
     );
@@ -149,27 +149,30 @@ describe('SyntheticEvent', function() {
   // way we simulate events.
-  xit('should properly log warnings when events simulated with rendered components', function() {
-    spyOn(console, 'error');
-    var event;
-    var element = document.createElement('div');
-    function assignEvent(e) {
-      event = e;
-    }
-    var instance = ReactDOM.render(<div onClick={assignEvent} />, element);
-    ReactTestUtils.Simulate.click(ReactDOM.findDOMNode(instance));
-    expect(console.error.calls.length).toBe(0);
-
-    // access a property to cause the warning
-    event.nativeEvent; // eslint-disable-line no-unused-expressions
-
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: This synthetic event is reused for performance reasons. If ' +
-      'you\'re seeing this, you\'re accessing the property `nativeEvent` on a ' +
-      'released/nullified synthetic event. This is set to null. If you must ' +
-      'keep the original synthetic event around, use event.persist(). ' +
-      'See https://fb.me/react-event-pooling for more information.'
-    );
-  });
+  xit(
+    'should properly log warnings when events simulated with rendered components',
+    () => {
+      spyOn(console, 'error');
+      var event;
+      var element = document.createElement('div');
+      function assignEvent(e) {
+        event = e;
+      }
+      var instance = ReactDOM.render(<div onClick={assignEvent} />, element);
+      ReactTestUtils.Simulate.click(ReactDOM.findDOMNode(instance));
+      expect(console.error.calls.count()).toBe(0);
+
+      // access a property to cause the warning
+      event.nativeEvent; // eslint-disable-line no-unused-expressions
+
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toBe(
+        'Warning: This synthetic event is reused for performance reasons. If ' +
+          "you're seeing this, you're accessing the property `nativeEvent` on a " +
+          'released/nullified synthetic event. This is set to null. If you must ' +
+          'keep the original synthetic event around, use event.persist(). ' +
+          'See https://fb.me/react-event-pooling for more information.',
+      );
+    },
+  );
 
-  it('should warn if Proxy is supported and the synthetic event is added a property', function() {
+  it('should warn if Proxy is supported and the synthetic event is added a property', () => {
     spyOn(console, 'error');
@@ -180,11 +183,11 @@ describe('SyntheticEvent', function() {
     if (typeof Proxy === 'function') {
-      expect(console.error.calls.length).toBe(1);
-      expect(console.error.argsForCall[0][0]).toBe(
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toBe(
         'Warning: This synthetic event is reused for performance reasons. If ' +
-        'you\'re seeing this, you\'re adding a new property in the synthetic ' +
-        'event object. The property is never released. ' +
-        'See https://fb.me/react-event-pooling for more information.'
+          "you're seeing this, you're adding a new property in the synthetic " +
+          'event object. The property is never released. ' +
+          'See https://fb.me/react-event-pooling for more information.',
       );
     } else {
-      expect(console.error.calls.length).toBe(0);
+      expect(console.error.calls.count()).toBe(0);
     }
diff --git a/src/renderers/dom/client/syntheticEvents/__tests__/SyntheticKeyboardEvent-test.js b/src/renderers/dom/client/syntheticEvents/__tests__/SyntheticKeyboardEvent-test.js
index 9c75a7096..3b433e918 100644
--- a/src/renderers/dom/client/syntheticEvents/__tests__/SyntheticKeyboardEvent-test.js
+++ b/src/renderers/dom/client/syntheticEvents/__tests__/SyntheticKeyboardEvent-test.js
@@ -16,6 +16,6 @@ var getEventCharCode;
 
-describe('SyntheticKeyboardEvent', function() {
+describe('SyntheticKeyboardEvent', () => {
   var createEvent;
 
-  beforeEach(function() {
+  beforeEach(() => {
     // Mock getEventCharCode for proper unit testing
@@ -31,6 +31,6 @@ describe('SyntheticKeyboardEvent', function() {
 
-  describe('KeyboardEvent interface', function() {
-    describe('charCode', function() {
-      describe('when event is `keypress`', function() {
-        it('returns whatever getEventCharCode returns', function() {
+  describe('KeyboardEvent interface', () => {
+    describe('charCode', () => {
+      describe('when event is `keypress`', () => {
+        it('returns whatever getEventCharCode returns', () => {
           getEventCharCode.mockReturnValue(100500);
@@ -42,4 +42,4 @@ describe('SyntheticKeyboardEvent', function() {
 
-      describe('when event is not `keypress`', function() {
-        it('returns 0', function() {
+      describe('when event is not `keypress`', () => {
+        it('returns 0', () => {
           var keyboardEvent = createEvent({type: 'keyup', charCode: 50});
@@ -50,5 +50,5 @@ describe('SyntheticKeyboardEvent', function() {
 
-    describe('keyCode', function() {
-      describe('when event is `keydown` or `keyup`', function() {
-        it('returns a passed keyCode', function() {
+    describe('keyCode', () => {
+      describe('when event is `keydown` or `keyup`', () => {
+        it('returns a passed keyCode', () => {
           var keyboardEvent = createEvent({type: 'keyup', keyCode: 40});
@@ -58,4 +58,4 @@ describe('SyntheticKeyboardEvent', function() {
 
-      describe('when event is `keypress`', function() {
-        it('returns 0', function() {
+      describe('when event is `keypress`', () => {
+        it('returns 0', () => {
           var keyboardEvent = createEvent({type: 'keypress', charCode: 40});
@@ -66,5 +66,5 @@ describe('SyntheticKeyboardEvent', function() {
 
-    describe('which', function() {
-      describe('when event is `keypress`', function() {
-        it('returns whatever getEventCharCode returns', function() {
+    describe('which', () => {
+      describe('when event is `keypress`', () => {
+        it('returns whatever getEventCharCode returns', () => {
           getEventCharCode.mockReturnValue(9001);
@@ -76,4 +76,4 @@ describe('SyntheticKeyboardEvent', function() {
 
-      describe('when event is `keydown` or `keyup`', function() {
-        it('returns a passed keyCode', function() {
+      describe('when event is `keydown` or `keyup`', () => {
+        it('returns a passed keyCode', () => {
           var keyboardEvent = createEvent({type: 'keyup', keyCode: 40});
@@ -83,4 +83,4 @@ describe('SyntheticKeyboardEvent', function() {
 
-      describe('when event type is unknown', function() {
-        it('returns 0', function() {
+      describe('when event type is unknown', () => {
+        it('returns 0', () => {
           var keyboardEvent = createEvent({type: 'keysmack', keyCode: 40});
@@ -92,4 +92,4 @@ describe('SyntheticKeyboardEvent', function() {
 
-  describe('EventInterface', function() {
-    it('normalizes properties from the Event interface', function() {
+  describe('EventInterface', () => {
+    it('normalizes properties from the Event interface', () => {
       var target = document.createElement('div');
@@ -101,3 +101,3 @@ describe('SyntheticKeyboardEvent', function() {
 
-    it('is able to `preventDefault` and `stopPropagation`', function() {
+    it('is able to `preventDefault` and `stopPropagation`', () => {
       var nativeEvent = {};
@@ -114,3 +114,3 @@ describe('SyntheticKeyboardEvent', function() {
 
-    it('is able to `persist`', function() {
+    it('is able to `persist`', () => {
       var syntheticEvent = createEvent({});
diff --git a/src/renderers/dom/client/syntheticEvents/__tests__/SyntheticWheelEvent-test.js b/src/renderers/dom/client/syntheticEvents/__tests__/SyntheticWheelEvent-test.js
index 6ad4b488c..393ccf3fc 100644
--- a/src/renderers/dom/client/syntheticEvents/__tests__/SyntheticWheelEvent-test.js
+++ b/src/renderers/dom/client/syntheticEvents/__tests__/SyntheticWheelEvent-test.js
@@ -15,6 +15,6 @@ var SyntheticWheelEvent;
 
-describe('SyntheticWheelEvent', function() {
+describe('SyntheticWheelEvent', () => {
   var createEvent;
 
-  beforeEach(function() {
+  beforeEach(() => {
     SyntheticWheelEvent = require('SyntheticWheelEvent');
@@ -27,3 +27,3 @@ describe('SyntheticWheelEvent', function() {
 
-  it('should normalize properties from the Event interface', function() {
+  it('should normalize properties from the Event interface', () => {
     var target = document.createElement('div');
@@ -35,3 +35,3 @@ describe('SyntheticWheelEvent', function() {
 
-  it('should normalize properties from the MouseEvent interface', function() {
+  it('should normalize properties from the MouseEvent interface', () => {
     expect(createEvent({which: 2, button: 1}).button).toBe(1);
@@ -39,3 +39,3 @@ describe('SyntheticWheelEvent', function() {
 
-  it('should normalize properties from the WheelEvent interface', function() {
+  it('should normalize properties from the WheelEvent interface', () => {
     var standardEvent = createEvent({deltaX: 10, deltaY: -50});
@@ -49,3 +49,3 @@ describe('SyntheticWheelEvent', function() {
 
-  it('should be able to `preventDefault` and `stopPropagation`', function() {
+  it('should be able to `preventDefault` and `stopPropagation`', () => {
     var nativeEvent = {};
@@ -62,3 +62,3 @@ describe('SyntheticWheelEvent', function() {
 
-  it('should be able to `persist`', function() {
+  it('should be able to `persist`', () => {
     var syntheticEvent = createEvent({});
@@ -69,3 +69,2 @@ describe('SyntheticWheelEvent', function() {
   });
-
 });
diff --git a/src/renderers/dom/client/utils/DOMChildrenOperations.js b/src/renderers/dom/client/utils/DOMChildrenOperations.js
index f123aef6b..b7e4e1e10 100644
--- a/src/renderers/dom/client/utils/DOMChildrenOperations.js
+++ b/src/renderers/dom/client/utils/DOMChildrenOperations.js
@@ -15,4 +15,4 @@ var DOMLazyTree = require('DOMLazyTree');
 var Danger = require('Danger');
-var ReactMultiChildUpdateTypes = require('ReactMultiChildUpdateTypes');
-var ReactPerf = require('ReactPerf');
+var ReactDOMComponentTree = require('ReactDOMComponentTree');
+var ReactInstrumentation = require('ReactInstrumentation');
 
@@ -24,3 +24,3 @@ function getNodeAfter(parentNode, node) {
   // Special case for text components, which return [open, close] comments
-  // from getNativeNode.
+  // from getHostNode.
   if (Array.isArray(node)) {
@@ -39,10 +39,12 @@ function getNodeAfter(parentNode, node) {
  */
-var insertChildAt = createMicrosoftUnsafeLocalFunction(
-  function(parentNode, childNode, referenceNode) {
-    // We rely exclusively on `insertBefore(node, null)` instead of also using
-    // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
-    // we are careful to use `null`.)
-    parentNode.insertBefore(childNode, referenceNode);
-  }
-);
+var insertChildAt = createMicrosoftUnsafeLocalFunction(function(
+  parentNode,
+  childNode,
+  referenceNode,
+) {
+  // We rely exclusively on `insertBefore(node, null)` instead of also using
+  // `appendChild(node)`. (Using `undefined` is not allowed by all browsers so
+  // we are careful to use `null`.)
+  parentNode.insertBefore(childNode, referenceNode);
+});
 
@@ -74,3 +76,3 @@ function moveDelimitedText(
   closingComment,
-  referenceNode
+  referenceNode,
 ) {
@@ -109,3 +111,3 @@ function replaceDelimitedText(openingComment, closingComment, stringText) {
         document.createTextNode(stringText),
-        nodeAfterComment
+        nodeAfterComment,
       );
@@ -122,2 +124,34 @@ function replaceDelimitedText(openingComment, closingComment, stringText) {
   }
+
+  if (__DEV__) {
+    ReactInstrumentation.debugTool.onHostOperation({
+      instanceID: ReactDOMComponentTree.getInstanceFromNode(openingComment)
+        ._debugID,
+      type: 'replace text',
+      payload: stringText,
+    });
+  }
+}
+
+var dangerouslyReplaceNodeWithMarkup = Danger.dangerouslyReplaceNodeWithMarkup;
+if (__DEV__) {
+  dangerouslyReplaceNodeWithMarkup = function(oldChild, markup, prevInstance) {
+    Danger.dangerouslyReplaceNodeWithMarkup(oldChild, markup);
+    if (prevInstance._debugID !== 0) {
+      ReactInstrumentation.debugTool.onHostOperation({
+        instanceID: prevInstance._debugID,
+        type: 'replace with',
+        payload: markup.toString(),
+      });
+    } else {
+      var nextInstance = ReactDOMComponentTree.getInstanceFromNode(markup.node);
+      if (nextInstance._debugID !== 0) {
+        ReactInstrumentation.debugTool.onHostOperation({
+          instanceID: nextInstance._debugID,
+          type: 'mount',
+          payload: markup.toString(),
+        });
+      }
+    }
+  };
 }
@@ -128,4 +162,3 @@ function replaceDelimitedText(openingComment, closingComment, stringText) {
 var DOMChildrenOperations = {
-
-  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,
+  dangerouslyReplaceNodeWithMarkup: dangerouslyReplaceNodeWithMarkup,
 
@@ -141,2 +174,8 @@ var DOMChildrenOperations = {
   processUpdates: function(parentNode, updates) {
+    if (__DEV__) {
+      var parentNodeDebugID = ReactDOMComponentTree.getInstanceFromNode(
+        parentNode,
+      )._debugID;
+    }
+
     for (var k = 0; k < updates.length; k++) {
@@ -144,3 +183,3 @@ var DOMChildrenOperations = {
       switch (update.type) {
-        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
+        case 'INSERT_MARKUP':
           insertLazyTreeChildAt(
@@ -148,6 +187,16 @@ var DOMChildrenOperations = {
             update.content,
-            getNodeAfter(parentNode, update.afterNode)
+            getNodeAfter(parentNode, update.afterNode),
           );
+          if (__DEV__) {
+            ReactInstrumentation.debugTool.onHostOperation({
+              instanceID: parentNodeDebugID,
+              type: 'insert child',
+              payload: {
+                toIndex: update.toIndex,
+                content: update.content.toString(),
+              },
+            });
+          }
           break;
-        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
+        case 'MOVE_EXISTING':
           moveChild(
@@ -155,19 +204,41 @@ var DOMChildrenOperations = {
             update.fromNode,
-            getNodeAfter(parentNode, update.afterNode)
+            getNodeAfter(parentNode, update.afterNode),
           );
+          if (__DEV__) {
+            ReactInstrumentation.debugTool.onHostOperation({
+              instanceID: parentNodeDebugID,
+              type: 'move child',
+              payload: {fromIndex: update.fromIndex, toIndex: update.toIndex},
+            });
+          }
           break;
-        case ReactMultiChildUpdateTypes.SET_MARKUP:
-          setInnerHTML(
-            parentNode,
-            update.content
-          );
+        case 'SET_MARKUP':
+          setInnerHTML(parentNode, update.content);
+          if (__DEV__) {
+            ReactInstrumentation.debugTool.onHostOperation({
+              instanceID: parentNodeDebugID,
+              type: 'replace children',
+              payload: update.content.toString(),
+            });
+          }
           break;
-        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
-          setTextContent(
-            parentNode,
-            update.content
-          );
+        case 'TEXT_CONTENT':
+          setTextContent(parentNode, update.content);
+          if (__DEV__) {
+            ReactInstrumentation.debugTool.onHostOperation({
+              instanceID: parentNodeDebugID,
+              type: 'replace text',
+              payload: update.content.toString(),
+            });
+          }
           break;
-        case ReactMultiChildUpdateTypes.REMOVE_NODE:
+        case 'REMOVE_NODE':
           removeChild(parentNode, update.fromNode);
+          if (__DEV__) {
+            ReactInstrumentation.debugTool.onHostOperation({
+              instanceID: parentNodeDebugID,
+              type: 'remove child',
+              payload: {fromIndex: update.fromIndex},
+            });
+          }
           break;
@@ -176,9 +247,4 @@ var DOMChildrenOperations = {
   },
-
 };
 
-ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
-  replaceDelimitedText: 'replaceDelimitedText',
-});
-
 module.exports = DOMChildrenOperations;
diff --git a/src/renderers/dom/client/utils/DOMLazyTree.js b/src/renderers/dom/client/utils/DOMLazyTree.js
index 249eb475c..b9401c28b 100644
--- a/src/renderers/dom/client/utils/DOMLazyTree.js
+++ b/src/renderers/dom/client/utils/DOMLazyTree.js
@@ -13,2 +13,5 @@
 
+var DOMNamespaces = require('DOMNamespaces');
+var setInnerHTML = require('setInnerHTML');
+
 var createMicrosoftUnsafeLocalFunction = require('createMicrosoftUnsafeLocalFunction');
@@ -16,2 +19,5 @@ var setTextContent = require('setTextContent');
 
+var ELEMENT_NODE_TYPE = 1;
+var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
+
 /**
@@ -27,10 +33,8 @@ var setTextContent = require('setTextContent');
  */
-var enableLazy = (
-  typeof document !== 'undefined' &&
-  typeof document.documentMode === 'number'
-  ||
-  typeof navigator !== 'undefined' &&
-  typeof navigator.userAgent === 'string' &&
-  /\bEdge\/\d/.test(navigator.userAgent)
-);
+var enableLazy =
+  (typeof document !== 'undefined' &&
+    typeof document.documentMode === 'number') ||
+  (typeof navigator !== 'undefined' &&
+    typeof navigator.userAgent === 'string' &&
+    /\bEdge\/\d/.test(navigator.userAgent));
 
@@ -47,3 +51,3 @@ function insertTreeChildren(tree) {
   } else if (tree.html != null) {
-    node.innerHTML = tree.html;
+    setInnerHTML(node, tree.html);
   } else if (tree.text != null) {
@@ -53,17 +57,27 @@ function insertTreeChildren(tree) {
 
-var insertTreeBefore = createMicrosoftUnsafeLocalFunction(
-  function(parentNode, tree, referenceNode) {
-    // DocumentFragments aren't actually part of the DOM after insertion so
-    // appending children won't update the DOM. We need to ensure the fragment
-    // is properly populated first, breaking out of our lazy approach for just
-    // this level.
-    if (tree.node.nodeType === 11) {
-      insertTreeChildren(tree);
-      parentNode.insertBefore(tree.node, referenceNode);
-    } else {
-      parentNode.insertBefore(tree.node, referenceNode);
-      insertTreeChildren(tree);
-    }
+var insertTreeBefore = createMicrosoftUnsafeLocalFunction(function(
+  parentNode,
+  tree,
+  referenceNode,
+) {
+  // DocumentFragments aren't actually part of the DOM after insertion so
+  // appending children won't update the DOM. We need to ensure the fragment
+  // is properly populated first, breaking out of our lazy approach for just
+  // this level. Also, some <object> plugins (like Flash Player) will read
+  // <param> nodes immediately upon insertion into the DOM, so <object>
+  // must also be populated prior to insertion into the DOM.
+  if (
+    tree.node.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE ||
+    (tree.node.nodeType === ELEMENT_NODE_TYPE &&
+      tree.node.nodeName.toLowerCase() === 'object' &&
+      (tree.node.namespaceURI == null ||
+        tree.node.namespaceURI === DOMNamespaces.html))
+  ) {
+    insertTreeChildren(tree);
+    parentNode.insertBefore(tree.node, referenceNode);
+  } else {
+    parentNode.insertBefore(tree.node, referenceNode);
+    insertTreeChildren(tree);
   }
-);
+});
 
@@ -86,3 +100,3 @@ function queueHTML(tree, html) {
   } else {
-    tree.node.innerHTML = html;
+    setInnerHTML(tree.node, html);
   }
@@ -98,2 +112,6 @@ function queueText(tree, text) {
 
+function toString() {
+  return this.node.nodeName;
+}
+
 function DOMLazyTree(node) {
@@ -104,2 +122,3 @@ function DOMLazyTree(node) {
     text: null,
+    toString,
   };
diff --git a/src/renderers/dom/client/utils/ViewportMetrics.js b/src/renderers/dom/client/utils/ViewportMetrics.js
index d5508e001..c23d0275c 100644
--- a/src/renderers/dom/client/utils/ViewportMetrics.js
+++ b/src/renderers/dom/client/utils/ViewportMetrics.js
@@ -14,3 +14,2 @@
 var ViewportMetrics = {
-
   currentScrollLeft: 0,
@@ -23,3 +22,2 @@ var ViewportMetrics = {
   },
-
 };
diff --git a/src/renderers/dom/client/utils/__tests__/getEventCharCode-test.js b/src/renderers/dom/client/utils/__tests__/getEventCharCode-test.js
index c375ffa15..f619093b8 100644
--- a/src/renderers/dom/client/utils/__tests__/getEventCharCode-test.js
+++ b/src/renderers/dom/client/utils/__tests__/getEventCharCode-test.js
@@ -15,9 +15,10 @@ var getEventCharCode = require('getEventCharCode');
 
-describe('getEventCharCode', function() {
-  describe('when charCode is present in nativeEvent', function() {
-    describe('when charCode is 0 and keyCode is 13', function() {
-      it('returns 13', function() {
-        var nativeEvent = new KeyboardEvent(
-          'keypress', {charCode: 0, keyCode: 13}
-        );
+describe('getEventCharCode', () => {
+  describe('when charCode is present in nativeEvent', () => {
+    describe('when charCode is 0 and keyCode is 13', () => {
+      it('returns 13', () => {
+        var nativeEvent = new KeyboardEvent('keypress', {
+          charCode: 0,
+          keyCode: 13,
+        });
 
@@ -27,5 +28,5 @@ describe('getEventCharCode', function() {
 
-    describe('when charCode is not 0 and/or keyCode is not 13', function() {
-      describe('when charCode is 32 or bigger', function() {
-        it('returns charCode', function() {
+    describe('when charCode is not 0 and/or keyCode is not 13', () => {
+      describe('when charCode is 32 or bigger', () => {
+        it('returns charCode', () => {
           var nativeEvent = new KeyboardEvent('keypress', {charCode: 32});
@@ -36,5 +37,5 @@ describe('getEventCharCode', function() {
 
-      describe('when charCode is smaller than 32', function() {
-        describe('when charCode is 13', function() {
-          it('returns 13', function() {
+      describe('when charCode is smaller than 32', () => {
+        describe('when charCode is 13', () => {
+          it('returns 13', () => {
             var nativeEvent = new KeyboardEvent('keypress', {charCode: 13});
@@ -45,4 +46,4 @@ describe('getEventCharCode', function() {
 
-        describe('when charCode is not 13', function() {
-          it('returns 0', function() {
+        describe('when charCode is not 13', () => {
+          it('returns 0', () => {
             var nativeEvent = new KeyboardEvent('keypress', {charCode: 31});
@@ -61,6 +62,6 @@ describe('getEventCharCode', function() {
   */
-  describe('when charCode is not present in nativeEvent', function() {
-    describe('when keyCode is 32 or bigger', function() {
-      it('returns keyCode', function() {
-        var nativeEvent = {'keyCode': 32};
+  describe('when charCode is not present in nativeEvent', () => {
+    describe('when keyCode is 32 or bigger', () => {
+      it('returns keyCode', () => {
+        var nativeEvent = {keyCode: 32};
 
@@ -70,6 +71,6 @@ describe('getEventCharCode', function() {
 
-    describe('when keyCode is smaller than 32', function() {
-      describe('when keyCode is 13', function() {
-        it('returns 13', function() {
-          var nativeEvent = {'keyCode': 13};
+    describe('when keyCode is smaller than 32', () => {
+      describe('when keyCode is 13', () => {
+        it('returns 13', () => {
+          var nativeEvent = {keyCode: 13};
 
@@ -79,5 +80,5 @@ describe('getEventCharCode', function() {
 
-      describe('when keyCode is not 13', function() {
-        it('returns 0', function() {
-          var nativeEvent = {'keyCode': 31};
+      describe('when keyCode is not 13', () => {
+        it('returns 0', () => {
+          var nativeEvent = {keyCode: 31};
 
diff --git a/src/renderers/dom/client/utils/__tests__/getEventKey-test.js b/src/renderers/dom/client/utils/__tests__/getEventKey-test.js
index 09644c6e5..81b370255 100644
--- a/src/renderers/dom/client/utils/__tests__/getEventKey-test.js
+++ b/src/renderers/dom/client/utils/__tests__/getEventKey-test.js
@@ -15,6 +15,6 @@ var getEventKey = require('getEventKey');
 
-describe('getEventKey', function() {
-  describe('when key is implemented in a browser', function() {
-    describe('when key is not normalized', function() {
-      it('returns a normalized value', function() {
+describe('getEventKey', () => {
+  describe('when key is implemented in a browser', () => {
+    describe('when key is not normalized', () => {
+      it('returns a normalized value', () => {
         var nativeEvent = new KeyboardEvent('keypress', {key: 'Del'});
@@ -25,4 +25,4 @@ describe('getEventKey', function() {
 
-    describe('when key is normalized', function() {
-      it('returns a key', function() {
+    describe('when key is normalized', () => {
+      it('returns a key', () => {
         var nativeEvent = new KeyboardEvent('keypress', {key: 'f'});
@@ -34,6 +34,6 @@ describe('getEventKey', function() {
 
-  describe('when key is not implemented in a browser', function() {
-    describe('when event type is keypress', function() {
-      describe('when charCode is 13', function() {
-        it("returns 'Enter'", function() {
+  describe('when key is not implemented in a browser', () => {
+    describe('when event type is keypress', () => {
+      describe('when charCode is 13', () => {
+        it("returns 'Enter'", () => {
           var nativeEvent = new KeyboardEvent('keypress', {charCode: 13});
@@ -44,4 +44,4 @@ describe('getEventKey', function() {
 
-      describe('when charCode is not 13', function() {
-        it('returns a string from a charCode', function() {
+      describe('when charCode is not 13', () => {
+        it('returns a string from a charCode', () => {
           var nativeEvent = new KeyboardEvent('keypress', {charCode: 65});
@@ -53,5 +53,5 @@ describe('getEventKey', function() {
 
-    describe('when event type is keydown or keyup', function() {
-      describe('when keyCode is recognized', function() {
-        it('returns a translated key', function() {
+    describe('when event type is keydown or keyup', () => {
+      describe('when keyCode is recognized', () => {
+        it('returns a translated key', () => {
           var nativeEvent = new KeyboardEvent('keydown', {keyCode: 45});
@@ -62,4 +62,4 @@ describe('getEventKey', function() {
 
-      describe('when keyCode is not recognized', function() {
-        it('returns Unidentified', function() {
+      describe('when keyCode is not recognized', () => {
+        it('returns Unidentified', () => {
           var nativeEvent = new KeyboardEvent('keydown', {keyCode: 1337});
@@ -71,4 +71,4 @@ describe('getEventKey', function() {
 
-    describe('when event type is unknown', function() {
-      it('returns an empty string', function() {
+    describe('when event type is unknown', () => {
+      it('returns an empty string', () => {
         var nativeEvent = new KeyboardEvent('keysmack');
diff --git a/src/renderers/dom/client/utils/__tests__/getNodeForCharacterOffset-test.js b/src/renderers/dom/client/utils/__tests__/getNodeForCharacterOffset-test.js
index d0f9a5501..27c7d1cd2 100644
--- a/src/renderers/dom/client/utils/__tests__/getNodeForCharacterOffset-test.js
+++ b/src/renderers/dom/client/utils/__tests__/getNodeForCharacterOffset-test.js
@@ -30,4 +30,4 @@ function expectNodeOffset(result, textContent, nodeOffset) {
 
-describe('getNodeForCharacterOffset', function() {
-  it('should handle siblings', function() {
+describe('getNodeForCharacterOffset', () => {
+  it('should handle siblings', () => {
     var node = createNode('<i>123</i><i>456</i><i>789</i>');
@@ -38,3 +38,3 @@ describe('getNodeForCharacterOffset', function() {
 
-  it('should handle trailing chars', function() {
+  it('should handle trailing chars', () => {
     var node = createNode('<i>123</i><i>456</i><i>789</i>');
@@ -45,3 +45,3 @@ describe('getNodeForCharacterOffset', function() {
 
-  it('should handle trees', function() {
+  it('should handle trees', () => {
     var node = createNode(
@@ -50,12 +50,12 @@ describe('getNodeForCharacterOffset', function() {
         '<i>' +
-          '<i>' +
-            '<i>2</i>' +
-            '<i></i>' +
-          '</i>' +
+        '<i>' +
+        '<i>2</i>' +
+        '<i></i>' +
+        '</i>' +
         '</i>' +
         '<i>' +
-          '3' +
-          '<i>45</i>' +
+        '3' +
+        '<i>45</i>' +
         '</i>' +
-      '</i>'
+        '</i>',
     );
@@ -67,3 +67,3 @@ describe('getNodeForCharacterOffset', function() {
 
-  it('should handle non-existent offset', function() {
+  it('should handle non-existent offset', () => {
     var node = createNode('<i>123</i>');
diff --git a/src/renderers/dom/client/utils/__tests__/setInnerHTML-test.js b/src/renderers/dom/client/utils/__tests__/setInnerHTML-test.js
new file mode 100644
index 000000000..e89f9f142
--- /dev/null
+++ b/src/renderers/dom/client/utils/__tests__/setInnerHTML-test.js
@@ -0,0 +1,48 @@
+/**
+ * Copyright 2016-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+var setInnerHTML = require('setInnerHTML');
+var DOMNamespaces = require('DOMNamespaces');
+
+describe('setInnerHTML', () => {
+  describe('when the node has innerHTML property', () => {
+    it('sets innerHTML on it', () => {
+      var node = document.createElement('div');
+      var html = '<h1>hello</h1>';
+      setInnerHTML(node, html);
+      expect(node.innerHTML).toBe(html);
+    });
+  });
+
+  describe('when the node does not have an innerHTML property', () => {
+    // Disabled. JSDOM doesn't seem to remove nodes when using appendChild to
+    // move existing nodes.
+    xit('sets innerHTML on it', () => {
+      // Create a mock node that looks like an SVG in IE (without innerHTML)
+      var node = {
+        namespaceURI: DOMNamespaces.svg,
+        appendChild: jasmine.createSpy(),
+      };
+
+      var html = '<circle></circle><rect></rect>';
+      setInnerHTML(node, html);
+
+      expect(node.appendChild.calls.argsFor(0)[0].outerHTML).toBe(
+        '<circle></circle>',
+      );
+      expect(node.appendChild.calls.argsFor(1)[0].outerHTML).toBe(
+        '<rect></rect>',
+      );
+    });
+  });
+});
diff --git a/src/renderers/dom/client/utils/getEventKey.js b/src/renderers/dom/client/utils/getEventKey.js
index 6a33da9ca..19786e778 100644
--- a/src/renderers/dom/client/utils/getEventKey.js
+++ b/src/renderers/dom/client/utils/getEventKey.js
@@ -20,14 +20,14 @@ var getEventCharCode = require('getEventCharCode');
 var normalizeKey = {
-  'Esc': 'Escape',
-  'Spacebar': ' ',
-  'Left': 'ArrowLeft',
-  'Up': 'ArrowUp',
-  'Right': 'ArrowRight',
-  'Down': 'ArrowDown',
-  'Del': 'Delete',
-  'Win': 'OS',
-  'Menu': 'ContextMenu',
-  'Apps': 'ContextMenu',
-  'Scroll': 'ScrollLock',
-  'MozPrintableKey': 'Unidentified',
+  Esc: 'Escape',
+  Spacebar: ' ',
+  Left: 'ArrowLeft',
+  Up: 'ArrowUp',
+  Right: 'ArrowRight',
+  Down: 'ArrowDown',
+  Del: 'Delete',
+  Win: 'OS',
+  Menu: 'ContextMenu',
+  Apps: 'ContextMenu',
+  Scroll: 'ScrollLock',
+  MozPrintableKey: 'Unidentified',
 };
@@ -61,4 +61,14 @@ var translateToKey = {
   46: 'Delete',
-  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
-  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
+  112: 'F1',
+  113: 'F2',
+  114: 'F3',
+  115: 'F4',
+  116: 'F5',
+  117: 'F6',
+  118: 'F7',
+  119: 'F8',
+  120: 'F9',
+  121: 'F10',
+  122: 'F11',
+  123: 'F12',
   144: 'NumLock',
diff --git a/src/renderers/dom/client/utils/getEventModifierState.js b/src/renderers/dom/client/utils/getEventModifierState.js
index 16c6e2b54..cafcf69e4 100644
--- a/src/renderers/dom/client/utils/getEventModifierState.js
+++ b/src/renderers/dom/client/utils/getEventModifierState.js
@@ -19,6 +19,6 @@
 var modifierKeyToProp = {
-  'Alt': 'altKey',
-  'Control': 'ctrlKey',
-  'Meta': 'metaKey',
-  'Shift': 'shiftKey',
+  Alt: 'altKey',
+  Control: 'ctrlKey',
+  Meta: 'metaKey',
+  Shift: 'shiftKey',
 };
diff --git a/src/renderers/dom/client/utils/getTextContentAccessor.js b/src/renderers/dom/client/utils/getTextContentAccessor.js
index 198e6bbb6..7f79f013a 100644
--- a/src/renderers/dom/client/utils/getTextContentAccessor.js
+++ b/src/renderers/dom/client/utils/getTextContentAccessor.js
@@ -27,5 +27,5 @@ function getTextContentAccessor() {
     // SVG <text> elements don't support innerText even when <div> does.
-    contentKey = 'textContent' in document.documentElement ?
-      'textContent' :
-      'innerText';
+    contentKey = 'textContent' in document.documentElement
+      ? 'textContent'
+      : 'innerText';
   }
diff --git a/src/renderers/dom/client/utils/getVendorPrefixedEventName.js b/src/renderers/dom/client/utils/getVendorPrefixedEventName.js
index 25fa2aed8..dc3f518de 100644
--- a/src/renderers/dom/client/utils/getVendorPrefixedEventName.js
+++ b/src/renderers/dom/client/utils/getVendorPrefixedEventName.js
@@ -85,3 +85,2 @@ function getVendorPrefixedEventName(eventName) {
     return prefixedEventNames[eventName];
-
   } else if (!vendorPrefixes[eventName]) {
@@ -94,3 +93,3 @@ function getVendorPrefixedEventName(eventName) {
     if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
-      return prefixedEventNames[eventName] = prefixMap[styleProp];
+      return (prefixedEventNames[eventName] = prefixMap[styleProp]);
     }
diff --git a/src/renderers/dom/client/utils/isEventSupported.js b/src/renderers/dom/client/utils/isEventSupported.js
index f73857641..ad3436a65 100644
--- a/src/renderers/dom/client/utils/isEventSupported.js
+++ b/src/renderers/dom/client/utils/isEventSupported.js
@@ -40,4 +40,6 @@ if (ExecutionEnvironment.canUseDOM) {
 function isEventSupported(eventNameSuffix, capture) {
-  if (!ExecutionEnvironment.canUseDOM ||
-      capture && !('addEventListener' in document)) {
+  if (
+    !ExecutionEnvironment.canUseDOM ||
+    (capture && !('addEventListener' in document))
+  ) {
     return false;
diff --git a/src/renderers/dom/client/utils/setInnerHTML.js b/src/renderers/dom/client/utils/setInnerHTML.js
index 1e491bfaf..c4da196e6 100644
--- a/src/renderers/dom/client/utils/setInnerHTML.js
+++ b/src/renderers/dom/client/utils/setInnerHTML.js
@@ -14,2 +14,3 @@
 var ExecutionEnvironment = require('ExecutionEnvironment');
+var DOMNamespaces = require('DOMNamespaces');
 
@@ -20,2 +21,5 @@ var createMicrosoftUnsafeLocalFunction = require('createMicrosoftUnsafeLocalFunc
 
+// SVG temp container for IE lacking innerHTML
+var reusableSVGContainer;
+
 /**
@@ -28,7 +32,18 @@ var createMicrosoftUnsafeLocalFunction = require('createMicrosoftUnsafeLocalFunc
  */
-var setInnerHTML = createMicrosoftUnsafeLocalFunction(
-  function(node, html) {
+var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
+  // IE does not have innerHTML for SVG nodes, so instead we inject the
+  // new markup in a temp node and then move the child nodes across into
+  // the target node
+  if (node.namespaceURI === DOMNamespaces.svg && !('innerHTML' in node)) {
+    reusableSVGContainer =
+      reusableSVGContainer || document.createElement('div');
+    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
+    var svgNode = reusableSVGContainer.firstChild;
+    while (svgNode.firstChild) {
+      node.appendChild(svgNode.firstChild);
+    }
+  } else {
     node.innerHTML = html;
   }
-);
+});
 
@@ -58,4 +73,6 @@ if (ExecutionEnvironment.canUseDOM) {
       // and simply check if any non-visible tags appear in the source.
-      if (WHITESPACE_TEST.test(html) ||
-          html[0] === '<' && NONVISIBLE_TEST.test(html)) {
+      if (
+        WHITESPACE_TEST.test(html) ||
+        (html[0] === '<' && NONVISIBLE_TEST.test(html))
+      ) {
         // Recover leading whitespace by temporarily prepending any character.
@@ -66,3 +83,3 @@ if (ExecutionEnvironment.canUseDOM) {
         // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
-        node.innerHTML = String.fromCharCode(0xFEFF) + html;
+        node.innerHTML = String.fromCharCode(0xfeff) + html;
 
diff --git a/src/renderers/dom/client/utils/setTextContent.js b/src/renderers/dom/client/utils/setTextContent.js
index d15ce89ea..833256601 100644
--- a/src/renderers/dom/client/utils/setTextContent.js
+++ b/src/renderers/dom/client/utils/setTextContent.js
@@ -28,2 +28,14 @@ var setInnerHTML = require('setInnerHTML');
 var setTextContent = function(node, text) {
+  if (text) {
+    var firstChild = node.firstChild;
+
+    if (
+      firstChild &&
+      firstChild === node.lastChild &&
+      firstChild.nodeType === 3
+    ) {
+      firstChild.nodeValue = text;
+      return;
+    }
+  }
   node.textContent = text;
@@ -34,2 +46,6 @@ if (ExecutionEnvironment.canUseDOM) {
     setTextContent = function(node, text) {
+      if (node.nodeType === 3) {
+        node.nodeValue = text;
+        return;
+      }
       setInnerHTML(node, escapeTextContentForBrowser(text));
diff --git a/src/renderers/dom/client/validateDOMNesting.js b/src/renderers/dom/client/validateDOMNesting.js
index 431d80fd2..9cca776e8 100644
--- a/src/renderers/dom/client/validateDOMNesting.js
+++ b/src/renderers/dom/client/validateDOMNesting.js
@@ -32,12 +32,84 @@ if (__DEV__) {
   var specialTags = [
-    'address', 'applet', 'area', 'article', 'aside', 'base', 'basefont',
-    'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col',
-    'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset',
-    'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2',
-    'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe',
-    'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee',
-    'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript',
-    'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section',
-    'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template',
-    'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr',
+    'address',
+    'applet',
+    'area',
+    'article',
+    'aside',
+    'base',
+    'basefont',
+    'bgsound',
+    'blockquote',
+    'body',
+    'br',
+    'button',
+    'caption',
+    'center',
+    'col',
+    'colgroup',
+    'dd',
+    'details',
+    'dir',
+    'div',
+    'dl',
+    'dt',
+    'embed',
+    'fieldset',
+    'figcaption',
+    'figure',
+    'footer',
+    'form',
+    'frame',
+    'frameset',
+    'h1',
+    'h2',
+    'h3',
+    'h4',
+    'h5',
+    'h6',
+    'head',
+    'header',
+    'hgroup',
+    'hr',
+    'html',
+    'iframe',
+    'img',
+    'input',
+    'isindex',
+    'li',
+    'link',
+    'listing',
+    'main',
+    'marquee',
+    'menu',
+    'menuitem',
+    'meta',
+    'nav',
+    'noembed',
+    'noframes',
+    'noscript',
+    'object',
+    'ol',
+    'p',
+    'param',
+    'plaintext',
+    'pre',
+    'script',
+    'section',
+    'select',
+    'source',
+    'style',
+    'summary',
+    'table',
+    'tbody',
+    'td',
+    'template',
+    'textarea',
+    'tfoot',
+    'th',
+    'thead',
+    'title',
+    'tr',
+    'track',
+    'ul',
+    'wbr',
     'xmp',
@@ -47,3 +119,10 @@ if (__DEV__) {
   var inScopeTags = [
-    'applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object',
+    'applet',
+    'caption',
+    'html',
+    'table',
+    'td',
+    'th',
+    'marquee',
+    'object',
     'template',
@@ -53,3 +132,5 @@ if (__DEV__) {
     // errs on the side of fewer warnings
-    'foreignObject', 'desc', 'title',
+    'foreignObject',
+    'desc',
+    'title',
   ];
@@ -60,4 +141,12 @@ if (__DEV__) {
   // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
-  var impliedEndTags =
-    ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
+  var impliedEndTags = [
+    'dd',
+    'dt',
+    'li',
+    'option',
+    'optgroup',
+    'p',
+    'rp',
+    'rt',
+  ];
 
@@ -93,3 +182,5 @@ if (__DEV__) {
       specialTags.indexOf(tag) !== -1 &&
-      tag !== 'address' && tag !== 'div' && tag !== 'p'
+      tag !== 'address' &&
+      tag !== 'div' &&
+      tag !== 'p'
     ) {
@@ -141,3 +232,2 @@ if (__DEV__) {
         return tag === '#text';
-
       // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
@@ -150,6 +240,8 @@ if (__DEV__) {
         return (
-          tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' ||
+          tag === 'th' ||
+          tag === 'td' ||
+          tag === 'style' ||
+          tag === 'script' ||
           tag === 'template'
         );
-
       // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
@@ -159,6 +251,7 @@ if (__DEV__) {
         return (
-          tag === 'tr' || tag === 'style' || tag === 'script' ||
+          tag === 'tr' ||
+          tag === 'style' ||
+          tag === 'script' ||
           tag === 'template'
         );
-
       // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
@@ -166,3 +259,2 @@ if (__DEV__) {
         return tag === 'col' || tag === 'template';
-
       // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
@@ -170,7 +262,11 @@ if (__DEV__) {
         return (
-          tag === 'caption' || tag === 'colgroup' || tag === 'tbody' ||
-          tag === 'tfoot' || tag === 'thead' || tag === 'style' ||
-          tag === 'script' || tag === 'template'
+          tag === 'caption' ||
+          tag === 'colgroup' ||
+          tag === 'tbody' ||
+          tag === 'tfoot' ||
+          tag === 'thead' ||
+          tag === 'style' ||
+          tag === 'script' ||
+          tag === 'template'
         );
-
       // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
@@ -178,8 +274,14 @@ if (__DEV__) {
         return (
-          tag === 'base' || tag === 'basefont' || tag === 'bgsound' ||
-          tag === 'link' || tag === 'meta' || tag === 'title' ||
-          tag === 'noscript' || tag === 'noframes' || tag === 'style' ||
-          tag === 'script' || tag === 'template'
+          tag === 'base' ||
+          tag === 'basefont' ||
+          tag === 'bgsound' ||
+          tag === 'link' ||
+          tag === 'meta' ||
+          tag === 'title' ||
+          tag === 'noscript' ||
+          tag === 'noframes' ||
+          tag === 'style' ||
+          tag === 'script' ||
+          tag === 'template'
         );
-
       // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
@@ -202,4 +304,8 @@ if (__DEV__) {
         return (
-          parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' &&
-          parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6'
+          parentTag !== 'h1' &&
+          parentTag !== 'h2' &&
+          parentTag !== 'h3' &&
+          parentTag !== 'h4' &&
+          parentTag !== 'h5' &&
+          parentTag !== 'h6'
         );
@@ -210,2 +316,3 @@ if (__DEV__) {
 
+      case 'body':
       case 'caption':
@@ -261,12 +368,7 @@ if (__DEV__) {
       case 'ul':
-
       case 'pre':
       case 'listing':
-
       case 'table':
-
       case 'hr':
-
       case 'xmp':
-
       case 'h1':
@@ -323,3 +425,8 @@ if (__DEV__) {
 
-  validateDOMNesting = function(childTag, childInstance, ancestorInfo) {
+  validateDOMNesting = function(
+    childTag,
+    childText,
+    childInstance,
+    ancestorInfo,
+  ) {
     ancestorInfo = ancestorInfo || emptyAncestorInfo;
@@ -328,6 +435,16 @@ if (__DEV__) {
 
-    var invalidParent =
-      isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
-    var invalidAncestor =
-      invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
+    if (childText != null) {
+      warning(
+        childTag == null,
+        'validateDOMNesting: when childText is passed, childTag should be null',
+      );
+      childTag = '#text';
+    }
+
+    var invalidParent = isTagValidWithParent(childTag, parentTag)
+      ? null
+      : parentInfo;
+    var invalidAncestor = invalidParent
+      ? null
+      : findInvalidAncestorForTag(childTag, ancestorInfo);
     var problematic = invalidParent || invalidAncestor;
@@ -358,21 +475,23 @@ if (__DEV__) {
       var UNKNOWN = '(unknown)';
-      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(
-        (inst) => inst.getName() || UNKNOWN
-      );
-      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(
-        (inst) => inst.getName() || UNKNOWN
-      );
-      var ownerInfo = [].concat(
-        // If the parent and child instances have a common owner ancestor, start
-        // with that -- otherwise we just start with the parent's owners.
-        deepestCommon !== -1 ?
-          childOwners[deepestCommon].getName() || UNKNOWN :
-          [],
-        ancestorOwnerNames,
-        ancestorTag,
-        // If we're warning about an invalid (non-parent) ancestry, add '...'
-        invalidAncestor ? ['...'] : [],
-        childOwnerNames,
-        childTag
-      ).join(' > ');
+      var childOwnerNames = childOwners
+        .slice(deepestCommon + 1)
+        .map(inst => inst.getName() || UNKNOWN);
+      var ancestorOwnerNames = ancestorOwners
+        .slice(deepestCommon + 1)
+        .map(inst => inst.getName() || UNKNOWN);
+      var ownerInfo = []
+        .concat(
+          // If the parent and child instances have a common owner ancestor, start
+          // with that -- otherwise we just start with the parent's owners.
+          deepestCommon !== -1
+            ? childOwners[deepestCommon].getName() || UNKNOWN
+            : [],
+          ancestorOwnerNames,
+          ancestorTag,
+          // If we're warning about an invalid (non-parent) ancestry, add '...'
+          invalidAncestor ? ['...'] : [],
+          childOwnerNames,
+          childTag,
+        )
+        .join(' > ');
 
@@ -386,3 +505,13 @@ if (__DEV__) {
       var tagDisplayName = childTag;
-      if (childTag !== '#text') {
+      var whitespaceInfo = '';
+      if (childTag === '#text') {
+        if (/\S/.test(childText)) {
+          tagDisplayName = 'Text nodes';
+        } else {
+          tagDisplayName = 'Whitespace text nodes';
+          whitespaceInfo =
+            " Make sure you don't have any extra whitespace between tags on " +
+            'each line of your source code.';
+        }
+      } else {
         tagDisplayName = '<' + childTag + '>';
@@ -399,8 +528,9 @@ if (__DEV__) {
           false,
-          'validateDOMNesting(...): %s cannot appear as a child of <%s>. ' +
-          'See %s.%s',
+          'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s ' +
+            'See %s.%s',
           tagDisplayName,
           ancestorTag,
+          whitespaceInfo,
           ownerInfo,
-          info
+          info,
         );
@@ -410,6 +540,6 @@ if (__DEV__) {
           'validateDOMNesting(...): %s cannot appear as a descendant of ' +
-          '<%s>. See %s.',
+            '<%s>. See %s.',
           tagDisplayName,
           ancestorTag,
-          ownerInfo
+          ownerInfo,
         );
diff --git a/src/renderers/dom/client/wrappers/LinkedValueUtils.js b/src/renderers/dom/client/wrappers/LinkedValueUtils.js
index ae3afb98d..00e0af6f7 100644
--- a/src/renderers/dom/client/wrappers/LinkedValueUtils.js
+++ b/src/renderers/dom/client/wrappers/LinkedValueUtils.js
@@ -13,4 +13,7 @@
 
-var ReactPropTypes = require('ReactPropTypes');
-var ReactPropTypeLocations = require('ReactPropTypeLocations');
+var ReactPropTypesSecret = require('ReactPropTypesSecret');
+var propTypesFactory = require('prop-types/factory');
+
+var React = require('React');
+var PropTypes = propTypesFactory(React.isValidElement);
 
@@ -20,9 +23,9 @@ var warning = require('warning');
 var hasReadOnlyValue = {
-  'button': true,
-  'checkbox': true,
-  'image': true,
-  'hidden': true,
-  'radio': true,
-  'reset': true,
-  'submit': true,
+  button: true,
+  checkbox: true,
+  image: true,
+  hidden: true,
+  radio: true,
+  reset: true,
+  submit: true,
 };
@@ -33,3 +36,3 @@ function _assertSingleLink(inputProps) {
     'Cannot provide a checkedLink and a valueLink. If you want to use ' +
-    'checkedLink, you probably don\'t want to use valueLink and vice versa.'
+      "checkedLink, you probably don't want to use valueLink and vice versa.",
   );
@@ -41,3 +44,3 @@ function _assertValueLink(inputProps) {
     'Cannot provide a valueLink and a value or onChange event. If you want ' +
-    'to use value or onChange, you probably don\'t want to use valueLink.'
+      "to use value or onChange, you probably don't want to use valueLink.",
   );
@@ -50,4 +53,4 @@ function _assertCheckedLink(inputProps) {
     'Cannot provide a checkedLink and a checked property or onChange event. ' +
-    'If you want to use checked or onChange, you probably don\'t want to ' +
-    'use checkedLink'
+      "If you want to use checked or onChange, you probably don't want to " +
+      'use checkedLink',
   );
@@ -57,7 +60,9 @@ var propTypes = {
   value: function(props, propName, componentName) {
-    if (!props[propName] ||
-        hasReadOnlyValue[props.type] ||
-        props.onChange ||
-        props.readOnly ||
-        props.disabled) {
+    if (
+      !props[propName] ||
+      hasReadOnlyValue[props.type] ||
+      props.onChange ||
+      props.readOnly ||
+      props.disabled
+    ) {
       return null;
@@ -66,5 +71,5 @@ var propTypes = {
       'You provided a `value` prop to a form field without an ' +
-      '`onChange` handler. This will render a read-only field. If ' +
-      'the field should be mutable use `defaultValue`. Otherwise, ' +
-      'set either `onChange` or `readOnly`.'
+        '`onChange` handler. This will render a read-only field. If ' +
+        'the field should be mutable use `defaultValue`. Otherwise, ' +
+        'set either `onChange` or `readOnly`.',
     );
@@ -72,6 +77,8 @@ var propTypes = {
   checked: function(props, propName, componentName) {
-    if (!props[propName] ||
-        props.onChange ||
-        props.readOnly ||
-        props.disabled) {
+    if (
+      !props[propName] ||
+      props.onChange ||
+      props.readOnly ||
+      props.disabled
+    ) {
       return null;
@@ -80,8 +87,8 @@ var propTypes = {
       'You provided a `checked` prop to a form field without an ' +
-      '`onChange` handler. This will render a read-only field. If ' +
-      'the field should be mutable use `defaultChecked`. Otherwise, ' +
-      'set either `onChange` or `readOnly`.'
+        '`onChange` handler. This will render a read-only field. If ' +
+        'the field should be mutable use `defaultChecked`. Otherwise, ' +
+        'set either `onChange` or `readOnly`.',
     );
   },
-  onChange: ReactPropTypes.func,
+  onChange: PropTypes.func,
 };
@@ -111,3 +118,5 @@ var LinkedValueUtils = {
           tagName,
-          ReactPropTypeLocations.prop
+          'prop',
+          null,
+          ReactPropTypesSecret,
         );
diff --git a/src/renderers/dom/client/wrappers/ReactDOMButton.js b/src/renderers/dom/client/wrappers/ReactDOMButton.js
deleted file mode 100644
index bf32c4560..000000000
--- a/src/renderers/dom/client/wrappers/ReactDOMButton.js
+++ /dev/null
@@ -1,50 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @providesModule ReactDOMButton
- */
-
-'use strict';
-
-var mouseListenerNames = {
-  onClick: true,
-  onDoubleClick: true,
-  onMouseDown: true,
-  onMouseMove: true,
-  onMouseUp: true,
-
-  onClickCapture: true,
-  onDoubleClickCapture: true,
-  onMouseDownCapture: true,
-  onMouseMoveCapture: true,
-  onMouseUpCapture: true,
-};
-
-/**
- * Implements a <button> native component that does not receive mouse events
- * when `disabled` is set.
- */
-var ReactDOMButton = {
-  getNativeProps: function(inst, props) {
-    if (!props.disabled) {
-      return props;
-    }
-
-    // Copy the props, except the mouse listeners
-    var nativeProps = {};
-    for (var key in props) {
-      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
-        nativeProps[key] = props[key];
-      }
-    }
-
-    return nativeProps;
-  },
-};
-
-module.exports = ReactDOMButton;
diff --git a/src/renderers/dom/client/wrappers/ReactDOMInput.js b/src/renderers/dom/client/wrappers/ReactDOMInput.js
index 234aee1b5..73ae197dc 100644
--- a/src/renderers/dom/client/wrappers/ReactDOMInput.js
+++ b/src/renderers/dom/client/wrappers/ReactDOMInput.js
@@ -23,3 +23,2 @@ var didWarnValueLink = false;
 var didWarnCheckedLink = false;
-var didWarnValueNull = false;
 var didWarnValueDefaultValue = false;
@@ -36,13 +35,5 @@ function forceUpdateIfMounted() {
 
-function warnIfValueIsNull(props) {
-  if (props != null && props.value === null && !didWarnValueNull) {
-    warning(
-      false,
-      '`value` prop on `input` should not be null. ' +
-      'Consider using the empty string to clear the component or `undefined` ' +
-      'for uncontrolled components.'
-    );
-
-    didWarnValueNull = true;
-  }
+function isControlled(props) {
+  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
+  return usesChecked ? props.checked != null : props.value != null;
 }
@@ -50,3 +41,3 @@ function warnIfValueIsNull(props) {
 /**
- * Implements an <input> native component that allows setting these optional
+ * Implements an <input> host component that allows setting these optional
  * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
@@ -66,3 +57,3 @@ function warnIfValueIsNull(props) {
 var ReactDOMInput = {
-  getNativeProps: function(inst, props) {
+  getHostProps: function(inst, props) {
     var value = LinkedValueUtils.getValue(props);
@@ -70,15 +61,26 @@ var ReactDOMInput = {
 
-    var nativeProps = Object.assign({
-      // Make sure we set .type before any other properties (setting .value
-      // before .type means .value is lost in IE11 and below)
-      type: undefined,
-    }, props, {
-      defaultChecked: undefined,
-      defaultValue: undefined,
-      value: value != null ? value : inst._wrapperState.initialValue,
-      checked: checked != null ? checked : inst._wrapperState.initialChecked,
-      onChange: inst._wrapperState.onChange,
-    });
-
-    return nativeProps;
+    var hostProps = Object.assign(
+      {
+        // Make sure we set .type before any other properties (setting .value
+        // before .type means .value is lost in IE11 and below)
+        type: undefined,
+        // Make sure we set .step before .value (setting .value before .step
+        // means .value is rounded on mount, based upon step precision)
+        step: undefined,
+        // Make sure we set .min & .max before .value (to ensure proper order
+        // in corner cases such as min or max deriving from value, e.g. Issue #7170)
+        min: undefined,
+        max: undefined,
+      },
+      props,
+      {
+        defaultChecked: undefined,
+        defaultValue: undefined,
+        value: value != null ? value : inst._wrapperState.initialValue,
+        checked: checked != null ? checked : inst._wrapperState.initialChecked,
+        onChange: inst._wrapperState.onChange,
+      },
+    );
+
+    return hostProps;
   },
@@ -90,5 +92,7 @@ var ReactDOMInput = {
         props,
-        inst._currentElement._owner
+        inst._currentElement._owner,
       );
 
+      var owner = inst._currentElement._owner;
+
       if (props.valueLink !== undefined && !didWarnValueLink) {
@@ -96,3 +100,3 @@ var ReactDOMInput = {
           false,
-          '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.'
+          '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.',
         );
@@ -103,3 +107,3 @@ var ReactDOMInput = {
           false,
-          '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.'
+          '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.',
         );
@@ -114,7 +118,10 @@ var ReactDOMInput = {
           false,
-          'Input elements must be either controlled or uncontrolled ' +
-          '(specify either the checked prop, or the defaultChecked prop, but not ' +
-          'both). Decide between using a controlled or uncontrolled input ' +
-          'element and remove one of these props. More info: ' +
-          'https://fb.me/react-controlled-components'
+          '%s contains an input of type %s with both checked and defaultChecked props. ' +
+            'Input elements must be either controlled or uncontrolled ' +
+            '(specify either the checked prop, or the defaultChecked prop, but not ' +
+            'both). Decide between using a controlled or uncontrolled input ' +
+            'element and remove one of these props. More info: ' +
+            'https://fb.me/react-controlled-components',
+          (owner && owner.getName()) || 'A component',
+          props.type,
         );
@@ -129,7 +136,10 @@ var ReactDOMInput = {
           false,
-          'Input elements must be either controlled or uncontrolled ' +
-          '(specify either the value prop, or the defaultValue prop, but not ' +
-          'both). Decide between using a controlled or uncontrolled input ' +
-          'element and remove one of these props. More info: ' +
-          'https://fb.me/react-controlled-components'
+          '%s contains an input of type %s with both value and defaultValue props. ' +
+            'Input elements must be either controlled or uncontrolled ' +
+            '(specify either the value prop, or the defaultValue prop, but not ' +
+            'both). Decide between using a controlled or uncontrolled input ' +
+            'element and remove one of these props. More info: ' +
+            'https://fb.me/react-controlled-components',
+          (owner && owner.getName()) || 'A component',
+          props.type,
         );
@@ -137,3 +147,2 @@ var ReactDOMInput = {
       }
-      warnIfValueIsNull(props);
     }
@@ -142,11 +151,10 @@ var ReactDOMInput = {
     inst._wrapperState = {
-      initialChecked: props.defaultChecked || false,
-      initialValue: defaultValue != null ? defaultValue : null,
+      initialChecked: props.checked != null
+        ? props.checked
+        : props.defaultChecked,
+      initialValue: props.value != null ? props.value : defaultValue,
       listeners: null,
       onChange: _handleChange.bind(inst),
+      controlled: isControlled(props),
     };
-
-    if (__DEV__) {
-      inst._wrapperState.controlled = props.checked !== undefined || props.value !== undefined;
-    }
   },
@@ -157,7 +165,3 @@ var ReactDOMInput = {
     if (__DEV__) {
-      warnIfValueIsNull(props);
-
-      var initialValue = inst._wrapperState.initialChecked || inst._wrapperState.initialValue;
-      var defaultValue = props.defaultChecked || props.defaultValue;
-      var controlled = props.checked !== undefined || props.value !== undefined;
+      var controlled = isControlled(props);
       var owner = inst._currentElement._owner;
@@ -165,4 +169,5 @@ var ReactDOMInput = {
       if (
-        (initialValue || !inst._wrapperState.controlled) &&
-        controlled && !didWarnUncontrolledToControlled
+        !inst._wrapperState.controlled &&
+        controlled &&
+        !didWarnUncontrolledToControlled
       ) {
@@ -170,8 +175,8 @@ var ReactDOMInput = {
           false,
-          '%s is changing a uncontrolled input of type %s to be controlled. ' +
-          'Input elements should not switch from uncontrolled to controlled (or vice versa). ' +
-          'Decide between using a controlled or uncontrolled input ' +
-          'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
-          owner && owner.getName() || 'A component',
-          props.type
+          '%s is changing an uncontrolled input of type %s to be controlled. ' +
+            'Input elements should not switch from uncontrolled to controlled (or vice versa). ' +
+            'Decide between using a controlled or uncontrolled input ' +
+            'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
+          (owner && owner.getName()) || 'A component',
+          props.type,
         );
@@ -181,3 +186,3 @@ var ReactDOMInput = {
         inst._wrapperState.controlled &&
-        (defaultValue || !controlled) &&
+        !controlled &&
         !didWarnControlledToUncontrolled
@@ -187,7 +192,7 @@ var ReactDOMInput = {
           '%s is changing a controlled input of type %s to be uncontrolled. ' +
-          'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
-          'Decide between using a controlled or uncontrolled input ' +
-          'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
-          owner && owner.getName() || 'A component',
-          props.type
+            'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
+            'Decide between using a controlled or uncontrolled input ' +
+            'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
+          (owner && owner.getName()) || 'A component',
+          props.type,
         );
@@ -203,3 +208,3 @@ var ReactDOMInput = {
         'checked',
-        checked || false
+        checked || false,
       );
@@ -207,11 +212,94 @@ var ReactDOMInput = {
 
+    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
     var value = LinkedValueUtils.getValue(props);
     if (value != null) {
-      // Cast `value` to a string to ensure the value is set correctly. While
-      // browsers typically do this as necessary, jsdom doesn't.
-      DOMPropertyOperations.setValueForProperty(
-        ReactDOMComponentTree.getNodeFromInstance(inst),
-        'value',
-        '' + value
-      );
+      if (value === 0 && node.value === '') {
+        node.value = '0';
+        // Note: IE9 reports a number inputs as 'text', so check props instead.
+      } else if (props.type === 'number') {
+        // Simulate `input.valueAsNumber`. IE9 does not support it
+        var valueAsNumber = parseFloat(node.value, 10) || 0;
+
+        if (
+          // eslint-disable-next-line
+          value != valueAsNumber ||
+          // eslint-disable-next-line
+          (value == valueAsNumber && node.value != value)
+        ) {
+          // Cast `value` to a string to ensure the value is set correctly. While
+          // browsers typically do this as necessary, jsdom doesn't.
+          node.value = '' + value;
+        }
+      } else if (node.value !== '' + value) {
+        // Cast `value` to a string to ensure the value is set correctly. While
+        // browsers typically do this as necessary, jsdom doesn't.
+        node.value = '' + value;
+      }
+    } else {
+      if (props.value == null && props.defaultValue != null) {
+        // In Chrome, assigning defaultValue to certain input types triggers input validation.
+        // For number inputs, the display value loses trailing decimal points. For email inputs,
+        // Chrome raises "The specified value <x> is not a valid email address".
+        //
+        // Here we check to see if the defaultValue has actually changed, avoiding these problems
+        // when the user is inputting text
+        //
+        // https://github.com/facebook/react/issues/7253
+        if (node.defaultValue !== '' + props.defaultValue) {
+          node.defaultValue = '' + props.defaultValue;
+        }
+      }
+      if (props.checked == null && props.defaultChecked != null) {
+        node.defaultChecked = !!props.defaultChecked;
+      }
+    }
+  },
+
+  postMountWrapper: function(inst) {
+    var props = inst._currentElement.props;
+
+    // This is in postMount because we need access to the DOM node, which is not
+    // available until after the component has mounted.
+    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
+
+    // Detach value from defaultValue. We won't do anything if we're working on
+    // submit or reset inputs as those values & defaultValues are linked. They
+    // are not resetable nodes so this operation doesn't matter and actually
+    // removes browser-default values (eg "Submit Query") when no value is
+    // provided.
+
+    switch (props.type) {
+      case 'submit':
+      case 'reset':
+        break;
+      case 'color':
+      case 'date':
+      case 'datetime':
+      case 'datetime-local':
+      case 'month':
+      case 'time':
+      case 'week':
+        // This fixes the no-show issue on iOS Safari and Android Chrome:
+        // https://github.com/facebook/react/issues/7233
+        node.value = '';
+        node.value = node.defaultValue;
+        break;
+      default:
+        node.value = node.value;
+        break;
+    }
+
+    // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
+    // this is needed to work around a chrome bug where setting defaultChecked
+    // will sometimes influence the value of checked (even after detachment).
+    // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
+    // We need to temporarily unset name to avoid disrupting radio button groups.
+    var name = node.name;
+    if (name !== '') {
+      node.name = '';
+    }
+    node.defaultChecked = !node.defaultChecked;
+    node.defaultChecked = !node.defaultChecked;
+    if (name !== '') {
+      node.name = name;
     }
@@ -246,3 +334,4 @@ function _handleChange(event) {
     var group = queryRoot.querySelectorAll(
-      'input[name=' + JSON.stringify('' + name) + '][type="radio"]');
+      'input[name=' + JSON.stringify('' + name) + '][type="radio"]',
+    );
 
@@ -250,4 +339,3 @@ function _handleChange(event) {
       var otherNode = group[i];
-      if (otherNode === rootNode ||
-          otherNode.form !== rootNode.form) {
+      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
         continue;
@@ -262,3 +350,3 @@ function _handleChange(event) {
         'ReactDOMInput: Mixing React and non-React radio inputs with the ' +
-        'same `name` is not supported.'
+          'same `name` is not supported.',
       );
diff --git a/src/renderers/dom/client/wrappers/ReactDOMOption.js b/src/renderers/dom/client/wrappers/ReactDOMOption.js
index 917ed0ee4..d8f48d404 100644
--- a/src/renderers/dom/client/wrappers/ReactDOMOption.js
+++ b/src/renderers/dom/client/wrappers/ReactDOMOption.js
@@ -13,3 +13,4 @@
 
-var ReactChildren = require('ReactChildren');
+var React = require('React');
+var ReactDOMComponentTree = require('ReactDOMComponentTree');
 var ReactDOMSelect = require('ReactDOMSelect');
@@ -17,8 +18,32 @@ var ReactDOMSelect = require('ReactDOMSelect');
 var warning = require('warning');
+var didWarnInvalidOptionChildren = false;
+
+function flattenChildren(children) {
+  var content = '';
+
+  // Flatten children and warn if they aren't strings or numbers;
+  // invalid types are ignored.
+  React.Children.forEach(children, function(child) {
+    if (child == null) {
+      return;
+    }
+    if (typeof child === 'string' || typeof child === 'number') {
+      content += child;
+    } else if (!didWarnInvalidOptionChildren) {
+      didWarnInvalidOptionChildren = true;
+      warning(
+        false,
+        'Only strings and numbers are supported as <option> children.',
+      );
+    }
+  });
+
+  return content;
+}
 
 /**
- * Implements an <option> native component that warns when `selected` is set.
+ * Implements an <option> host component that warns when `selected` is set.
  */
 var ReactDOMOption = {
-  mountWrapper: function(inst, props, nativeParent) {
+  mountWrapper: function(inst, props, hostParent) {
     // TODO (yungsters): Remove support for `selected` in <option>.
@@ -28,3 +53,3 @@ var ReactDOMOption = {
         'Use the `defaultValue` or `value` props on <select> instead of ' +
-        'setting `selected` on <option>.'
+          'setting `selected` on <option>.',
       );
@@ -34,4 +59,12 @@ var ReactDOMOption = {
     var selectValue = null;
-    if (nativeParent != null && nativeParent._tag === 'select') {
-      selectValue = ReactDOMSelect.getSelectValueContext(nativeParent);
+    if (hostParent != null) {
+      var selectParent = hostParent;
+
+      if (selectParent._tag === 'optgroup') {
+        selectParent = selectParent._hostParent;
+      }
+
+      if (selectParent != null && selectParent._tag === 'select') {
+        selectValue = ReactDOMSelect.getSelectValueContext(selectParent);
+      }
     }
@@ -42,2 +75,8 @@ var ReactDOMOption = {
     if (selectValue != null) {
+      var value;
+      if (props.value != null) {
+        value = props.value + '';
+      } else {
+        value = flattenChildren(props.children);
+      }
       selected = false;
@@ -46,3 +85,3 @@ var ReactDOMOption = {
         for (var i = 0; i < selectValue.length; i++) {
-          if ('' + selectValue[i] === '' + props.value) {
+          if ('' + selectValue[i] === value) {
             selected = true;
@@ -52,3 +91,3 @@ var ReactDOMOption = {
       } else {
-        selected = ('' + selectValue === '' + props.value);
+        selected = '' + selectValue === value;
       }
@@ -59,4 +98,16 @@ var ReactDOMOption = {
 
-  getNativeProps: function(inst, props) {
-    var nativeProps = Object.assign({selected: undefined, children: undefined}, props);
+  postMountWrapper: function(inst) {
+    // value="" should make a value attribute (#6219)
+    var props = inst._currentElement.props;
+    if (props.value != null) {
+      var node = ReactDOMComponentTree.getNodeFromInstance(inst);
+      node.setAttribute('value', props.value);
+    }
+  },
+
+  getHostProps: function(inst, props) {
+    var hostProps = Object.assign(
+      {selected: undefined, children: undefined},
+      props,
+    );
 
@@ -65,30 +116,13 @@ var ReactDOMOption = {
     if (inst._wrapperState.selected != null) {
-      nativeProps.selected = inst._wrapperState.selected;
+      hostProps.selected = inst._wrapperState.selected;
     }
 
-    var content = '';
-
-    // Flatten children and warn if they aren't strings or numbers;
-    // invalid types are ignored.
-    ReactChildren.forEach(props.children, function(child) {
-      if (child == null) {
-        return;
-      }
-      if (typeof child === 'string' || typeof child === 'number') {
-        content += child;
-      } else {
-        warning(
-          false,
-          'Only strings and numbers are supported as <option> children.'
-        );
-      }
-    });
+    var content = flattenChildren(props.children);
 
     if (content) {
-      nativeProps.children = content;
+      hostProps.children = content;
     }
 
-    return nativeProps;
+    return hostProps;
   },
-
 };
diff --git a/src/renderers/dom/client/wrappers/ReactDOMSelect.js b/src/renderers/dom/client/wrappers/ReactDOMSelect.js
index 2247fb677..e0b9f6a89 100644
--- a/src/renderers/dom/client/wrappers/ReactDOMSelect.js
+++ b/src/renderers/dom/client/wrappers/ReactDOMSelect.js
@@ -20,3 +20,2 @@ var warning = require('warning');
 var didWarnValueLink = false;
-var didWarnValueNull = false;
 var didWarnValueDefaultValue = false;
@@ -46,15 +45,2 @@ function getDeclarationErrorAddendum(owner) {
 
-function warnIfValueIsNull(props) {
-  if (props != null && props.value === null && !didWarnValueNull) {
-    warning(
-      false,
-      '`value` prop on `select` should not be null. ' +
-      'Consider using the empty string to clear the component or `undefined` ' +
-      'for uncontrolled components.'
-    );
-
-    didWarnValueNull = true;
-  }
-}
-
 var valuePropNames = ['value', 'defaultValue'];
@@ -67,7 +53,3 @@ function checkSelectPropTypes(inst, props) {
   var owner = inst._currentElement._owner;
-  LinkedValueUtils.checkPropTypes(
-    'select',
-    props,
-    owner
-  );
+  LinkedValueUtils.checkPropTypes('select', props, owner);
 
@@ -76,3 +58,3 @@ function checkSelectPropTypes(inst, props) {
       false,
-      '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.'
+      '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.',
     );
@@ -86,17 +68,18 @@ function checkSelectPropTypes(inst, props) {
     }
-    if (props.multiple) {
+    var isArray = Array.isArray(props[propName]);
+    if (props.multiple && !isArray) {
       warning(
-        Array.isArray(props[propName]),
+        false,
         'The `%s` prop supplied to <select> must be an array if ' +
-        '`multiple` is true.%s',
+          '`multiple` is true.%s',
         propName,
-        getDeclarationErrorAddendum(owner)
+        getDeclarationErrorAddendum(owner),
       );
-    } else {
+    } else if (!props.multiple && isArray) {
       warning(
-        !Array.isArray(props[propName]),
+        false,
         'The `%s` prop supplied to <select> must be a scalar ' +
-        'value if `multiple` is false.%s',
+          'value if `multiple` is false.%s',
         propName,
-        getDeclarationErrorAddendum(owner)
+        getDeclarationErrorAddendum(owner),
       );
@@ -144,3 +127,3 @@ function updateOptions(inst, multiple, propValue) {
 /**
- * Implements a <select> native component that allows optionally setting the
+ * Implements a <select> host component that allows optionally setting the
  * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
@@ -159,3 +142,3 @@ function updateOptions(inst, multiple, propValue) {
 var ReactDOMSelect = {
-  getNativeProps: function(inst, props) {
+  getHostProps: function(inst, props) {
     return Object.assign({}, props, {
@@ -169,3 +152,2 @@ var ReactDOMSelect = {
       checkSelectPropTypes(inst, props);
-      warnIfValueIsNull(props);
     }
@@ -189,6 +171,6 @@ var ReactDOMSelect = {
         'Select elements must be either controlled or uncontrolled ' +
-        '(specify either the value prop, or the defaultValue prop, but not ' +
-        'both). Decide between using a controlled or uncontrolled select ' +
-        'element and remove one of these props. More info: ' +
-        'https://fb.me/react-controlled-components'
+          '(specify either the value prop, or the defaultValue prop, but not ' +
+          'both). Decide between using a controlled or uncontrolled select ' +
+          'element and remove one of these props. More info: ' +
+          'https://fb.me/react-controlled-components',
       );
@@ -206,5 +188,2 @@ var ReactDOMSelect = {
     var props = inst._currentElement.props;
-    if (__DEV__) {
-      warnIfValueIsNull(props);
-    }
 
diff --git a/src/renderers/dom/client/wrappers/ReactDOMTextarea.js b/src/renderers/dom/client/wrappers/ReactDOMTextarea.js
index bf5508b7d..c528bb3aa 100644
--- a/src/renderers/dom/client/wrappers/ReactDOMTextarea.js
+++ b/src/renderers/dom/client/wrappers/ReactDOMTextarea.js
@@ -13,3 +13,2 @@
 
-var DOMPropertyOperations = require('DOMPropertyOperations');
 var LinkedValueUtils = require('LinkedValueUtils');
@@ -22,3 +21,2 @@ var warning = require('warning');
 var didWarnValueLink = false;
-var didWarnValueNull = false;
 var didWarnValDefaultVal = false;
@@ -32,17 +30,4 @@ function forceUpdateIfMounted() {
 
-function warnIfValueIsNull(props) {
-  if (props != null && props.value === null && !didWarnValueNull) {
-    warning(
-      false,
-      '`value` prop on `textarea` should not be null. ' +
-      'Consider using the empty string to clear the component or `undefined` ' +
-      'for uncontrolled components.'
-    );
-
-    didWarnValueNull = true;
-  }
-}
-
 /**
- * Implements a <textarea> native component that allows setting `value`, and
+ * Implements a <textarea> host component that allows setting `value`, and
  * `defaultValue`. This differs from the traditional DOM API because value is
@@ -61,6 +46,6 @@ function warnIfValueIsNull(props) {
 var ReactDOMTextarea = {
-  getNativeProps: function(inst, props) {
+  getHostProps: function(inst, props) {
     invariant(
       props.dangerouslySetInnerHTML == null,
-      '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
+      '`dangerouslySetInnerHTML` does not make sense on <textarea>.',
     );
@@ -68,7 +53,10 @@ var ReactDOMTextarea = {
     // Always set children to the same thing. In IE9, the selection range will
-    // get reset if `textContent` is mutated.
-    var nativeProps = Object.assign({}, props, {
-      defaultValue: undefined,
+    // get reset if `textContent` is mutated.  We could add a check in setTextContent
+    // to only set the value if/when the value differs from the node value (which would
+    // completely solve this IE9 bug), but Sebastian+Ben seemed to like this solution.
+    // The value can be a boolean or object so that's why it's forced to be a string.
+    var hostProps = Object.assign({}, props, {
       value: undefined,
-      children: inst._wrapperState.initialValue,
+      defaultValue: undefined,
+      children: '' + inst._wrapperState.initialValue,
       onChange: inst._wrapperState.onChange,
@@ -76,3 +64,3 @@ var ReactDOMTextarea = {
 
-    return nativeProps;
+    return hostProps;
   },
@@ -84,3 +72,3 @@ var ReactDOMTextarea = {
         props,
-        inst._currentElement._owner
+        inst._currentElement._owner,
       );
@@ -89,3 +77,3 @@ var ReactDOMTextarea = {
           false,
-          '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.'
+          '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.',
         );
@@ -101,6 +89,6 @@ var ReactDOMTextarea = {
           'Textarea elements must be either controlled or uncontrolled ' +
-          '(specify either the value prop, or the defaultValue prop, but not ' +
-          'both). Decide between using a controlled or uncontrolled textarea ' +
-          'and remove one of these props. More info: ' +
-          'https://fb.me/react-controlled-components'
+            '(specify either the value prop, or the defaultValue prop, but not ' +
+            'both). Decide between using a controlled or uncontrolled textarea ' +
+            'and remove one of these props. More info: ' +
+            'https://fb.me/react-controlled-components',
         );
@@ -108,40 +96,42 @@ var ReactDOMTextarea = {
       }
-      warnIfValueIsNull(props);
     }
 
-    var defaultValue = props.defaultValue;
-    // TODO (yungsters): Remove support for children content in <textarea>.
-    var children = props.children;
-    if (children != null) {
-      if (__DEV__) {
-        warning(
-          false,
-          'Use the `defaultValue` or `value` props instead of setting ' +
-          'children on <textarea>.'
-        );
-      }
-      invariant(
-        defaultValue == null,
-        'If you supply `defaultValue` on a <textarea>, do not pass children.'
-      );
-      if (Array.isArray(children)) {
+    var value = LinkedValueUtils.getValue(props);
+    var initialValue = value;
+
+    // Only bother fetching default value if we're going to use it
+    if (value == null) {
+      var defaultValue = props.defaultValue;
+      // TODO (yungsters): Remove support for children content in <textarea>.
+      var children = props.children;
+      if (children != null) {
+        if (__DEV__) {
+          warning(
+            false,
+            'Use the `defaultValue` or `value` props instead of setting ' +
+              'children on <textarea>.',
+          );
+        }
         invariant(
-          children.length <= 1,
-          '<textarea> can only have at most one child.'
+          defaultValue == null,
+          'If you supply `defaultValue` on a <textarea>, do not pass children.',
         );
-        children = children[0];
+        if (Array.isArray(children)) {
+          invariant(
+            children.length <= 1,
+            '<textarea> can only have at most one child.',
+          );
+          children = children[0];
+        }
+
+        defaultValue = '' + children;
       }
-
-      defaultValue = '' + children;
-    }
-    if (defaultValue == null) {
-      defaultValue = '';
+      if (defaultValue == null) {
+        defaultValue = '';
+      }
+      initialValue = defaultValue;
     }
-    var value = LinkedValueUtils.getValue(props);
+
     inst._wrapperState = {
-      // We save the initial value so that `ReactDOMComponent` doesn't update
-      // `textContent` (unnecessary since we update value).
-      // The initial value can be a boolean or object so that's why it's
-      // forced to be a string.
-      initialValue: '' + (value != null ? value : defaultValue),
+      initialValue: '' + initialValue,
       listeners: null,
@@ -154,6 +144,3 @@ var ReactDOMTextarea = {
 
-    if (__DEV__) {
-      warnIfValueIsNull(props);
-    }
-
+    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
     var value = LinkedValueUtils.getValue(props);
@@ -162,7 +149,29 @@ var ReactDOMTextarea = {
       // browsers typically do this as necessary, jsdom doesn't.
-      DOMPropertyOperations.setValueForProperty(
-        ReactDOMComponentTree.getNodeFromInstance(inst),
-        'value',
-        '' + value
-      );
+      var newValue = '' + value;
+
+      // To avoid side effects (such as losing text selection), only set value if changed
+      if (newValue !== node.value) {
+        node.value = newValue;
+      }
+      if (props.defaultValue == null) {
+        node.defaultValue = newValue;
+      }
+    }
+    if (props.defaultValue != null) {
+      node.defaultValue = props.defaultValue;
+    }
+  },
+
+  postMountWrapper: function(inst) {
+    // This is in postMount because we need access to the DOM node, which is not
+    // available until after the component has mounted.
+    var node = ReactDOMComponentTree.getNodeFromInstance(inst);
+    var textContent = node.textContent;
+
+    // Only set node.value if textContent is equal to the expected
+    // initial value. In IE10/IE11 there is a bug where the placeholder attribute
+    // will populate textContent as well.
+    // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
+    if (textContent === inst._wrapperState.initialValue) {
+      node.value = textContent;
     }
diff --git a/src/renderers/dom/client/wrappers/__tests__/ReactDOMButton-test.js b/src/renderers/dom/client/wrappers/__tests__/ReactDOMButton-test.js
deleted file mode 100644
index 5e674be19..000000000
--- a/src/renderers/dom/client/wrappers/__tests__/ReactDOMButton-test.js
+++ /dev/null
@@ -1,93 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
- */
-
-'use strict';
-
-
-describe('ReactDOMButton', function() {
-  var React;
-  var ReactDOM;
-  var ReactTestUtils;
-
-  var onClick = jest.genMockFn();
-
-  function expectClickThru(button) {
-    onClick.mockClear();
-    ReactTestUtils.Simulate.click(ReactDOM.findDOMNode(button));
-    expect(onClick.mock.calls.length).toBe(1);
-  }
-
-  function expectNoClickThru(button) {
-    onClick.mockClear();
-    ReactTestUtils.Simulate.click(ReactDOM.findDOMNode(button));
-    expect(onClick.mock.calls.length).toBe(0);
-  }
-
-  function mounted(button) {
-    button = ReactTestUtils.renderIntoDocument(button);
-    return button;
-  }
-
-  beforeEach(function() {
-    React = require('React');
-    ReactDOM = require('ReactDOM');
-    ReactTestUtils = require('ReactTestUtils');
-  });
-
-  it('should forward clicks when it starts out not disabled', function() {
-    expectClickThru(mounted(<button onClick={onClick} />));
-  });
-
-  it('should not forward clicks when it starts out disabled', function() {
-    expectNoClickThru(
-      mounted(<button disabled={true} onClick={onClick} />)
-    );
-  });
-
-  it('should forward clicks when it becomes not disabled', function() {
-    var container = document.createElement('div');
-    var btn = ReactDOM.render(
-      <button disabled={true} onClick={onClick} />,
-      container
-    );
-    btn = ReactDOM.render(
-      <button onClick={onClick} />,
-      container
-    );
-    expectClickThru(btn);
-  });
-
-  it('should not forward clicks when it becomes disabled', function() {
-    var container = document.createElement('div');
-    var btn = ReactDOM.render(
-      <button onClick={onClick} />,
-      container
-    );
-    btn = ReactDOM.render(
-      <button disabled={true} onClick={onClick} />,
-      container
-    );
-    expectNoClickThru(btn);
-  });
-
-  it('should work correctly if the listener is changed', function() {
-    var container = document.createElement('div');
-    var btn = ReactDOM.render(
-      <button disabled={true} onClick={function() {}} />,
-      container
-    );
-    btn = ReactDOM.render(
-      <button disabled={false} onClick={onClick} />,
-      container
-    );
-    expectClickThru(btn);
-  });
-});
diff --git a/src/renderers/dom/client/wrappers/__tests__/ReactDOMIframe-test.js b/src/renderers/dom/client/wrappers/__tests__/ReactDOMIframe-test.js
index 918e07c62..b8e734397 100644
--- a/src/renderers/dom/client/wrappers/__tests__/ReactDOMIframe-test.js
+++ b/src/renderers/dom/client/wrappers/__tests__/ReactDOMIframe-test.js
@@ -13,3 +13,3 @@
 
-describe('ReactDOMIframe', function() {
+describe('ReactDOMIframe', () => {
   var React;
@@ -18,3 +18,3 @@ describe('ReactDOMIframe', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     React = require('React');
@@ -24,3 +24,3 @@ describe('ReactDOMIframe', function() {
 
-  it('should trigger load events', function() {
+  it('should trigger load events', () => {
     var onLoadSpy = jasmine.createSpy();
diff --git a/src/renderers/dom/client/wrappers/__tests__/ReactDOMInput-test.js b/src/renderers/dom/client/wrappers/__tests__/ReactDOMInput-test.js
index 7a1f57dd0..4c099ee9d 100644
--- a/src/renderers/dom/client/wrappers/__tests__/ReactDOMInput-test.js
+++ b/src/renderers/dom/client/wrappers/__tests__/ReactDOMInput-test.js
@@ -13,9 +13,8 @@
 
-
 var emptyFunction = require('emptyFunction');
 
-describe('ReactDOMInput', function() {
-  var EventConstants;
+describe('ReactDOMInput', () => {
   var React;
   var ReactDOM;
+  var ReactDOMServer;
   var ReactDOMFeatureFlags;
@@ -24,7 +23,7 @@ describe('ReactDOMInput', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     jest.resetModuleRegistry();
-    EventConstants = require('EventConstants');
     React = require('React');
     ReactDOM = require('ReactDOM');
+    ReactDOMServer = require('ReactDOMServer');
     ReactDOMFeatureFlags = require('ReactDOMFeatureFlags');
@@ -35,3 +34,74 @@ describe('ReactDOMInput', function() {
 
-  it('should display `defaultValue` of number 0', function() {
+  describe('switching text inputs between numeric and string numbers', () => {
+    it('does change the number 2 to "2.0" with no change handler', () => {
+      var stub = <input type="text" value={2} onChange={jest.fn()} />;
+      stub = ReactTestUtils.renderIntoDocument(stub);
+      var node = ReactDOM.findDOMNode(stub);
+
+      node.value = '2.0';
+
+      ReactTestUtils.Simulate.change(stub);
+
+      expect(node.getAttribute('value')).toBe('2');
+      expect(node.value).toBe('2');
+    });
+
+    it('does change the string "2" to "2.0" with no change handler', () => {
+      var stub = <input type="text" value={'2'} onChange={jest.fn()} />;
+      stub = ReactTestUtils.renderIntoDocument(stub);
+      var node = ReactDOM.findDOMNode(stub);
+
+      node.value = '2.0';
+
+      ReactTestUtils.Simulate.change(stub);
+
+      expect(node.getAttribute('value')).toBe('2');
+      expect(node.value).toBe('2');
+    });
+
+    it('changes the number 2 to "2.0" using a change handler', () => {
+      class Stub extends React.Component {
+        state = {
+          value: 2,
+        };
+        onChange = event => {
+          this.setState({value: event.target.value});
+        };
+        render() {
+          const {value} = this.state;
+
+          return <input type="text" value={value} onChange={this.onChange} />;
+        }
+      }
+
+      var stub = ReactTestUtils.renderIntoDocument(<Stub />);
+      var node = ReactDOM.findDOMNode(stub);
+
+      node.value = '2.0';
+
+      ReactTestUtils.Simulate.change(node);
+
+      expect(node.getAttribute('value')).toBe('2.0');
+      expect(node.value).toBe('2.0');
+    });
+  });
+
+  it('does change the string ".98" to "0.98" with no change handler', () => {
+    class Stub extends React.Component {
+      state = {
+        value: '.98',
+      };
+      render() {
+        return <input type="number" value={this.state.value} />;
+      }
+    }
+
+    var stub = ReactTestUtils.renderIntoDocument(<Stub />);
+    var node = ReactDOM.findDOMNode(stub);
+    stub.setState({value: '0.98'});
+
+    expect(node.value).toEqual('0.98');
+  });
+
+  it('should display `defaultValue` of number 0', () => {
     var stub = <input type="text" defaultValue={0} />;
@@ -40,2 +110,3 @@ describe('ReactDOMInput', function() {
 
+    expect(node.getAttribute('value')).toBe('0');
     expect(node.value).toBe('0');
@@ -43,3 +114,27 @@ describe('ReactDOMInput', function() {
 
-  it('should display "true" for `defaultValue` of `true`', function() {
+  it('only assigns defaultValue if it changes', () => {
+    class Test extends React.Component {
+      render() {
+        return <input defaultValue="0" />;
+      }
+    }
+
+    var component = ReactTestUtils.renderIntoDocument(<Test />);
+    var node = ReactDOM.findDOMNode(component);
+
+    Object.defineProperty(node, 'defaultValue', {
+      get() {
+        return '0';
+      },
+      set(value) {
+        throw new Error(
+          `defaultValue was assigned ${value}, but it did not change!`,
+        );
+      },
+    });
+
+    component.forceUpdate();
+  });
+
+  it('should display "true" for `defaultValue` of `true`', () => {
     var stub = <input type="text" defaultValue={true} />;
@@ -51,3 +146,3 @@ describe('ReactDOMInput', function() {
 
-  it('should display "false" for `defaultValue` of `false`', function() {
+  it('should display "false" for `defaultValue` of `false`', () => {
     var stub = <input type="text" defaultValue={false} />;
@@ -59,3 +154,100 @@ describe('ReactDOMInput', function() {
 
-  it('should display "foobar" for `defaultValue` of `objToString`', function() {
+  it('should update `defaultValue` for uncontrolled input', () => {
+    var container = document.createElement('div');
+
+    var node = ReactDOM.render(
+      <input type="text" defaultValue="0" />,
+      container,
+    );
+
+    expect(node.value).toBe('0');
+
+    ReactDOM.render(<input type="text" defaultValue="1" />, container);
+
+    expect(node.value).toBe('0');
+    expect(node.defaultValue).toBe('1');
+  });
+
+  it('should update `defaultValue` for uncontrolled date/time input', () => {
+    var container = document.createElement('div');
+
+    var node = ReactDOM.render(
+      <input type="date" defaultValue="1980-01-01" />,
+      container,
+    );
+
+    expect(node.value).toBe('1980-01-01');
+
+    ReactDOM.render(<input type="date" defaultValue="2000-01-01" />, container);
+
+    expect(node.value).toBe('1980-01-01');
+    expect(node.defaultValue).toBe('2000-01-01');
+
+    ReactDOM.render(<input type="date" />, container);
+  });
+
+  it('should take `defaultValue` when changing to uncontrolled input', () => {
+    var container = document.createElement('div');
+
+    var node = ReactDOM.render(
+      <input type="text" value="0" readOnly="true" />,
+      container,
+    );
+
+    expect(node.value).toBe('0');
+
+    ReactDOM.render(<input type="text" defaultValue="1" />, container);
+
+    expect(node.value).toBe('0');
+  });
+
+  it('should render defaultValue for SSR', () => {
+    var markup = ReactDOMServer.renderToString(
+      <input type="text" defaultValue="1" />,
+    );
+    var div = document.createElement('div');
+    div.innerHTML = markup;
+    expect(div.firstChild.getAttribute('value')).toBe('1');
+    expect(div.firstChild.getAttribute('defaultValue')).toBe(null);
+  });
+
+  it('should render value for SSR', () => {
+    var element = <input type="text" value="1" onChange={function() {}} />;
+    var markup = ReactDOMServer.renderToString(element);
+    var div = document.createElement('div');
+    div.innerHTML = markup;
+    expect(div.firstChild.getAttribute('value')).toBe('1');
+    expect(div.firstChild.getAttribute('defaultValue')).toBe(null);
+  });
+
+  it('should render name attribute if it is supplied', () => {
+    var container = document.createElement('div');
+    var node = ReactDOM.render(<input type="text" name="name" />, container);
+    expect(node.name).toBe('name');
+    expect(container.firstChild.getAttribute('name')).toBe('name');
+  });
+
+  it('should render name attribute if it is supplied for SSR', () => {
+    var element = <input type="text" name="name" />;
+    var markup = ReactDOMServer.renderToString(element);
+    var div = document.createElement('div');
+    div.innerHTML = markup;
+    expect(div.firstChild.getAttribute('name')).toBe('name');
+  });
+
+  it('should not render name attribute if it is not supplied', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<input type="text" />, container);
+    expect(container.firstChild.getAttribute('name')).toBe(null);
+  });
+
+  it('should not render name attribute if it is not supplied for SSR', () => {
+    var element = <input type="text" />;
+    var markup = ReactDOMServer.renderToString(element);
+    var div = document.createElement('div');
+    div.innerHTML = markup;
+    expect(div.firstChild.getAttribute('name')).toBe(null);
+  });
+
+  it('should display "foobar" for `defaultValue` of `objToString`', () => {
     var objToString = {
@@ -73,3 +265,3 @@ describe('ReactDOMInput', function() {
 
-  it('should display `value` of number 0', function() {
+  it('should display `value` of number 0', () => {
     var stub = <input type="text" value={0} />;
@@ -81,7 +273,6 @@ describe('ReactDOMInput', function() {
 
-  it('should allow setting `value` to `true`', function() {
+  it('should allow setting `value` to `true`', () => {
     var container = document.createElement('div');
     var stub = <input type="text" value="yolo" onChange={emptyFunction} />;
-    stub = ReactDOM.render(stub, container);
-    var node = ReactDOM.findDOMNode(stub);
+    var node = ReactDOM.render(stub, container);
 
@@ -91,3 +282,3 @@ describe('ReactDOMInput', function() {
       <input type="text" value={true} onChange={emptyFunction} />,
-      container
+      container,
     );
@@ -96,7 +287,6 @@ describe('ReactDOMInput', function() {
 
-  it('should allow setting `value` to `false`', function() {
+  it('should allow setting `value` to `false`', () => {
     var container = document.createElement('div');
     var stub = <input type="text" value="yolo" onChange={emptyFunction} />;
-    stub = ReactDOM.render(stub, container);
-    var node = ReactDOM.findDOMNode(stub);
+    var node = ReactDOM.render(stub, container);
 
@@ -106,3 +296,3 @@ describe('ReactDOMInput', function() {
       <input type="text" value={false} onChange={emptyFunction} />,
-      container
+      container,
     );
@@ -111,7 +301,6 @@ describe('ReactDOMInput', function() {
 
-  it('should allow setting `value` to `objToString`', function() {
+  it('should allow setting `value` to `objToString`', () => {
     var container = document.createElement('div');
     var stub = <input type="text" value="foo" onChange={emptyFunction} />;
-    stub = ReactDOM.render(stub, container);
-    var node = ReactDOM.findDOMNode(stub);
+    var node = ReactDOM.render(stub, container);
 
@@ -126,3 +315,3 @@ describe('ReactDOMInput', function() {
       <input type="text" value={objToString} onChange={emptyFunction} />,
-      container
+      container,
     );
@@ -131,3 +320,66 @@ describe('ReactDOMInput', function() {
 
-  it('should properly control a value of number `0`', function() {
+  it('should not incur unnecessary DOM mutations', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<input value="a" />, container);
+
+    var node = container.firstChild;
+    var nodeValue = 'a';
+    var nodeValueSetter = jest.genMockFn();
+    Object.defineProperty(node, 'value', {
+      get: function() {
+        return nodeValue;
+      },
+      set: nodeValueSetter.mockImplementation(function(newValue) {
+        nodeValue = newValue;
+      }),
+    });
+
+    ReactDOM.render(<input value="a" />, container);
+    expect(nodeValueSetter.mock.calls.length).toBe(0);
+
+    ReactDOM.render(<input value="b" />, container);
+    expect(nodeValueSetter.mock.calls.length).toBe(1);
+  });
+
+  it('should not incur unnecessary DOM mutations for numeric type conversion', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<input value="0" />, container);
+
+    var node = container.firstChild;
+    var nodeValue = '0';
+    var nodeValueSetter = jest.genMockFn();
+    Object.defineProperty(node, 'value', {
+      get: function() {
+        return nodeValue;
+      },
+      set: nodeValueSetter.mockImplementation(function(newValue) {
+        nodeValue = newValue;
+      }),
+    });
+
+    ReactDOM.render(<input value={0} />, container);
+    expect(nodeValueSetter.mock.calls.length).toBe(0);
+  });
+
+  it('should not incur unnecessary DOM mutations for the boolean type conversion', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<input value="true" />, container);
+
+    var node = container.firstChild;
+    var nodeValue = 'true';
+    var nodeValueSetter = jest.genMockFn();
+    Object.defineProperty(node, 'value', {
+      get: function() {
+        return nodeValue;
+      },
+      set: nodeValueSetter.mockImplementation(function(newValue) {
+        nodeValue = newValue;
+      }),
+    });
+
+    ReactDOM.render(<input value={true} />, container);
+    expect(nodeValueSetter.mock.calls.length).toBe(0);
+  });
+
+  it('should properly control a value of number `0`', () => {
     var stub = <input type="text" value={0} onChange={emptyFunction} />;
@@ -141,3 +393,45 @@ describe('ReactDOMInput', function() {
 
-  it('should have the correct target value', function() {
+  it('should properly control 0.0 for a text input', () => {
+    var stub = <input type="text" value={0} onChange={emptyFunction} />;
+    stub = ReactTestUtils.renderIntoDocument(stub);
+    var node = ReactDOM.findDOMNode(stub);
+
+    node.value = '0.0';
+    ReactTestUtils.Simulate.change(node, {target: {value: '0.0'}});
+    expect(node.value).toBe('0');
+  });
+
+  it('should properly control 0.0 for a number input', () => {
+    var stub = <input type="number" value={0} onChange={emptyFunction} />;
+    stub = ReactTestUtils.renderIntoDocument(stub);
+    var node = ReactDOM.findDOMNode(stub);
+
+    node.value = '0.0';
+    ReactTestUtils.Simulate.change(node, {target: {value: '0.0'}});
+    expect(node.value).toBe('0.0');
+  });
+
+  it('should properly transition from an empty value to 0', function() {
+    var container = document.createElement('div');
+
+    ReactDOM.render(<input type="text" value="" />, container);
+    ReactDOM.render(<input type="text" value={0} />, container);
+
+    var node = container.firstChild;
+
+    expect(node.value).toBe('0');
+  });
+
+  it('should properly transition from 0 to an empty value', function() {
+    var container = document.createElement('div');
+
+    ReactDOM.render(<input type="text" value={0} />, container);
+    ReactDOM.render(<input type="text" value="" />, container);
+
+    var node = container.firstChild;
+
+    expect(node.value).toBe('');
+  });
+
+  it('should have the correct target value', () => {
     var handled = false;
@@ -153,10 +447,6 @@ describe('ReactDOMInput', function() {
 
-    var fakeNativeEvent = new function() {};
+    var fakeNativeEvent = function() {};
     fakeNativeEvent.target = node;
     fakeNativeEvent.path = [node, container];
-    ReactTestUtils.simulateNativeEventOnNode(
-      EventConstants.topLevelTypes.topInput,
-      node,
-      fakeNativeEvent
-    );
+    ReactTestUtils.simulateNativeEventOnNode('topInput', node, fakeNativeEvent);
 
@@ -165,3 +455,3 @@ describe('ReactDOMInput', function() {
 
-  it('should not set a value for submit buttons unnecessarily', function() {
+  it('should not set a value for submit buttons unnecessarily', () => {
     var stub = <input type="submit" />;
@@ -175,3 +465,3 @@ describe('ReactDOMInput', function() {
     expect(
-      !node.hasAttribute('value') || node.getAttribute('value').length > 0
+      !node.hasAttribute('value') || node.getAttribute('value').length > 0,
     ).toBe(true);
@@ -179,5 +469,5 @@ describe('ReactDOMInput', function() {
 
-  it('should control radio buttons', function() {
-    var RadioGroup = React.createClass({
-      render: function() {
+  it('should control radio buttons', () => {
+    class RadioGroup extends React.Component {
+      render() {
         return (
@@ -190,9 +480,6 @@ describe('ReactDOMInput', function() {
               onChange={emptyFunction}
-            />A
-            <input
-              ref="b"
-              type="radio"
-              name="fruit"
-              onChange={emptyFunction}
-            />B
+            />
+            A
+            <input ref="b" type="radio" name="fruit" onChange={emptyFunction} />
+            B
 
@@ -209,4 +496,4 @@ describe('ReactDOMInput', function() {
         );
-      },
-    });
+      }
+    }
 
@@ -237,4 +524,4 @@ describe('ReactDOMInput', function() {
 
-  it('should support ReactLink', function() {
-    var link = new ReactLink('yolo', jest.genMockFn());
+  it('should support ReactLink', () => {
+    var link = new ReactLink('yolo', jest.fn());
     var instance = <input type="text" valueLink={link} />;
@@ -254,8 +541,8 @@ describe('ReactDOMInput', function() {
 
-  it('should warn with value and no onChange handler', function() {
-    var link = new ReactLink('yolo', jest.genMockFn());
+  it('should warn with value and no onChange handler', () => {
+    var link = new ReactLink('yolo', jest.fn());
     ReactTestUtils.renderIntoDocument(<input type="text" valueLink={link} />);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      '`valueLink` prop on `input` is deprecated; set `value` and `onChange` instead.',
     );
@@ -263,22 +550,22 @@ describe('ReactDOMInput', function() {
     ReactTestUtils.renderIntoDocument(
-      <input type="text" value="zoink" onChange={jest.genMockFn()} />
+      <input type="text" value="zoink" onChange={jest.fn()} />,
     );
-    expect(console.error.argsForCall.length).toBe(1);
+    expect(console.error.calls.count()).toBe(1);
     ReactTestUtils.renderIntoDocument(<input type="text" value="zoink" />);
-    expect(console.error.argsForCall.length).toBe(2);
+    expect(console.error.calls.count()).toBe(2);
   });
 
-  it('should warn with value and no onChange handler and readOnly specified', function() {
+  it('should warn with value and no onChange handler and readOnly specified', () => {
     ReactTestUtils.renderIntoDocument(
-      <input type="text" value="zoink" readOnly={true} />
+      <input type="text" value="zoink" readOnly={true} />,
     );
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
 
     ReactTestUtils.renderIntoDocument(
-      <input type="text" value="zoink" readOnly={false} />
+      <input type="text" value="zoink" readOnly={false} />,
     );
-    expect(console.error.argsForCall.length).toBe(1);
+    expect(console.error.calls.count()).toBe(1);
   });
 
-  it('should have a this value of undefined if bind is not used', function() {
+  it('should have a this value of undefined if bind is not used', () => {
     var unboundInputOnChange = function() {
@@ -293,5 +580,5 @@ describe('ReactDOMInput', function() {
 
-  it('should throw if both value and valueLink are provided', function() {
+  it('should throw if both value and valueLink are provided', () => {
     var node = document.createElement('div');
-    var link = new ReactLink('yolo', jest.genMockFn());
+    var link = new ReactLink('yolo', jest.fn());
     var instance = <input type="text" valueLink={link} />;
@@ -300,3 +587,3 @@ describe('ReactDOMInput', function() {
 
-    instance =
+    instance = (
       <input
@@ -306,3 +593,4 @@ describe('ReactDOMInput', function() {
         onChange={emptyFunction}
-      />;
+      />
+    );
     expect(() => ReactDOM.render(instance, node)).toThrow();
@@ -311,7 +599,6 @@ describe('ReactDOMInput', function() {
     expect(() => ReactDOM.render(instance, node)).toThrow();
-
   });
 
-  it('should support checkedLink', function() {
-    var link = new ReactLink(true, jest.genMockFn());
+  it('should support checkedLink', () => {
+    var link = new ReactLink(true, jest.fn());
     var instance = <input type="checkbox" checkedLink={link} />;
@@ -331,9 +618,9 @@ describe('ReactDOMInput', function() {
 
-  it('should warn with checked and no onChange handler', function() {
+  it('should warn with checked and no onChange handler', () => {
     var node = document.createElement('div');
-    var link = new ReactLink(true, jest.genMockFn());
+    var link = new ReactLink(true, jest.fn());
     ReactDOM.render(<input type="checkbox" checkedLink={link} />, node);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      '`checkedLink` prop on `input` is deprecated; set `value` and `onChange` instead.',
     );
@@ -341,34 +628,32 @@ describe('ReactDOMInput', function() {
     ReactTestUtils.renderIntoDocument(
-      <input
-        type="checkbox"
-        checked="false"
-        onChange={jest.genMockFn()}
-      />
+      <input type="checkbox" checked="false" onChange={jest.fn()} />,
     );
-    expect(console.error.argsForCall.length).toBe(1);
+    expect(console.error.calls.count()).toBe(1);
 
     ReactTestUtils.renderIntoDocument(
-      <input type="checkbox" checked="false" readOnly={true} />
+      <input type="checkbox" checked="false" readOnly={true} />,
     );
-    expect(console.error.argsForCall.length).toBe(1);
+    expect(console.error.calls.count()).toBe(1);
 
-    ReactTestUtils.renderIntoDocument(<input type="checkbox" checked="false" />);
-    expect(console.error.argsForCall.length).toBe(2);
+    ReactTestUtils.renderIntoDocument(
+      <input type="checkbox" checked="false" />,
+    );
+    expect(console.error.calls.count()).toBe(2);
   });
 
-  it('should warn with checked and no onChange handler with readOnly specified', function() {
+  it('should warn with checked and no onChange handler with readOnly specified', () => {
     ReactTestUtils.renderIntoDocument(
-      <input type="checkbox" checked="false" readOnly={true} />
+      <input type="checkbox" checked="false" readOnly={true} />,
     );
-    expect(console.error.argsForCall.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
 
     ReactTestUtils.renderIntoDocument(
-      <input type="checkbox" checked="false" readOnly={false} />
+      <input type="checkbox" checked="false" readOnly={false} />,
     );
-    expect(console.error.argsForCall.length).toBe(1);
+    expect(console.error.calls.count()).toBe(1);
   });
 
-  it('should throw if both checked and checkedLink are provided', function() {
+  it('should throw if both checked and checkedLink are provided', () => {
     var node = document.createElement('div');
-    var link = new ReactLink(true, jest.genMockFn());
+    var link = new ReactLink(true, jest.fn());
     var instance = <input type="checkbox" checkedLink={link} />;
@@ -377,3 +662,3 @@ describe('ReactDOMInput', function() {
 
-    instance =
+    instance = (
       <input
@@ -383,14 +668,22 @@ describe('ReactDOMInput', function() {
         onChange={emptyFunction}
-      />;
+      />
+    );
     expect(() => ReactDOM.render(instance, node)).toThrow();
 
-    instance =
-      <input type="checkbox" checkedLink={link} onChange={emptyFunction} />;
+    instance = (
+      <input type="checkbox" checkedLink={link} onChange={emptyFunction} />
+    );
     expect(() => ReactDOM.render(instance, node)).toThrow();
+  });
 
+  it('should update defaultValue to empty string', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<input type="text" defaultValue={'foo'} />, container);
+    ReactDOM.render(<input type="text" defaultValue={''} />, container);
+    expect(container.firstChild.defaultValue).toBe('');
   });
 
-  it('should throw if both checkedLink and valueLink are provided', function() {
+  it('should throw if both checkedLink and valueLink are provided', () => {
     var node = document.createElement('div');
-    var link = new ReactLink(true, jest.genMockFn());
+    var link = new ReactLink(true, jest.fn());
     var instance = <input type="checkbox" checkedLink={link} />;
@@ -402,4 +695,5 @@ describe('ReactDOMInput', function() {
 
-    instance =
-      <input type="checkbox" checkedLink={link} valueLink={emptyFunction} />;
+    instance = (
+      <input type="checkbox" checkedLink={link} valueLink={emptyFunction} />
+    );
     expect(() => ReactDOM.render(instance, node)).toThrow();
@@ -407,8 +701,8 @@ describe('ReactDOMInput', function() {
 
-  it('should warn if value is null', function() {
+  it('should warn if value is null', () => {
     ReactTestUtils.renderIntoDocument(<input type="text" value={null} />);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       '`value` prop on `input` should not be null. ' +
-      'Consider using the empty string to clear the component or `undefined` ' +
-      'for uncontrolled components.'
+        'Consider using the empty string to clear the component or `undefined` ' +
+        'for uncontrolled components.',
     );
@@ -416,15 +710,21 @@ describe('ReactDOMInput', function() {
     ReactTestUtils.renderIntoDocument(<input type="text" value={null} />);
-    expect(console.error.argsForCall.length).toBe(1);
+    expect(console.error.calls.count()).toBe(1);
   });
 
-  it('should warn if checked and defaultChecked props are specified', function() {
+  it('should warn if checked and defaultChecked props are specified', () => {
     ReactTestUtils.renderIntoDocument(
-      <input type="radio" checked={true} defaultChecked={true} readOnly={true} />
+      <input
+        type="radio"
+        checked={true}
+        defaultChecked={true}
+        readOnly={true}
+      />,
     );
-    expect(console.error.argsForCall[0][0]).toContain(
-      'Input elements must be either controlled or uncontrolled ' +
-      '(specify either the checked prop, or the defaultChecked prop, but not ' +
-      'both). Decide between using a controlled or uncontrolled input ' +
-      'element and remove one of these props. More info: ' +
-      'https://fb.me/react-controlled-components'
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'A component contains an input of type radio with both checked and defaultChecked props. ' +
+        'Input elements must be either controlled or uncontrolled ' +
+        '(specify either the checked prop, or the defaultChecked prop, but not ' +
+        'both). Decide between using a controlled or uncontrolled input ' +
+        'element and remove one of these props. More info: ' +
+        'https://fb.me/react-controlled-components',
     );
@@ -432,17 +732,23 @@ describe('ReactDOMInput', function() {
     ReactTestUtils.renderIntoDocument(
-      <input type="radio" checked={true} defaultChecked={true} readOnly={true} />
+      <input
+        type="radio"
+        checked={true}
+        defaultChecked={true}
+        readOnly={true}
+      />,
     );
-    expect(console.error.argsForCall.length).toBe(1);
+    expect(console.error.calls.count()).toBe(1);
   });
 
-  it('should warn if value and defaultValue props are specified', function() {
+  it('should warn if value and defaultValue props are specified', () => {
     ReactTestUtils.renderIntoDocument(
-      <input type="text" value="foo" defaultValue="bar" readOnly={true} />
+      <input type="text" value="foo" defaultValue="bar" readOnly={true} />,
     );
-    expect(console.error.argsForCall[0][0]).toContain(
-      'Input elements must be either controlled or uncontrolled ' +
-      '(specify either the value prop, or the defaultValue prop, but not ' +
-      'both). Decide between using a controlled or uncontrolled input ' +
-      'element and remove one of these props. More info: ' +
-      'https://fb.me/react-controlled-components'
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'A component contains an input of type text with both value and defaultValue props. ' +
+        'Input elements must be either controlled or uncontrolled ' +
+        '(specify either the value prop, or the defaultValue prop, but not ' +
+        'both). Decide between using a controlled or uncontrolled input ' +
+        'element and remove one of these props. More info: ' +
+        'https://fb.me/react-controlled-components',
     );
@@ -450,9 +756,11 @@ describe('ReactDOMInput', function() {
     ReactTestUtils.renderIntoDocument(
-      <input type="text" value="foo" defaultValue="bar" readOnly={true} />
+      <input type="text" value="foo" defaultValue="bar" readOnly={true} />,
     );
-    expect(console.error.argsForCall.length).toBe(1);
+    expect(console.error.calls.count()).toBe(1);
   });
 
-  it('should warn if controlled input switches to uncontrolled', function() {
-    var stub = <input type="text" value="controlled" onChange={emptyFunction} />;
+  it('should warn if controlled input switches to uncontrolled (value is undefined)', () => {
+    var stub = (
+      <input type="text" value="controlled" onChange={emptyFunction} />
+    );
     var container = document.createElement('div');
@@ -460,8 +768,8 @@ describe('ReactDOMInput', function() {
     ReactDOM.render(<input type="text" />, container);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'A component is changing a controlled input of type text to be uncontrolled. ' +
-      'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
-      'Decide between using a controlled or uncontrolled input ' +
-      'element for the lifetime of the component. More info: https://fb.me/react-controlled-components'
+        'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
+        'Decide between using a controlled or uncontrolled input ' +
+        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
     );
@@ -469,13 +777,34 @@ describe('ReactDOMInput', function() {
 
-  it('should warn if controlled input switches to uncontrolled with defaultValue', function() {
-    var stub = <input type="text" value="controlled" onChange={emptyFunction} />;
+  it('should warn if controlled input switches to uncontrolled (value is null)', () => {
+    var stub = (
+      <input type="text" value="controlled" onChange={emptyFunction} />
+    );
     var container = document.createElement('div');
     ReactDOM.render(stub, container);
-    ReactDOM.render(<input type="text" defaultValue="uncontrolled" />, container);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    ReactDOM.render(<input type="text" value={null} />, container);
+    expect(console.error.calls.count()).toBeGreaterThan(0);
+    expect(console.error.calls.argsFor(1)[0]).toContain(
+      'A component is changing a controlled input of type text to be uncontrolled. ' +
+        'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
+        'Decide between using a controlled or uncontrolled input ' +
+        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
+    );
+  });
+
+  it('should warn if controlled input switches to uncontrolled with defaultValue', () => {
+    var stub = (
+      <input type="text" value="controlled" onChange={emptyFunction} />
+    );
+    var container = document.createElement('div');
+    ReactDOM.render(stub, container);
+    ReactDOM.render(
+      <input type="text" defaultValue="uncontrolled" />,
+      container,
+    );
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'A component is changing a controlled input of type text to be uncontrolled. ' +
-      'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
-      'Decide between using a controlled or uncontrolled input ' +
-      'element for the lifetime of the component. More info: https://fb.me/react-controlled-components'
+        'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
+        'Decide between using a controlled or uncontrolled input ' +
+        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
     );
@@ -483,3 +812,3 @@ describe('ReactDOMInput', function() {
 
-  it('should warn if uncontrolled input switches to controlled', function() {
+  it('should warn if uncontrolled input (value is undefined) switches to controlled', () => {
     var stub = <input type="text" />;
@@ -488,8 +817,8 @@ describe('ReactDOMInput', function() {
     ReactDOM.render(<input type="text" value="controlled" />, container);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'A component is changing a uncontrolled input of type text to be controlled. ' +
-      'Input elements should not switch from uncontrolled to controlled (or vice versa). ' +
-      'Decide between using a controlled or uncontrolled input ' +
-      'element for the lifetime of the component. More info: https://fb.me/react-controlled-components'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'A component is changing an uncontrolled input of type text to be controlled. ' +
+        'Input elements should not switch from uncontrolled to controlled (or vice versa). ' +
+        'Decide between using a controlled or uncontrolled input ' +
+        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
     );
@@ -497,4 +826,20 @@ describe('ReactDOMInput', function() {
 
-  it('should warn if controlled checkbox switches to uncontrolled', function() {
-    var stub = <input type="checkbox" checked={true} onChange={emptyFunction} />;
+  it('should warn if uncontrolled input (value is null) switches to controlled', () => {
+    var stub = <input type="text" value={null} />;
+    var container = document.createElement('div');
+    ReactDOM.render(stub, container);
+    ReactDOM.render(<input type="text" value="controlled" />, container);
+    expect(console.error.calls.count()).toBeGreaterThan(0);
+    expect(console.error.calls.argsFor(1)[0]).toContain(
+      'A component is changing an uncontrolled input of type text to be controlled. ' +
+        'Input elements should not switch from uncontrolled to controlled (or vice versa). ' +
+        'Decide between using a controlled or uncontrolled input ' +
+        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
+    );
+  });
+
+  it('should warn if controlled checkbox switches to uncontrolled (checked is undefined)', () => {
+    var stub = (
+      <input type="checkbox" checked={true} onChange={emptyFunction} />
+    );
     var container = document.createElement('div');
@@ -502,8 +847,8 @@ describe('ReactDOMInput', function() {
     ReactDOM.render(<input type="checkbox" />, container);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'A component is changing a controlled input of type checkbox to be uncontrolled. ' +
-      'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
-      'Decide between using a controlled or uncontrolled input ' +
-      'element for the lifetime of the component. More info: https://fb.me/react-controlled-components'
+        'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
+        'Decide between using a controlled or uncontrolled input ' +
+        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
     );
@@ -511,4 +856,22 @@ describe('ReactDOMInput', function() {
 
-  it('should warn if controlled checkbox switches to uncontrolled with defaultChecked', function() {
-    var stub = <input type="checkbox" checked={true} onChange={emptyFunction} />;
+  it('should warn if controlled checkbox switches to uncontrolled (checked is null)', () => {
+    var stub = (
+      <input type="checkbox" checked={true} onChange={emptyFunction} />
+    );
+    var container = document.createElement('div');
+    ReactDOM.render(stub, container);
+    ReactDOM.render(<input type="checkbox" checked={null} />, container);
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'A component is changing a controlled input of type checkbox to be uncontrolled. ' +
+        'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
+        'Decide between using a controlled or uncontrolled input ' +
+        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
+    );
+  });
+
+  it('should warn if controlled checkbox switches to uncontrolled with defaultChecked', () => {
+    var stub = (
+      <input type="checkbox" checked={true} onChange={emptyFunction} />
+    );
     var container = document.createElement('div');
@@ -516,8 +879,8 @@ describe('ReactDOMInput', function() {
     ReactDOM.render(<input type="checkbox" defaultChecked={true} />, container);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'A component is changing a controlled input of type checkbox to be uncontrolled. ' +
-      'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
-      'Decide between using a controlled or uncontrolled input ' +
-      'element for the lifetime of the component. More info: https://fb.me/react-controlled-components'
+        'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
+        'Decide between using a controlled or uncontrolled input ' +
+        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
     );
@@ -525,3 +888,3 @@ describe('ReactDOMInput', function() {
 
-  it('should warn if uncontrolled checkbox switches to controlled', function() {
+  it('should warn if uncontrolled checkbox (checked is undefined) switches to controlled', () => {
     var stub = <input type="checkbox" />;
@@ -530,8 +893,22 @@ describe('ReactDOMInput', function() {
     ReactDOM.render(<input type="checkbox" checked={true} />, container);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'A component is changing a uncontrolled input of type checkbox to be controlled. ' +
-      'Input elements should not switch from uncontrolled to controlled (or vice versa). ' +
-      'Decide between using a controlled or uncontrolled input ' +
-      'element for the lifetime of the component. More info: https://fb.me/react-controlled-components'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'A component is changing an uncontrolled input of type checkbox to be controlled. ' +
+        'Input elements should not switch from uncontrolled to controlled (or vice versa). ' +
+        'Decide between using a controlled or uncontrolled input ' +
+        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
+    );
+  });
+
+  it('should warn if uncontrolled checkbox (checked is null) switches to controlled', () => {
+    var stub = <input type="checkbox" checked={null} />;
+    var container = document.createElement('div');
+    ReactDOM.render(stub, container);
+    ReactDOM.render(<input type="checkbox" checked={true} />, container);
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'A component is changing an uncontrolled input of type checkbox to be controlled. ' +
+        'Input elements should not switch from uncontrolled to controlled (or vice versa). ' +
+        'Decide between using a controlled or uncontrolled input ' +
+        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
     );
@@ -539,3 +916,3 @@ describe('ReactDOMInput', function() {
 
-  it('should warn if controlled radio switches to uncontrolled', function() {
+  it('should warn if controlled radio switches to uncontrolled (checked is undefined)', () => {
     var stub = <input type="radio" checked={true} onChange={emptyFunction} />;
@@ -544,8 +921,8 @@ describe('ReactDOMInput', function() {
     ReactDOM.render(<input type="radio" />, container);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'A component is changing a controlled input of type radio to be uncontrolled. ' +
-      'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
-      'Decide between using a controlled or uncontrolled input ' +
-      'element for the lifetime of the component. More info: https://fb.me/react-controlled-components'
+        'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
+        'Decide between using a controlled or uncontrolled input ' +
+        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
     );
@@ -553,3 +930,17 @@ describe('ReactDOMInput', function() {
 
-  it('should warn if controlled radio switches to uncontrolled with defaultChecked', function() {
+  it('should warn if controlled radio switches to uncontrolled (checked is null)', () => {
+    var stub = <input type="radio" checked={true} onChange={emptyFunction} />;
+    var container = document.createElement('div');
+    ReactDOM.render(stub, container);
+    ReactDOM.render(<input type="radio" checked={null} />, container);
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'A component is changing a controlled input of type radio to be uncontrolled. ' +
+        'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
+        'Decide between using a controlled or uncontrolled input ' +
+        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
+    );
+  });
+
+  it('should warn if controlled radio switches to uncontrolled with defaultChecked', () => {
     var stub = <input type="radio" checked={true} onChange={emptyFunction} />;
@@ -558,8 +949,8 @@ describe('ReactDOMInput', function() {
     ReactDOM.render(<input type="radio" defaultChecked={true} />, container);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'A component is changing a controlled input of type radio to be uncontrolled. ' +
-      'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
-      'Decide between using a controlled or uncontrolled input ' +
-      'element for the lifetime of the component. More info: https://fb.me/react-controlled-components'
+        'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
+        'Decide between using a controlled or uncontrolled input ' +
+        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
     );
@@ -567,3 +958,3 @@ describe('ReactDOMInput', function() {
 
-  it('should warn if uncontrolled radio switches to controlled', function() {
+  it('should warn if uncontrolled radio (checked is undefined) switches to controlled', () => {
     var stub = <input type="radio" />;
@@ -572,8 +963,8 @@ describe('ReactDOMInput', function() {
     ReactDOM.render(<input type="radio" checked={true} />, container);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'A component is changing a uncontrolled input of type radio to be controlled. ' +
-      'Input elements should not switch from uncontrolled to controlled (or vice versa). ' +
-      'Decide between using a controlled or uncontrolled input ' +
-      'element for the lifetime of the component. More info: https://fb.me/react-controlled-components'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'A component is changing an uncontrolled input of type radio to be controlled. ' +
+        'Input elements should not switch from uncontrolled to controlled (or vice versa). ' +
+        'Decide between using a controlled or uncontrolled input ' +
+        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
     );
@@ -581,3 +972,72 @@ describe('ReactDOMInput', function() {
 
-  it('sets type before value always', function() {
+  it('should warn if uncontrolled radio (checked is null) switches to controlled', () => {
+    var stub = <input type="radio" checked={null} />;
+    var container = document.createElement('div');
+    ReactDOM.render(stub, container);
+    ReactDOM.render(<input type="radio" checked={true} />, container);
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'A component is changing an uncontrolled input of type radio to be controlled. ' +
+        'Input elements should not switch from uncontrolled to controlled (or vice versa). ' +
+        'Decide between using a controlled or uncontrolled input ' +
+        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
+    );
+  });
+
+  it('should not warn if radio value changes but never becomes controlled', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<input type="radio" value="value" />, container);
+    ReactDOM.render(<input type="radio" />, container);
+    ReactDOM.render(
+      <input type="radio" value="value" defaultChecked={true} />,
+      container,
+    );
+    ReactDOM.render(
+      <input type="radio" value="value" onChange={() => null} />,
+      container,
+    );
+    ReactDOM.render(<input type="radio" />, container);
+    expect(console.error.calls.count()).toBe(0);
+  });
+
+  it('should not warn if radio value changes but never becomes uncontrolled', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(
+      <input type="radio" checked={false} onChange={() => null} />,
+      container,
+    );
+    ReactDOM.render(
+      <input
+        type="radio"
+        value="value"
+        defaultChecked={true}
+        checked={false}
+        onChange={() => null}
+      />,
+      container,
+    );
+    expect(console.error.calls.count()).toBe(0);
+  });
+
+  it('should warn if radio checked false changes to become uncontrolled', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(
+      <input
+        type="radio"
+        value="value"
+        checked={false}
+        onChange={() => null}
+      />,
+      container,
+    );
+    ReactDOM.render(<input type="radio" value="value" />, container);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'A component is changing a controlled input of type radio to be uncontrolled. ' +
+        'Input elements should not switch from controlled to uncontrolled (or vice versa). ' +
+        'Decide between using a controlled or uncontrolled input ' +
+        'element for the lifetime of the component. More info: https://fb.me/react-controlled-components',
+    );
+  });
+
+  it('sets type, step, min, max before value always', () => {
     if (!ReactDOMFeatureFlags.useCreateElement) {
@@ -587,3 +1047,3 @@ describe('ReactDOMInput', function() {
     var originalCreateElement = document.createElement;
-    spyOn(document, 'createElement').andCallFake(function(type) {
+    spyOn(document, 'createElement').and.callFake(function(type) {
       var el = originalCreateElement.apply(this, arguments);
@@ -596,3 +1056,3 @@ describe('ReactDOMInput', function() {
         });
-        spyOn(el, 'setAttribute').andCallFake(function(name, value) {
+        spyOn(el, 'setAttribute').and.callFake(function(name, value) {
           log.push('set ' + name);
@@ -603,4 +1063,5 @@ describe('ReactDOMInput', function() {
 
-    ReactTestUtils.renderIntoDocument(<input value="hi" type="radio" />);
-    // Setting value before type does bad things. Make sure we set type first.
+    ReactTestUtils.renderIntoDocument(
+      <input value="0" type="range" min="0" max="100" step="1" />,
+    );
     expect(log).toEqual([
@@ -608,3 +1069,9 @@ describe('ReactDOMInput', function() {
       'set type',
+      'set step',
+      'set min',
+      'set max',
       'set value',
+      'set value',
+      'set checked',
+      'set checked',
     ]);
@@ -612,5 +1079,5 @@ describe('ReactDOMInput', function() {
 
-  it('sets value properly with type coming later in props', function() {
+  it('sets value properly with type coming later in props', () => {
     var input = ReactTestUtils.renderIntoDocument(
-      <input value="hi" type="radio" />
+      <input value="hi" type="radio" />,
     );
@@ -618,2 +1085,144 @@ describe('ReactDOMInput', function() {
   });
+
+  it('does not raise a validation warning when it switches types', () => {
+    class Input extends React.Component {
+      state = {type: 'number', value: 1000};
+
+      render() {
+        var {value, type} = this.state;
+        return <input onChange={() => {}} type={type} value={value} />;
+      }
+    }
+
+    var input = ReactTestUtils.renderIntoDocument(<Input />);
+    var node = ReactDOM.findDOMNode(input);
+
+    // If the value is set before the type, a validation warning will raise and
+    // the value will not be assigned.
+    input.setState({type: 'text', value: 'Test'});
+    expect(node.value).toEqual('Test');
+  });
+
+  it('resets value of date/time input to fix bugs in iOS Safari', () => {
+    // https://github.com/facebook/react/issues/7233
+    if (!ReactDOMFeatureFlags.useCreateElement) {
+      return;
+    }
+
+    function strify(x) {
+      return JSON.stringify(x, null, 2);
+    }
+
+    var log = [];
+    var originalCreateElement = document.createElement;
+    spyOn(document, 'createElement').and.callFake(function(type) {
+      var el = originalCreateElement.apply(this, arguments);
+      if (type === 'input') {
+        Object.defineProperty(el, 'value', {
+          set: function(val) {
+            log.push(`node.value = ${strify(val)}`);
+          },
+        });
+        spyOn(el, 'setAttribute').and.callFake(function(name, val) {
+          log.push(`node.setAttribute(${strify(name)}, ${strify(val)})`);
+        });
+      }
+      return el;
+    });
+
+    ReactTestUtils.renderIntoDocument(
+      <input type="date" defaultValue="1980-01-01" />,
+    );
+    expect(log).toEqual([
+      'node.setAttribute("data-reactroot", "")',
+      'node.setAttribute("type", "date")',
+      'node.setAttribute("value", "1980-01-01")',
+      'node.value = ""',
+      'node.value = ""',
+      'node.setAttribute("checked", "")',
+      'node.setAttribute("checked", "")',
+    ]);
+  });
+
+  describe('assigning the value attribute on controlled inputs', function() {
+    function getTestInput() {
+      return class extends React.Component {
+        state = {
+          value: this.props.value == null ? '' : this.props.value,
+        };
+        onChange = event => {
+          this.setState({value: event.target.value});
+        };
+        render() {
+          var type = this.props.type;
+          var value = this.state.value;
+
+          return <input type={type} value={value} onChange={this.onChange} />;
+        }
+      };
+    }
+
+    it('always sets the attribute when values change on text inputs', function() {
+      var Input = getTestInput();
+      var stub = ReactTestUtils.renderIntoDocument(<Input type="text" />);
+      var node = ReactDOM.findDOMNode(stub);
+
+      ReactTestUtils.Simulate.change(node, {target: {value: '2'}});
+
+      expect(node.getAttribute('value')).toBe('2');
+    });
+
+    it('does not set the value attribute on number inputs if focused', () => {
+      var Input = getTestInput();
+      var stub = ReactTestUtils.renderIntoDocument(
+        <Input type="number" value="1" />,
+      );
+      var node = ReactDOM.findDOMNode(stub);
+
+      node.focus();
+
+      ReactTestUtils.Simulate.change(node, {target: {value: '2'}});
+
+      expect(node.getAttribute('value')).toBe('1');
+    });
+
+    it('sets the value attribute on number inputs on blur', () => {
+      var Input = getTestInput();
+      var stub = ReactTestUtils.renderIntoDocument(
+        <Input type="number" value="1" />,
+      );
+      var node = ReactDOM.findDOMNode(stub);
+
+      ReactTestUtils.Simulate.change(node, {target: {value: '2'}});
+      ReactTestUtils.SimulateNative.blur(node);
+
+      expect(node.getAttribute('value')).toBe('2');
+    });
+
+    it('an uncontrolled number input will not update the value attribute on blur', () => {
+      var stub = ReactTestUtils.renderIntoDocument(
+        <input type="number" defaultValue="1" />,
+      );
+      var node = ReactDOM.findDOMNode(stub);
+
+      node.value = 4;
+
+      ReactTestUtils.SimulateNative.blur(node);
+
+      expect(node.getAttribute('value')).toBe('1');
+    });
+
+    it('an uncontrolled text input will not update the value attribute on blur', () => {
+      var stub = ReactTestUtils.renderIntoDocument(
+        <input type="text" defaultValue="1" />,
+      );
+      var node = ReactDOM.findDOMNode(stub);
+
+      node.value = 4;
+
+      ReactTestUtils.SimulateNative.blur(node);
+
+      expect(node.getAttribute('value')).toBe('1');
+    });
+  });
 });
diff --git a/src/renderers/dom/client/wrappers/__tests__/ReactDOMOption-test.js b/src/renderers/dom/client/wrappers/__tests__/ReactDOMOption-test.js
index 0d52d83df..924df9d96 100644
--- a/src/renderers/dom/client/wrappers/__tests__/ReactDOMOption-test.js
+++ b/src/renderers/dom/client/wrappers/__tests__/ReactDOMOption-test.js
@@ -13,4 +13,3 @@
 
-
-describe('ReactDOMOption', function() {
+describe('ReactDOMOption', () => {
   var React;
@@ -19,3 +18,3 @@ describe('ReactDOMOption', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     React = require('React');
@@ -25,3 +24,3 @@ describe('ReactDOMOption', function() {
 
-  it('should flatten children to a string', function() {
+  it('should flatten children to a string', () => {
     var stub = <option>{1} {'foo'}</option>;
@@ -33,3 +32,3 @@ describe('ReactDOMOption', function() {
 
-  it('should ignore invalid children types', function() {
+  it('should ignore and warn invalid children types', () => {
     spyOn(console, 'error');
@@ -38,16 +37,8 @@ describe('ReactDOMOption', function() {
     var node = ReactDOM.findDOMNode(stub);
-
     expect(node.innerHTML).toBe('1  2');
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain('Only strings and numbers are supported as <option> children.');
-  });
-
-  it('should warn when passing invalid children', function() {
-    var stub = <option>{1} <div /></option>;
-    spyOn(console, 'error');
-    stub = ReactTestUtils.renderIntoDocument(stub);
-
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'Only strings and numbers are supported as <option> children.'
+    ReactTestUtils.renderIntoDocument(<option>{1} <div /> {2}</option>);
+    // only warn once
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'Only strings and numbers are supported as <option> children.',
     );
@@ -55,3 +46,3 @@ describe('ReactDOMOption', function() {
 
-  it('should ignore null/undefined/false children without warning', function() {
+  it('should ignore null/undefined/false children without warning', () => {
     var stub = <option>{1} {false}{true}{null}{undefined} {2}</option>;
@@ -62,3 +53,3 @@ describe('ReactDOMOption', function() {
 
-    expect(console.error.calls.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
     expect(node.innerHTML).toBe('1  2');
@@ -66,4 +57,4 @@ describe('ReactDOMOption', function() {
 
-  it('should be able to use dangerouslySetInnerHTML on option', function() {
-    var stub = <option dangerouslySetInnerHTML={{ __html: 'foobar' }} />;
+  it('should be able to use dangerouslySetInnerHTML on option', () => {
+    var stub = <option dangerouslySetInnerHTML={{__html: 'foobar'}} />;
     stub = ReactTestUtils.renderIntoDocument(stub);
@@ -73,2 +64,33 @@ describe('ReactDOMOption', function() {
   });
+
+  it('should set attribute for empty value', () => {
+    var container = document.createElement('div');
+    var option = ReactDOM.render(<option value="" />, container);
+    expect(option.hasAttribute('value')).toBe(true);
+    expect(option.getAttribute('value')).toBe('');
+
+    ReactDOM.render(<option value="lava" />, container);
+    expect(option.hasAttribute('value')).toBe(true);
+    expect(option.getAttribute('value')).toBe('lava');
+  });
+
+  it('should allow ignoring `value` on option', () => {
+    var a = 'a';
+    var stub = (
+      <select value="giraffe" onChange={() => {}}>
+        <option>monkey</option>
+        <option>gir{a}ffe</option>
+        <option>gorill{a}</option>
+      </select>
+    );
+    var options = stub.props.children;
+    var container = document.createElement('div');
+    stub = ReactDOM.render(stub, container);
+    var node = ReactDOM.findDOMNode(stub);
+
+    expect(node.selectedIndex).toBe(1);
+
+    ReactDOM.render(<select value="gorilla">{options}</select>, container);
+    expect(node.selectedIndex).toEqual(2);
+  });
 });
diff --git a/src/renderers/dom/client/wrappers/__tests__/ReactDOMSelect-test.js b/src/renderers/dom/client/wrappers/__tests__/ReactDOMSelect-test.js
index 97736bc99..c3c7f98e8 100644
--- a/src/renderers/dom/client/wrappers/__tests__/ReactDOMSelect-test.js
+++ b/src/renderers/dom/client/wrappers/__tests__/ReactDOMSelect-test.js
@@ -13,4 +13,3 @@
 
-
-describe('ReactDOMSelect', function() {
+describe('ReactDOMSelect', () => {
   var React;
@@ -23,3 +22,3 @@ describe('ReactDOMSelect', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     React = require('React');
@@ -31,4 +30,4 @@ describe('ReactDOMSelect', function() {
 
-  it('should allow setting `defaultValue`', function() {
-    var stub =
+  it('should allow setting `defaultValue`', () => {
+    var stub = (
       <select defaultValue="giraffe">
@@ -37,3 +36,4 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>;
+      </select>
+    );
     var options = stub.props.children;
@@ -48,3 +48,3 @@ describe('ReactDOMSelect', function() {
       <select defaultValue="gorilla">{options}</select>,
-      container
+      container,
     );
@@ -53,4 +53,4 @@ describe('ReactDOMSelect', function() {
 
-  it('should not throw with `defaultValue` and without children', function() {
-    var stub = <select defaultValue="dummy"></select>;
+  it('should not throw with `defaultValue` and without children', () => {
+    var stub = <select defaultValue="dummy" />;
 
@@ -61,4 +61,4 @@ describe('ReactDOMSelect', function() {
 
-  it('should not control when using `defaultValue`', function() {
-    var el =
+  it('should not control when using `defaultValue`', () => {
+    var el = (
       <select defaultValue="giraffe">
@@ -67,3 +67,4 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>;
+      </select>
+    );
     var container = document.createElement('div');
@@ -80,4 +81,4 @@ describe('ReactDOMSelect', function() {
 
-  it('should allow setting `defaultValue` with multiple', function() {
-    var stub =
+  it('should allow setting `defaultValue` with multiple', () => {
+    var stub = (
       <select multiple={true} defaultValue={['giraffe', 'gorilla']}>
@@ -86,3 +87,4 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>;
+      </select>
+    );
     var options = stub.props.children;
@@ -92,5 +94,5 @@ describe('ReactDOMSelect', function() {
 
-    expect(node.options[0].selected).toBe(false);  // monkey
-    expect(node.options[1].selected).toBe(true);  // giraffe
-    expect(node.options[2].selected).toBe(true);  // gorilla
+    expect(node.options[0].selected).toBe(false); // monkey
+    expect(node.options[1].selected).toBe(true); // giraffe
+    expect(node.options[2].selected).toBe(true); // gorilla
 
@@ -99,12 +101,12 @@ describe('ReactDOMSelect', function() {
       <select multiple={true} defaultValue={['monkey']}>{options}</select>,
-      container
+      container,
     );
 
-    expect(node.options[0].selected).toBe(false);  // monkey
-    expect(node.options[1].selected).toBe(true);  // giraffe
-    expect(node.options[2].selected).toBe(true);  // gorilla
+    expect(node.options[0].selected).toBe(false); // monkey
+    expect(node.options[1].selected).toBe(true); // giraffe
+    expect(node.options[2].selected).toBe(true); // gorilla
   });
 
-  it('should allow setting `value`', function() {
-    var stub =
+  it('should allow setting `value`', () => {
+    var stub = (
       <select value="giraffe" onChange={noop}>
@@ -113,3 +115,4 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>;
+      </select>
+    );
     var options = stub.props.children;
@@ -124,3 +127,3 @@ describe('ReactDOMSelect', function() {
       <select value="gorilla" onChange={noop}>{options}</select>,
-      container
+      container,
     );
@@ -129,4 +132,4 @@ describe('ReactDOMSelect', function() {
 
-  it('should not throw with `value` and without children', function() {
-    var stub = <select value="dummy" onChange={noop}></select>;
+  it('should not throw with `value` and without children', () => {
+    var stub = <select value="dummy" onChange={noop} />;
 
@@ -137,4 +140,4 @@ describe('ReactDOMSelect', function() {
 
-  it('should allow setting `value` with multiple', function() {
-    var stub =
+  it('should allow setting `value` with multiple', () => {
+    var stub = (
       <select multiple={true} value={['giraffe', 'gorilla']} onChange={noop}>
@@ -143,3 +146,4 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>;
+      </select>
+    );
     var options = stub.props.children;
@@ -149,5 +153,5 @@ describe('ReactDOMSelect', function() {
 
-    expect(node.options[0].selected).toBe(false);  // monkey
-    expect(node.options[1].selected).toBe(true);  // giraffe
-    expect(node.options[2].selected).toBe(true);  // gorilla
+    expect(node.options[0].selected).toBe(false); // monkey
+    expect(node.options[1].selected).toBe(true); // giraffe
+    expect(node.options[2].selected).toBe(true); // gorilla
 
@@ -158,12 +162,12 @@ describe('ReactDOMSelect', function() {
       </select>,
-      container
+      container,
     );
 
-    expect(node.options[0].selected).toBe(true);  // monkey
-    expect(node.options[1].selected).toBe(false);  // giraffe
-    expect(node.options[2].selected).toBe(false);  // gorilla
+    expect(node.options[0].selected).toBe(true); // monkey
+    expect(node.options[1].selected).toBe(false); // giraffe
+    expect(node.options[2].selected).toBe(false); // gorilla
   });
 
-  it('should not select other options automatically', function() {
-    var stub =
+  it('should not select other options automatically', () => {
+    var stub = (
       <select multiple={true} value={['12']} onChange={noop}>
@@ -172,3 +176,4 @@ describe('ReactDOMSelect', function() {
         <option value="12">twelve</option>
-      </select>;
+      </select>
+    );
     stub = ReactTestUtils.renderIntoDocument(stub);
@@ -176,8 +181,8 @@ describe('ReactDOMSelect', function() {
 
-    expect(node.options[0].selected).toBe(false);  // one
-    expect(node.options[1].selected).toBe(false);  // two
-    expect(node.options[2].selected).toBe(true);  // twelve
+    expect(node.options[0].selected).toBe(false); // one
+    expect(node.options[1].selected).toBe(false); // two
+    expect(node.options[2].selected).toBe(true); // twelve
   });
 
-  it('should reset child options selected when they are changed and `value` is set', function() {
+  it('should reset child options selected when they are changed and `value` is set', () => {
     var stub = <select multiple={true} value={['a', 'b']} onChange={noop} />;
@@ -192,3 +197,3 @@ describe('ReactDOMSelect', function() {
       </select>,
-      container
+      container,
     );
@@ -197,8 +202,8 @@ describe('ReactDOMSelect', function() {
 
-    expect(node.options[0].selected).toBe(true);  // a
-    expect(node.options[1].selected).toBe(true);  // b
-    expect(node.options[2].selected).toBe(false);  // c
+    expect(node.options[0].selected).toBe(true); // a
+    expect(node.options[1].selected).toBe(true); // b
+    expect(node.options[2].selected).toBe(false); // c
   });
 
-  it('should allow setting `value` with `objectToString`', function() {
+  it('should allow setting `value` with `objectToString`', () => {
     var objectToString = {
@@ -210,3 +215,3 @@ describe('ReactDOMSelect', function() {
 
-    var el =
+    var el = (
       <select multiple={true} value={[objectToString]} onChange={noop}>
@@ -215,3 +220,4 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>;
+      </select>
+    );
     var container = document.createElement('div');
@@ -220,5 +226,5 @@ describe('ReactDOMSelect', function() {
 
-    expect(node.options[0].selected).toBe(false);  // monkey
-    expect(node.options[1].selected).toBe(true);  // giraffe
-    expect(node.options[2].selected).toBe(false);  // gorilla
+    expect(node.options[0].selected).toBe(false); // monkey
+    expect(node.options[1].selected).toBe(true); // giraffe
+    expect(node.options[2].selected).toBe(false); // gorilla
 
@@ -227,3 +233,3 @@ describe('ReactDOMSelect', function() {
 
-    var el2 =
+    var el2 = (
       <select multiple={true} value={[objectToString]}>
@@ -232,12 +238,13 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>;
+      </select>
+    );
     ReactDOM.render(el2, container);
 
-    expect(node.options[0].selected).toBe(true);  // monkey
-    expect(node.options[1].selected).toBe(false);  // giraffe
-    expect(node.options[2].selected).toBe(false);  // gorilla
+    expect(node.options[0].selected).toBe(true); // monkey
+    expect(node.options[1].selected).toBe(false); // giraffe
+    expect(node.options[2].selected).toBe(false); // gorilla
   });
 
-  it('should allow switching to multiple', function() {
-    var stub =
+  it('should allow switching to multiple', () => {
+    var stub = (
       <select defaultValue="giraffe">
@@ -246,3 +253,4 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>;
+      </select>
+    );
     var options = stub.props.children;
@@ -252,5 +260,5 @@ describe('ReactDOMSelect', function() {
 
-    expect(node.options[0].selected).toBe(false);  // monkey
-    expect(node.options[1].selected).toBe(true);  // giraffe
-    expect(node.options[2].selected).toBe(false);  // gorilla
+    expect(node.options[0].selected).toBe(false); // monkey
+    expect(node.options[1].selected).toBe(true); // giraffe
+    expect(node.options[2].selected).toBe(false); // gorilla
 
@@ -261,12 +269,12 @@ describe('ReactDOMSelect', function() {
       </select>,
-      container
+      container,
     );
 
-    expect(node.options[0].selected).toBe(false);  // monkey
-    expect(node.options[1].selected).toBe(true);  // giraffe
-    expect(node.options[2].selected).toBe(true);  // gorilla
+    expect(node.options[0].selected).toBe(false); // monkey
+    expect(node.options[1].selected).toBe(true); // giraffe
+    expect(node.options[2].selected).toBe(true); // gorilla
   });
 
-  it('should allow switching from multiple', function() {
-    var stub =
+  it('should allow switching from multiple', () => {
+    var stub = (
       <select multiple={true} defaultValue={['giraffe', 'gorilla']}>
@@ -275,3 +283,4 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>;
+      </select>
+    );
     var options = stub.props.children;
@@ -281,5 +290,5 @@ describe('ReactDOMSelect', function() {
 
-    expect(node.options[0].selected).toBe(false);  // monkey
-    expect(node.options[1].selected).toBe(true);  // giraffe
-    expect(node.options[2].selected).toBe(true);  // gorilla
+    expect(node.options[0].selected).toBe(false); // monkey
+    expect(node.options[1].selected).toBe(true); // giraffe
+    expect(node.options[2].selected).toBe(true); // gorilla
 
@@ -289,13 +298,12 @@ describe('ReactDOMSelect', function() {
       <select defaultValue="gorilla">{options}</select>,
-      container
+      container,
     );
 
-
-    expect(node.options[0].selected).toBe(false);  // monkey
-    expect(node.options[1].selected).toBe(false);  // giraffe
-    expect(node.options[2].selected).toBe(true);  // gorilla
+    expect(node.options[0].selected).toBe(false); // monkey
+    expect(node.options[1].selected).toBe(false); // giraffe
+    expect(node.options[2].selected).toBe(true); // gorilla
   });
 
-  it('should remember value when switching to uncontrolled', function() {
-    var stub =
+  it('should remember value when switching to uncontrolled', () => {
+    var stub = (
       <select value={'giraffe'} onChange={noop}>
@@ -304,3 +312,4 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>;
+      </select>
+    );
     var options = stub.props.children;
@@ -310,5 +319,5 @@ describe('ReactDOMSelect', function() {
 
-    expect(node.options[0].selected).toBe(false);  // monkey
-    expect(node.options[1].selected).toBe(true);  // giraffe
-    expect(node.options[2].selected).toBe(false);  // gorilla
+    expect(node.options[0].selected).toBe(false); // monkey
+    expect(node.options[1].selected).toBe(true); // giraffe
+    expect(node.options[2].selected).toBe(false); // gorilla
 
@@ -316,9 +325,9 @@ describe('ReactDOMSelect', function() {
 
-    expect(node.options[0].selected).toBe(false);  // monkey
-    expect(node.options[1].selected).toBe(true);  // giraffe
-    expect(node.options[2].selected).toBe(false);  // gorilla
+    expect(node.options[0].selected).toBe(false); // monkey
+    expect(node.options[1].selected).toBe(true); // giraffe
+    expect(node.options[2].selected).toBe(false); // gorilla
   });
 
-  it('should remember updated value when switching to uncontrolled', function() {
-    var stub =
+  it('should remember updated value when switching to uncontrolled', () => {
+    var stub = (
       <select value={'giraffe'} onChange={noop}>
@@ -327,3 +336,4 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>;
+      </select>
+    );
     var options = stub.props.children;
@@ -335,8 +345,8 @@ describe('ReactDOMSelect', function() {
       <select value="gorilla" onChange={noop}>{options}</select>,
-      container
+      container,
     );
 
-    expect(node.options[0].selected).toBe(false);  // monkey
-    expect(node.options[1].selected).toBe(false);  // giraffe
-    expect(node.options[2].selected).toBe(true);  // gorilla
+    expect(node.options[0].selected).toBe(false); // monkey
+    expect(node.options[1].selected).toBe(false); // giraffe
+    expect(node.options[2].selected).toBe(true); // gorilla
 
@@ -344,10 +354,10 @@ describe('ReactDOMSelect', function() {
 
-    expect(node.options[0].selected).toBe(false);  // monkey
-    expect(node.options[1].selected).toBe(false);  // giraffe
-    expect(node.options[2].selected).toBe(true);  // gorilla
+    expect(node.options[0].selected).toBe(false); // monkey
+    expect(node.options[1].selected).toBe(false); // giraffe
+    expect(node.options[2].selected).toBe(true); // gorilla
   });
 
-  it('should support ReactLink', function() {
-    var link = new ReactLink('giraffe', jest.genMockFn());
-    var stub =
+  it('should support ReactLink', () => {
+    var link = new ReactLink('giraffe', jest.fn());
+    var stub = (
       <select valueLink={link}>
@@ -356,3 +366,4 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>;
+      </select>
+    );
 
@@ -362,5 +373,5 @@ describe('ReactDOMSelect', function() {
 
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      '`valueLink` prop on `select` is deprecated; set `value` and `onChange` instead.',
     );
@@ -369,5 +380,5 @@ describe('ReactDOMSelect', function() {
 
-    expect(node.options[0].selected).toBe(false);  // monkey
-    expect(node.options[1].selected).toBe(true);  // giraffe
-    expect(node.options[2].selected).toBe(false);  // gorilla
+    expect(node.options[0].selected).toBe(false); // monkey
+    expect(node.options[1].selected).toBe(true); // giraffe
+    expect(node.options[2].selected).toBe(false); // gorilla
     expect(link.requestChange.mock.calls.length).toBe(0);
@@ -380,7 +391,6 @@ describe('ReactDOMSelect', function() {
     expect(link.requestChange.mock.calls[0][0]).toEqual('gorilla');
-
   });
 
-  it('should support server-side rendering', function() {
-    var stub =
+  it('should support server-side rendering', () => {
+    var stub = (
       <select value="giraffe" onChange={noop}>
@@ -389,3 +399,4 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>;
+      </select>
+    );
     var markup = ReactDOMServer.renderToString(stub);
@@ -396,4 +407,4 @@ describe('ReactDOMSelect', function() {
 
-  it('should support server-side rendering with defaultValue', function() {
-    var stub =
+  it('should support server-side rendering with defaultValue', () => {
+    var stub = (
       <select defaultValue="giraffe">
@@ -402,3 +413,4 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>;
+      </select>
+    );
     var markup = ReactDOMServer.renderToString(stub);
@@ -409,4 +421,4 @@ describe('ReactDOMSelect', function() {
 
-  it('should support server-side rendering with multiple', function() {
-    var stub =
+  it('should support server-side rendering with multiple', () => {
+    var stub = (
       <select multiple={true} value={['giraffe', 'gorilla']} onChange={noop}>
@@ -415,3 +427,4 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>;
+      </select>
+    );
     var markup = ReactDOMServer.renderToString(stub);
@@ -422,3 +435,3 @@ describe('ReactDOMSelect', function() {
 
-  it('should not control defaultValue if readding options', function() {
+  it('should not control defaultValue if readding options', () => {
     var container = document.createElement('div');
@@ -431,3 +444,3 @@ describe('ReactDOMSelect', function() {
       </select>,
-      container
+      container,
     );
@@ -435,5 +448,5 @@ describe('ReactDOMSelect', function() {
 
-    expect(node.options[0].selected).toBe(false);  // monkey
-    expect(node.options[1].selected).toBe(true);  // giraffe
-    expect(node.options[2].selected).toBe(false);  // gorilla
+    expect(node.options[0].selected).toBe(false); // monkey
+    expect(node.options[1].selected).toBe(true); // giraffe
+    expect(node.options[2].selected).toBe(false); // gorilla
 
@@ -444,7 +457,7 @@ describe('ReactDOMSelect', function() {
       </select>,
-      container
+      container,
     );
 
-    expect(node.options[0].selected).toBe(false);  // monkey
-    expect(node.options[1].selected).toBe(false);  // gorilla
+    expect(node.options[0].selected).toBe(false); // monkey
+    expect(node.options[1].selected).toBe(false); // gorilla
 
@@ -456,26 +469,30 @@ describe('ReactDOMSelect', function() {
       </select>,
-      container
+      container,
     );
 
-    expect(node.options[0].selected).toBe(false);  // monkey
-    expect(node.options[1].selected).toBe(false);  // giraffe
-    expect(node.options[2].selected).toBe(false);  // gorilla
+    expect(node.options[0].selected).toBe(false); // monkey
+    expect(node.options[1].selected).toBe(false); // giraffe
+    expect(node.options[2].selected).toBe(false); // gorilla
   });
 
-  it('should warn if value is null', function() {
+  it('should warn if value is null', () => {
     spyOn(console, 'error');
 
-    ReactTestUtils.renderIntoDocument(<select value={null}><option value="test"/></select>);
-    expect(console.error.argsForCall[0][0]).toContain(
+    ReactTestUtils.renderIntoDocument(
+      <select value={null}><option value="test" /></select>,
+    );
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       '`value` prop on `select` should not be null. ' +
-      'Consider using the empty string to clear the component or `undefined` ' +
-      'for uncontrolled components.'
+        'Consider using the empty string to clear the component or `undefined` ' +
+        'for uncontrolled components.',
     );
 
-    ReactTestUtils.renderIntoDocument(<select value={null}><option value="test"/></select>);
-    expect(console.error.argsForCall.length).toBe(1);
+    ReactTestUtils.renderIntoDocument(
+      <select value={null}><option value="test" /></select>,
+    );
+    expect(console.error.calls.count()).toBe(1);
   });
 
-  it('should refresh state on change', function() {
-    var stub =
+  it('should refresh state on change', () => {
+    var stub = (
       <select value="giraffe" onChange={noop}>
@@ -484,3 +501,4 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>;
+      </select>
+    );
     stub = ReactTestUtils.renderIntoDocument(stub);
@@ -493,3 +511,3 @@ describe('ReactDOMSelect', function() {
 
-  it('should warn if value and defaultValue props are specified', function() {
+  it('should warn if value and defaultValue props are specified', () => {
     spyOn(console, 'error');
@@ -500,10 +518,10 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>
+      </select>,
     );
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'Select elements must be either controlled or uncontrolled ' +
-      '(specify either the value prop, or the defaultValue prop, but not ' +
-      'both). Decide between using a controlled or uncontrolled select ' +
-      'element and remove one of these props. More info: ' +
-      'https://fb.me/react-controlled-components'
+        '(specify either the value prop, or the defaultValue prop, but not ' +
+        'both). Decide between using a controlled or uncontrolled select ' +
+        'element and remove one of these props. More info: ' +
+        'https://fb.me/react-controlled-components',
     );
@@ -515,8 +533,8 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>
+      </select>,
     );
-    expect(console.error.argsForCall.length).toBe(1);
+    expect(console.error.calls.count()).toBe(1);
   });
 
-  it('should be able to safely remove select onChange', function() {
+  it('should be able to safely remove select onChange', () => {
     function changeView() {
@@ -526,3 +544,3 @@ describe('ReactDOMSelect', function() {
     var container = document.createElement('div');
-    var stub =
+    var stub = (
       <select value="giraffe" onChange={changeView}>
@@ -531,3 +549,4 @@ describe('ReactDOMSelect', function() {
         <option value="gorilla">A gorilla!</option>
-      </select>;
+      </select>
+    );
     stub = ReactDOM.render(stub, container);
@@ -536,5 +555,23 @@ describe('ReactDOMSelect', function() {
     expect(() => ReactTestUtils.Simulate.change(node)).not.toThrow(
-      "Cannot set property 'pendingUpdate' of null"
+      "Cannot set property 'pendingUpdate' of null",
     );
   });
+
+  it('should select grandchild options nested inside an optgroup', () => {
+    var stub = (
+      <select value="b" onChange={noop}>
+        <optgroup label="group">
+          <option value="a">a</option>
+          <option value="b">b</option>
+          <option value="c">c</option>
+        </optgroup>
+      </select>
+    );
+    var container = document.createElement('div');
+    var node = ReactDOM.render(stub, container);
+
+    expect(node.options[0].selected).toBe(false); // a
+    expect(node.options[1].selected).toBe(true); // b
+    expect(node.options[2].selected).toBe(false); // c
+  });
 });
diff --git a/src/renderers/dom/client/wrappers/__tests__/ReactDOMTextarea-test.js b/src/renderers/dom/client/wrappers/__tests__/ReactDOMTextarea-test.js
index 6a8f4d5d8..a4bfa8807 100644
--- a/src/renderers/dom/client/wrappers/__tests__/ReactDOMTextarea-test.js
+++ b/src/renderers/dom/client/wrappers/__tests__/ReactDOMTextarea-test.js
@@ -15,5 +15,6 @@ var emptyFunction = require('emptyFunction');
 
-describe('ReactDOMTextarea', function() {
+describe('ReactDOMTextarea', () => {
   var React;
   var ReactDOM;
+  var ReactDOMServer;
   var ReactLink;
@@ -23,5 +24,6 @@ describe('ReactDOMTextarea', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     React = require('React');
     ReactDOM = require('ReactDOM');
+    ReactDOMServer = require('ReactDOMServer');
     ReactLink = require('ReactLink');
@@ -33,8 +35,8 @@ describe('ReactDOMTextarea', function() {
       }
-      var stub = ReactDOM.render(component, container);
-      var node = ReactDOM.findDOMNode(stub);
+      var node = ReactDOM.render(component, container);
+
       // Fixing jsdom's quirky behavior -- in reality, the parser should strip
       // off the leading newline but we need to do it by hand here.
-      node.value = node.innerHTML.replace(/^\n/, '');
-      return stub;
+      node.defaultValue = node.innerHTML.replace(/^\n/, '');
+      return node;
     };
@@ -42,6 +44,5 @@ describe('ReactDOMTextarea', function() {
 
-  it('should allow setting `defaultValue`', function() {
+  it('should allow setting `defaultValue`', () => {
     var container = document.createElement('div');
-    var stub = renderTextarea(<textarea defaultValue="giraffe" />, container);
-    var node = ReactDOM.findDOMNode(stub);
+    var node = renderTextarea(<textarea defaultValue="giraffe" />, container);
 
@@ -50,10 +51,14 @@ describe('ReactDOMTextarea', function() {
     // Changing `defaultValue` should do nothing.
-    stub = renderTextarea(<textarea defaultValue="gorilla" />, container);
+    renderTextarea(<textarea defaultValue="gorilla" />, container);
     expect(node.value).toEqual('giraffe');
+
+    node.value = 'cat';
+
+    renderTextarea(<textarea defaultValue="monkey" />, container);
+    expect(node.value).toEqual('cat');
   });
 
-  it('should display `defaultValue` of number 0', function() {
+  it('should display `defaultValue` of number 0', () => {
     var stub = <textarea defaultValue={0} />;
-    stub = renderTextarea(stub);
-    var node = ReactDOM.findDOMNode(stub);
+    var node = renderTextarea(stub);
 
@@ -62,6 +67,5 @@ describe('ReactDOMTextarea', function() {
 
-  it('should display "false" for `defaultValue` of `false`', function() {
+  it('should display "false" for `defaultValue` of `false`', () => {
     var stub = <textarea defaultValue={false} />;
-    stub = renderTextarea(stub);
-    var node = ReactDOM.findDOMNode(stub);
+    var node = renderTextarea(stub);
 
@@ -70,3 +74,3 @@ describe('ReactDOMTextarea', function() {
 
-  it('should display "foobar" for `defaultValue` of `objToString`', function() {
+  it('should display "foobar" for `defaultValue` of `objToString`', () => {
     var objToString = {
@@ -78,4 +82,3 @@ describe('ReactDOMTextarea', function() {
     var stub = <textarea defaultValue={objToString} />;
-    stub = renderTextarea(stub);
-    var node = ReactDOM.findDOMNode(stub);
+    var node = renderTextarea(stub);
 
@@ -84,6 +87,13 @@ describe('ReactDOMTextarea', function() {
 
-  it('should not render value as an attribute', function() {
+  it('should set defaultValue', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<textarea defaultValue="foo" />, container);
+    ReactDOM.render(<textarea defaultValue="bar" />, container);
+    ReactDOM.render(<textarea defaultValue="noise" />, container);
+    expect(container.firstChild.defaultValue).toBe('noise');
+  });
+
+  it('should not render value as an attribute', () => {
     var stub = <textarea value="giraffe" onChange={emptyFunction} />;
-    stub = renderTextarea(stub);
-    var node = ReactDOM.findDOMNode(stub);
+    var node = renderTextarea(stub);
 
@@ -92,6 +102,5 @@ describe('ReactDOMTextarea', function() {
 
-  it('should display `value` of number 0', function() {
+  it('should display `value` of number 0', () => {
     var stub = <textarea value={0} />;
-    stub = renderTextarea(stub);
-    var node = ReactDOM.findDOMNode(stub);
+    var node = renderTextarea(stub);
 
@@ -100,7 +109,13 @@ describe('ReactDOMTextarea', function() {
 
-  it('should allow setting `value` to `giraffe`', function() {
+  it('should update defaultValue to empty string', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<textarea defaultValue={'foo'} />, container);
+    ReactDOM.render(<textarea defaultValue={''} />, container);
+    expect(container.firstChild.defaultValue).toBe('');
+  });
+
+  it('should allow setting `value` to `giraffe`', () => {
     var container = document.createElement('div');
     var stub = <textarea value="giraffe" onChange={emptyFunction} />;
-    stub = renderTextarea(stub, container);
-    var node = ReactDOM.findDOMNode(stub);
+    var node = renderTextarea(stub, container);
 
@@ -110,3 +125,3 @@ describe('ReactDOMTextarea', function() {
       <textarea value="gorilla" onChange={emptyFunction} />,
-      container
+      container,
     );
@@ -115,7 +130,23 @@ describe('ReactDOMTextarea', function() {
 
-  it('should allow setting `value` to `true`', function() {
+  it('should render defaultValue for SSR', () => {
+    var markup = ReactDOMServer.renderToString(<textarea defaultValue="1" />);
+    var div = document.createElement('div');
+    div.innerHTML = markup;
+    expect(div.firstChild.innerHTML).toBe('1');
+    expect(div.firstChild.getAttribute('defaultValue')).toBe(null);
+  });
+
+  it('should render value for SSR', () => {
+    var element = <textarea value="1" onChange={function() {}} />;
+    var markup = ReactDOMServer.renderToString(element);
+    var div = document.createElement('div');
+    div.innerHTML = markup;
+    expect(div.firstChild.innerHTML).toBe('1');
+    expect(div.firstChild.getAttribute('defaultValue')).toBe(null);
+  });
+
+  it('should allow setting `value` to `true`', () => {
     var container = document.createElement('div');
     var stub = <textarea value="giraffe" onChange={emptyFunction} />;
-    stub = renderTextarea(stub, container);
-    var node = ReactDOM.findDOMNode(stub);
+    var node = renderTextarea(stub, container);
 
@@ -125,3 +156,3 @@ describe('ReactDOMTextarea', function() {
       <textarea value={true} onChange={emptyFunction} />,
-      container
+      container,
     );
@@ -130,7 +161,6 @@ describe('ReactDOMTextarea', function() {
 
-  it('should allow setting `value` to `false`', function() {
+  it('should allow setting `value` to `false`', () => {
     var container = document.createElement('div');
     var stub = <textarea value="giraffe" onChange={emptyFunction} />;
-    stub = renderTextarea(stub, container);
-    var node = ReactDOM.findDOMNode(stub);
+    var node = renderTextarea(stub, container);
 
@@ -140,3 +170,3 @@ describe('ReactDOMTextarea', function() {
       <textarea value={false} onChange={emptyFunction} />,
-      container
+      container,
     );
@@ -145,7 +175,6 @@ describe('ReactDOMTextarea', function() {
 
-  it('should allow setting `value` to `objToString`', function() {
+  it('should allow setting `value` to `objToString`', () => {
     var container = document.createElement('div');
     var stub = <textarea value="giraffe" onChange={emptyFunction} />;
-    stub = renderTextarea(stub, container);
-    var node = ReactDOM.findDOMNode(stub);
+    var node = renderTextarea(stub, container);
 
@@ -160,3 +189,3 @@ describe('ReactDOMTextarea', function() {
       <textarea value={objToString} onChange={emptyFunction} />,
-      container
+      container,
     );
@@ -165,6 +194,54 @@ describe('ReactDOMTextarea', function() {
 
-  it('should properly control a value of number `0`', function() {
+  it('should take updates to `defaultValue` for uncontrolled textarea', () => {
+    var container = document.createElement('div');
+
+    var node = ReactDOM.render(<textarea defaultValue="0" />, container);
+
+    expect(node.value).toBe('0');
+
+    ReactDOM.render(<textarea defaultValue="1" />, container);
+
+    expect(node.value).toBe('0');
+  });
+
+  it('should take updates to children in lieu of `defaultValue` for uncontrolled textarea', () => {
+    var container = document.createElement('div');
+
+    var node = ReactDOM.render(<textarea defaultValue="0" />, container);
+
+    expect(node.value).toBe('0');
+
+    spyOn(console, 'error'); // deprecation warning for `children` content
+
+    ReactDOM.render(<textarea>1</textarea>, container);
+
+    expect(node.value).toBe('0');
+  });
+
+  it('should not incur unnecessary DOM mutations', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<textarea value="a" onChange={emptyFunction} />, container);
+
+    var node = container.firstChild;
+    var nodeValue = 'a';
+    var nodeValueSetter = jest.genMockFn();
+    Object.defineProperty(node, 'value', {
+      get: function() {
+        return nodeValue;
+      },
+      set: nodeValueSetter.mockImplementation(function(newValue) {
+        nodeValue = newValue;
+      }),
+    });
+
+    ReactDOM.render(<textarea value="a" onChange={emptyFunction} />, container);
+    expect(nodeValueSetter.mock.calls.length).toBe(0);
+
+    ReactDOM.render(<textarea value="b" onChange={emptyFunction} />, container);
+    expect(nodeValueSetter.mock.calls.length).toBe(1);
+  });
+
+  it('should properly control a value of number `0`', () => {
     var stub = <textarea value={0} onChange={emptyFunction} />;
-    stub = renderTextarea(stub);
-    var node = ReactDOM.findDOMNode(stub);
+    var node = renderTextarea(stub);
 
@@ -175,3 +252,3 @@ describe('ReactDOMTextarea', function() {
 
-  it('should treat children like `defaultValue`', function() {
+  it('should treat children like `defaultValue`', () => {
     spyOn(console, 'error');
@@ -180,6 +257,5 @@ describe('ReactDOMTextarea', function() {
     var stub = <textarea>giraffe</textarea>;
-    stub = renderTextarea(stub, container);
-    var node = ReactDOM.findDOMNode(stub);
+    var node = renderTextarea(stub, container);
 
-    expect(console.error.argsForCall.length).toBe(1);
+    expect(console.error.calls.count()).toBe(1);
     expect(node.value).toBe('giraffe');
@@ -191,6 +267,43 @@ describe('ReactDOMTextarea', function() {
 
-  it('should allow numbers as children', function() {
+  it('should keep value when switching to uncontrolled element if not changed', () => {
+    var container = document.createElement('div');
+
+    var node = renderTextarea(
+      <textarea value="kitten" onChange={emptyFunction} />,
+      container,
+    );
+
+    expect(node.value).toBe('kitten');
+
+    ReactDOM.render(<textarea defaultValue="gorilla" />, container);
+
+    expect(node.value).toEqual('kitten');
+  });
+
+  it('should keep value when switching to uncontrolled element if changed', () => {
+    var container = document.createElement('div');
+
+    var node = renderTextarea(
+      <textarea value="kitten" onChange={emptyFunction} />,
+      container,
+    );
+
+    expect(node.value).toBe('kitten');
+
+    ReactDOM.render(
+      <textarea value="puppies" onChange={emptyFunction} />,
+      container,
+    );
+
+    expect(node.value).toBe('puppies');
+
+    ReactDOM.render(<textarea defaultValue="gorilla" />, container);
+
+    expect(node.value).toEqual('puppies');
+  });
+
+  it('should allow numbers as children', () => {
     spyOn(console, 'error');
-    var node = ReactDOM.findDOMNode(renderTextarea(<textarea>{17}</textarea>));
-    expect(console.error.argsForCall.length).toBe(1);
+    var node = renderTextarea(<textarea>{17}</textarea>);
+    expect(console.error.calls.count()).toBe(1);
     expect(node.value).toBe('17');
@@ -198,6 +311,6 @@ describe('ReactDOMTextarea', function() {
 
-  it('should allow booleans as children', function() {
+  it('should allow booleans as children', () => {
     spyOn(console, 'error');
-    var node = ReactDOM.findDOMNode(renderTextarea(<textarea>{false}</textarea>));
-    expect(console.error.argsForCall.length).toBe(1);
+    var node = renderTextarea(<textarea>{false}</textarea>);
+    expect(console.error.calls.count()).toBe(1);
     expect(node.value).toBe('false');
@@ -205,3 +318,3 @@ describe('ReactDOMTextarea', function() {
 
-  it('should allow objects as children', function() {
+  it('should allow objects as children', () => {
     spyOn(console, 'error');
@@ -212,4 +325,4 @@ describe('ReactDOMTextarea', function() {
     };
-    var node = ReactDOM.findDOMNode(renderTextarea(<textarea>{obj}</textarea>));
-    expect(console.error.argsForCall.length).toBe(1);
+    var node = renderTextarea(<textarea>{obj}</textarea>);
+    expect(console.error.calls.count()).toBe(1);
     expect(node.value).toBe('sharkswithlasers');
@@ -217,3 +330,3 @@ describe('ReactDOMTextarea', function() {
 
-  it('should throw with multiple or invalid children', function() {
+  it('should throw with multiple or invalid children', () => {
     spyOn(console, 'error');
@@ -222,3 +335,3 @@ describe('ReactDOMTextarea', function() {
       ReactTestUtils.renderIntoDocument(
-        <textarea>{'hello'}{'there'}</textarea>
+        <textarea>{'hello'}{'there'}</textarea>,
       );
@@ -226,3 +339,3 @@ describe('ReactDOMTextarea', function() {
 
-    expect(console.error.argsForCall.length).toBe(1);
+    expect(console.error.calls.count()).toBe(1);
 
@@ -230,3 +343,3 @@ describe('ReactDOMTextarea', function() {
     expect(function() {
-      node = ReactDOM.findDOMNode(renderTextarea(<textarea><strong /></textarea>));
+      node = renderTextarea(<textarea><strong /></textarea>);
     }).not.toThrow();
@@ -235,7 +348,7 @@ describe('ReactDOMTextarea', function() {
 
-    expect(console.error.argsForCall.length).toBe(2);
+    expect(console.error.calls.count()).toBe(2);
   });
 
-  it('should support ReactLink', function() {
-    var link = new ReactLink('yolo', jest.genMockFn());
+  it('should support ReactLink', () => {
+    var link = new ReactLink('yolo', jest.fn());
     var instance = <textarea valueLink={link} />;
@@ -244,9 +357,8 @@ describe('ReactDOMTextarea', function() {
     instance = renderTextarea(instance);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      '`valueLink` prop on `textarea` is deprecated; set `value` and `onChange` instead.',
     );
 
-
-    expect(ReactDOM.findDOMNode(instance).value).toBe('yolo');
+    expect(instance.value).toBe('yolo');
     expect(link.value).toBe('yolo');
@@ -254,4 +366,4 @@ describe('ReactDOMTextarea', function() {
 
-    ReactDOM.findDOMNode(instance).value = 'test';
-    ReactTestUtils.Simulate.change(ReactDOM.findDOMNode(instance));
+    instance.value = 'test';
+    ReactTestUtils.Simulate.change(instance);
 
@@ -261,3 +373,3 @@ describe('ReactDOMTextarea', function() {
 
-  it('should unmount', function() {
+  it('should unmount', () => {
     var container = document.createElement('div');
@@ -267,3 +379,3 @@ describe('ReactDOMTextarea', function() {
 
-  it('should warn if value is null', function() {
+  it('should warn if value is null', () => {
     spyOn(console, 'error');
@@ -271,6 +383,6 @@ describe('ReactDOMTextarea', function() {
     ReactTestUtils.renderIntoDocument(<textarea value={null} />);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       '`value` prop on `textarea` should not be null. ' +
-      'Consider using the empty string to clear the component or `undefined` ' +
-      'for uncontrolled components.'
+        'Consider using the empty string to clear the component or `undefined` ' +
+        'for uncontrolled components.',
     );
@@ -278,16 +390,16 @@ describe('ReactDOMTextarea', function() {
     ReactTestUtils.renderIntoDocument(<textarea value={null} />);
-    expect(console.error.argsForCall.length).toBe(1);
+    expect(console.error.calls.count()).toBe(1);
   });
 
-  it('should warn if value and defaultValue are specified', function() {
+  it('should warn if value and defaultValue are specified', () => {
     spyOn(console, 'error');
     ReactTestUtils.renderIntoDocument(
-      <textarea value="foo" defaultValue="bar" readOnly={true} />
+      <textarea value="foo" defaultValue="bar" readOnly={true} />,
     );
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'Textarea elements must be either controlled or uncontrolled ' +
-      '(specify either the value prop, or the defaultValue prop, but not ' +
-      'both). Decide between using a controlled or uncontrolled textarea ' +
-      'and remove one of these props. More info: ' +
-      'https://fb.me/react-controlled-components'
+        '(specify either the value prop, or the defaultValue prop, but not ' +
+        'both). Decide between using a controlled or uncontrolled textarea ' +
+        'and remove one of these props. More info: ' +
+        'https://fb.me/react-controlled-components',
     );
@@ -295,5 +407,5 @@ describe('ReactDOMTextarea', function() {
     ReactTestUtils.renderIntoDocument(
-      <textarea value="foo" defaultValue="bar" readOnly={true} />
+      <textarea value="foo" defaultValue="bar" readOnly={true} />,
     );
-    expect(console.error.argsForCall.length).toBe(1);
+    expect(console.error.calls.count()).toBe(1);
   });
diff --git a/src/renderers/dom/fiber/ReactDOMFiber.js b/src/renderers/dom/fiber/ReactDOMFiber.js
new file mode 100644
index 000000000..88a6b0cdb
--- /dev/null
+++ b/src/renderers/dom/fiber/ReactDOMFiber.js
@@ -0,0 +1,136 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactDOMFiber
+ * @flow
+ */
+
+'use strict';
+
+import type {HostChildren} from 'ReactFiberReconciler';
+
+var ReactFiberReconciler = require('ReactFiberReconciler');
+
+var warning = require('warning');
+
+type DOMContainerElement = Element & {_reactRootContainer: ?Object};
+
+type Container = Element;
+type Props = {};
+type Instance = Element;
+
+function recursivelyAppendChildren(
+  parent: Element,
+  child: HostChildren<Instance>,
+) {
+  if (!child) {
+    return;
+  }
+  /* $FlowFixMe: Element should have this property. */
+  if (child.nodeType === 1) {
+    /* $FlowFixMe: Refinement issue. I don't know how to express different. */
+    parent.appendChild(child);
+  } else {
+    /* As a result of the refinement issue this type isn't known. */
+    let node: any = child;
+    do {
+      recursivelyAppendChildren(parent, node.output);
+    } while ((node = node.sibling));
+  }
+}
+
+var DOMRenderer = ReactFiberReconciler({
+  updateContainer(
+    container: Container,
+    children: HostChildren<Instance>,
+  ): void {
+    container.innerHTML = '';
+    recursivelyAppendChildren(container, children);
+  },
+
+  createInstance(
+    type: string,
+    props: Props,
+    children: HostChildren<Instance>,
+  ): Instance {
+    const domElement = document.createElement(type);
+    recursivelyAppendChildren(domElement, children);
+    if (typeof props.children === 'string') {
+      domElement.textContent = props.children;
+    }
+    return domElement;
+  },
+
+  prepareUpdate(
+    domElement: Instance,
+    oldProps: Props,
+    newProps: Props,
+    children: HostChildren<Instance>,
+  ): boolean {
+    return true;
+  },
+
+  commitUpdate(
+    domElement: Instance,
+    oldProps: Props,
+    newProps: Props,
+    children: HostChildren<Instance>,
+  ): void {
+    domElement.innerHTML = '';
+    recursivelyAppendChildren(domElement, children);
+    if (typeof newProps.children === 'string') {
+      domElement.textContent = newProps.children;
+    }
+  },
+
+  deleteInstance(instance: Instance): void {
+    // Noop
+  },
+
+  scheduleAnimationCallback: window.requestAnimationFrame,
+
+  scheduleDeferredCallback: window.requestIdleCallback,
+});
+
+var warned = false;
+
+function warnAboutUnstableUse() {
+  warning(
+    warned,
+    'You are using React DOM Fiber which is an experimental renderer. ' +
+      'It is likely to have bugs, breaking changes and is unsupported.',
+  );
+  warned = true;
+}
+
+var ReactDOM = {
+  render(element: ReactElement<any>, container: DOMContainerElement) {
+    warnAboutUnstableUse();
+    if (!container._reactRootContainer) {
+      container._reactRootContainer = DOMRenderer.mountContainer(
+        element,
+        container,
+      );
+    } else {
+      DOMRenderer.updateContainer(element, container._reactRootContainer);
+    }
+  },
+
+  unmountComponentAtNode(container: DOMContainerElement) {
+    warnAboutUnstableUse();
+    const root = container._reactRootContainer;
+    if (root) {
+      // TODO: Is it safe to reset this now or should I wait since this
+      // unmount could be deferred?
+      container._reactRootContainer = null;
+      DOMRenderer.unmountContainer(root);
+    }
+  },
+};
+
+module.exports = ReactDOM;
diff --git a/src/renderers/dom/server/ReactMarkupChecksum.js b/src/renderers/dom/server/ReactMarkupChecksum.js
index 8d0265426..09e477c47 100644
--- a/src/renderers/dom/server/ReactMarkupChecksum.js
+++ b/src/renderers/dom/server/ReactMarkupChecksum.js
@@ -18,3 +18,2 @@ var COMMENT_START = /^<\!\-\-/;
 
-
 var ReactMarkupChecksum = {
@@ -35,3 +34,3 @@ var ReactMarkupChecksum = {
         TAG_END,
-        ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&'
+        ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&',
       );
@@ -47,3 +46,3 @@ var ReactMarkupChecksum = {
     var existingChecksum = element.getAttribute(
-      ReactMarkupChecksum.CHECKSUM_ATTR_NAME
+      ReactMarkupChecksum.CHECKSUM_ATTR_NAME,
     );
diff --git a/src/renderers/dom/server/ReactServerRendering.js b/src/renderers/dom/server/ReactServerRendering.js
index 5a5d604b7..2c7b7b5d0 100644
--- a/src/renderers/dom/server/ReactServerRendering.js
+++ b/src/renderers/dom/server/ReactServerRendering.js
@@ -12,9 +12,10 @@
 
+var React = require('React');
 var ReactDOMContainerInfo = require('ReactDOMContainerInfo');
 var ReactDefaultBatchingStrategy = require('ReactDefaultBatchingStrategy');
-var ReactElement = require('ReactElement');
+var ReactInstrumentation = require('ReactInstrumentation');
 var ReactMarkupChecksum = require('ReactMarkupChecksum');
+var ReactReconciler = require('ReactReconciler');
 var ReactServerBatchingStrategy = require('ReactServerBatchingStrategy');
-var ReactServerRenderingTransaction =
-  require('ReactServerRenderingTransaction');
+var ReactServerRenderingTransaction = require('ReactServerRenderingTransaction');
 var ReactUpdates = require('ReactUpdates');
@@ -25,2 +26,4 @@ var invariant = require('invariant');
 
+var pendingTransactions = 0;
+
 /**
@@ -36,5 +39,8 @@ function renderToStringImpl(element, makeStaticMarkup) {
 
+    pendingTransactions++;
+
     return transaction.perform(function() {
-      var componentInstance = instantiateReactComponent(element);
-      var markup = componentInstance.mountComponent(
+      var componentInstance = instantiateReactComponent(element, true);
+      var markup = ReactReconciler.mountComponent(
+        componentInstance,
         transaction,
@@ -42,4 +48,10 @@ function renderToStringImpl(element, makeStaticMarkup) {
         ReactDOMContainerInfo(),
-        emptyObject
+        emptyObject,
+        0 /* parentDebugID */,
       );
+      if (__DEV__) {
+        ReactInstrumentation.debugTool.onUnmountComponent(
+          componentInstance._debugID,
+        );
+      }
       if (!makeStaticMarkup) {
@@ -50,2 +62,3 @@ function renderToStringImpl(element, makeStaticMarkup) {
   } finally {
+    pendingTransactions--;
     ReactServerRenderingTransaction.release(transaction);
@@ -53,3 +66,7 @@ function renderToStringImpl(element, makeStaticMarkup) {
     // currently share these stateful modules.
-    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
+    if (!pendingTransactions) {
+      ReactUpdates.injection.injectBatchingStrategy(
+        ReactDefaultBatchingStrategy,
+      );
+    }
   }
@@ -57,6 +74,11 @@ function renderToStringImpl(element, makeStaticMarkup) {
 
+/**
+ * Render a ReactElement to its initial HTML. This should only be used on the
+ * server.
+ * See https://facebook.github.io/react/docs/top-level-api.html#reactdomserver.rendertostring
+ */
 function renderToString(element) {
   invariant(
-    ReactElement.isValidElement(element),
-    'renderToString(): You must pass a valid ReactElement.'
+    React.isValidElement(element),
+    'renderToString(): You must pass a valid ReactElement.',
   );
@@ -65,6 +87,11 @@ function renderToString(element) {
 
+/**
+ * Similar to renderToString, except this doesn't create extra DOM attributes
+ * such as data-react-id that React uses internally.
+ * See https://facebook.github.io/react/docs/top-level-api.html#reactdomserver.rendertostaticmarkup
+ */
 function renderToStaticMarkup(element) {
   invariant(
-    ReactElement.isValidElement(element),
-    'renderToStaticMarkup(): You must pass a valid ReactElement.'
+    React.isValidElement(element),
+    'renderToStaticMarkup(): You must pass a valid ReactElement.',
   );
diff --git a/src/renderers/dom/server/ReactServerRenderingTransaction.js b/src/renderers/dom/server/ReactServerRenderingTransaction.js
index 176a550c5..2fa930cc4 100644
--- a/src/renderers/dom/server/ReactServerRenderingTransaction.js
+++ b/src/renderers/dom/server/ReactServerRenderingTransaction.js
@@ -15,3 +15,4 @@ var PooledClass = require('PooledClass');
 var Transaction = require('Transaction');
-
+var ReactInstrumentation = require('ReactInstrumentation');
+var ReactServerUpdateQueue = require('ReactServerUpdateQueue');
 
@@ -24,2 +25,9 @@ var TRANSACTION_WRAPPERS = [];
 
+if (__DEV__) {
+  TRANSACTION_WRAPPERS.push({
+    initialize: ReactInstrumentation.debugTool.onBeginFlush,
+    close: ReactInstrumentation.debugTool.onEndFlush,
+  });
+}
+
 var noopCallbackQueue = {
@@ -36,2 +44,3 @@ function ReactServerRenderingTransaction(renderToStaticMarkup) {
   this.useCreateElement = false;
+  this.updateQueue = new ReactServerUpdateQueue(this);
 }
@@ -56,2 +65,9 @@ var Mixin = {
 
+  /**
+   * @return {object} The queue to collect React async events.
+   */
+  getUpdateQueue: function() {
+    return this.updateQueue;
+  },
+
   /**
@@ -60,12 +76,10 @@ var Mixin = {
    */
-  destructor: function() {
-  },
-};
+  destructor: function() {},
 
+  checkpoint: function() {},
+
+  rollback: function() {},
+};
 
-Object.assign(
-  ReactServerRenderingTransaction.prototype,
-  Transaction.Mixin,
-  Mixin
-);
+Object.assign(ReactServerRenderingTransaction.prototype, Transaction, Mixin);
 
diff --git a/src/renderers/dom/server/ReactServerUpdateQueue.js b/src/renderers/dom/server/ReactServerUpdateQueue.js
new file mode 100644
index 000000000..30ebd5bf7
--- /dev/null
+++ b/src/renderers/dom/server/ReactServerUpdateQueue.js
@@ -0,0 +1,148 @@
+/**
+ * Copyright 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactServerUpdateQueue
+ * @flow
+ */
+
+'use strict';
+
+var ReactUpdateQueue = require('ReactUpdateQueue');
+
+var warning = require('warning');
+
+import type {Transaction} from 'Transaction';
+
+function warnNoop(
+  publicInstance: ReactComponent<any, any, any>,
+  callerName: string,
+) {
+  if (__DEV__) {
+    var constructor = publicInstance.constructor;
+    warning(
+      false,
+      '%s(...): Can only update a mounting component. ' +
+        'This usually means you called %s() outside componentWillMount() on the server. ' +
+        'This is a no-op. Please check the code for the %s component.',
+      callerName,
+      callerName,
+      (constructor && (constructor.displayName || constructor.name)) ||
+        'ReactClass',
+    );
+  }
+}
+
+/**
+ * This is the update queue used for server rendering.
+ * It delegates to ReactUpdateQueue while server rendering is in progress and
+ * switches to ReactNoopUpdateQueue after the transaction has completed.
+ * @class ReactServerUpdateQueue
+ * @param {Transaction} transaction
+ */
+class ReactServerUpdateQueue {
+  transaction: Transaction;
+
+  constructor(transaction: Transaction) {
+    this.transaction = transaction;
+  }
+
+  /**
+   * Checks whether or not this composite component is mounted.
+   * @param {ReactClass} publicInstance The instance we want to test.
+   * @return {boolean} True if mounted, false otherwise.
+   * @protected
+   * @final
+   */
+  isMounted(publicInstance: ReactComponent<any, any, any>): boolean {
+    return false;
+  }
+
+  /**
+   * Enqueue a callback that will be executed after all the pending updates
+   * have processed.
+   *
+   * @param {ReactClass} publicInstance The instance to use as `this` context.
+   * @param {?function} callback Called after state is updated.
+   * @internal
+   */
+  enqueueCallback(
+    publicInstance: ReactComponent<any, any, any>,
+    callback?: Function,
+    callerName?: string,
+  ) {
+    if (this.transaction.isInTransaction()) {
+      ReactUpdateQueue.enqueueCallback(publicInstance, callback, callerName);
+    }
+  }
+
+  /**
+   * Forces an update. This should only be invoked when it is known with
+   * certainty that we are **not** in a DOM transaction.
+   *
+   * You may want to call this when you know that some deeper aspect of the
+   * component's state has changed but `setState` was not called.
+   *
+   * This will not invoke `shouldComponentUpdate`, but it will invoke
+   * `componentWillUpdate` and `componentDidUpdate`.
+   *
+   * @param {ReactClass} publicInstance The instance that should rerender.
+   * @internal
+   */
+  enqueueForceUpdate(publicInstance: ReactComponent<any, any, any>) {
+    if (this.transaction.isInTransaction()) {
+      ReactUpdateQueue.enqueueForceUpdate(publicInstance);
+    } else {
+      warnNoop(publicInstance, 'forceUpdate');
+    }
+  }
+
+  /**
+   * Replaces all of the state. Always use this or `setState` to mutate state.
+   * You should treat `this.state` as immutable.
+   *
+   * There is no guarantee that `this.state` will be immediately updated, so
+   * accessing `this.state` after calling this method may return the old value.
+   *
+   * @param {ReactClass} publicInstance The instance that should rerender.
+   * @param {object|function} completeState Next state.
+   * @internal
+   */
+  enqueueReplaceState(
+    publicInstance: ReactComponent<any, any, any>,
+    completeState: Object | Function,
+  ) {
+    if (this.transaction.isInTransaction()) {
+      ReactUpdateQueue.enqueueReplaceState(publicInstance, completeState);
+    } else {
+      warnNoop(publicInstance, 'replaceState');
+    }
+  }
+
+  /**
+   * Sets a subset of the state. This only exists because _pendingState is
+   * internal. This provides a merging strategy that is not available to deep
+   * properties which is confusing. TODO: Expose pendingState or don't use it
+   * during the merge.
+   *
+   * @param {ReactClass} publicInstance The instance that should rerender.
+   * @param {object|function} partialState Next partial state to be merged with state.
+   * @internal
+   */
+  enqueueSetState(
+    publicInstance: ReactComponent<any, any, any>,
+    partialState: Object | Function,
+  ) {
+    if (this.transaction.isInTransaction()) {
+      ReactUpdateQueue.enqueueSetState(publicInstance, partialState);
+    } else {
+      warnNoop(publicInstance, 'setState');
+    }
+  }
+}
+
+module.exports = ReactServerUpdateQueue;
diff --git a/src/renderers/dom/server/__tests__/ReactServerRendering-test.js b/src/renderers/dom/server/__tests__/ReactServerRendering-test.js
index c53b0be74..50e3be5c8 100644
--- a/src/renderers/dom/server/__tests__/ReactServerRendering-test.js
+++ b/src/renderers/dom/server/__tests__/ReactServerRendering-test.js
@@ -24,4 +24,4 @@ var ROOT_ATTRIBUTE_NAME;
 
-describe('ReactServerRendering', function() {
-  beforeEach(function() {
+describe('ReactServerRendering', () => {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -42,11 +42,17 @@ describe('ReactServerRendering', function() {
 
-  describe('renderToString', function() {
-    it('should generate simple markup', function() {
+  describe('renderToString', () => {
+    it('should generate simple markup', () => {
       var response = ReactServerRendering.renderToString(
-        <span>hello world</span>
+        <span>hello world</span>,
       );
       expect(response).toMatch(
-        '<span ' + ROOT_ATTRIBUTE_NAME + '="" ' +
-          ID_ATTRIBUTE_NAME + '="[^"]+" ' +
-          ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="[^"]+">hello world</span>'
+        new RegExp(
+          '<span ' +
+            ROOT_ATTRIBUTE_NAME +
+            '="" ' +
+            ID_ATTRIBUTE_NAME +
+            '="[^"]+" ' +
+            ReactMarkupChecksum.CHECKSUM_ATTR_NAME +
+            '="[^"]+">hello world</span>',
+        ),
       );
@@ -54,10 +60,14 @@ describe('ReactServerRendering', function() {
 
-    it('should generate simple markup for self-closing tags', function() {
-      var response = ReactServerRendering.renderToString(
-        <img />
-      );
+    it('should generate simple markup for self-closing tags', () => {
+      var response = ReactServerRendering.renderToString(<img />);
       expect(response).toMatch(
-        '<img ' + ROOT_ATTRIBUTE_NAME + '="" ' +
-          ID_ATTRIBUTE_NAME + '="[^"]+" ' +
-          ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="[^"]+"/>'
+        new RegExp(
+          '<img ' +
+            ROOT_ATTRIBUTE_NAME +
+            '="" ' +
+            ID_ATTRIBUTE_NAME +
+            '="[^"]+" ' +
+            ReactMarkupChecksum.CHECKSUM_ATTR_NAME +
+            '="[^"]+"/>',
+        ),
       );
@@ -65,10 +75,14 @@ describe('ReactServerRendering', function() {
 
-    it('should generate simple markup for attribute with `>` symbol', function() {
-      var response = ReactServerRendering.renderToString(
-        <img data-attr=">" />
-      );
+    it('should generate simple markup for attribute with `>` symbol', () => {
+      var response = ReactServerRendering.renderToString(<img data-attr=">" />);
       expect(response).toMatch(
-        '<img data-attr="&gt;" ' + ROOT_ATTRIBUTE_NAME + '="" ' +
-          ID_ATTRIBUTE_NAME + '="[^"]+" ' +
-          ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="[^"]+"/>'
+        new RegExp(
+          '<img data-attr="&gt;" ' +
+            ROOT_ATTRIBUTE_NAME +
+            '="" ' +
+            ID_ATTRIBUTE_NAME +
+            '="[^"]+" ' +
+            ReactMarkupChecksum.CHECKSUM_ATTR_NAME +
+            '="[^"]+"/>',
+        ),
       );
@@ -76,8 +90,9 @@ describe('ReactServerRendering', function() {
 
-    it('should generate comment markup for component returns null', function() {
-      var NullComponent = React.createClass({
-        render: function() {
+    it('should generate comment markup for component returns null', () => {
+      class NullComponent extends React.Component {
+        render() {
           return null;
-        },
-      });
+        }
+      }
+
       var response = ReactServerRendering.renderToString(<NullComponent />);
@@ -86,8 +101,8 @@ describe('ReactServerRendering', function() {
 
-    it('should not register event listeners', function() {
+    it('should not register event listeners', () => {
       var EventPluginHub = require('EventPluginHub');
-      var cb = jest.genMockFn();
+      var cb = jest.fn();
 
       ReactServerRendering.renderToString(
-        <span onClick={cb}>hello world</span>
+        <span onClick={cb}>hello world</span>,
       );
@@ -96,25 +111,33 @@ describe('ReactServerRendering', function() {
 
-    it('should render composite components', function() {
-      var Parent = React.createClass({
-        render: function() {
+    it('should render composite components', () => {
+      class Parent extends React.Component {
+        render() {
           return <div><Child name="child" /></div>;
-        },
-      });
-      var Child = React.createClass({
-        render: function() {
+        }
+      }
+
+      class Child extends React.Component {
+        render() {
           return <span>My name is {this.props.name}</span>;
-        },
-      });
-      var response = ReactServerRendering.renderToString(
-        <Parent />
-      );
+        }
+      }
+
+      var response = ReactServerRendering.renderToString(<Parent />);
       expect(response).toMatch(
-        '<div ' + ROOT_ATTRIBUTE_NAME + '="" ' +
-          ID_ATTRIBUTE_NAME + '="[^"]+" ' +
-          ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="[^"]+">' +
-          '<span ' + ID_ATTRIBUTE_NAME + '="[^"]+">' +
+        new RegExp(
+          '<div ' +
+            ROOT_ATTRIBUTE_NAME +
+            '="" ' +
+            ID_ATTRIBUTE_NAME +
+            '="[^"]+" ' +
+            ReactMarkupChecksum.CHECKSUM_ATTR_NAME +
+            '="[^"]+">' +
+            '<span ' +
+            ID_ATTRIBUTE_NAME +
+            '="[^"]+">' +
             '<!-- react-text: [0-9]+ -->My name is <!-- /react-text -->' +
             '<!-- react-text: [0-9]+ -->child<!-- /react-text -->' +
-          '</span>' +
-        '</div>'
+            '</span>' +
+            '</div>',
+        ),
       );
@@ -122,52 +145,68 @@ describe('ReactServerRendering', function() {
 
-    it('should only execute certain lifecycle methods', function() {
+    it('should only execute certain lifecycle methods', () => {
       function runTest() {
         var lifecycle = [];
-        var TestComponent = React.createClass({
-          componentWillMount: function() {
+
+        class TestComponent extends React.Component {
+          constructor(props) {
+            super(props);
+            lifecycle.push('getInitialState');
+            this.state = {name: 'TestComponent'};
+          }
+
+          componentWillMount() {
             lifecycle.push('componentWillMount');
-          },
-          componentDidMount: function() {
+          }
+
+          componentDidMount() {
             lifecycle.push('componentDidMount');
-          },
-          getInitialState: function() {
-            lifecycle.push('getInitialState');
-            return {name: 'TestComponent'};
-          },
-          render: function() {
+          }
+
+          render() {
             lifecycle.push('render');
             return <span>Component name: {this.state.name}</span>;
-          },
-          componentWillUpdate: function() {
+          }
+
+          componentWillUpdate() {
             lifecycle.push('componentWillUpdate');
-          },
-          componentDidUpdate: function() {
+          }
+
+          componentDidUpdate() {
             lifecycle.push('componentDidUpdate');
-          },
-          shouldComponentUpdate: function() {
+          }
+
+          shouldComponentUpdate() {
             lifecycle.push('shouldComponentUpdate');
-          },
-          componentWillReceiveProps: function() {
+          }
+
+          componentWillReceiveProps() {
             lifecycle.push('componentWillReceiveProps');
-          },
-          componentWillUnmount: function() {
+          }
+
+          componentWillUnmount() {
             lifecycle.push('componentWillUnmount');
-          },
-        });
+          }
+        }
 
-        var response = ReactServerRendering.renderToString(
-          <TestComponent />
-        );
+        var response = ReactServerRendering.renderToString(<TestComponent />);
 
         expect(response).toMatch(
-          '<span ' + ROOT_ATTRIBUTE_NAME + '="" ' +
-            ID_ATTRIBUTE_NAME + '="[^"]+" ' +
-            ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="[^"]+">' +
-            '<!-- react-text: [0-9]+ -->Component name: <!-- /react-text -->' +
-            '<!-- react-text: [0-9]+ -->TestComponent<!-- /react-text -->' +
-          '</span>'
-        );
-        expect(lifecycle).toEqual(
-          ['getInitialState', 'componentWillMount', 'render']
+          new RegExp(
+            '<span ' +
+              ROOT_ATTRIBUTE_NAME +
+              '="" ' +
+              ID_ATTRIBUTE_NAME +
+              '="[^"]+" ' +
+              ReactMarkupChecksum.CHECKSUM_ATTR_NAME +
+              '="[^"]+">' +
+              '<!-- react-text: [0-9]+ -->Component name: <!-- /react-text -->' +
+              '<!-- react-text: [0-9]+ -->TestComponent<!-- /react-text -->' +
+              '</span>',
+          ),
         );
+        expect(lifecycle).toEqual([
+          'getInitialState',
+          'componentWillMount',
+          'render',
+        ]);
       }
@@ -181,3 +220,3 @@ describe('ReactServerRendering', function() {
 
-    it('should have the correct mounting behavior', function() {
+    it('should have the correct mounting behavior', () => {
       // This test is testing client-side behavior.
@@ -188,10 +227,12 @@ describe('ReactServerRendering', function() {
 
-      var TestComponent = React.createClass({
-        componentDidMount: function() {
+      class TestComponent extends React.Component {
+        componentDidMount() {
           mountCount++;
-        },
-        click: function() {
+        }
+
+        click = () => {
           numClicks++;
-        },
-        render: function() {
+        };
+
+        render() {
           return (
@@ -199,4 +240,4 @@ describe('ReactServerRendering', function() {
           );
-        },
-      });
+        }
+      }
 
@@ -229,3 +270,3 @@ describe('ReactServerRendering', function() {
       lastMarkup = ReactServerRendering.renderToString(
-        <TestComponent name="x" />
+        <TestComponent name="x" />,
       );
@@ -234,5 +275,11 @@ describe('ReactServerRendering', function() {
 
-      ReactDOM.render(<TestComponent name="x" />, element);
+      var instance = ReactDOM.render(<TestComponent name="x" />, element);
       expect(mountCount).toEqual(3);
       expect(element.innerHTML).toBe(lastMarkup);
+
+      // Ensure the events system works after mount into server markup
+      expect(numClicks).toEqual(0);
+      ReactTestUtils.Simulate.click(ReactDOM.findDOMNode(instance.refs.span));
+      expect(numClicks).toEqual(1);
+
       ReactDOM.unmountComponentAtNode(element);
@@ -244,5 +291,5 @@ describe('ReactServerRendering', function() {
       spyOn(console, 'error');
-      var instance = ReactDOM.render(<TestComponent name="y" />, element);
+      instance = ReactDOM.render(<TestComponent name="y" />, element);
       expect(mountCount).toEqual(4);
-      expect(console.error.argsForCall.length).toBe(1);
+      expect(console.error.calls.count()).toBe(1);
       expect(element.innerHTML.length > 0).toBe(true);
@@ -250,9 +297,9 @@ describe('ReactServerRendering', function() {
 
-      // Ensure the events system works
-      expect(numClicks).toEqual(0);
-      ReactTestUtils.Simulate.click(ReactDOM.findDOMNode(instance.refs.span));
+      // Ensure the events system works after markup mismatch.
       expect(numClicks).toEqual(1);
+      ReactTestUtils.Simulate.click(ReactDOM.findDOMNode(instance.refs.span));
+      expect(numClicks).toEqual(2);
     });
 
-    it('should throw with silly args', function() {
+    it('should throw with silly args', () => {
       expect(
@@ -260,7 +307,5 @@ describe('ReactServerRendering', function() {
           ReactServerRendering,
-          'not a component'
-        )
-      ).toThrow(
-        'renderToString(): You must pass a valid ReactElement.'
-      );
+          'not a component',
+        ),
+      ).toThrowError('renderToString(): You must pass a valid ReactElement.');
     });
@@ -268,18 +313,18 @@ describe('ReactServerRendering', function() {
 
-  describe('renderToStaticMarkup', function() {
-    it('should not put checksum and React ID on components', function() {
-      var NestedComponent = React.createClass({
-        render: function() {
+  describe('renderToStaticMarkup', () => {
+    it('should not put checksum and React ID on components', () => {
+      class NestedComponent extends React.Component {
+        render() {
           return <div>inner text</div>;
-        },
-      });
+        }
+      }
 
-      var TestComponent = React.createClass({
-        render: function() {
+      class TestComponent extends React.Component {
+        render() {
           return <span><NestedComponent /></span>;
-        },
-      });
+        }
+      }
 
       var response = ReactServerRendering.renderToStaticMarkup(
-        <TestComponent />
+        <TestComponent />,
       );
@@ -289,11 +334,11 @@ describe('ReactServerRendering', function() {
 
-    it('should not put checksum and React ID on text components', function() {
-      var TestComponent = React.createClass({
-        render: function() {
+    it('should not put checksum and React ID on text components', () => {
+      class TestComponent extends React.Component {
+        render() {
           return <span>{'hello'} {'world'}</span>;
-        },
-      });
+        }
+      }
 
       var response = ReactServerRendering.renderToStaticMarkup(
-        <TestComponent />
+        <TestComponent />,
       );
@@ -303,8 +348,8 @@ describe('ReactServerRendering', function() {
 
-    it('should not register event listeners', function() {
+    it('should not register event listeners', () => {
       var EventPluginHub = require('EventPluginHub');
-      var cb = jest.genMockFn();
+      var cb = jest.fn();
 
-      ReactServerRendering.renderToString(
-        <span onClick={cb}>hello world</span>
+      ReactServerRendering.renderToStaticMarkup(
+        <span onClick={cb}>hello world</span>,
       );
@@ -313,39 +358,49 @@ describe('ReactServerRendering', function() {
 
-    it('should only execute certain lifecycle methods', function() {
+    it('should only execute certain lifecycle methods', () => {
       function runTest() {
         var lifecycle = [];
-        var TestComponent = React.createClass({
-          componentWillMount: function() {
+
+        class TestComponent extends React.Component {
+          constructor(props) {
+            super(props);
+            lifecycle.push('getInitialState');
+            this.state = {name: 'TestComponent'};
+          }
+
+          componentWillMount() {
             lifecycle.push('componentWillMount');
-          },
-          componentDidMount: function() {
+          }
+
+          componentDidMount() {
             lifecycle.push('componentDidMount');
-          },
-          getInitialState: function() {
-            lifecycle.push('getInitialState');
-            return {name: 'TestComponent'};
-          },
-          render: function() {
+          }
+
+          render() {
             lifecycle.push('render');
             return <span>Component name: {this.state.name}</span>;
-          },
-          componentWillUpdate: function() {
+          }
+
+          componentWillUpdate() {
             lifecycle.push('componentWillUpdate');
-          },
-          componentDidUpdate: function() {
+          }
+
+          componentDidUpdate() {
             lifecycle.push('componentDidUpdate');
-          },
-          shouldComponentUpdate: function() {
+          }
+
+          shouldComponentUpdate() {
             lifecycle.push('shouldComponentUpdate');
-          },
-          componentWillReceiveProps: function() {
+          }
+
+          componentWillReceiveProps() {
             lifecycle.push('componentWillReceiveProps');
-          },
-          componentWillUnmount: function() {
+          }
+
+          componentWillUnmount() {
             lifecycle.push('componentWillUnmount');
-          },
-        });
+          }
+        }
 
         var response = ReactServerRendering.renderToStaticMarkup(
-          <TestComponent />
+          <TestComponent />,
         );
@@ -353,5 +408,7 @@ describe('ReactServerRendering', function() {
         expect(response).toBe('<span>Component name: TestComponent</span>');
-        expect(lifecycle).toEqual(
-          ['getInitialState', 'componentWillMount', 'render']
-        );
+        expect(lifecycle).toEqual([
+          'getInitialState',
+          'componentWillMount',
+          'render',
+        ]);
       }
@@ -365,3 +422,3 @@ describe('ReactServerRendering', function() {
 
-    it('should throw with silly args', function() {
+    it('should throw with silly args', () => {
       expect(
@@ -369,6 +426,6 @@ describe('ReactServerRendering', function() {
           ReactServerRendering,
-          'not a component'
-        )
-      ).toThrow(
-        'renderToStaticMarkup(): You must pass a valid ReactElement.'
+          'not a component',
+        ),
+      ).toThrowError(
+        'renderToStaticMarkup(): You must pass a valid ReactElement.',
       );
@@ -376,11 +433,12 @@ describe('ReactServerRendering', function() {
 
-    it('allows setState in componentWillMount without using DOM', function() {
-      var Component = React.createClass({
-        componentWillMount: function() {
+    it('allows setState in componentWillMount without using DOM', () => {
+      class Component extends React.Component {
+        componentWillMount() {
           this.setState({text: 'hello, world'});
-        },
-        render: function() {
+        }
+
+        render() {
           return <div>{this.state.text}</div>;
-        },
-      });
+        }
+      }
 
@@ -390,7 +448,108 @@ describe('ReactServerRendering', function() {
       };
-      var markup = ReactServerRendering.renderToString(
-        <Component />
-      );
+      var markup = ReactServerRendering.renderToString(<Component />);
       expect(markup.indexOf('hello, world') >= 0).toBe(true);
     });
+
+    it('renders components with different batching strategies', () => {
+      class StaticComponent extends React.Component {
+        render() {
+          const staticContent = ReactServerRendering.renderToStaticMarkup(
+            <div>
+              <img src="foo-bar.jpg" />
+            </div>,
+          );
+          return <div dangerouslySetInnerHTML={{__html: staticContent}} />;
+        }
+      }
+
+      class Component extends React.Component {
+        componentWillMount() {
+          this.setState({text: 'hello, world'});
+        }
+
+        render() {
+          return <div>{this.state.text}</div>;
+        }
+      }
+
+      expect(
+        ReactServerRendering.renderToString.bind(
+          ReactServerRendering,
+          <div>
+            <StaticComponent />
+            <Component />
+          </div>,
+        ),
+      ).not.toThrow();
+    });
+  });
+
+  it('warns with a no-op when an async setState is triggered', () => {
+    class Foo extends React.Component {
+      componentWillMount() {
+        this.setState({text: 'hello'});
+        setTimeout(() => {
+          this.setState({text: 'error'});
+        });
+      }
+      render() {
+        return <div onClick={() => {}}>{this.state.text}</div>;
+      }
+    }
+
+    spyOn(console, 'error');
+    ReactServerRendering.renderToString(<Foo />);
+    jest.runOnlyPendingTimers();
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.mostRecent().args[0]).toBe(
+      'Warning: setState(...): Can only update a mounting component.' +
+        ' This usually means you called setState() outside componentWillMount() on the server.' +
+        ' This is a no-op. Please check the code for the Foo component.',
+    );
+    var markup = ReactServerRendering.renderToStaticMarkup(<Foo />);
+    expect(markup).toBe('<div>hello</div>');
+  });
+
+  it('warns with a no-op when an async forceUpdate is triggered', () => {
+    class Baz extends React.Component {
+      componentWillMount() {
+        this.forceUpdate();
+        setTimeout(() => {
+          this.forceUpdate();
+        });
+      }
+
+      render() {
+        return <div onClick={() => {}} />;
+      }
+    }
+
+    spyOn(console, 'error');
+    ReactServerRendering.renderToString(<Baz />);
+    jest.runOnlyPendingTimers();
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.mostRecent().args[0]).toBe(
+      'Warning: forceUpdate(...): Can only update a mounting component. ' +
+        'This usually means you called forceUpdate() outside componentWillMount() on the server. ' +
+        'This is a no-op. Please check the code for the Baz component.',
+    );
+    var markup = ReactServerRendering.renderToStaticMarkup(<Baz />);
+    expect(markup).toBe('<div></div>');
+  });
+
+  it('should warn when children are mutated during render', () => {
+    spyOn(console, 'error');
+    function Wrapper(props) {
+      props.children[1] = <p key={1} />; // Mutation is illegal
+      return <div>{props.children}</div>;
+    }
+    expect(() => {
+      ReactServerRendering.renderToStaticMarkup(
+        <Wrapper>
+          <span key={0} />
+          <span key={1} />
+          <span key={2} />
+        </Wrapper>,
+      );
+    }).toThrowError(/Cannot assign to read only property.*/);
   });
diff --git a/src/renderers/dom/shared/ARIADOMPropertyConfig.js b/src/renderers/dom/shared/ARIADOMPropertyConfig.js
new file mode 100644
index 000000000..108278940
--- /dev/null
+++ b/src/renderers/dom/shared/ARIADOMPropertyConfig.js
@@ -0,0 +1,74 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ARIADOMPropertyConfig
+ */
+
+'use strict';
+
+var ARIADOMPropertyConfig = {
+  Properties: {
+    // Global States and Properties
+    'aria-current': 0, // state
+    'aria-details': 0,
+    'aria-disabled': 0, // state
+    'aria-hidden': 0, // state
+    'aria-invalid': 0, // state
+    'aria-keyshortcuts': 0,
+    'aria-label': 0,
+    'aria-roledescription': 0,
+    // Widget Attributes
+    'aria-autocomplete': 0,
+    'aria-checked': 0,
+    'aria-expanded': 0,
+    'aria-haspopup': 0,
+    'aria-level': 0,
+    'aria-modal': 0,
+    'aria-multiline': 0,
+    'aria-multiselectable': 0,
+    'aria-orientation': 0,
+    'aria-placeholder': 0,
+    'aria-pressed': 0,
+    'aria-readonly': 0,
+    'aria-required': 0,
+    'aria-selected': 0,
+    'aria-sort': 0,
+    'aria-valuemax': 0,
+    'aria-valuemin': 0,
+    'aria-valuenow': 0,
+    'aria-valuetext': 0,
+    // Live Region Attributes
+    'aria-atomic': 0,
+    'aria-busy': 0,
+    'aria-live': 0,
+    'aria-relevant': 0,
+    // Drag-and-Drop Attributes
+    'aria-dropeffect': 0,
+    'aria-grabbed': 0,
+    // Relationship Attributes
+    'aria-activedescendant': 0,
+    'aria-colcount': 0,
+    'aria-colindex': 0,
+    'aria-colspan': 0,
+    'aria-controls': 0,
+    'aria-describedby': 0,
+    'aria-errormessage': 0,
+    'aria-flowto': 0,
+    'aria-labelledby': 0,
+    'aria-owns': 0,
+    'aria-posinset': 0,
+    'aria-rowcount': 0,
+    'aria-rowindex': 0,
+    'aria-rowspan': 0,
+    'aria-setsize': 0,
+  },
+  DOMAttributeNames: {},
+  DOMPropertyNames: {},
+};
+
+module.exports = ARIADOMPropertyConfig;
diff --git a/src/renderers/dom/shared/CSSProperty.js b/src/renderers/dom/shared/CSSProperty.js
index fa0645c98..609175152 100644
--- a/src/renderers/dom/shared/CSSProperty.js
+++ b/src/renderers/dom/shared/CSSProperty.js
@@ -32,3 +32,9 @@ var isUnitlessNumber = {
   gridRow: true,
+  gridRowEnd: true,
+  gridRowSpan: true,
+  gridRowStart: true,
   gridColumn: true,
+  gridColumnEnd: true,
+  gridColumnSpan: true,
+  gridColumnStart: true,
   fontWeight: true,
diff --git a/src/renderers/dom/shared/CSSPropertyOperations.js b/src/renderers/dom/shared/CSSPropertyOperations.js
index aac1b75f8..0af3b0980 100644
--- a/src/renderers/dom/shared/CSSPropertyOperations.js
+++ b/src/renderers/dom/shared/CSSPropertyOperations.js
@@ -15,3 +15,3 @@ var CSSProperty = require('CSSProperty');
 var ExecutionEnvironment = require('ExecutionEnvironment');
-var ReactPerf = require('ReactPerf');
+var ReactInstrumentation = require('ReactInstrumentation');
 
@@ -65,3 +65,3 @@ if (__DEV__) {
       camelizeStyleName(name),
-      checkRenderMessage(owner)
+      checkRenderMessage(owner),
     );
@@ -80,3 +80,3 @@ if (__DEV__) {
       name.charAt(0).toUpperCase() + name.slice(1),
-      checkRenderMessage(owner)
+      checkRenderMessage(owner),
     );
@@ -92,7 +92,7 @@ if (__DEV__) {
       false,
-      'Style property values shouldn\'t contain a semicolon.%s ' +
-      'Try "%s: %s" instead.',
+      "Style property values shouldn't contain a semicolon.%s " +
+        'Try "%s: %s" instead.',
       checkRenderMessage(owner),
       name,
-      value.replace(badStyleValueWithSemicolonPattern, '')
+      value.replace(badStyleValueWithSemicolonPattern, ''),
     );
@@ -110,3 +110,3 @@ if (__DEV__) {
       name,
-      checkRenderMessage(owner)
+      checkRenderMessage(owner),
     );
@@ -152,3 +152,2 @@ if (__DEV__) {
 var CSSPropertyOperations = {
-
   /**
@@ -172,5 +171,8 @@ var CSSPropertyOperations = {
       }
+      var isCustomProperty = styleName.indexOf('--') === 0;
       var styleValue = styles[styleName];
       if (__DEV__) {
-        warnValidStyle(styleName, styleValue, component);
+        if (!isCustomProperty) {
+          warnValidStyle(styleName, styleValue, component);
+        }
       }
@@ -179,3 +181,8 @@ var CSSPropertyOperations = {
         serialized +=
-          dangerousStyleValue(styleName, styleValue, component) + ';';
+          dangerousStyleValue(
+            styleName,
+            styleValue,
+            component,
+            isCustomProperty,
+          ) + ';';
       }
@@ -194,2 +201,10 @@ var CSSPropertyOperations = {
   setValueForStyles: function(node, styles, component) {
+    if (__DEV__) {
+      ReactInstrumentation.debugTool.onHostOperation({
+        instanceID: component._debugID,
+        type: 'update styles',
+        payload: styles,
+      });
+    }
+
     var style = node.style;
@@ -199,4 +214,7 @@ var CSSPropertyOperations = {
       }
+      var isCustomProperty = styleName.indexOf('--') === 0;
       if (__DEV__) {
-        warnValidStyle(styleName, styles[styleName], component);
+        if (!isCustomProperty) {
+          warnValidStyle(styleName, styles[styleName], component);
+        }
       }
@@ -205,3 +223,4 @@ var CSSPropertyOperations = {
         styles[styleName],
-        component
+        component,
+        isCustomProperty,
       );
@@ -210,3 +229,5 @@ var CSSPropertyOperations = {
       }
-      if (styleValue) {
+      if (isCustomProperty) {
+        style.setProperty(styleName, styleValue);
+      } else if (styleValue) {
         style[styleName] = styleValue;
@@ -228,9 +249,4 @@ var CSSPropertyOperations = {
   },
-
 };
 
-ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
-  setValueForStyles: 'setValueForStyles',
-});
-
 module.exports = CSSPropertyOperations;
diff --git a/src/renderers/dom/shared/DOMProperty.js b/src/renderers/dom/shared/DOMProperty.js
index 814bf5045..3d2e36cfa 100644
--- a/src/renderers/dom/shared/DOMProperty.js
+++ b/src/renderers/dom/shared/DOMProperty.js
@@ -25,3 +25,2 @@ var DOMPropertyInjection = {
   MUST_USE_PROPERTY: 0x1,
-  HAS_SIDE_EFFECTS: 0x2,
   HAS_BOOLEAN_VALUE: 0x4,
@@ -69,3 +68,3 @@ var DOMPropertyInjection = {
       DOMProperty._isCustomAttributeFunctions.push(
-        domPropertyConfig.isCustomAttribute
+        domPropertyConfig.isCustomAttribute,
       );
@@ -76,7 +75,7 @@ var DOMPropertyInjection = {
         !DOMProperty.properties.hasOwnProperty(propName),
-        'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' +
-        '\'%s\' which has already been injected. You may be accidentally ' +
-        'injecting the same DOM property config twice, or you may be ' +
-        'injecting two configs that have conflicting property names.',
-        propName
+        "injectDOMPropertyConfig(...): You're trying to inject DOM property " +
+          "'%s' which has already been injected. You may be accidentally " +
+          'injecting the same DOM property config twice, or you may be ' +
+          'injecting two configs that have conflicting property names.',
+        propName,
       );
@@ -93,22 +92,21 @@ var DOMPropertyInjection = {
         mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
-        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
         hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
         hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
-        hasPositiveNumericValue:
-          checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
-        hasOverloadedBooleanValue:
-          checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE),
+        hasPositiveNumericValue: checkMask(
+          propConfig,
+          Injection.HAS_POSITIVE_NUMERIC_VALUE,
+        ),
+        hasOverloadedBooleanValue: checkMask(
+          propConfig,
+          Injection.HAS_OVERLOADED_BOOLEAN_VALUE,
+        ),
       };
-
-      invariant(
-        propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects,
-        'DOMProperty: Properties that have side effects must use property: %s',
-        propName
-      );
       invariant(
-        propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue +
-          propertyInfo.hasOverloadedBooleanValue <= 1,
+        propertyInfo.hasBooleanValue +
+          propertyInfo.hasNumericValue +
+          propertyInfo.hasOverloadedBooleanValue <=
+          1,
         'DOMProperty: Value can be one of boolean, overloaded boolean, or ' +
-        'numeric value, but not a combination: %s',
-        propName
+          'numeric value, but not a combination: %s',
+        propName,
       );
@@ -145,6 +143,6 @@ var DOMPropertyInjection = {
 /* eslint-disable max-len */
-var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
+var ATTRIBUTE_NAME_START_CHAR =
+  ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
 /* eslint-enable max-len */
 
-
 /**
@@ -163,3 +161,2 @@ var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\
 var DOMProperty = {
-
   ID_ATTRIBUTE_NAME: 'data-reactid',
@@ -168,3 +165,4 @@ var DOMProperty = {
   ATTRIBUTE_NAME_START_CHAR: ATTRIBUTE_NAME_START_CHAR,
-  ATTRIBUTE_NAME_CHAR: ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\uB7\\u0300-\\u036F\\u203F-\\u2040',
+  ATTRIBUTE_NAME_CHAR:
+    ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040',
 
@@ -185,7 +183,2 @@ var DOMProperty = {
    *   Whether the property must be accessed and mutated as an object property.
-   * hasSideEffects:
-   *   Whether or not setting a value causes side effects such as triggering
-   *   resources to be loaded or text selection changes. If true, we read from
-   *   the DOM before updating to ensure that the value is only set if it has
-   *   changed.
    * hasBooleanValue:
@@ -208,5 +201,9 @@ var DOMProperty = {
    * to warn in the case of missing properties. Available only in __DEV__.
+   *
+   * autofocus is predefined, because adding it to the property whitelist
+   * causes unintended side effects.
+   *
    * @type {Object}
    */
-  getPossibleStandardName: __DEV__ ? {} : null,
+  getPossibleStandardName: __DEV__ ? {autofocus: 'autoFocus'} : null,
 
diff --git a/src/renderers/dom/shared/DOMPropertyOperations.js b/src/renderers/dom/shared/DOMPropertyOperations.js
index 6108e4dd0..524b6f5a1 100644
--- a/src/renderers/dom/shared/DOMPropertyOperations.js
+++ b/src/renderers/dom/shared/DOMPropertyOperations.js
@@ -14,4 +14,4 @@
 var DOMProperty = require('DOMProperty');
-var ReactDOMInstrumentation = require('ReactDOMInstrumentation');
-var ReactPerf = require('ReactPerf');
+var ReactDOMComponentTree = require('ReactDOMComponentTree');
+var ReactInstrumentation = require('ReactInstrumentation');
 
@@ -21,3 +21,7 @@ var warning = require('warning');
 var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(
-  '^[' + DOMProperty.ATTRIBUTE_NAME_START_CHAR + '][' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$'
+  '^[' +
+    DOMProperty.ATTRIBUTE_NAME_START_CHAR +
+    '][' +
+    DOMProperty.ATTRIBUTE_NAME_CHAR +
+    ']*$',
 );
@@ -38,7 +42,3 @@ function isAttributeNameSafe(attributeName) {
   illegalAttributeNameCache[attributeName] = true;
-  warning(
-    false,
-    'Invalid attribute name: `%s`',
-    attributeName
-  );
+  warning(false, 'Invalid attribute name: `%s`', attributeName);
   return false;
@@ -47,7 +47,9 @@ function isAttributeNameSafe(attributeName) {
 function shouldIgnoreValue(propertyInfo, value) {
-  return value == null ||
+  return (
+    value == null ||
     (propertyInfo.hasBooleanValue && !value) ||
     (propertyInfo.hasNumericValue && isNaN(value)) ||
-    (propertyInfo.hasPositiveNumericValue && (value < 1)) ||
-    (propertyInfo.hasOverloadedBooleanValue && value === false);
+    (propertyInfo.hasPositiveNumericValue && value < 1) ||
+    (propertyInfo.hasOverloadedBooleanValue && value === false)
+  );
 }
@@ -58,3 +60,2 @@ function shouldIgnoreValue(propertyInfo, value) {
 var DOMPropertyOperations = {
-
   /**
@@ -66,4 +67,5 @@ var DOMPropertyOperations = {
   createMarkupForID: function(id) {
-    return DOMProperty.ID_ATTRIBUTE_NAME + '=' +
-      quoteAttributeValueForBrowser(id);
+    return (
+      DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id)
+    );
   },
@@ -90,7 +92,5 @@ var DOMPropertyOperations = {
   createMarkupForProperty: function(name, value) {
-    if (__DEV__) {
-      ReactDOMInstrumentation.debugTool.onCreateMarkupForProperty(name, value);
-    }
-    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ?
-        DOMProperty.properties[name] : null;
+    var propertyInfo = DOMProperty.properties.hasOwnProperty(name)
+      ? DOMProperty.properties[name]
+      : null;
     if (propertyInfo) {
@@ -100,4 +100,6 @@ var DOMPropertyOperations = {
       var attributeName = propertyInfo.attributeName;
-      if (propertyInfo.hasBooleanValue ||
-          (propertyInfo.hasOverloadedBooleanValue && value === true)) {
+      if (
+        propertyInfo.hasBooleanValue ||
+        (propertyInfo.hasOverloadedBooleanValue && value === true)
+      ) {
         return attributeName + '=""';
@@ -136,7 +138,5 @@ var DOMPropertyOperations = {
   setValueForProperty: function(node, name, value) {
-    if (__DEV__) {
-      ReactDOMInstrumentation.debugTool.onSetValueForProperty(node, name, value);
-    }
-    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ?
-        DOMProperty.properties[name] : null;
+    var propertyInfo = DOMProperty.properties.hasOwnProperty(name)
+      ? DOMProperty.properties[name]
+      : null;
     if (propertyInfo) {
@@ -147,14 +147,7 @@ var DOMPropertyOperations = {
         this.deleteValueForProperty(node, name);
+        return;
       } else if (propertyInfo.mustUseProperty) {
-        var propName = propertyInfo.propertyName;
-        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
-        // property type before comparing; only `value` does and is string.
-        // Must set `value` property if it is not null and not yet set.
-        if (!propertyInfo.hasSideEffects ||
-            ('' + node[propName]) !== ('' + value) ||
-            !node.hasAttribute(propertyInfo.attributeName)) {
-          // Contrary to `setAttribute`, object properties are properly
-          // `toString`ed by IE8/9.
-          node[propName] = value;
-        }
+        // Contrary to `setAttribute`, object properties are properly
+        // `toString`ed by IE8/9.
+        node[propertyInfo.propertyName] = value;
       } else {
@@ -166,4 +159,6 @@ var DOMPropertyOperations = {
           node.setAttributeNS(namespace, attributeName, '' + value);
-        } else if (propertyInfo.hasBooleanValue ||
-                   (propertyInfo.hasOverloadedBooleanValue && value === true)) {
+        } else if (
+          propertyInfo.hasBooleanValue ||
+          (propertyInfo.hasOverloadedBooleanValue && value === true)
+        ) {
           node.setAttribute(attributeName, '');
@@ -175,2 +170,13 @@ var DOMPropertyOperations = {
       DOMPropertyOperations.setValueForAttribute(node, name, value);
+      return;
+    }
+
+    if (__DEV__) {
+      var payload = {};
+      payload[name] = value;
+      ReactInstrumentation.debugTool.onHostOperation({
+        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
+        type: 'update attribute',
+        payload: payload,
+      });
     }
@@ -187,2 +193,12 @@ var DOMPropertyOperations = {
     }
+
+    if (__DEV__) {
+      var payload = {};
+      payload[name] = value;
+      ReactInstrumentation.debugTool.onHostOperation({
+        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
+        type: 'update attribute',
+        payload: payload,
+      });
+    }
   },
@@ -190,3 +206,3 @@ var DOMPropertyOperations = {
   /**
-   * Deletes the value for a property on a node.
+   * Deletes an attributes from a node.
    *
@@ -195,8 +211,23 @@ var DOMPropertyOperations = {
    */
-  deleteValueForProperty: function(node, name) {
+  deleteValueForAttribute: function(node, name) {
+    node.removeAttribute(name);
     if (__DEV__) {
-      ReactDOMInstrumentation.debugTool.onDeleteValueForProperty(node, name);
+      ReactInstrumentation.debugTool.onHostOperation({
+        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
+        type: 'remove attribute',
+        payload: name,
+      });
     }
-    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ?
-        DOMProperty.properties[name] : null;
+  },
+
+  /**
+   * Deletes the value for a property on a node.
+   *
+   * @param {DOMElement} node
+   * @param {string} name
+   */
+  deleteValueForProperty: function(node, name) {
+    var propertyInfo = DOMProperty.properties.hasOwnProperty(name)
+      ? DOMProperty.properties[name]
+      : null;
     if (propertyInfo) {
@@ -208,9 +239,5 @@ var DOMPropertyOperations = {
         if (propertyInfo.hasBooleanValue) {
-          // No HAS_SIDE_EFFECTS logic here, only `value` has it and is string.
           node[propName] = false;
         } else {
-          if (!propertyInfo.hasSideEffects ||
-              ('' + node[propName]) !== '') {
-            node[propName] = '';
-          }
+          node[propName] = '';
         }
@@ -222,12 +249,13 @@ var DOMPropertyOperations = {
     }
-  },
 
+    if (__DEV__) {
+      ReactInstrumentation.debugTool.onHostOperation({
+        instanceID: ReactDOMComponentTree.getInstanceFromNode(node)._debugID,
+        type: 'remove attribute',
+        payload: name,
+      });
+    }
+  },
 };
 
-ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
-  setValueForProperty: 'setValueForProperty',
-  setValueForAttribute: 'setValueForAttribute',
-  deleteValueForProperty: 'deleteValueForProperty',
-});
-
 module.exports = DOMPropertyOperations;
diff --git a/src/renderers/dom/shared/Danger.js b/src/renderers/dom/shared/Danger.js
index 243261b2b..b16b96adf 100644
--- a/src/renderers/dom/shared/Danger.js
+++ b/src/renderers/dom/shared/Danger.js
@@ -18,133 +18,5 @@ var createNodesFromMarkup = require('createNodesFromMarkup');
 var emptyFunction = require('emptyFunction');
-var getMarkupWrap = require('getMarkupWrap');
 var invariant = require('invariant');
 
-var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
-var RESULT_INDEX_ATTR = 'data-danger-index';
-
-/**
- * Extracts the `nodeName` from a string of markup.
- *
- * NOTE: Extracting the `nodeName` does not require a regular expression match
- * because we make assumptions about React-generated markup (i.e. there are no
- * spaces surrounding the opening tag and there is at least one attribute).
- *
- * @param {string} markup String of markup.
- * @return {string} Node name of the supplied markup.
- * @see http://jsperf.com/extract-nodename
- */
-function getNodeName(markup) {
-  return markup.substring(1, markup.indexOf(' '));
-}
-
 var Danger = {
-
-  /**
-   * Renders markup into an array of nodes. The markup is expected to render
-   * into a list of root nodes. Also, the length of `resultList` and
-   * `markupList` should be the same.
-   *
-   * @param {array<string>} markupList List of markup strings to render.
-   * @return {array<DOMElement>} List of rendered nodes.
-   * @internal
-   */
-  dangerouslyRenderMarkup: function(markupList) {
-    invariant(
-      ExecutionEnvironment.canUseDOM,
-      'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' +
-      'thread. Make sure `window` and `document` are available globally ' +
-      'before requiring React when unit testing or use ' +
-      'ReactDOMServer.renderToString for server rendering.'
-    );
-    var nodeName;
-    var markupByNodeName = {};
-    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
-    for (var i = 0; i < markupList.length; i++) {
-      invariant(
-        markupList[i],
-        'dangerouslyRenderMarkup(...): Missing markup.'
-      );
-      nodeName = getNodeName(markupList[i]);
-      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
-      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
-      markupByNodeName[nodeName][i] = markupList[i];
-    }
-    var resultList = [];
-    var resultListAssignmentCount = 0;
-    for (nodeName in markupByNodeName) {
-      if (!markupByNodeName.hasOwnProperty(nodeName)) {
-        continue;
-      }
-      var markupListByNodeName = markupByNodeName[nodeName];
-
-      // This for-in loop skips the holes of the sparse array. The order of
-      // iteration should follow the order of assignment, which happens to match
-      // numerical index order, but we don't rely on that.
-      var resultIndex;
-      for (resultIndex in markupListByNodeName) {
-        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
-          var markup = markupListByNodeName[resultIndex];
-
-          // Push the requested markup with an additional RESULT_INDEX_ATTR
-          // attribute.  If the markup does not start with a < character, it
-          // will be discarded below (with an appropriate console.error).
-          markupListByNodeName[resultIndex] = markup.replace(
-            OPEN_TAG_NAME_EXP,
-            // This index will be parsed back out below.
-            '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" '
-          );
-        }
-      }
-
-      // Render each group of markup with similar wrapping `nodeName`.
-      var renderNodes = createNodesFromMarkup(
-        markupListByNodeName.join(''),
-        emptyFunction // Do nothing special with <script> tags.
-      );
-
-      for (var j = 0; j < renderNodes.length; ++j) {
-        var renderNode = renderNodes[j];
-        if (renderNode.hasAttribute &&
-            renderNode.hasAttribute(RESULT_INDEX_ATTR)) {
-
-          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
-          renderNode.removeAttribute(RESULT_INDEX_ATTR);
-
-          invariant(
-            !resultList.hasOwnProperty(resultIndex),
-            'Danger: Assigning to an already-occupied result index.'
-          );
-
-          resultList[resultIndex] = renderNode;
-
-          // This should match resultList.length and markupList.length when
-          // we're done.
-          resultListAssignmentCount += 1;
-
-        } else if (__DEV__) {
-          console.error(
-            'Danger: Discarding unexpected node:',
-            renderNode
-          );
-        }
-      }
-    }
-
-    // Although resultList was populated out of order, it should now be a dense
-    // array.
-    invariant(
-      resultListAssignmentCount === resultList.length,
-      'Danger: Did not assign to every index of resultList.'
-    );
-
-    invariant(
-      resultList.length === markupList.length,
-      'Danger: Expected markup to render %s nodes, but rendered %s.',
-      markupList.length,
-      resultList.length
-    );
-
-    return resultList;
-  },
-
   /**
@@ -161,5 +33,5 @@ var Danger = {
       'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' +
-      'worker thread. Make sure `window` and `document` are available ' +
-      'globally before requiring React when unit testing or use ' +
-      'ReactDOMServer.renderToString() for server rendering.'
+        'worker thread. Make sure `window` and `document` are available ' +
+        'globally before requiring React when unit testing or use ' +
+        'ReactDOMServer.renderToString() for server rendering.',
     );
@@ -169,5 +41,5 @@ var Danger = {
       'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' +
-      '<html> node. This is because browser quirks make this unreliable ' +
-      'and/or slow. If you want to render to the root you must use ' +
-      'server rendering. See ReactDOMServer.renderToString().'
+        '<html> node. This is because browser quirks make this unreliable ' +
+        'and/or slow. If you want to render to the root you must use ' +
+        'server rendering. See ReactDOMServer.renderToString().',
     );
@@ -181,3 +53,2 @@ var Danger = {
   },
-
 };
diff --git a/src/renderers/dom/shared/HTMLDOMPropertyConfig.js b/src/renderers/dom/shared/HTMLDOMPropertyConfig.js
index ce5e93cea..1ec812427 100644
--- a/src/renderers/dom/shared/HTMLDOMPropertyConfig.js
+++ b/src/renderers/dom/shared/HTMLDOMPropertyConfig.js
@@ -17,3 +17,2 @@ var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
 var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
-var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
 var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
@@ -26,3 +25,3 @@ var HTMLDOMPropertyConfig = {
   isCustomAttribute: RegExp.prototype.test.bind(
-    new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$')
+    new RegExp('^(data|aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$'),
   ),
@@ -39,2 +38,4 @@ var HTMLDOMPropertyConfig = {
     alt: 0,
+    // specifies target context for links with `preload` type
+    as: 0,
     async: HAS_BOOLEAN_VALUE,
@@ -119,2 +120,3 @@ var HTMLDOMPropertyConfig = {
     placeholder: 0,
+    playsInline: HAS_BOOLEAN_VALUE,
     poster: 0,
@@ -124,2 +126,3 @@ var HTMLDOMPropertyConfig = {
     readOnly: HAS_BOOLEAN_VALUE,
+    referrerPolicy: 0,
     rel: 0,
@@ -155,3 +158,3 @@ var HTMLDOMPropertyConfig = {
     useMap: 0,
-    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
+    value: 0,
     width: 0,
@@ -209,3 +212,30 @@ var HTMLDOMPropertyConfig = {
   },
-  DOMPropertyNames: {
+  DOMPropertyNames: {},
+  DOMMutationMethods: {
+    value: function(node, value) {
+      if (value == null) {
+        return node.removeAttribute('value');
+      }
+
+      // Number inputs get special treatment due to some edge cases in
+      // Chrome. Let everything else assign the value attribute as normal.
+      // https://github.com/facebook/react/issues/7253#issuecomment-236074326
+      if (node.type !== 'number' || node.hasAttribute('value') === false) {
+        node.setAttribute('value', '' + value);
+      } else if (
+        node.validity &&
+        !node.validity.badInput &&
+        node.ownerDocument.activeElement !== node
+      ) {
+        // Don't assign an attribute if validation reports bad
+        // input. Chrome will clear the value. Additionally, don't
+        // operate on inputs that have focus, otherwise Chrome might
+        // strip off trailing decimal places and cause the user's
+        // cursor position to jump to the beginning of the input.
+        //
+        // In ReactDOMInput, we have an onBlur event that will trigger
+        // this function again when focus is lost.
+        node.setAttribute('value', '' + value);
+      }
+    },
   },
diff --git a/src/renderers/dom/shared/ReactComponentBrowserEnvironment.js b/src/renderers/dom/shared/ReactComponentBrowserEnvironment.js
index cf5df870d..13226723b 100644
--- a/src/renderers/dom/shared/ReactComponentBrowserEnvironment.js
+++ b/src/renderers/dom/shared/ReactComponentBrowserEnvironment.js
@@ -15,3 +15,2 @@ var DOMChildrenOperations = require('DOMChildrenOperations');
 var ReactDOMIDOperations = require('ReactDOMIDOperations');
-var ReactPerf = require('ReactPerf');
 
@@ -23,3 +22,2 @@ var ReactPerf = require('ReactPerf');
 var ReactComponentBrowserEnvironment = {
-
   processChildrenUpdates:
@@ -27,25 +25,5 @@ var ReactComponentBrowserEnvironment = {
 
-  replaceNodeWithMarkup:
-    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup,
-
-  /**
-   * If a particular environment requires that some resources be cleaned up,
-   * specify this in the injected Mixin. In the DOM, we would likely want to
-   * purge any cached node ID lookups.
-   *
-   * @private
-   */
-  unmountIDFromEnvironment: function(rootNodeID) {
-  },
-
+  replaceNodeWithMarkup: DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup,
 };
 
-ReactPerf.measureMethods(
-  ReactComponentBrowserEnvironment,
-  'ReactComponentBrowserEnvironment',
-  {
-    replaceNodeWithMarkup: 'replaceNodeWithMarkup',
-  }
-);
-
 module.exports = ReactComponentBrowserEnvironment;
diff --git a/src/renderers/dom/shared/ReactDOMComponent.js b/src/renderers/dom/shared/ReactDOMComponent.js
index 808706d62..6c7a1ca8b 100644
--- a/src/renderers/dom/shared/ReactDOMComponent.js
+++ b/src/renderers/dom/shared/ReactDOMComponent.js
@@ -21,3 +21,2 @@ var DOMProperty = require('DOMProperty');
 var DOMPropertyOperations = require('DOMPropertyOperations');
-var EventConstants = require('EventConstants');
 var EventPluginHub = require('EventPluginHub');
@@ -25,5 +24,2 @@ var EventPluginRegistry = require('EventPluginRegistry');
 var ReactBrowserEventEmitter = require('ReactBrowserEventEmitter');
-var ReactComponentBrowserEnvironment =
-  require('ReactComponentBrowserEnvironment');
-var ReactDOMButton = require('ReactDOMButton');
 var ReactDOMComponentFlags = require('ReactDOMComponentFlags');
@@ -34,5 +30,7 @@ var ReactDOMSelect = require('ReactDOMSelect');
 var ReactDOMTextarea = require('ReactDOMTextarea');
+var ReactInstrumentation = require('ReactInstrumentation');
 var ReactMultiChild = require('ReactMultiChild');
-var ReactPerf = require('ReactPerf');
+var ReactServerRenderingTransaction = require('ReactServerRenderingTransaction');
 
+var emptyFunction = require('emptyFunction');
 var escapeTextContentForBrowser = require('escapeTextContentForBrowser');
@@ -40,4 +38,4 @@ var invariant = require('invariant');
 var isEventSupported = require('isEventSupported');
-var keyOf = require('keyOf');
 var shallowEqual = require('shallowEqual');
+var inputValueTracking = require('inputValueTracking');
 var validateDOMNesting = require('validateDOMNesting');
@@ -52,6 +50,6 @@ var registrationNameModules = EventPluginRegistry.registrationNameModules;
 // For quickly matching children type, to test if can be treated as content.
-var CONTENT_TYPES = {'string': true, 'number': true};
+var CONTENT_TYPES = {string: true, number: true};
 
-var STYLE = keyOf({style: null});
-var HTML = keyOf({__html: null});
+var STYLE = 'style';
+var HTML = '__html';
 var RESERVED_PROPS = {
@@ -62,2 +60,4 @@ var RESERVED_PROPS = {
 
+// Node type for document fragments (Node.DOCUMENT_FRAGMENT_NODE).
+var DOC_FRAGMENT_TYPE = 11;
 
@@ -84,5 +84,5 @@ function friendlyStringify(obj) {
         if (Object.prototype.hasOwnProperty.call(obj, key)) {
-          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ?
-            key :
-            JSON.stringify(key);
+          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key)
+            ? key
+            : JSON.stringify(key);
           pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
@@ -130,4 +130,4 @@ function checkAndWarnForMutatedStyle(style1, style2, component) {
     '`%s` was passed a style object that has previously been mutated. ' +
-    'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' +
-    'the `render` %s. Previous style: %s. Mutated style: %s.',
+      'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' +
+      'the `render` %s. Previous style: %s. Mutated style: %s.',
     componentName,
@@ -135,3 +135,3 @@ function checkAndWarnForMutatedStyle(style1, style2, component) {
     friendlyStringify(style1),
-    friendlyStringify(style2)
+    friendlyStringify(style2),
   );
@@ -151,9 +151,10 @@ function assertValidProps(component, props) {
       props.children == null && props.dangerouslySetInnerHTML == null,
-      '%s is a void element tag and must not have `children` or ' +
-      'use `props.dangerouslySetInnerHTML`.%s',
+      '%s is a void element tag and must neither have `children` nor ' +
+        'use `dangerouslySetInnerHTML`.%s',
       component._tag,
-      component._currentElement._owner ?
-        ' Check the render method of ' +
-        component._currentElement._owner.getName() + '.' :
-        ''
+      component._currentElement._owner
+        ? ' Check the render method of ' +
+            component._currentElement._owner.getName() +
+            '.'
+        : '',
     );
@@ -163,3 +164,3 @@ function assertValidProps(component, props) {
       props.children == null,
-      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
+      'Can only set one of `children` or `props.dangerouslySetInnerHTML`.',
     );
@@ -167,6 +168,6 @@ function assertValidProps(component, props) {
       typeof props.dangerouslySetInnerHTML === 'object' &&
-      HTML in props.dangerouslySetInnerHTML,
+        HTML in props.dangerouslySetInnerHTML,
       '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
-      'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
-      'for more information.'
+        'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' +
+        'for more information.',
     );
@@ -177,3 +178,3 @@ function assertValidProps(component, props) {
       'Directly setting property `innerHTML` is not permitted. ' +
-      'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
+        'For more information, lookup documentation on `dangerouslySetInnerHTML`.',
     );
@@ -181,15 +182,14 @@ function assertValidProps(component, props) {
       props.suppressContentEditableWarning ||
-      !props.contentEditable ||
-      props.children == null,
+        !props.contentEditable ||
+        props.children == null,
       'A component is `contentEditable` and contains `children` managed by ' +
-      'React. It is now your responsibility to guarantee that none of ' +
-      'those nodes are unexpectedly modified or duplicated. This is ' +
-      'probably not intentional.'
+        'React. It is now your responsibility to guarantee that none of ' +
+        'those nodes are unexpectedly modified or duplicated. This is ' +
+        'probably not intentional.',
     );
     warning(
-      props.onFocusIn == null &&
-      props.onFocusOut == null,
+      props.onFocusIn == null && props.onFocusOut == null,
       'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' +
-      'All React events are normalized to bubble, so onFocusIn and onFocusOut ' +
-      'are not needed/supported by React.'
+        'All React events are normalized to bubble, so onFocusIn and onFocusOut ' +
+        'are not needed/supported by React.',
     );
@@ -199,5 +199,5 @@ function assertValidProps(component, props) {
     'The `style` prop expects a mapping from style properties to values, ' +
-    'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' +
-    'using JSX.%s',
-     getDeclarationErrorAddendum(component)
+      "not a string. For example, style={{marginRight: spacing + 'em'}} when " +
+      'using JSX.%s',
+    getDeclarationErrorAddendum(component),
   );
@@ -206,2 +206,5 @@ function assertValidProps(component, props) {
 function enqueuePutListener(inst, registrationName, listener, transaction) {
+  if (transaction instanceof ReactServerRenderingTransaction) {
+    return;
+  }
   if (__DEV__) {
@@ -211,11 +214,11 @@ function enqueuePutListener(inst, registrationName, listener, transaction) {
       registrationName !== 'onScroll' || isEventSupported('scroll', true),
-      'This browser doesn\'t support the `onScroll` event'
+      "This browser doesn't support the `onScroll` event",
     );
   }
-  var containerInfo = inst._nativeContainerInfo;
-  var doc = containerInfo._ownerDocument;
-  if (!doc) {
-    // Server rendering.
-    return;
-  }
+  var containerInfo = inst._hostContainerInfo;
+  var isDocumentFragment =
+    containerInfo._node && containerInfo._node.nodeType === DOC_FRAGMENT_TYPE;
+  var doc = isDocumentFragment
+    ? containerInfo._node
+    : containerInfo._ownerDocument;
   listenTo(registrationName, doc);
@@ -233,3 +236,3 @@ function putListener() {
     listenerToPut.registrationName,
-    listenerToPut.listener
+    listenerToPut.listener,
   );
@@ -237,2 +240,53 @@ function putListener() {
 
+function inputPostMount() {
+  var inst = this;
+  ReactDOMInput.postMountWrapper(inst);
+}
+
+function textareaPostMount() {
+  var inst = this;
+  ReactDOMTextarea.postMountWrapper(inst);
+}
+
+function optionPostMount() {
+  var inst = this;
+  ReactDOMOption.postMountWrapper(inst);
+}
+
+var setAndValidateContentChildDev = emptyFunction;
+if (__DEV__) {
+  setAndValidateContentChildDev = function(content) {
+    var hasExistingContent = this._contentDebugID != null;
+    var debugID = this._debugID;
+    // This ID represents the inlined child that has no backing instance:
+    var contentDebugID = -debugID;
+
+    if (content == null) {
+      if (hasExistingContent) {
+        ReactInstrumentation.debugTool.onUnmountComponent(this._contentDebugID);
+      }
+      this._contentDebugID = null;
+      return;
+    }
+
+    validateDOMNesting(null, String(content), this, this._ancestorInfo);
+    this._contentDebugID = contentDebugID;
+    if (hasExistingContent) {
+      ReactInstrumentation.debugTool.onBeforeUpdateComponent(
+        contentDebugID,
+        content,
+      );
+      ReactInstrumentation.debugTool.onUpdateComponent(contentDebugID);
+    } else {
+      ReactInstrumentation.debugTool.onBeforeMountComponent(
+        contentDebugID,
+        content,
+        debugID,
+      );
+      ReactInstrumentation.debugTool.onMountComponent(contentDebugID);
+      ReactInstrumentation.debugTool.onSetChildren(debugID, [contentDebugID]);
+    }
+  };
+}
+
 // There are so many media events, it makes sense to just
@@ -265,2 +319,6 @@ var mediaEvents = {
 
+function trackInputValue() {
+  inputValueTracking.track(this);
+}
+
 function trapBubbledEventsLocal() {
@@ -271,6 +329,3 @@ function trapBubbledEventsLocal() {
   var node = getNode(inst);
-  invariant(
-    node,
-    'trapBubbledEvent(...): Requires node to be rendered.'
-  );
+  invariant(node, 'trapBubbledEvent(...): Requires node to be rendered.');
 
@@ -280,7 +335,3 @@ function trapBubbledEventsLocal() {
       inst._wrapperState.listeners = [
-        ReactBrowserEventEmitter.trapBubbledEvent(
-          EventConstants.topLevelTypes.topLoad,
-          'load',
-          node
-        ),
+        ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node),
       ];
@@ -289,3 +340,2 @@ function trapBubbledEventsLocal() {
     case 'audio':
-
       inst._wrapperState.listeners = [];
@@ -296,6 +346,6 @@ function trapBubbledEventsLocal() {
             ReactBrowserEventEmitter.trapBubbledEvent(
-              EventConstants.topLevelTypes[event],
+              event,
               mediaEvents[event],
-              node
-            )
+              node,
+            ),
           );
@@ -303,3 +353,7 @@ function trapBubbledEventsLocal() {
       }
-
+      break;
+    case 'source':
+      inst._wrapperState.listeners = [
+        ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node),
+      ];
       break;
@@ -307,12 +361,4 @@ function trapBubbledEventsLocal() {
       inst._wrapperState.listeners = [
-        ReactBrowserEventEmitter.trapBubbledEvent(
-          EventConstants.topLevelTypes.topError,
-          'error',
-          node
-        ),
-        ReactBrowserEventEmitter.trapBubbledEvent(
-          EventConstants.topLevelTypes.topLoad,
-          'load',
-          node
-        ),
+        ReactBrowserEventEmitter.trapBubbledEvent('topError', 'error', node),
+        ReactBrowserEventEmitter.trapBubbledEvent('topLoad', 'load', node),
       ];
@@ -321,12 +367,4 @@ function trapBubbledEventsLocal() {
       inst._wrapperState.listeners = [
-        ReactBrowserEventEmitter.trapBubbledEvent(
-          EventConstants.topLevelTypes.topReset,
-          'reset',
-          node
-        ),
-        ReactBrowserEventEmitter.trapBubbledEvent(
-          EventConstants.topLevelTypes.topSubmit,
-          'submit',
-          node
-        ),
+        ReactBrowserEventEmitter.trapBubbledEvent('topReset', 'reset', node),
+        ReactBrowserEventEmitter.trapBubbledEvent('topSubmit', 'submit', node),
       ];
@@ -338,5 +376,5 @@ function trapBubbledEventsLocal() {
         ReactBrowserEventEmitter.trapBubbledEvent(
-          EventConstants.topLevelTypes.topInvalid,
+          'topInvalid',
           'invalid',
-          node
+          node,
         ),
@@ -355,17 +393,17 @@ function postUpdateSelectWrapper() {
 var omittedCloseTags = {
-  'area': true,
-  'base': true,
-  'br': true,
-  'col': true,
-  'embed': true,
-  'hr': true,
-  'img': true,
-  'input': true,
-  'keygen': true,
-  'link': true,
-  'meta': true,
-  'param': true,
-  'source': true,
-  'track': true,
-  'wbr': true,
+  area: true,
+  base: true,
+  br: true,
+  col: true,
+  embed: true,
+  hr: true,
+  img: true,
+  input: true,
+  keygen: true,
+  link: true,
+  meta: true,
+  param: true,
+  source: true,
+  track: true,
+  wbr: true,
   // NOTE: menuitem's close tag should be omitted, but that causes problems.
@@ -374,5 +412,5 @@ var omittedCloseTags = {
 var newlineEatingTags = {
-  'listing': true,
-  'pre': true,
-  'textarea': true,
+  listing: true,
+  pre: true,
+  textarea: true,
 };
@@ -382,5 +420,8 @@ var newlineEatingTags = {
 
-var voidElementTags = Object.assign({
-  'menuitem': true,
-}, omittedCloseTags);
+var voidElementTags = Object.assign(
+  {
+    menuitem: true,
+  },
+  omittedCloseTags,
+);
 
@@ -430,7 +471,7 @@ function ReactDOMComponent(element) {
   this._previousStyleCopy = null;
-  this._nativeNode = null;
-  this._nativeParent = null;
-  this._rootNodeID = null;
-  this._domID = null;
-  this._nativeContainerInfo = null;
+  this._hostNode = null;
+  this._hostParent = null;
+  this._rootNodeID = 0;
+  this._domID = 0;
+  this._hostContainerInfo = null;
   this._wrapperState = null;
@@ -440,2 +481,3 @@ function ReactDOMComponent(element) {
     this._ancestorInfo = null;
+    setAndValidateContentChildDev.call(this, null);
   }
@@ -446,3 +488,2 @@ ReactDOMComponent.displayName = 'ReactDOMComponent';
 ReactDOMComponent.Mixin = {
-
   /**
@@ -453,4 +494,4 @@ ReactDOMComponent.Mixin = {
    * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
-   * @param {?ReactDOMComponent} the containing DOM component instance
-   * @param {?object} info about the native container
+   * @param {?ReactDOMComponent} the parent component instance
+   * @param {?object} info about the host container
    * @param {object} context
@@ -460,10 +501,10 @@ ReactDOMComponent.Mixin = {
     transaction,
-    nativeParent,
-    nativeContainerInfo,
-    context
+    hostParent,
+    hostContainerInfo,
+    context,
   ) {
     this._rootNodeID = globalIdCounter++;
-    this._domID = nativeContainerInfo._idCounter++;
-    this._nativeParent = nativeParent;
-    this._nativeContainerInfo = nativeContainerInfo;
+    this._domID = hostContainerInfo._idCounter++;
+    this._hostParent = hostParent;
+    this._hostContainerInfo = hostContainerInfo;
 
@@ -472,8 +513,10 @@ ReactDOMComponent.Mixin = {
     switch (this._tag) {
+      case 'audio':
+      case 'form':
       case 'iframe':
-      case 'object':
       case 'img':
-      case 'form':
+      case 'link':
+      case 'object':
+      case 'source':
       case 'video':
-      case 'audio':
         this._wrapperState = {
@@ -483,8 +526,6 @@ ReactDOMComponent.Mixin = {
         break;
-      case 'button':
-        props = ReactDOMButton.getNativeProps(this, props, nativeParent);
-        break;
       case 'input':
-        ReactDOMInput.mountWrapper(this, props, nativeParent);
-        props = ReactDOMInput.getNativeProps(this, props);
+        ReactDOMInput.mountWrapper(this, props, hostParent);
+        props = ReactDOMInput.getHostProps(this, props);
+        transaction.getReactMountReady().enqueue(trackInputValue, this);
         transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
@@ -492,8 +533,8 @@ ReactDOMComponent.Mixin = {
       case 'option':
-        ReactDOMOption.mountWrapper(this, props, nativeParent);
-        props = ReactDOMOption.getNativeProps(this, props);
+        ReactDOMOption.mountWrapper(this, props, hostParent);
+        props = ReactDOMOption.getHostProps(this, props);
         break;
       case 'select':
-        ReactDOMSelect.mountWrapper(this, props, nativeParent);
-        props = ReactDOMSelect.getNativeProps(this, props);
+        ReactDOMSelect.mountWrapper(this, props, hostParent);
+        props = ReactDOMSelect.getHostProps(this, props);
         transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
@@ -501,4 +542,5 @@ ReactDOMComponent.Mixin = {
       case 'textarea':
-        ReactDOMTextarea.mountWrapper(this, props, nativeParent);
-        props = ReactDOMTextarea.getNativeProps(this, props);
+        ReactDOMTextarea.mountWrapper(this, props, hostParent);
+        props = ReactDOMTextarea.getHostProps(this, props);
+        transaction.getReactMountReady().enqueue(trackInputValue, this);
         transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
@@ -513,11 +555,13 @@ ReactDOMComponent.Mixin = {
     var parentTag;
-    if (nativeParent != null) {
-      namespaceURI = nativeParent._namespaceURI;
-      parentTag = nativeParent._tag;
-    } else if (nativeContainerInfo._tag) {
-      namespaceURI = nativeContainerInfo._namespaceURI;
-      parentTag = nativeContainerInfo._tag;
+    if (hostParent != null) {
+      namespaceURI = hostParent._namespaceURI;
+      parentTag = hostParent._tag;
+    } else if (hostContainerInfo._tag) {
+      namespaceURI = hostContainerInfo._namespaceURI;
+      parentTag = hostContainerInfo._tag;
     }
-    if (namespaceURI == null ||
-        namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject') {
+    if (
+      namespaceURI == null ||
+      (namespaceURI === DOMNamespaces.svg && parentTag === 'foreignobject')
+    ) {
       namespaceURI = DOMNamespaces.html;
@@ -535,6 +579,6 @@ ReactDOMComponent.Mixin = {
       var parentInfo;
-      if (nativeParent != null) {
-        parentInfo = nativeParent._ancestorInfo;
-      } else if (nativeContainerInfo._tag) {
-        parentInfo = nativeContainerInfo._ancestorInfo;
+      if (hostParent != null) {
+        parentInfo = hostParent._ancestorInfo;
+      } else if (hostContainerInfo._tag) {
+        parentInfo = hostContainerInfo._ancestorInfo;
       }
@@ -543,6 +587,9 @@ ReactDOMComponent.Mixin = {
         // component when server rendering
-        validateDOMNesting(this._tag, this, parentInfo);
+        validateDOMNesting(this._tag, null, this, parentInfo);
       }
-      this._ancestorInfo =
-        validateDOMNesting.updatedAncestorInfo(parentInfo, this._tag, this);
+      this._ancestorInfo = validateDOMNesting.updatedAncestorInfo(
+        parentInfo,
+        this._tag,
+        this,
+      );
     }
@@ -551,3 +598,3 @@ ReactDOMComponent.Mixin = {
     if (transaction.useCreateElement) {
-      var ownerDocument = nativeContainerInfo._ownerDocument;
+      var ownerDocument = hostContainerInfo._ownerDocument;
       var el;
@@ -561,3 +608,8 @@ ReactDOMComponent.Mixin = {
           el = div.removeChild(div.firstChild);
+        } else if (props.is) {
+          el = ownerDocument.createElement(this._currentElement.type, props.is);
         } else {
+          // Separate else branch instead of using `props.is || undefined` above becuase of a Firefox bug.
+          // See discussion in https://github.com/facebook/react/pull/6896
+          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
           el = ownerDocument.createElement(this._currentElement.type);
@@ -567,3 +619,3 @@ ReactDOMComponent.Mixin = {
           namespaceURI,
-          this._currentElement.type
+          this._currentElement.type,
         );
@@ -572,3 +624,3 @@ ReactDOMComponent.Mixin = {
       this._flags |= Flags.hasCachedChildNodes;
-      if (!this._nativeParent) {
+      if (!this._hostParent) {
         DOMPropertyOperations.setAttributeForRoot(el);
@@ -580,3 +632,6 @@ ReactDOMComponent.Mixin = {
     } else {
-      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
+      var tagOpen = this._createOpenTagMarkupAndPutListeners(
+        transaction,
+        props,
+      );
       var tagContent = this._createContentMarkup(transaction, props, context);
@@ -591,13 +646,35 @@ ReactDOMComponent.Mixin = {
     switch (this._tag) {
-      case 'button':
       case 'input':
-      case 'select':
+        transaction.getReactMountReady().enqueue(inputPostMount, this);
+        if (props.autoFocus) {
+          transaction
+            .getReactMountReady()
+            .enqueue(AutoFocusUtils.focusDOMComponent, this);
+        }
+        break;
       case 'textarea':
+        transaction.getReactMountReady().enqueue(textareaPostMount, this);
         if (props.autoFocus) {
-          transaction.getReactMountReady().enqueue(
-            AutoFocusUtils.focusDOMComponent,
-            this
-          );
+          transaction
+            .getReactMountReady()
+            .enqueue(AutoFocusUtils.focusDOMComponent, this);
+        }
+        break;
+      case 'select':
+        if (props.autoFocus) {
+          transaction
+            .getReactMountReady()
+            .enqueue(AutoFocusUtils.focusDOMComponent, this);
         }
         break;
+      case 'button':
+        if (props.autoFocus) {
+          transaction
+            .getReactMountReady()
+            .enqueue(AutoFocusUtils.focusDOMComponent, this);
+        }
+        break;
+      case 'option':
+        transaction.getReactMountReady().enqueue(optionPostMount, this);
+        break;
     }
@@ -642,5 +719,11 @@ ReactDOMComponent.Mixin = {
             }
-            propValue = this._previousStyleCopy = Object.assign({}, props.style);
+            propValue = this._previousStyleCopy = Object.assign(
+              {},
+              props.style,
+            );
           }
-          propValue = CSSPropertyOperations.createMarkupForStyles(propValue, this);
+          propValue = CSSPropertyOperations.createMarkupForStyles(
+            propValue,
+            this,
+          );
         }
@@ -649,6 +732,12 @@ ReactDOMComponent.Mixin = {
           if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
-            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
+            markup = DOMPropertyOperations.createMarkupForCustomAttribute(
+              propKey,
+              propValue,
+            );
           }
         } else {
-          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
+          markup = DOMPropertyOperations.createMarkupForProperty(
+            propKey,
+            propValue,
+          );
         }
@@ -666,3 +755,3 @@ ReactDOMComponent.Mixin = {
 
-    if (!this._nativeParent) {
+    if (!this._hostParent) {
       ret += ' ' + DOMPropertyOperations.createMarkupForRoot();
@@ -692,4 +781,5 @@ ReactDOMComponent.Mixin = {
     } else {
-      var contentToUse =
-        CONTENT_TYPES[typeof props.children] ? props.children : null;
+      var contentToUse = CONTENT_TYPES[typeof props.children]
+        ? props.children
+        : null;
       var childrenToUse = contentToUse != null ? null : props.children;
@@ -698,2 +788,5 @@ ReactDOMComponent.Mixin = {
         ret = escapeTextContentForBrowser(contentToUse);
+        if (__DEV__) {
+          setAndValidateContentChildDev.call(this, contentToUse);
+        }
       } else if (childrenToUse != null) {
@@ -702,3 +795,3 @@ ReactDOMComponent.Mixin = {
           transaction,
-          context
+          context,
         );
@@ -732,8 +825,18 @@ ReactDOMComponent.Mixin = {
     } else {
-      var contentToUse =
-        CONTENT_TYPES[typeof props.children] ? props.children : null;
+      var contentToUse = CONTENT_TYPES[typeof props.children]
+        ? props.children
+        : null;
       var childrenToUse = contentToUse != null ? null : props.children;
+      // TODO: Validate that text is allowed as a child of this node
       if (contentToUse != null) {
-        // TODO: Validate that text is allowed as a child of this node
-        DOMLazyTree.queueText(lazyTree, contentToUse);
+        // Avoid setting textContent when the text is empty. In IE11 setting
+        // textContent on a text area will cause the placeholder to not
+        // show within the textarea until it has been focused and blurred again.
+        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
+        if (contentToUse !== '') {
+          if (__DEV__) {
+            setAndValidateContentChildDev.call(this, contentToUse);
+          }
+          DOMLazyTree.queueText(lazyTree, contentToUse);
+        }
       } else if (childrenToUse != null) {
@@ -742,3 +845,3 @@ ReactDOMComponent.Mixin = {
           transaction,
-          context
+          context,
         );
@@ -766,3 +869,3 @@ ReactDOMComponent.Mixin = {
   /**
-   * Updates a native DOM component after it has already been allocated and
+   * Updates a DOM component after it has already been allocated and
    * attached to the DOM. Reconciles the root DOM node, then recurses.
@@ -780,23 +883,17 @@ ReactDOMComponent.Mixin = {
     switch (this._tag) {
-      case 'button':
-        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
-        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
-        break;
       case 'input':
-        ReactDOMInput.updateWrapper(this);
-        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
-        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
+        lastProps = ReactDOMInput.getHostProps(this, lastProps);
+        nextProps = ReactDOMInput.getHostProps(this, nextProps);
         break;
       case 'option':
-        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
-        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
+        lastProps = ReactDOMOption.getHostProps(this, lastProps);
+        nextProps = ReactDOMOption.getHostProps(this, nextProps);
         break;
       case 'select':
-        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
-        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
+        lastProps = ReactDOMSelect.getHostProps(this, lastProps);
+        nextProps = ReactDOMSelect.getHostProps(this, nextProps);
         break;
       case 'textarea':
-        ReactDOMTextarea.updateWrapper(this);
-        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
-        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
+        lastProps = ReactDOMTextarea.getHostProps(this, lastProps);
+        nextProps = ReactDOMTextarea.getHostProps(this, nextProps);
         break;
@@ -806,13 +903,19 @@ ReactDOMComponent.Mixin = {
     this._updateDOMProperties(lastProps, nextProps, transaction);
-    this._updateDOMChildren(
-      lastProps,
-      nextProps,
-      transaction,
-      context
-    );
+    this._updateDOMChildren(lastProps, nextProps, transaction, context);
 
-    if (this._tag === 'select') {
-      // <select> value update needs to occur after <option> children
-      // reconciliation
-      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
+    switch (this._tag) {
+      case 'input':
+        // Update the wrapper around inputs *after* updating props. This has to
+        // happen after `_updateDOMProperties`. Otherwise HTML5 input validations
+        // raise warnings and prevent the new value from being assigned.
+        ReactDOMInput.updateWrapper(this);
+        break;
+      case 'textarea':
+        ReactDOMTextarea.updateWrapper(this);
+        break;
+      case 'select':
+        // <select> value update needs to occur after <option> children
+        // reconciliation
+        transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
+        break;
     }
@@ -841,5 +944,7 @@ ReactDOMComponent.Mixin = {
     for (propKey in lastProps) {
-      if (nextProps.hasOwnProperty(propKey) ||
-         !lastProps.hasOwnProperty(propKey) ||
-         lastProps[propKey] == null) {
+      if (
+        nextProps.hasOwnProperty(propKey) ||
+        !lastProps.hasOwnProperty(propKey) ||
+        lastProps[propKey] == null
+      ) {
         continue;
@@ -862,5 +967,10 @@ ReactDOMComponent.Mixin = {
         }
+      } else if (isCustomComponent(this._tag, lastProps)) {
+        if (!RESERVED_PROPS.hasOwnProperty(propKey)) {
+          DOMPropertyOperations.deleteValueForAttribute(getNode(this), propKey);
+        }
       } else if (
-          DOMProperty.properties[propKey] ||
-          DOMProperty.isCustomAttribute(propKey)) {
+        DOMProperty.properties[propKey] ||
+        DOMProperty.isCustomAttribute(propKey)
+      ) {
         DOMPropertyOperations.deleteValueForProperty(getNode(this), propKey);
@@ -870,8 +980,10 @@ ReactDOMComponent.Mixin = {
       var nextProp = nextProps[propKey];
-      var lastProp =
-        propKey === STYLE ? this._previousStyleCopy :
-        lastProps != null ? lastProps[propKey] : undefined;
-      if (!nextProps.hasOwnProperty(propKey) ||
-          nextProp === lastProp ||
-          nextProp == null && lastProp == null) {
+      var lastProp = propKey === STYLE
+        ? this._previousStyleCopy
+        : lastProps != null ? lastProps[propKey] : undefined;
+      if (
+        !nextProps.hasOwnProperty(propKey) ||
+        nextProp === lastProp ||
+        (nextProp == null && lastProp == null)
+      ) {
         continue;
@@ -884,3 +996,3 @@ ReactDOMComponent.Mixin = {
               this._previousStyle,
-              this
+              this,
             );
@@ -895,4 +1007,6 @@ ReactDOMComponent.Mixin = {
           for (styleName in lastProp) {
-            if (lastProp.hasOwnProperty(styleName) &&
-                (!nextProp || !nextProp.hasOwnProperty(styleName))) {
+            if (
+              lastProp.hasOwnProperty(styleName) &&
+              (!nextProp || !nextProp.hasOwnProperty(styleName))
+            ) {
               styleUpdates = styleUpdates || {};
@@ -903,4 +1017,6 @@ ReactDOMComponent.Mixin = {
           for (styleName in nextProp) {
-            if (nextProp.hasOwnProperty(styleName) &&
-                lastProp[styleName] !== nextProp[styleName]) {
+            if (
+              nextProp.hasOwnProperty(styleName) &&
+              lastProp[styleName] !== nextProp[styleName]
+            ) {
               styleUpdates = styleUpdates || {};
@@ -924,3 +1040,3 @@ ReactDOMComponent.Mixin = {
             propKey,
-            nextProp
+            nextProp,
           );
@@ -928,4 +1044,5 @@ ReactDOMComponent.Mixin = {
       } else if (
-          DOMProperty.properties[propKey] ||
-          DOMProperty.isCustomAttribute(propKey)) {
+        DOMProperty.properties[propKey] ||
+        DOMProperty.isCustomAttribute(propKey)
+      ) {
         var node = getNode(this);
@@ -945,3 +1062,3 @@ ReactDOMComponent.Mixin = {
         styleUpdates,
-        this
+        this,
       );
@@ -960,6 +1077,8 @@ ReactDOMComponent.Mixin = {
   _updateDOMChildren: function(lastProps, nextProps, transaction, context) {
-    var lastContent =
-      CONTENT_TYPES[typeof lastProps.children] ? lastProps.children : null;
-    var nextContent =
-      CONTENT_TYPES[typeof nextProps.children] ? nextProps.children : null;
+    var lastContent = CONTENT_TYPES[typeof lastProps.children]
+      ? lastProps.children
+      : null;
+    var nextContent = CONTENT_TYPES[typeof nextProps.children]
+      ? nextProps.children
+      : null;
 
@@ -984,2 +1103,5 @@ ReactDOMComponent.Mixin = {
       this.updateTextContent('');
+      if (__DEV__) {
+        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
+      }
     }
@@ -989,2 +1111,5 @@ ReactDOMComponent.Mixin = {
         this.updateTextContent('' + nextContent);
+        if (__DEV__) {
+          setAndValidateContentChildDev.call(this, nextContent);
+        }
       }
@@ -994,3 +1119,10 @@ ReactDOMComponent.Mixin = {
       }
+      if (__DEV__) {
+        ReactInstrumentation.debugTool.onSetChildren(this._debugID, []);
+      }
     } else if (nextChildren != null) {
+      if (__DEV__) {
+        setAndValidateContentChildDev.call(this, null);
+      }
+
       this.updateChildren(nextChildren, transaction, context);
@@ -999,3 +1131,3 @@ ReactDOMComponent.Mixin = {
 
-  getNativeNode: function() {
+  getHostNode: function() {
     return getNode(this);
@@ -1011,8 +1143,10 @@ ReactDOMComponent.Mixin = {
     switch (this._tag) {
+      case 'audio':
+      case 'form':
       case 'iframe':
-      case 'object':
       case 'img':
-      case 'form':
+      case 'link':
+      case 'object':
+      case 'source':
       case 'video':
-      case 'audio':
         var listeners = this._wrapperState.listeners;
@@ -1024,2 +1158,6 @@ ReactDOMComponent.Mixin = {
         break;
+      case 'input':
+      case 'textarea':
+        inputValueTracking.stopTracking(this);
+        break;
       case 'html':
@@ -1036,7 +1174,7 @@ ReactDOMComponent.Mixin = {
           '<%s> tried to unmount. Because of cross-browser quirks it is ' +
-          'impossible to unmount some top-level components (eg <html>, ' +
-          '<head>, and <body>) reliably and efficiently. To fix this, have a ' +
-          'single top-level component that never unmounts render these ' +
-          'elements.',
-          this._tag
+            'impossible to unmount some top-level components (eg <html>, ' +
+            '<head>, and <body>) reliably and efficiently. To fix this, have a ' +
+            'single top-level component that never unmounts render these ' +
+            'elements.',
+          this._tag,
         );
@@ -1048,6 +1186,9 @@ ReactDOMComponent.Mixin = {
     EventPluginHub.deleteAllListeners(this);
-    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
-    this._rootNodeID = null;
-    this._domID = null;
+    this._rootNodeID = 0;
+    this._domID = 0;
     this._wrapperState = null;
+
+    if (__DEV__) {
+      setAndValidateContentChildDev.call(this, null);
+    }
   },
@@ -1057,10 +1198,4 @@ ReactDOMComponent.Mixin = {
   },
-
 };
 
-ReactPerf.measureMethods(ReactDOMComponent.Mixin, 'ReactDOMComponent', {
-  mountComponent: 'mountComponent',
-  receiveComponent: 'receiveComponent',
-});
-
 Object.assign(
@@ -1068,3 +1203,3 @@ Object.assign(
   ReactDOMComponent.Mixin,
-  ReactMultiChild.Mixin
+  ReactMultiChild.Mixin,
 );
diff --git a/src/renderers/dom/shared/ReactDOMContainerInfo.js b/src/renderers/dom/shared/ReactDOMContainerInfo.js
index 75be5eae8..263c42c76 100644
--- a/src/renderers/dom/shared/ReactDOMContainerInfo.js
+++ b/src/renderers/dom/shared/ReactDOMContainerInfo.js
@@ -21,5 +21,6 @@ function ReactDOMContainerInfo(topLevelWrapper, node) {
     _idCounter: 1,
-    _ownerDocument: node ?
-      node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument :
-      null,
+    _ownerDocument: node
+      ? node.nodeType === DOC_NODE_TYPE ? node : node.ownerDocument
+      : null,
+    _node: node,
     _tag: node ? node.nodeName.toLowerCase() : null,
@@ -28,4 +29,5 @@ function ReactDOMContainerInfo(topLevelWrapper, node) {
   if (__DEV__) {
-    info._ancestorInfo = node ?
-      validateDOMNesting.updatedAncestorInfo(null, info._tag, null) : null;
+    info._ancestorInfo = node
+      ? validateDOMNesting.updatedAncestorInfo(null, info._tag, null)
+      : null;
   }
diff --git a/src/renderers/dom/shared/ReactDOMDebugTool.js b/src/renderers/dom/shared/ReactDOMDebugTool.js
deleted file mode 100644
index 9fcc3763f..000000000
--- a/src/renderers/dom/shared/ReactDOMDebugTool.js
+++ /dev/null
@@ -1,66 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @providesModule ReactDOMDebugTool
- */
-
-'use strict';
-
-var ReactDOMUnknownPropertyDevtool = require('ReactDOMUnknownPropertyDevtool');
-
-var warning = require('warning');
-
-var eventHandlers = [];
-var handlerDoesThrowForEvent = {};
-
-function emitEvent(handlerFunctionName, arg1, arg2, arg3, arg4, arg5) {
-  if (__DEV__) {
-    eventHandlers.forEach(function(handler) {
-      try {
-        if (handler[handlerFunctionName]) {
-          handler[handlerFunctionName](arg1, arg2, arg3, arg4, arg5);
-        }
-      } catch (e) {
-        warning(
-          !handlerDoesThrowForEvent[handlerFunctionName],
-          'exception thrown by devtool while handling %s: %s',
-          handlerFunctionName,
-          e.message
-        );
-        handlerDoesThrowForEvent[handlerFunctionName] = true;
-      }
-    });
-  }
-}
-
-var ReactDOMDebugTool = {
-  addDevtool(devtool) {
-    eventHandlers.push(devtool);
-  },
-  removeDevtool(devtool) {
-    for (var i = 0; i < eventHandlers.length; i++) {
-      if (eventHandlers[i] === devtool) {
-        eventHandlers.splice(i, 1);
-        i--;
-      }
-    }
-  },
-  onCreateMarkupForProperty(name, value) {
-    emitEvent('onCreateMarkupForProperty', name, value);
-  },
-  onSetValueForProperty(node, name, value) {
-    emitEvent('onSetValueForProperty', node, name, value);
-  },
-  onDeleteValueForProperty(node, name) {
-    emitEvent('onDeleteValueForProperty', node, name);
-  },
-};
-
-ReactDOMDebugTool.addDevtool(ReactDOMUnknownPropertyDevtool);
-
-module.exports = ReactDOMDebugTool;
diff --git a/src/renderers/dom/shared/ReactDOMEmptyComponent.js b/src/renderers/dom/shared/ReactDOMEmptyComponent.js
index 81f894091..bbc631634 100644
--- a/src/renderers/dom/shared/ReactDOMEmptyComponent.js
+++ b/src/renderers/dom/shared/ReactDOMEmptyComponent.js
@@ -16,3 +16,2 @@ var ReactDOMComponentTree = require('ReactDOMComponentTree');
 
-
 var ReactDOMEmptyComponent = function(instantiate) {
@@ -21,6 +20,6 @@ var ReactDOMEmptyComponent = function(instantiate) {
   // ReactDOMComponentTree uses these:
-  this._nativeNode = null;
-  this._nativeParent = null;
-  this._nativeContainerInfo = null;
-  this._domID = null;
+  this._hostNode = null;
+  this._hostParent = null;
+  this._hostContainerInfo = null;
+  this._domID = 0;
 };
@@ -29,10 +28,10 @@ Object.assign(ReactDOMEmptyComponent.prototype, {
     transaction,
-    nativeParent,
-    nativeContainerInfo,
-    context
+    hostParent,
+    hostContainerInfo,
+    context,
   ) {
-    var domID = nativeContainerInfo._idCounter++;
+    var domID = hostContainerInfo._idCounter++;
     this._domID = domID;
-    this._nativeParent = nativeParent;
-    this._nativeContainerInfo = nativeContainerInfo;
+    this._hostParent = hostParent;
+    this._hostContainerInfo = hostContainerInfo;
 
@@ -40,3 +39,3 @@ Object.assign(ReactDOMEmptyComponent.prototype, {
     if (transaction.useCreateElement) {
-      var ownerDocument = nativeContainerInfo._ownerDocument;
+      var ownerDocument = hostContainerInfo._ownerDocument;
       var node = ownerDocument.createComment(nodeValue);
@@ -54,5 +53,4 @@ Object.assign(ReactDOMEmptyComponent.prototype, {
   },
-  receiveComponent: function() {
-  },
-  getNativeNode: function() {
+  receiveComponent: function() {},
+  getHostNode: function() {
     return ReactDOMComponentTree.getNodeFromInstance(this);
diff --git a/src/renderers/dom/shared/ReactDOMFeatureFlags.js b/src/renderers/dom/shared/ReactDOMFeatureFlags.js
index f27e85419..5e9d93267 100644
--- a/src/renderers/dom/shared/ReactDOMFeatureFlags.js
+++ b/src/renderers/dom/shared/ReactDOMFeatureFlags.js
@@ -15,2 +15,3 @@ var ReactDOMFeatureFlags = {
   useCreateElement: true,
+  useFiber: false,
 };
diff --git a/src/renderers/dom/shared/ReactDOMTextComponent.js b/src/renderers/dom/shared/ReactDOMTextComponent.js
index 9a69c7f97..c305207a9 100644
--- a/src/renderers/dom/shared/ReactDOMTextComponent.js
+++ b/src/renderers/dom/shared/ReactDOMTextComponent.js
@@ -16,3 +16,2 @@ var DOMLazyTree = require('DOMLazyTree');
 var ReactDOMComponentTree = require('ReactDOMComponentTree');
-var ReactPerf = require('ReactPerf');
 
@@ -42,7 +41,7 @@ var ReactDOMTextComponent = function(text) {
   // ReactDOMComponentTree uses these:
-  this._nativeNode = null;
-  this._nativeParent = null;
+  this._hostNode = null;
+  this._hostParent = null;
 
   // Properties
-  this._domID = null;
+  this._domID = 0;
   this._mountIndex = 0;
@@ -53,3 +52,2 @@ var ReactDOMTextComponent = function(text) {
 Object.assign(ReactDOMTextComponent.prototype, {
-
   /**
@@ -64,5 +62,5 @@ Object.assign(ReactDOMTextComponent.prototype, {
     transaction,
-    nativeParent,
-    nativeContainerInfo,
-    context
+    hostParent,
+    hostContainerInfo,
+    context,
   ) {
@@ -70,6 +68,6 @@ Object.assign(ReactDOMTextComponent.prototype, {
       var parentInfo;
-      if (nativeParent != null) {
-        parentInfo = nativeParent._ancestorInfo;
-      } else if (nativeContainerInfo != null) {
-        parentInfo = nativeContainerInfo._ancestorInfo;
+      if (hostParent != null) {
+        parentInfo = hostParent._ancestorInfo;
+      } else if (hostContainerInfo != null) {
+        parentInfo = hostContainerInfo._ancestorInfo;
       }
@@ -78,3 +76,3 @@ Object.assign(ReactDOMTextComponent.prototype, {
         // component when server rendering
-        validateDOMNesting('#text', this, parentInfo);
+        validateDOMNesting(null, this._stringText, this, parentInfo);
       }
@@ -82,3 +80,3 @@ Object.assign(ReactDOMTextComponent.prototype, {
 
-    var domID = nativeContainerInfo._idCounter++;
+    var domID = hostContainerInfo._idCounter++;
     var openingValue = ' react-text: ' + domID + ' ';
@@ -86,5 +84,5 @@ Object.assign(ReactDOMTextComponent.prototype, {
     this._domID = domID;
-    this._nativeParent = nativeParent;
+    this._hostParent = hostParent;
     if (transaction.useCreateElement) {
-      var ownerDocument = nativeContainerInfo._ownerDocument;
+      var ownerDocument = hostContainerInfo._ownerDocument;
       var openingComment = ownerDocument.createComment(openingValue);
@@ -96,3 +94,3 @@ Object.assign(ReactDOMTextComponent.prototype, {
           lazyTree,
-          DOMLazyTree(ownerDocument.createTextNode(this._stringText))
+          DOMLazyTree(ownerDocument.createTextNode(this._stringText)),
         );
@@ -114,4 +112,9 @@ Object.assign(ReactDOMTextComponent.prototype, {
       return (
-        '<!--' + openingValue + '-->' + escapedText +
-        '<!--' + closingValue + '-->'
+        '<!--' +
+        openingValue +
+        '-->' +
+        escapedText +
+        '<!--' +
+        closingValue +
+        '-->'
       );
@@ -136,3 +139,3 @@ Object.assign(ReactDOMTextComponent.prototype, {
         this._stringText = nextStringText;
-        var commentNodes = this.getNativeNode();
+        var commentNodes = this.getHostNode();
         DOMChildrenOperations.replaceDelimitedText(
@@ -140,3 +143,3 @@ Object.assign(ReactDOMTextComponent.prototype, {
           commentNodes[1],
-          nextStringText
+          nextStringText,
         );
@@ -146,6 +149,6 @@ Object.assign(ReactDOMTextComponent.prototype, {
 
-  getNativeNode: function() {
-    var nativeNode = this._commentNodes;
-    if (nativeNode) {
-      return nativeNode;
+  getHostNode: function() {
+    var hostNode = this._commentNodes;
+    if (hostNode) {
+      return hostNode;
     }
@@ -158,3 +161,3 @@ Object.assign(ReactDOMTextComponent.prototype, {
           'Missing closing comment for text component %s',
-          this._domID
+          this._domID,
         );
@@ -167,5 +170,5 @@ Object.assign(ReactDOMTextComponent.prototype, {
     }
-    nativeNode = [this._nativeNode, this._closingComment];
-    this._commentNodes = nativeNode;
-    return nativeNode;
+    hostNode = [this._hostNode, this._closingComment];
+    this._commentNodes = hostNode;
+    return hostNode;
   },
@@ -177,14 +180,4 @@ Object.assign(ReactDOMTextComponent.prototype, {
   },
-
 });
 
-ReactPerf.measureMethods(
-  ReactDOMTextComponent.prototype,
-  'ReactDOMTextComponent',
-  {
-    mountComponent: 'mountComponent',
-    receiveComponent: 'receiveComponent',
-  }
-);
-
 module.exports = ReactDOMTextComponent;
diff --git a/src/renderers/dom/shared/ReactDefaultInjection.js b/src/renderers/dom/shared/ReactDefaultInjection.js
index 09cbf25e4..277052c25 100644
--- a/src/renderers/dom/shared/ReactDefaultInjection.js
+++ b/src/renderers/dom/shared/ReactDefaultInjection.js
@@ -13,2 +13,3 @@
 
+var ARIADOMPropertyConfig = require('ARIADOMPropertyConfig');
 var BeforeInputEventPlugin = require('BeforeInputEventPlugin');
@@ -17,6 +18,4 @@ var DefaultEventPluginOrder = require('DefaultEventPluginOrder');
 var EnterLeaveEventPlugin = require('EnterLeaveEventPlugin');
-var ExecutionEnvironment = require('ExecutionEnvironment');
 var HTMLDOMPropertyConfig = require('HTMLDOMPropertyConfig');
-var ReactComponentBrowserEnvironment =
-  require('ReactComponentBrowserEnvironment');
+var ReactComponentBrowserEnvironment = require('ReactComponentBrowserEnvironment');
 var ReactDOMComponent = require('ReactDOMComponent');
@@ -45,5 +44,3 @@ function inject() {
 
-  ReactInjection.EventEmitter.injectReactEventListener(
-    ReactEventListener
-  );
+  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
 
@@ -68,10 +65,7 @@ function inject() {
 
-  ReactInjection.NativeComponent.injectGenericComponentClass(
-    ReactDOMComponent
-  );
+  ReactInjection.HostComponent.injectGenericComponentClass(ReactDOMComponent);
 
-  ReactInjection.NativeComponent.injectTextComponentClass(
-    ReactDOMTextComponent
-  );
+  ReactInjection.HostComponent.injectTextComponentClass(ReactDOMTextComponent);
 
+  ReactInjection.DOMProperty.injectDOMPropertyConfig(ARIADOMPropertyConfig);
   ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
@@ -79,24 +73,12 @@ function inject() {
 
-  ReactInjection.EmptyComponent.injectEmptyComponentFactory(
-    function(instantiate) {
-      return new ReactDOMEmptyComponent(instantiate);
-    }
-  );
+  ReactInjection.EmptyComponent.injectEmptyComponentFactory(function(
+    instantiate,
+  ) {
+    return new ReactDOMEmptyComponent(instantiate);
+  });
 
-  ReactInjection.Updates.injectReconcileTransaction(
-    ReactReconcileTransaction
-  );
-  ReactInjection.Updates.injectBatchingStrategy(
-    ReactDefaultBatchingStrategy
-  );
+  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
+  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
 
   ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
-
-  if (__DEV__) {
-    var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
-    if ((/[?&]react_perf\b/).test(url)) {
-      var ReactDefaultPerf = require('ReactDefaultPerf');
-      ReactDefaultPerf.start();
-    }
-  }
 }
diff --git a/src/renderers/dom/shared/ReactInjection.js b/src/renderers/dom/shared/ReactInjection.js
index 26085eb2f..25ef6325b 100644
--- a/src/renderers/dom/shared/ReactInjection.js
+++ b/src/renderers/dom/shared/ReactInjection.js
@@ -17,7 +17,5 @@ var EventPluginUtils = require('EventPluginUtils');
 var ReactComponentEnvironment = require('ReactComponentEnvironment');
-var ReactClass = require('ReactClass');
 var ReactEmptyComponent = require('ReactEmptyComponent');
 var ReactBrowserEventEmitter = require('ReactBrowserEventEmitter');
-var ReactNativeComponent = require('ReactNativeComponent');
-var ReactPerf = require('ReactPerf');
+var ReactHostComponent = require('ReactHostComponent');
 var ReactUpdates = require('ReactUpdates');
@@ -26,3 +24,2 @@ var ReactInjection = {
   Component: ReactComponentEnvironment.injection,
-  Class: ReactClass.injection,
   DOMProperty: DOMProperty.injection,
@@ -32,4 +29,3 @@ var ReactInjection = {
   EventEmitter: ReactBrowserEventEmitter.injection,
-  NativeComponent: ReactNativeComponent.injection,
-  Perf: ReactPerf.injection,
+  HostComponent: ReactHostComponent.injection,
   Updates: ReactUpdates.injection,
diff --git a/src/renderers/dom/shared/SVGDOMPropertyConfig.js b/src/renderers/dom/shared/SVGDOMPropertyConfig.js
index 0711446e9..dbb9da3be 100644
--- a/src/renderers/dom/shared/SVGDOMPropertyConfig.js
+++ b/src/renderers/dom/shared/SVGDOMPropertyConfig.js
@@ -265,2 +265,4 @@ var ATTRS = {
   xmlBase: 'xml:base',
+  xmlns: 0,
+  xmlnsXlink: 'xmlns:xlink',
   xmlLang: 'xml:lang',
@@ -292,3 +294,3 @@ var SVGDOMPropertyConfig = {
 
-Object.keys(ATTRS).map((key) => {
+Object.keys(ATTRS).forEach(key => {
   SVGDOMPropertyConfig.Properties[key] = 0;
diff --git a/src/renderers/dom/shared/__tests__/CSSProperty-test.js b/src/renderers/dom/shared/__tests__/CSSProperty-test.js
index 26b8f09af..711a9c387 100644
--- a/src/renderers/dom/shared/__tests__/CSSProperty-test.js
+++ b/src/renderers/dom/shared/__tests__/CSSProperty-test.js
@@ -13,6 +13,6 @@
 
-describe('CSSProperty', function() {
+describe('CSSProperty', () => {
   var CSSProperty;
 
-  beforeEach(function() {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -21,3 +21,3 @@ describe('CSSProperty', function() {
 
-  it('should generate browser prefixes for its `isUnitlessNumber`', function() {
+  it('should generate browser prefixes for its `isUnitlessNumber`', () => {
     expect(CSSProperty.isUnitlessNumber.lineClamp).toBeTruthy();
@@ -27,5 +27,10 @@ describe('CSSProperty', function() {
     expect(CSSProperty.isUnitlessNumber.msGridRow).toBeTruthy();
+    expect(CSSProperty.isUnitlessNumber.msGridRowEnd).toBeTruthy();
+    expect(CSSProperty.isUnitlessNumber.msGridRowSpan).toBeTruthy();
+    expect(CSSProperty.isUnitlessNumber.msGridRowStart).toBeTruthy();
     expect(CSSProperty.isUnitlessNumber.msGridColumn).toBeTruthy();
+    expect(CSSProperty.isUnitlessNumber.msGridColumnEnd).toBeTruthy();
+    expect(CSSProperty.isUnitlessNumber.msGridColumnSpan).toBeTruthy();
+    expect(CSSProperty.isUnitlessNumber.msGridColumnStart).toBeTruthy();
   });
-
 });
diff --git a/src/renderers/dom/shared/__tests__/CSSPropertyOperations-test.js b/src/renderers/dom/shared/__tests__/CSSPropertyOperations-test.js
index d33d2e6b1..21029d00c 100644
--- a/src/renderers/dom/shared/__tests__/CSSPropertyOperations-test.js
+++ b/src/renderers/dom/shared/__tests__/CSSPropertyOperations-test.js
@@ -17,6 +17,6 @@ var ReactDOMServer = require('ReactDOMServer');
 
-describe('CSSPropertyOperations', function() {
+describe('CSSPropertyOperations', () => {
   var CSSPropertyOperations;
 
-  beforeEach(function() {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -25,48 +25,60 @@ describe('CSSPropertyOperations', function() {
 
-  it('should create markup for simple styles', function() {
-    expect(CSSPropertyOperations.createMarkupForStyles({
-      backgroundColor: '#3b5998',
-      display: 'none',
-    })).toBe('background-color:#3b5998;display:none;');
+  it('should create markup for simple styles', () => {
+    expect(
+      CSSPropertyOperations.createMarkupForStyles({
+        backgroundColor: '#3b5998',
+        display: 'none',
+      }),
+    ).toBe('background-color:#3b5998;display:none;');
   });
 
-  it('should ignore undefined styles', function() {
-    expect(CSSPropertyOperations.createMarkupForStyles({
-      backgroundColor: undefined,
-      display: 'none',
-    })).toBe('display:none;');
+  it('should ignore undefined styles', () => {
+    expect(
+      CSSPropertyOperations.createMarkupForStyles({
+        backgroundColor: undefined,
+        display: 'none',
+      }),
+    ).toBe('display:none;');
   });
 
-  it('should ignore null styles', function() {
-    expect(CSSPropertyOperations.createMarkupForStyles({
-      backgroundColor: null,
-      display: 'none',
-    })).toBe('display:none;');
+  it('should ignore null styles', () => {
+    expect(
+      CSSPropertyOperations.createMarkupForStyles({
+        backgroundColor: null,
+        display: 'none',
+      }),
+    ).toBe('display:none;');
   });
 
-  it('should return null for no styles', function() {
-    expect(CSSPropertyOperations.createMarkupForStyles({
-      backgroundColor: null,
-      display: null,
-    })).toBe(null);
+  it('should return null for no styles', () => {
+    expect(
+      CSSPropertyOperations.createMarkupForStyles({
+        backgroundColor: null,
+        display: null,
+      }),
+    ).toBe(null);
   });
 
-  it('should automatically append `px` to relevant styles', function() {
-    expect(CSSPropertyOperations.createMarkupForStyles({
-      left: 0,
-      margin: 16,
-      opacity: 0.5,
-      padding: '4px',
-    })).toBe('left:0;margin:16px;opacity:0.5;padding:4px;');
+  it('should automatically append `px` to relevant styles', () => {
+    expect(
+      CSSPropertyOperations.createMarkupForStyles({
+        left: 0,
+        margin: 16,
+        opacity: 0.5,
+        padding: '4px',
+      }),
+    ).toBe('left:0;margin:16px;opacity:0.5;padding:4px;');
   });
 
-  it('should trim values so `px` will be appended correctly', function() {
-    expect(CSSPropertyOperations.createMarkupForStyles({
-      margin: '16 ',
-      opacity: 0.5,
-      padding: ' 4 ',
-    })).toBe('margin:16px;opacity:0.5;padding:4px;');
+  it('should trim values so `px` will be appended correctly', () => {
+    expect(
+      CSSPropertyOperations.createMarkupForStyles({
+        margin: '16 ',
+        opacity: 0.5,
+        padding: ' 4 ',
+      }),
+    ).toBe('margin:16px;opacity:0.5;padding:4px;');
   });
 
-  it('should not append `px` to styles that might need a number', function() {
+  it('should not append `px` to styles that might need a number', () => {
     var CSSProperty = require('CSSProperty');
@@ -76,4 +88,5 @@ describe('CSSPropertyOperations', function() {
       styles[property] = 1;
-      expect(CSSPropertyOperations.createMarkupForStyles(styles))
-        .toMatch(/:1;$/);
+      expect(CSSPropertyOperations.createMarkupForStyles(styles)).toMatch(
+        /:1;$/,
+      );
     });
@@ -81,10 +94,20 @@ describe('CSSPropertyOperations', function() {
 
-  it('should create vendor-prefixed markup correctly', function() {
-    expect(CSSPropertyOperations.createMarkupForStyles({
-      msTransition: 'none',
-      MozTransition: 'none',
-    })).toBe('-ms-transition:none;-moz-transition:none;');
+  it('should create vendor-prefixed markup correctly', () => {
+    expect(
+      CSSPropertyOperations.createMarkupForStyles({
+        msTransition: 'none',
+        MozTransition: 'none',
+      }),
+    ).toBe('-ms-transition:none;-moz-transition:none;');
+  });
+
+  it('should create markup with unitless css custom property', () => {
+    expect(
+      CSSPropertyOperations.createMarkupForStyles({
+        '--foo': 5,
+      }),
+    ).toBe('--foo:5;');
   });
 
-  it('should set style attribute when styles exist', function() {
+  it('should set style attribute when styles exist', () => {
     var styles = {
@@ -99,3 +122,3 @@ describe('CSSPropertyOperations', function() {
 
-  it('should not set style attribute when no styles exist', function() {
+  it('should not set style attribute when no styles exist', () => {
     var styles = {
@@ -109,9 +132,11 @@ describe('CSSPropertyOperations', function() {
 
-  it('should warn when using hyphenated style names', function() {
-    var Comp = React.createClass({
-      displayName: 'Comp',
-      render: function() {
-        return <div style={{ 'background-color': 'crimson' }}/>;
-      },
-    });
+  it('should warn when using hyphenated style names', () => {
+    class Comp extends React.Component {
+      static displayName = 'Comp';
+
+      render() {
+        return <div style={{'background-color': 'crimson'}} />;
+      }
+    }
+
     spyOn(console, 'error');
@@ -119,6 +144,6 @@ describe('CSSPropertyOperations', function() {
     ReactDOM.render(<Comp />, root);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toEqual(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toEqual(
       'Warning: Unsupported style property background-color. Did you mean backgroundColor? ' +
-      'Check the render method of `Comp`.'
+        'Check the render method of `Comp`.',
     );
@@ -126,9 +151,11 @@ describe('CSSPropertyOperations', function() {
 
-  it('should warn when updating hyphenated style names', function() {
-    var Comp = React.createClass({
-      displayName: 'Comp',
-      render: function() {
+  it('should warn when updating hyphenated style names', () => {
+    class Comp extends React.Component {
+      static displayName = 'Comp';
+
+      render() {
         return <div style={this.props.style} />;
-      },
-    });
+      }
+    }
+
     spyOn(console, 'error');
@@ -142,10 +169,10 @@ describe('CSSPropertyOperations', function() {
 
-    expect(console.error.argsForCall.length).toBe(2);
-    expect(console.error.argsForCall[0][0]).toEqual(
+    expect(console.error.calls.count()).toBe(2);
+    expect(console.error.calls.argsFor(0)[0]).toEqual(
       'Warning: Unsupported style property -ms-transform. Did you mean msTransform? ' +
-      'Check the render method of `Comp`.'
+        'Check the render method of `Comp`.',
     );
-    expect(console.error.argsForCall[1][0]).toEqual(
+    expect(console.error.calls.argsFor(1)[0]).toEqual(
       'Warning: Unsupported style property -webkit-transform. Did you mean WebkitTransform? ' +
-      'Check the render method of `Comp`.'
+        'Check the render method of `Comp`.',
     );
@@ -153,13 +180,19 @@ describe('CSSPropertyOperations', function() {
 
-  it('warns when miscapitalizing vendored style names', function() {
-    var Comp = React.createClass({
-      displayName: 'Comp',
-      render: function() {
-        return (<div style={{
-          msTransform: 'translate3d(0, 0, 0)',
-          oTransform: 'translate3d(0, 0, 0)',
-          webkitTransform: 'translate3d(0, 0, 0)',
-        }} />);
-      },
-    });
+  it('warns when miscapitalizing vendored style names', () => {
+    class Comp extends React.Component {
+      static displayName = 'Comp';
+
+      render() {
+        return (
+          <div
+            style={{
+              msTransform: 'translate3d(0, 0, 0)',
+              oTransform: 'translate3d(0, 0, 0)',
+              webkitTransform: 'translate3d(0, 0, 0)',
+            }}
+          />
+        );
+      }
+    }
+
     spyOn(console, 'error');
@@ -168,10 +201,10 @@ describe('CSSPropertyOperations', function() {
     // msTransform is correct already and shouldn't warn
-    expect(console.error.argsForCall.length).toBe(2);
-    expect(console.error.argsForCall[0][0]).toEqual(
+    expect(console.error.calls.count()).toBe(2);
+    expect(console.error.calls.argsFor(0)[0]).toEqual(
       'Warning: Unsupported vendor-prefixed style property oTransform. ' +
-      'Did you mean OTransform? Check the render method of `Comp`.'
+        'Did you mean OTransform? Check the render method of `Comp`.',
     );
-    expect(console.error.argsForCall[1][0]).toEqual(
+    expect(console.error.calls.argsFor(1)[0]).toEqual(
       'Warning: Unsupported vendor-prefixed style property webkitTransform. ' +
-      'Did you mean WebkitTransform? Check the render method of `Comp`.'
+        'Did you mean WebkitTransform? Check the render method of `Comp`.',
     );
@@ -179,14 +212,20 @@ describe('CSSPropertyOperations', function() {
 
-  it('should warn about style having a trailing semicolon', function() {
-    var Comp = React.createClass({
-      displayName: 'Comp',
-      render: function() {
-        return (<div style={{
-          fontFamily: 'Helvetica, arial',
-          backgroundImage: 'url(foo;bar)',
-          backgroundColor: 'blue;',
-          color: 'red;   ',
-        }} />);
-      },
-    });
+  it('should warn about style having a trailing semicolon', () => {
+    class Comp extends React.Component {
+      static displayName = 'Comp';
+
+      render() {
+        return (
+          <div
+            style={{
+              fontFamily: 'Helvetica, arial',
+              backgroundImage: 'url(foo;bar)',
+              backgroundColor: 'blue;',
+              color: 'red;   ',
+            }}
+          />
+        );
+      }
+    }
+
     spyOn(console, 'error');
@@ -194,10 +233,10 @@ describe('CSSPropertyOperations', function() {
     ReactDOM.render(<Comp />, root);
-    expect(console.error.calls.length).toBe(2);
-    expect(console.error.argsForCall[0][0]).toEqual(
-      'Warning: Style property values shouldn\'t contain a semicolon. ' +
-      'Check the render method of `Comp`. Try "backgroundColor: blue" instead.',
+    expect(console.error.calls.count()).toBe(2);
+    expect(console.error.calls.argsFor(0)[0]).toEqual(
+      "Warning: Style property values shouldn't contain a semicolon. " +
+        'Check the render method of `Comp`. Try "backgroundColor: blue" instead.',
     );
-    expect(console.error.argsForCall[1][0]).toEqual(
-      'Warning: Style property values shouldn\'t contain a semicolon. ' +
-      'Check the render method of `Comp`. Try "color: red" instead.',
+    expect(console.error.calls.argsFor(1)[0]).toEqual(
+      "Warning: Style property values shouldn't contain a semicolon. " +
+        'Check the render method of `Comp`. Try "color: red" instead.',
     );
@@ -205,9 +244,11 @@ describe('CSSPropertyOperations', function() {
 
-  it('should warn about style containing a NaN value', function() {
-    var Comp = React.createClass({
-      displayName: 'Comp',
-      render: function() {
-        return <div style={{ fontSize: NaN }}/>;
-      },
-    });
+  it('should warn about style containing a NaN value', () => {
+    class Comp extends React.Component {
+      static displayName = 'Comp';
+
+      render() {
+        return <div style={{fontSize: NaN}} />;
+      }
+    }
+
     spyOn(console, 'error');
@@ -216,8 +257,35 @@ describe('CSSPropertyOperations', function() {
 
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toEqual(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toEqual(
       'Warning: `NaN` is an invalid value for the `fontSize` css style property. ' +
-      'Check the render method of `Comp`.'
+        'Check the render method of `Comp`.',
     );
   });
+
+  it('should not warn when setting CSS custom properties', () => {
+    class Comp extends React.Component {
+      render() {
+        return <div style={{'--foo-primary': 'red', backgroundColor: 'red'}} />;
+      }
+    }
+
+    spyOn(console, 'error');
+    var root = document.createElement('div');
+    ReactDOM.render(<Comp />, root);
+
+    expect(console.error.calls.count()).toBe(0);
+  });
+
+  it('should not add units to CSS custom properties', () => {
+    class Comp extends React.Component {
+      render() {
+        return <div style={{'--foo': 5}} />;
+      }
+    }
+
+    var root = document.createElement('div');
+    ReactDOM.render(<Comp />, root);
+
+    expect(root.children[0].style.Foo).toEqual('5');
+  });
 });
diff --git a/src/renderers/dom/shared/__tests__/DOMPropertyOperations-test.js b/src/renderers/dom/shared/__tests__/DOMPropertyOperations-test.js
index 14b72282a..9e440956e 100644
--- a/src/renderers/dom/shared/__tests__/DOMPropertyOperations-test.js
+++ b/src/renderers/dom/shared/__tests__/DOMPropertyOperations-test.js
@@ -13,7 +13,8 @@
 
-describe('DOMPropertyOperations', function() {
+describe('DOMPropertyOperations', () => {
   var DOMPropertyOperations;
   var DOMProperty;
+  var ReactDOMComponentTree;
 
-  beforeEach(function() {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -24,147 +25,106 @@ describe('DOMPropertyOperations', function() {
     DOMProperty = require('DOMProperty');
+    ReactDOMComponentTree = require('ReactDOMComponentTree');
   });
 
-  describe('createMarkupForProperty', function() {
-
-    it('should create markup for simple properties', function() {
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'name',
-        'simple'
-      )).toBe('name="simple"');
+  describe('createMarkupForProperty', () => {
+    it('should create markup for simple properties', () => {
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('name', 'simple'),
+      ).toBe('name="simple"');
 
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'name',
-        false
-      )).toBe('name="false"');
+      expect(DOMPropertyOperations.createMarkupForProperty('name', false)).toBe(
+        'name="false"',
+      );
 
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'name',
-        null
-      )).toBe('');
+      expect(DOMPropertyOperations.createMarkupForProperty('name', null)).toBe(
+        '',
+      );
     });
 
-    it('should work with the id attribute', function() {
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'id',
-        'simple'
-      )).toBe('id="simple"');
+    it('should work with the id attribute', () => {
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('id', 'simple'),
+      ).toBe('id="simple"');
     });
 
-    it('should create markup for boolean properties', function() {
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'checked',
-        'simple'
-      )).toBe('checked=""');
-
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'checked',
-        true
-      )).toBe('checked=""');
-
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'checked',
-        false
-      )).toBe('');
-
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'scoped',
-        true
-      )).toBe('scoped=""');
-    });
+    it('should create markup for boolean properties', () => {
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('checked', 'simple'),
+      ).toBe('checked=""');
+
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('checked', true),
+      ).toBe('checked=""');
 
-    it('should create markup for booleanish properties', function() {
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'download',
-        'simple'
-      )).toBe('download="simple"');
-
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'download',
-        true
-      )).toBe('download=""');
-
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'download',
-        'true'
-      )).toBe('download="true"');
-
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'download',
-        false
-      )).toBe('');
-
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'download',
-        'false'
-      )).toBe('download="false"');
-
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'download',
-        undefined
-      )).toBe('');
-
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'download',
-        null
-      )).toBe('');
-
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'download',
-        0
-      )).toBe('download="0"');
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('checked', false),
+      ).toBe('');
+
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('scoped', true),
+      ).toBe('scoped=""');
     });
 
-    it('should create markup for custom attributes', function() {
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'aria-label',
-        'simple'
-      )).toBe('aria-label="simple"');
-
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'aria-label',
-        false
-      )).toBe('aria-label="false"');
-
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'aria-label',
-        null
-      )).toBe('');
+    it('should create markup for booleanish properties', () => {
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('download', 'simple'),
+      ).toBe('download="simple"');
+
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('download', true),
+      ).toBe('download=""');
+
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('download', 'true'),
+      ).toBe('download="true"');
+
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('download', false),
+      ).toBe('');
+
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('download', 'false'),
+      ).toBe('download="false"');
+
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('download', undefined),
+      ).toBe('');
+
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('download', null),
+      ).toBe('');
+
+      expect(DOMPropertyOperations.createMarkupForProperty('download', 0)).toBe(
+        'download="0"',
+      );
     });
 
-    it('should create markup for numeric properties', function() {
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'start',
-        5
-      )).toBe('start="5"');
-
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'start',
-        0
-      )).toBe('start="0"');
-
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'size',
-        0
-      )).toBe('');
-
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'size',
-        1
-      )).toBe('size="1"');
+    it('should create markup for custom attributes', () => {
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('aria-label', 'simple'),
+      ).toBe('aria-label="simple"');
+
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('aria-label', false),
+      ).toBe('aria-label="false"');
+
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('aria-label', null),
+      ).toBe('');
     });
 
-  });
+    it('should create markup for numeric properties', () => {
+      expect(DOMPropertyOperations.createMarkupForProperty('start', 5)).toBe(
+        'start="5"',
+      );
 
-  describe('createMarkupForProperty', function() {
+      expect(DOMPropertyOperations.createMarkupForProperty('start', 0)).toBe(
+        'start="0"',
+      );
 
-    it('should allow custom properties on web components', function() {
-      expect(DOMPropertyOperations.createMarkupForCustomAttribute(
-        'awesomeness',
-        5
-      )).toBe('awesomeness="5"');
+      expect(DOMPropertyOperations.createMarkupForProperty('size', 0)).toBe('');
 
-      expect(DOMPropertyOperations.createMarkupForCustomAttribute(
-        'dev',
-        'jim'
-      )).toBe('dev="jim"');
+      expect(DOMPropertyOperations.createMarkupForProperty('size', 1)).toBe(
+        'size="1"',
+      );
     });
@@ -172,10 +132,25 @@ describe('DOMPropertyOperations', function() {
 
-  describe('setValueForProperty', function() {
+  describe('createMarkupForProperty', () => {
+    it('should allow custom properties on web components', () => {
+      expect(
+        DOMPropertyOperations.createMarkupForCustomAttribute('awesomeness', 5),
+      ).toBe('awesomeness="5"');
+
+      expect(
+        DOMPropertyOperations.createMarkupForCustomAttribute('dev', 'jim'),
+      ).toBe('dev="jim"');
+    });
+  });
+
+  describe('setValueForProperty', () => {
     var stubNode;
+    var stubInstance;
 
-    beforeEach(function() {
+    beforeEach(() => {
       stubNode = document.createElement('div');
+      stubInstance = {_debugID: 1};
+      ReactDOMComponentTree.precacheNode(stubInstance, stubNode);
     });
 
-    it('should set values as properties by default', function() {
+    it('should set values as properties by default', () => {
       DOMPropertyOperations.setValueForProperty(stubNode, 'title', 'Tip!');
@@ -184,3 +159,3 @@ describe('DOMPropertyOperations', function() {
 
-    it('should set values as attributes if necessary', function() {
+    it('should set values as attributes if necessary', () => {
       DOMPropertyOperations.setValueForProperty(stubNode, 'role', '#');
@@ -190,3 +165,3 @@ describe('DOMPropertyOperations', function() {
 
-    it('should set values as namespace attributes if necessary', function() {
+    it('should set values as namespace attributes if necessary', () => {
       spyOn(stubNode, 'setAttributeNS');
@@ -195,11 +170,18 @@ describe('DOMPropertyOperations', function() {
         'xlinkHref',
-        'about:blank'
+        'about:blank',
       );
-      expect(stubNode.setAttributeNS.argsForCall.length).toBe(1);
-      expect(stubNode.setAttributeNS.argsForCall[0])
-        .toEqual(['http://www.w3.org/1999/xlink', 'xlink:href', 'about:blank']);
+      expect(stubNode.setAttributeNS.calls.count()).toBe(1);
+      expect(stubNode.setAttributeNS.calls.argsFor(0)).toEqual([
+        'http://www.w3.org/1999/xlink',
+        'xlink:href',
+        'about:blank',
+      ]);
     });
 
-    it('should set values as boolean properties', function() {
-      DOMPropertyOperations.setValueForProperty(stubNode, 'disabled', 'disabled');
+    it('should set values as boolean properties', () => {
+      DOMPropertyOperations.setValueForProperty(
+        stubNode,
+        'disabled',
+        'disabled',
+      );
       expect(stubNode.getAttribute('disabled')).toBe('');
@@ -211,3 +193,3 @@ describe('DOMPropertyOperations', function() {
 
-    it('should convert attribute values to string first', function() {
+    it('should convert attribute values to string first', () => {
       // Browsers default to this behavior, but some test environments do not.
@@ -223,4 +205,6 @@ describe('DOMPropertyOperations', function() {
 
-    it('should not remove empty attributes for special properties', function() {
+    it('should not remove empty attributes for special properties', () => {
       stubNode = document.createElement('input');
+      ReactDOMComponentTree.precacheNode(stubInstance, stubNode);
+
       DOMPropertyOperations.setValueForProperty(stubNode, 'value', '');
@@ -231,3 +215,3 @@ describe('DOMPropertyOperations', function() {
 
-    it('should remove for falsey boolean properties', function() {
+    it('should remove for falsey boolean properties', () => {
       DOMPropertyOperations.setValueForProperty(
@@ -235,3 +219,3 @@ describe('DOMPropertyOperations', function() {
         'allowFullScreen',
-        false
+        false,
       );
@@ -240,14 +224,6 @@ describe('DOMPropertyOperations', function() {
 
-    it('should remove when setting custom attr to null', function() {
-      DOMPropertyOperations.setValueForProperty(
-        stubNode,
-        'data-foo',
-        'bar'
-      );
+    it('should remove when setting custom attr to null', () => {
+      DOMPropertyOperations.setValueForProperty(stubNode, 'data-foo', 'bar');
       expect(stubNode.hasAttribute('data-foo')).toBe(true);
-      DOMPropertyOperations.setValueForProperty(
-        stubNode,
-        'data-foo',
-        null
-      );
+      DOMPropertyOperations.setValueForProperty(stubNode, 'data-foo', null);
       expect(stubNode.hasAttribute('data-foo')).toBe(false);
@@ -255,4 +231,4 @@ describe('DOMPropertyOperations', function() {
 
-    it('should use mutation method where applicable', function() {
-      var foobarSetter = jest.genMockFn();
+    it('should use mutation method where applicable', () => {
+      var foobarSetter = jest.fn();
       // inject foobar DOM property
@@ -268,3 +244,3 @@ describe('DOMPropertyOperations', function() {
         'foobar',
-        'cows say moo'
+        'cows say moo',
       );
@@ -276,3 +252,3 @@ describe('DOMPropertyOperations', function() {
 
-    it('should set className to empty string instead of null', function() {
+    it('should set className to empty string instead of null', () => {
       DOMPropertyOperations.setValueForProperty(
@@ -280,3 +256,3 @@ describe('DOMPropertyOperations', function() {
         'className',
-        'selected'
+        'selected',
       );
@@ -284,7 +260,3 @@ describe('DOMPropertyOperations', function() {
 
-      DOMPropertyOperations.setValueForProperty(
-        stubNode,
-        'className',
-        null
-      );
+      DOMPropertyOperations.setValueForProperty(stubNode, 'className', null);
       // className should be '', not 'null' or null (which becomes 'null' in
@@ -295,15 +267,7 @@ describe('DOMPropertyOperations', function() {
 
-    it('should remove property properly for boolean properties', function() {
-      DOMPropertyOperations.setValueForProperty(
-        stubNode,
-        'hidden',
-        true
-      );
+    it('should remove property properly for boolean properties', () => {
+      DOMPropertyOperations.setValueForProperty(stubNode, 'hidden', true);
       expect(stubNode.hasAttribute('hidden')).toBe(true);
 
-      DOMPropertyOperations.setValueForProperty(
-        stubNode,
-        'hidden',
-        false
-      );
+      DOMPropertyOperations.setValueForProperty(stubNode, 'hidden', false);
       expect(stubNode.hasAttribute('hidden')).toBe(false);
@@ -311,3 +275,3 @@ describe('DOMPropertyOperations', function() {
 
-    it('should remove property properly even with different name', function() {
+    it('should remove property properly even with different name', () => {
       // Suppose 'foobar' is a property that corresponds to the underlying
@@ -324,14 +288,6 @@ describe('DOMPropertyOperations', function() {
 
-      DOMPropertyOperations.setValueForProperty(
-        stubNode,
-        'foobar',
-        'selected'
-      );
+      DOMPropertyOperations.setValueForProperty(stubNode, 'foobar', 'selected');
       expect(stubNode.className).toBe('selected');
 
-      DOMPropertyOperations.setValueForProperty(
-        stubNode,
-        'foobar',
-        null
-      );
+      DOMPropertyOperations.setValueForProperty(stubNode, 'foobar', null);
       // className should be '', not 'null' or null (which becomes 'null' in
@@ -340,13 +296,44 @@ describe('DOMPropertyOperations', function() {
     });
+  });
+
+  describe('value mutation method', function() {
+    it('should update an empty attribute to zero', function() {
+      var stubNode = document.createElement('input');
+      var stubInstance = {_debugID: 1};
+      ReactDOMComponentTree.precacheNode(stubInstance, stubNode);
+
+      stubNode.setAttribute('type', 'radio');
+
+      DOMPropertyOperations.setValueForProperty(stubNode, 'value', '');
+      spyOn(stubNode, 'setAttribute');
+      DOMPropertyOperations.setValueForProperty(stubNode, 'value', 0);
+
+      expect(stubNode.setAttribute.calls.count()).toBe(1);
+    });
+
+    it('should always assign the value attribute for non-inputs', function() {
+      var stubNode = document.createElement('progress');
+      var stubInstance = {_debugID: 1};
+      ReactDOMComponentTree.precacheNode(stubInstance, stubNode);
+
+      spyOn(stubNode, 'setAttribute');
 
+      DOMPropertyOperations.setValueForProperty(stubNode, 'value', 30);
+      DOMPropertyOperations.setValueForProperty(stubNode, 'value', '30');
+
+      expect(stubNode.setAttribute.calls.count()).toBe(2);
+    });
   });
 
-  describe('deleteValueForProperty', function() {
+  describe('deleteValueForProperty', () => {
     var stubNode;
+    var stubInstance;
 
-    beforeEach(function() {
+    beforeEach(() => {
       stubNode = document.createElement('div');
+      stubInstance = {_debugID: 1};
+      ReactDOMComponentTree.precacheNode(stubInstance, stubNode);
     });
 
-    it('should remove attributes for normal properties', function() {
+    it('should remove attributes for normal properties', () => {
       DOMPropertyOperations.setValueForProperty(stubNode, 'title', 'foo');
@@ -361,4 +348,6 @@ describe('DOMPropertyOperations', function() {
 
-    it('should not remove attributes for special properties', function() {
+    it('should not remove attributes for special properties', () => {
       stubNode = document.createElement('input');
+      ReactDOMComponentTree.precacheNode(stubInstance, stubNode);
+
       stubNode.setAttribute('value', 'foo');
@@ -371,4 +360,6 @@ describe('DOMPropertyOperations', function() {
 
-    it('should not leave all options selected when deleting multiple', function() {
+    it('should not leave all options selected when deleting multiple', () => {
       stubNode = document.createElement('select');
+      ReactDOMComponentTree.precacheNode(stubInstance, stubNode);
+
       stubNode.multiple = true;
@@ -383,6 +374,5 @@ describe('DOMPropertyOperations', function() {
 
-      expect(
-        stubNode.options[0].selected &&
-        stubNode.options[1].selected
-      ).toBe(false);
+      expect(stubNode.options[0].selected && stubNode.options[1].selected).toBe(
+        false,
+      );
     });
@@ -390,15 +380,13 @@ describe('DOMPropertyOperations', function() {
 
-  describe('injectDOMPropertyConfig', function() {
-    it('should support custom attributes', function() {
+  describe('injectDOMPropertyConfig', () => {
+    it('should support custom attributes', () => {
       // foobar does not exist yet
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'foobar',
-        'simple'
-      )).toBe(null);
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('foobar', 'simple'),
+      ).toBe(null);
 
       // foo-* does not exist yet
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'foo-xyz',
-        'simple'
-      )).toBe(null);
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('foo-xyz', 'simple'),
+      ).toBe(null);
 
@@ -413,22 +401,18 @@ describe('DOMPropertyOperations', function() {
       // Ensure old attributes still work
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'name',
-        'simple'
-      )).toBe('name="simple"');
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'data-name',
-        'simple'
-      )).toBe('data-name="simple"');
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('name', 'simple'),
+      ).toBe('name="simple"');
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('data-name', 'simple'),
+      ).toBe('data-name="simple"');
 
       // foobar should work
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'foobar',
-        'simple'
-      )).toBe('foobar="simple"');
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('foobar', 'simple'),
+      ).toBe('foobar="simple"');
 
       // foo-* should work
-      expect(DOMPropertyOperations.createMarkupForProperty(
-        'foo-xyz',
-        'simple'
-      )).toBe('foo-xyz="simple"');
+      expect(
+        DOMPropertyOperations.createMarkupForProperty('foo-xyz', 'simple'),
+      ).toBe('foo-xyz="simple"');
 
@@ -436,5 +420,5 @@ describe('DOMPropertyOperations', function() {
       expect(function() {
-        DOMProperty.injection.injectDOMPropertyConfig(
-          {Properties: {foobar: null}}
-        );
+        DOMProperty.injection.injectDOMPropertyConfig({
+          Properties: {foobar: null},
+        });
       }).toThrow();
diff --git a/src/renderers/dom/shared/__tests__/Danger-test.js b/src/renderers/dom/shared/__tests__/Danger-test.js
deleted file mode 100644
index 97149d1d1..000000000
--- a/src/renderers/dom/shared/__tests__/Danger-test.js
+++ /dev/null
@@ -1,101 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
- */
-
-'use strict';
-
-describe('Danger', function() {
-
-  describe('dangerouslyRenderMarkup', function() {
-    var Danger;
-
-    beforeEach(function() {
-      jest.resetModuleRegistry();
-      Danger = require('Danger');
-    });
-
-    it('should render markup', function() {
-      var markup = '<div data-reactid=".rX"></div>';
-      var output = Danger.dangerouslyRenderMarkup([markup])[0];
-
-      expect(output.nodeName).toBe('DIV');
-    });
-
-    it('should render markup with props', function() {
-      var markup = '<div class="foo" data-reactid=".rX"></div>';
-      var output = Danger.dangerouslyRenderMarkup([markup])[0];
-
-      expect(output.nodeName).toBe('DIV');
-      expect(output.className).toBe('foo');
-    });
-
-    it('should render wrapped markup', function() {
-      var markup = '<th data-reactid=".rX"></th>';
-      var output = Danger.dangerouslyRenderMarkup([markup])[0];
-
-      expect(output.nodeName).toBe('TH');
-    });
-
-    it('should render lists of markup with similar `nodeName`', function() {
-      var renderedMarkup = Danger.dangerouslyRenderMarkup(
-        ['<p id="A">1</p>', '<p id="B">2</p>', '<p id="C">3</p>']
-      );
-
-      expect(renderedMarkup.length).toBe(3);
-
-      expect(renderedMarkup[0].nodeName).toBe('P');
-      expect(renderedMarkup[1].nodeName).toBe('P');
-      expect(renderedMarkup[2].nodeName).toBe('P');
-
-      expect(renderedMarkup[0].innerHTML).toBe('1');
-      expect(renderedMarkup[1].innerHTML).toBe('2');
-      expect(renderedMarkup[2].innerHTML).toBe('3');
-    });
-
-    it('should render lists of markup with different `nodeName`', function() {
-      var renderedMarkup = Danger.dangerouslyRenderMarkup(
-        ['<p id="A">1</p>', '<td id="B">2</td>', '<p id="C">3</p>']
-      );
-
-      expect(renderedMarkup.length).toBe(3);
-
-      expect(renderedMarkup[0].nodeName).toBe('P');
-      expect(renderedMarkup[1].nodeName).toBe('TD');
-      expect(renderedMarkup[2].nodeName).toBe('P');
-
-      expect(renderedMarkup[0].innerHTML).toBe('1');
-      expect(renderedMarkup[1].innerHTML).toBe('2');
-      expect(renderedMarkup[2].innerHTML).toBe('3');
-    });
-
-    it('should throw when rendering invalid markup', function() {
-      expect(function() {
-        Danger.dangerouslyRenderMarkup(['']);
-      }).toThrow(
-        'dangerouslyRenderMarkup(...): Missing markup.'
-      );
-
-      spyOn(console, 'error');
-
-      var renderedMarkup = Danger.dangerouslyRenderMarkup(['<p></p><p></p>']);
-      var args = console.error.argsForCall[0];
-
-      expect(renderedMarkup.length).toBe(1);
-      expect(renderedMarkup[0].nodeName).toBe('P');
-
-      expect(console.error.argsForCall.length).toBe(1);
-
-      expect(args.length).toBe(2);
-      expect(args[0]).toBe('Danger: Discarding unexpected node:');
-      expect(args[1].nodeName).toBe('P');
-    });
-  });
-
-});
diff --git a/src/renderers/dom/shared/__tests__/ReactDOMComponent-test.js b/src/renderers/dom/shared/__tests__/ReactDOMComponent-test.js
index 7bc84cf5e..1cf818de2 100644
--- a/src/renderers/dom/shared/__tests__/ReactDOMComponent-test.js
+++ b/src/renderers/dom/shared/__tests__/ReactDOMComponent-test.js
@@ -13,4 +13,3 @@
 
-
-describe('ReactDOMComponent', function() {
+describe('ReactDOMComponent', () => {
   var React;
@@ -19,15 +18,21 @@ describe('ReactDOMComponent', function() {
   var ReactDOMServer;
+  var inputValueTracking;
+
+  function normalizeCodeLocInfo(str) {
+    return str.replace(/\(at .+?:\d+\)/g, '(at **)');
+  }
 
-  beforeEach(function() {
+  beforeEach(() => {
     jest.resetModuleRegistry();
     React = require('React');
-    ReactDOMFeatureFlags = require('ReactDOMFeatureFlags')
     ReactDOM = require('ReactDOM');
+    ReactDOMFeatureFlags = require('ReactDOMFeatureFlags');
     ReactDOMServer = require('ReactDOMServer');
+    inputValueTracking = require('inputValueTracking');
   });
 
-  describe('updateDOM', function() {
+  describe('updateDOM', () => {
     var ReactTestUtils;
 
-    beforeEach(function() {
+    beforeEach(() => {
       ReactTestUtils = require('ReactTestUtils');
@@ -35,3 +40,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should handle className', function() {
+    it('should handle className', () => {
       var container = document.createElement('div');
@@ -47,3 +52,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should gracefully handle various style value types', function() {
+    it('should gracefully handle various style value types', () => {
       var container = document.createElement('div');
@@ -69,3 +74,3 @@ describe('ReactDOMComponent', function() {
     // TODO: (poshannessy) deprecate this pattern.
-    it('should update styles when mutating style object', function() {
+    it('should update styles when mutating style object', () => {
       // not actually used. Just to suppress the style mutation warning
@@ -108,3 +113,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should warn when mutating style', function() {
+    it('should warn when mutating style', () => {
       spyOn(console, 'error');
@@ -112,10 +117,10 @@ describe('ReactDOMComponent', function() {
       var style = {border: '1px solid black'};
-      var App = React.createClass({
-        getInitialState: function() {
-          return {style: style};
-        },
-        render: function() {
+
+      class App extends React.Component {
+        state = {style: style};
+
+        render() {
           return <div style={this.state.style}>asd</div>;
-        },
-      });
+        }
+      }
 
@@ -124,9 +129,9 @@ describe('ReactDOMComponent', function() {
       stub.setState({style: style});
-      expect(console.error.argsForCall.length).toBe(1);
-      expect(console.error.argsForCall[0][0]).toEqual(
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toEqual(
         'Warning: `div` was passed a style object that has previously been ' +
-        'mutated. Mutating `style` is deprecated. Consider cloning it ' +
-        'beforehand. Check the `render` of `App`. Previous style: ' +
-        '{border: "1px solid black"}. Mutated style: ' +
-        '{border: "1px solid black", position: "absolute"}.'
+          'mutated. Mutating `style` is deprecated. Consider cloning it ' +
+          'beforehand. Check the `render` of `App`. Previous style: ' +
+          '{border: "1px solid black"}. Mutated style: ' +
+          '{border: "1px solid black", position: "absolute"}.',
       );
@@ -138,3 +143,3 @@ describe('ReactDOMComponent', function() {
       // already warned once for the same component and owner
-      expect(console.error.argsForCall.length).toBe(1);
+      expect(console.error.calls.count()).toBe(1);
 
@@ -142,6 +147,38 @@ describe('ReactDOMComponent', function() {
       var div = document.createElement('div');
-      ReactDOM.render(<span style={style}></span>, div);
+      ReactDOM.render(<span style={style} />, div);
       style.background = 'blue';
-      ReactDOM.render(<span style={style}></span>, div);
-      expect(console.error.argsForCall.length).toBe(2);
+      ReactDOM.render(<span style={style} />, div);
+      expect(console.error.calls.count()).toBe(2);
+    });
+
+    it('should warn for unknown prop', () => {
+      spyOn(console, 'error');
+      var container = document.createElement('div');
+      ReactDOM.render(<div foo="bar" />, container);
+      expect(console.error.calls.count(0)).toBe(1);
+      expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
+        'Warning: Unknown prop `foo` on <div> tag. Remove this prop from the element. ' +
+          'For details, see https://fb.me/react-unknown-prop\n    in div (at **)',
+      );
+    });
+
+    it('should group multiple unknown prop warnings together', () => {
+      spyOn(console, 'error');
+      var container = document.createElement('div');
+      ReactDOM.render(<div foo="bar" baz="qux" />, container);
+      expect(console.error.calls.count(0)).toBe(1);
+      expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
+        'Warning: Unknown props `foo`, `baz` on <div> tag. Remove these props from the element. ' +
+          'For details, see https://fb.me/react-unknown-prop\n    in div (at **)',
+      );
+    });
+
+    it('should warn for onDblClick prop', () => {
+      spyOn(console, 'error');
+      var container = document.createElement('div');
+      ReactDOM.render(<div onDblClick={() => {}} />, container);
+      expect(console.error.calls.count(0)).toBe(1);
+      expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
+        'Warning: Unknown event handler property onDblClick. Did you mean `onDoubleClick`?\n    in div (at **)',
+      );
     });
@@ -152,20 +189,16 @@ describe('ReactDOMComponent', function() {
       var div = document.createElement('div');
-      var One = React.createClass({
-        render: function() {
-          return this.props.inline ?
-            <span style={{fontSize: '1'}} /> :
-            <div style={{fontSize: '1'}} />;
-        },
-      });
-      var Two = React.createClass({
-        render: function() {
-          return <div style={{fontSize: '1'}} />;
-        },
-      });
+      function One(props) {
+        return props.inline
+          ? <span style={{fontSize: '1'}} />
+          : <div style={{fontSize: '1'}} />;
+      }
+      function Two() {
+        return <div style={{fontSize: '1'}} />;
+      }
       ReactDOM.render(<One inline={false} />, div);
-      expect(console.error.calls.length).toBe(1);
-      expect(console.error.argsForCall[0][0]).toBe(
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toBe(
         'Warning: a `div` tag (owner: `One`) was passed a numeric string value ' +
-        'for CSS property `fontSize` (value: `1`) which will be treated ' +
-        'as a unitless number in a future version of React.'
+          'for CSS property `fontSize` (value: `1`) which will be treated ' +
+          'as a unitless number in a future version of React.',
       );
@@ -174,3 +207,3 @@ describe('ReactDOMComponent', function() {
       ReactDOM.render(<One inline={true} />, div);
-      expect(console.error.calls.length).toBe(1);
+      expect(console.error.calls.count()).toBe(1);
 
@@ -178,7 +211,7 @@ describe('ReactDOMComponent', function() {
       ReactDOM.render(<Two />, div);
-      expect(console.error.calls.length).toBe(2);
-      expect(console.error.argsForCall[1][0]).toBe(
+      expect(console.error.calls.count()).toBe(2);
+      expect(console.error.calls.argsFor(1)[0]).toBe(
         'Warning: a `div` tag (owner: `Two`) was passed a numeric string value ' +
-        'for CSS property `fontSize` (value: `1`) which will be treated ' +
-        'as a unitless number in a future version of React.'
+          'for CSS property `fontSize` (value: `1`) which will be treated ' +
+          'as a unitless number in a future version of React.',
       );
@@ -187,6 +220,19 @@ describe('ReactDOMComponent', function() {
       ReactDOM.render(<One inline={true} />, div);
-      expect(console.error.calls.length).toBe(2);
+      expect(console.error.calls.count()).toBe(2);
     });
 
-    it('should warn nicely about NaN in style', function() {
+    it('should not warn for "0" as a unitless style value', () => {
+      spyOn(console, 'error');
+
+      class Component extends React.Component {
+        render() {
+          return <div style={{margin: '0'}} />;
+        }
+      }
+
+      ReactTestUtils.renderIntoDocument(<Component />);
+      expect(console.error.calls.count()).toBe(0);
+    });
+
+    it('should warn nicely about NaN in style', () => {
       spyOn(console, 'error');
@@ -195,7 +241,7 @@ describe('ReactDOMComponent', function() {
       var div = document.createElement('div');
-      ReactDOM.render(<span style={style}></span>, div);
-      ReactDOM.render(<span style={style}></span>, div);
+      ReactDOM.render(<span style={style} />, div);
+      ReactDOM.render(<span style={style} />, div);
 
-      expect(console.error.argsForCall.length).toBe(1);
-      expect(console.error.argsForCall[0][0]).toEqual(
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toEqual(
         'Warning: `NaN` is an invalid value for the `fontSize` css style property.',
@@ -204,3 +250,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should update styles if initially null', function() {
+    it('should update styles if initially null', () => {
       var styles = null;
@@ -217,3 +263,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should update styles if updated to null multiple times', function() {
+    it('should update styles if updated to null multiple times', () => {
       var styles = null;
@@ -238,3 +284,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should skip reserved props on web components', function() {
+    it('should skip reserved props on web components', () => {
       var container = document.createElement('div');
@@ -246,3 +292,3 @@ describe('ReactDOMComponent', function() {
         />,
-        container
+        container,
       );
@@ -250,3 +296,3 @@ describe('ReactDOMComponent', function() {
       expect(
-        container.firstChild.hasAttribute('suppressContentEditableWarning')
+        container.firstChild.hasAttribute('suppressContentEditableWarning'),
       ).toBe(false);
@@ -258,3 +304,3 @@ describe('ReactDOMComponent', function() {
         />,
-        container
+        container,
       );
@@ -262,3 +308,3 @@ describe('ReactDOMComponent', function() {
       expect(
-        container.firstChild.hasAttribute('suppressContentEditableWarning')
+        container.firstChild.hasAttribute('suppressContentEditableWarning'),
       ).toBe(false);
@@ -266,3 +312,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should skip dangerouslySetInnerHTML on web components', function() {
+    it('should skip dangerouslySetInnerHTML on web components', () => {
       var container = document.createElement('div');
@@ -271,7 +317,7 @@ describe('ReactDOMComponent', function() {
         <my-component dangerouslySetInnerHTML={{__html: 'hi'}} />,
-        container
+        container,
+      );
+      expect(container.firstChild.hasAttribute('dangerouslySetInnerHTML')).toBe(
+        false,
       );
-      expect(
-        container.firstChild.hasAttribute('dangerouslySetInnerHTML')
-      ).toBe(false);
 
@@ -279,10 +325,10 @@ describe('ReactDOMComponent', function() {
         <my-component dangerouslySetInnerHTML={{__html: 'bye'}} />,
-        container
+        container,
+      );
+      expect(container.firstChild.hasAttribute('dangerouslySetInnerHTML')).toBe(
+        false,
       );
-      expect(
-        container.firstChild.hasAttribute('dangerouslySetInnerHTML')
-      ).toBe(false);
     });
 
-    it('should remove attributes', function() {
+    it('should remove attributes', () => {
       var container = document.createElement('div');
@@ -295,3 +341,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should remove properties', function() {
+    it('should remove properties', () => {
       var container = document.createElement('div');
@@ -304,3 +350,12 @@ describe('ReactDOMComponent', function() {
 
-    it('should clear a single style prop when changing `style`', function() {
+    it('should properly update custom attributes on custom elements', () => {
+      var container = document.createElement('div');
+      ReactDOM.render(<some-custom-element foo="bar" />, container);
+      ReactDOM.render(<some-custom-element bar="buzz" />, container);
+      var node = container.firstChild;
+      expect(node.hasAttribute('foo')).toBe(false);
+      expect(node.getAttribute('bar')).toBe('buzz');
+    });
+
+    it('should clear a single style prop when changing `style`', () => {
       var styles = {display: 'none', color: 'red'};
@@ -317,3 +372,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should reject attribute key injection attack on markup', function() {
+    it('should reject attribute key injection attack on markup', () => {
       spyOn(console, 'error');
@@ -324,3 +379,3 @@ describe('ReactDOMComponent', function() {
           {'blah" onclick="beevil" noise="hi': 'selected'},
-          null
+          null,
         );
@@ -328,5 +383,5 @@ describe('ReactDOMComponent', function() {
       }
-      expect(console.error.argsForCall.length).toBe(1);
-      expect(console.error.argsForCall[0][0]).toEqual(
-        'Warning: Invalid attribute name: `blah" onclick="beevil" noise="hi`'
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toEqual(
+        'Warning: Invalid attribute name: `blah" onclick="beevil" noise="hi`',
       );
@@ -334,3 +389,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should reject attribute key injection attack on update', function() {
+    it('should reject attribute key injection attack on update', () => {
       spyOn(console, 'error');
@@ -344,3 +399,3 @@ describe('ReactDOMComponent', function() {
           {'blah" onclick="beevil" noise="hi': 'selected'},
-          null
+          null,
         );
@@ -348,5 +403,5 @@ describe('ReactDOMComponent', function() {
       }
-      expect(console.error.argsForCall.length).toBe(1);
-      expect(console.error.argsForCall[0][0]).toEqual(
-        'Warning: Invalid attribute name: `blah" onclick="beevil" noise="hi`'
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toEqual(
+        'Warning: Invalid attribute name: `blah" onclick="beevil" noise="hi`',
       );
@@ -354,3 +409,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should update arbitrary attributes for tags containing dashes', function() {
+    it('should update arbitrary attributes for tags containing dashes', () => {
       var container = document.createElement('div');
@@ -366,3 +421,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should clear all the styles when removing `style`', function() {
+    it('should clear all the styles when removing `style`', () => {
       var styles = {display: 'none', color: 'red'};
@@ -378,3 +433,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should update styles when `style` changes from null to object', function() {
+    it('should update styles when `style` changes from null to object', () => {
       var container = document.createElement('div');
@@ -389,5 +444,8 @@ describe('ReactDOMComponent', function() {
 
-    it('should empty element when removing innerHTML', function() {
+    it('should empty element when removing innerHTML', () => {
       var container = document.createElement('div');
-      ReactDOM.render(<div dangerouslySetInnerHTML={{__html: ':)'}} />, container);
+      ReactDOM.render(
+        <div dangerouslySetInnerHTML={{__html: ':)'}} />,
+        container,
+      );
 
@@ -398,3 +456,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should transition from string content to innerHTML', function() {
+    it('should transition from string content to innerHTML', () => {
       var container = document.createElement('div');
@@ -405,3 +463,3 @@ describe('ReactDOMComponent', function() {
         <div dangerouslySetInnerHTML={{__html: 'goodbye'}} />,
-        container
+        container,
       );
@@ -410,3 +468,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should transition from innerHTML to string content', function() {
+    it('should transition from innerHTML to string content', () => {
       var container = document.createElement('div');
@@ -414,3 +472,3 @@ describe('ReactDOMComponent', function() {
         <div dangerouslySetInnerHTML={{__html: 'bonjour'}} />,
-        container
+        container,
       );
@@ -422,3 +480,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should transition from innerHTML to children in nested el', function() {
+    it('should transition from innerHTML to children in nested el', () => {
       var container = document.createElement('div');
@@ -426,3 +484,3 @@ describe('ReactDOMComponent', function() {
         <div><div dangerouslySetInnerHTML={{__html: 'bonjour'}} /></div>,
-        container
+        container,
       );
@@ -434,3 +492,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should transition from children to innerHTML in nested el', function() {
+    it('should transition from children to innerHTML in nested el', () => {
       var container = document.createElement('div');
@@ -441,3 +499,3 @@ describe('ReactDOMComponent', function() {
         <div><div dangerouslySetInnerHTML={{__html: 'bonjour'}} /></div>,
-        container
+        container,
       );
@@ -446,3 +504,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should not incur unnecessary DOM mutations for attributes', function() {
+    it('should not incur unnecessary DOM mutations for attributes', () => {
       var container = document.createElement('div');
@@ -452,8 +510,8 @@ describe('ReactDOMComponent', function() {
       var nodeSetAttribute = node.setAttribute;
-      node.setAttribute = jest.genMockFn();
-      node.setAttribute.mockImpl(nodeSetAttribute);
+      node.setAttribute = jest.fn();
+      node.setAttribute.mockImplementation(nodeSetAttribute);
 
       var nodeRemoveAttribute = node.removeAttribute;
-      node.removeAttribute = jest.genMockFn();
-      node.removeAttribute.mockImpl(nodeRemoveAttribute);
+      node.removeAttribute = jest.fn();
+      node.removeAttribute.mockImplementation(nodeRemoveAttribute);
 
@@ -484,3 +542,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should not incur unnecessary DOM mutations for string properties', function() {
+    it('should not incur unnecessary DOM mutations for string properties', () => {
       var container = document.createElement('div');
@@ -489,45 +547,31 @@ describe('ReactDOMComponent', function() {
       var node = container.firstChild;
-      var nodeValue = ''; // node.value always returns undefined
+
       var nodeValueSetter = jest.genMockFn();
-      Object.defineProperty(node, 'value', {
-        get: function() {
-          return nodeValue;
-        },
-        set: nodeValueSetter.mockImplementation(function(newValue) {
-          nodeValue = newValue;
-        }),
-      });
 
-      function renderWithValueAndExpect(value, expected) {
-        ReactDOM.render(<div value={value} />, container);
-        expect(nodeValueSetter.mock.calls.length).toBe(expected);
-      }
+      var oldSetAttribute = node.setAttribute.bind(node);
+      node.setAttribute = function(key, value) {
+        oldSetAttribute(key, value);
+        nodeValueSetter(key, value);
+      };
 
-      if (ReactDOMFeatureFlags.useCreateElement) {
-        renderWithValueAndExpect(undefined, 0);
-        renderWithValueAndExpect('', 1);
-        renderWithValueAndExpect('foo', 2);
-        renderWithValueAndExpect('foo', 2);
-        renderWithValueAndExpect(undefined, 3);
-        renderWithValueAndExpect(null, 3);
-        renderWithValueAndExpect('', 4);
-        renderWithValueAndExpect(undefined, 4);
-      } else {
-        renderWithValueAndExpect(undefined, 0);
-        // This differs because we will have created a node with the value
-        // attribute set. This means it will hasAttribute, so we won't try to
-        // set the value.
-        renderWithValueAndExpect('', 0);
-        renderWithValueAndExpect('foo', 1);
-        renderWithValueAndExpect('foo', 1);
-        renderWithValueAndExpect(undefined, 2);
-        renderWithValueAndExpect(null, 2);
-        // Again, much like the initial update case, we will always have the
-        // attribute set so we won't set the value.
-        renderWithValueAndExpect('', 2);
-        renderWithValueAndExpect(undefined, 2);
-      }
+      ReactDOM.render(<div value="foo" />, container);
+      expect(nodeValueSetter.mock.calls.length).toBe(1);
+
+      ReactDOM.render(<div value="foo" />, container);
+      expect(nodeValueSetter.mock.calls.length).toBe(1);
+
+      ReactDOM.render(<div />, container);
+      expect(nodeValueSetter.mock.calls.length).toBe(1);
+
+      ReactDOM.render(<div value={null} />, container);
+      expect(nodeValueSetter.mock.calls.length).toBe(1);
+
+      ReactDOM.render(<div value="" />, container);
+      expect(nodeValueSetter.mock.calls.length).toBe(2);
+
+      ReactDOM.render(<div />, container);
+      expect(nodeValueSetter.mock.calls.length).toBe(2);
     });
 
-    it('should not incur unnecessary DOM mutations for boolean properties', function() {
+    it('should not incur unnecessary DOM mutations for boolean properties', () => {
       var container = document.createElement('div');
@@ -537,3 +581,3 @@ describe('ReactDOMComponent', function() {
       var nodeValue = true;
-      var nodeValueSetter = jest.genMockFn();
+      var nodeValueSetter = jest.fn();
       Object.defineProperty(node, 'checked', {
@@ -560,5 +604,5 @@ describe('ReactDOMComponent', function() {
 
-    it('should ignore attribute whitelist for elements with the "is: attribute', function() {
+    it('should ignore attribute whitelist for elements with the "is: attribute', () => {
       var container = document.createElement('div');
-      ReactDOM.render(<button is="test" cowabunga="chevynova"/>, container);
+      ReactDOM.render(<button is="test" cowabunga="chevynova" />, container);
       expect(container.firstChild.hasAttribute('cowabunga')).toBe(true);
@@ -566,3 +610,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should not update when switching between null/undefined', function() {
+    it('should not update when switching between null/undefined', () => {
       var container = document.createElement('div');
@@ -570,3 +614,3 @@ describe('ReactDOMComponent', function() {
 
-      var setter = jest.genMockFn();
+      var setter = jest.fn();
       node.setAttribute = setter;
@@ -581,3 +625,3 @@ describe('ReactDOMComponent', function() {
 
-    it('handles multiple child updates without interference', function() {
+    it('handles multiple child updates without interference', () => {
       // This test might look like it's just testing ReactMultiChild but the
@@ -597,3 +641,3 @@ describe('ReactDOMComponent', function() {
         </div>,
-        container
+        container,
       );
@@ -609,3 +653,3 @@ describe('ReactDOMComponent', function() {
         </div>,
-        container
+        container,
       );
@@ -616,3 +660,3 @@ describe('ReactDOMComponent', function() {
 
-  describe('createOpenTagMarkup', function() {
+  describe('createOpenTagMarkup', () => {
     var genMarkup;
@@ -623,3 +667,3 @@ describe('ReactDOMComponent', function() {
 
-    beforeEach(function() {
+    beforeEach(() => {
       var ReactDefaultInjection = require('ReactDefaultInjection');
@@ -632,3 +676,3 @@ describe('ReactDOMComponent', function() {
         this._currentElement = {props: initialProps};
-        this._rootNodeID = 'test';
+        this._rootNodeID = 1;
       };
@@ -638,5 +682,5 @@ describe('ReactDOMComponent', function() {
         var transaction = new ReactReconcileTransaction();
-        return (new NodeStub(props))._createOpenTagMarkupAndPutListeners(
+        return new NodeStub(props)._createOpenTagMarkupAndPutListeners(
           transaction,
-          props
+          props,
         );
@@ -644,9 +688,16 @@ describe('ReactDOMComponent', function() {
 
-      this.addMatchers({
-        toHaveAttribute: function(attr, value) {
-          var expected = '(?:^|\\s)' + attr + '=[\\\'"]';
-          if (typeof value !== 'undefined') {
-            expected += quoteRegexp(value) + '[\\\'"]';
-          }
-          return this.actual.match(new RegExp(expected));
+      jasmine.addMatchers({
+        toHaveAttribute() {
+          return {
+            compare(actual, expected) {
+              var [attr, value] = expected;
+              var re = '(?:^|\\s)' + attr + '=[\\\'"]';
+              if (typeof value !== 'undefined') {
+                re += quoteRegexp(value) + '[\\\'"]';
+              }
+              return {
+                pass: new RegExp(re).test(actual),
+              };
+            },
+          };
         },
@@ -655,12 +706,14 @@ describe('ReactDOMComponent', function() {
 
-    it('should generate the correct markup with className', function() {
-      expect(genMarkup({className: 'a'})).toHaveAttribute('class', 'a');
-      expect(genMarkup({className: 'a b'})).toHaveAttribute('class', 'a b');
-      expect(genMarkup({className: ''})).toHaveAttribute('class', '');
+    it('should generate the correct markup with className', () => {
+      expect(genMarkup({className: 'a'})).toHaveAttribute(['class', 'a']);
+      expect(genMarkup({className: 'a b'})).toHaveAttribute(['class', 'a b']);
+      expect(genMarkup({className: ''})).toHaveAttribute(['class', '']);
     });
 
-    it('should escape style names and values', function() {
-      expect(genMarkup({
-        style: {'b&ckground': '<3'},
-      })).toHaveAttribute('style', 'b&amp;ckground:&lt;3;');
+    it('should escape style names and values', () => {
+      expect(
+        genMarkup({
+          style: {'b&ckground': '<3'},
+        }),
+      ).toHaveAttribute(['style', 'b&amp;ckground:&lt;3;']);
     });
@@ -668,3 +721,3 @@ describe('ReactDOMComponent', function() {
 
-  describe('createContentMarkup', function() {
+  describe('createContentMarkup', () => {
     var genMarkup;
@@ -675,3 +728,3 @@ describe('ReactDOMComponent', function() {
 
-    beforeEach(function() {
+    beforeEach(() => {
       var ReactDOMComponent = require('ReactDOMComponent');
@@ -681,3 +734,3 @@ describe('ReactDOMComponent', function() {
         this._currentElement = {props: initialProps};
-        this._rootNodeID = 'test';
+        this._rootNodeID = 1;
       };
@@ -687,13 +740,15 @@ describe('ReactDOMComponent', function() {
         var transaction = new ReactReconcileTransaction();
-        return (new NodeStub(props))._createContentMarkup(
-          transaction,
-          props,
-          {}
-        );
+        return new NodeStub(props)._createContentMarkup(transaction, props, {});
       };
 
-      this.addMatchers({
-        toHaveInnerhtml: function(html) {
-          var expected = '^' + quoteRegexp(html) + '$';
-          return this.actual.match(new RegExp(expected));
+      jasmine.addMatchers({
+        toHaveInnerhtml() {
+          return {
+            compare(actual, expected) {
+              var re = '^' + quoteRegexp(expected) + '$';
+              return {
+                pass: new RegExp(re).test(actual),
+              };
+            },
+          };
         },
@@ -702,7 +757,7 @@ describe('ReactDOMComponent', function() {
 
-    it('should handle dangerouslySetInnerHTML', function() {
+    it('should handle dangerouslySetInnerHTML', () => {
       var innerHTML = {__html: 'testContent'};
-      expect(
-        genMarkup({dangerouslySetInnerHTML: innerHTML})
-      ).toHaveInnerhtml('testContent');
+      expect(genMarkup({dangerouslySetInnerHTML: innerHTML})).toHaveInnerhtml(
+        'testContent',
+      );
     });
@@ -710,6 +765,6 @@ describe('ReactDOMComponent', function() {
 
-  describe('mountComponent', function() {
+  describe('mountComponent', () => {
     var mountComponent;
 
-    beforeEach(function() {
+    beforeEach(() => {
       mountComponent = function(props) {
@@ -720,9 +775,32 @@ describe('ReactDOMComponent', function() {
 
-    it('should not duplicate uppercased selfclosing tags', function() {
-      var Container = React.createClass({
-        render: function() {
+    it('should work error event on <source> element', () => {
+      spyOn(console, 'error');
+      var container = document.createElement('div');
+      ReactDOM.render(
+        <video>
+          <source
+            src="http://example.org/video"
+            type="video/mp4"
+            onError={e => console.error('onError called')}
+          />
+        </video>,
+        container,
+      );
+
+      var errorEvent = document.createEvent('Event');
+      errorEvent.initEvent('error', false, false);
+      container.getElementsByTagName('source')[0].dispatchEvent(errorEvent);
+
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toContain('onError called');
+    });
+
+    it('should not duplicate uppercased selfclosing tags', () => {
+      class Container extends React.Component {
+        render() {
           return React.createElement('BR', null);
-        },
-      });
-      var returnedValue = ReactDOMServer.renderToString(<Container/>);
+        }
+      }
+
+      var returnedValue = ReactDOMServer.renderToString(<Container />);
       expect(returnedValue).not.toContain('</BR>');
@@ -730,3 +808,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should warn against children for void elements', function() {
+    it('should warn against children for void elements', () => {
       var container = document.createElement('div');
@@ -735,5 +813,5 @@ describe('ReactDOMComponent', function() {
         ReactDOM.render(<input>children</input>, container);
-      }).toThrow(
-        'input is a void element tag and must not have `children` or ' +
-        'use `props.dangerouslySetInnerHTML`.'
+      }).toThrowError(
+        'input is a void element tag and must neither have `children` nor ' +
+          'use `dangerouslySetInnerHTML`.',
       );
@@ -741,3 +819,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should warn against dangerouslySetInnerHTML for void elements', function() {
+    it('should warn against dangerouslySetInnerHTML for void elements', () => {
       var container = document.createElement('div');
@@ -747,7 +825,7 @@ describe('ReactDOMComponent', function() {
           <input dangerouslySetInnerHTML={{__html: 'content'}} />,
-          container
+          container,
         );
-      }).toThrow(
-        'input is a void element tag and must not have `children` or use ' +
-        '`props.dangerouslySetInnerHTML`.'
+      }).toThrowError(
+        'input is a void element tag and must neither have `children` nor use ' +
+          '`dangerouslySetInnerHTML`.',
       );
@@ -755,6 +833,8 @@ describe('ReactDOMComponent', function() {
 
-    it('should treat menuitem as a void element but still create the closing tag', function() {
+    it('should treat menuitem as a void element but still create the closing tag', () => {
       var container = document.createElement('div');
 
-      var returnedValue = ReactDOMServer.renderToString(<menu><menuitem /></menu>);
+      var returnedValue = ReactDOMServer.renderToString(
+        <menu><menuitem /></menu>,
+      );
 
@@ -764,14 +844,13 @@ describe('ReactDOMComponent', function() {
         ReactDOM.render(<menu><menuitem>children</menuitem></menu>, container);
-      }).toThrow(
-        'menuitem is a void element tag and must not have `children` or use ' +
-        '`props.dangerouslySetInnerHTML`.'
+      }).toThrowError(
+        'menuitem is a void element tag and must neither have `children` nor use ' +
+          '`dangerouslySetInnerHTML`.',
       );
-
     });
 
-    it('should validate against multiple children props', function() {
+    it('should validate against multiple children props', () => {
       expect(function() {
         mountComponent({children: '', dangerouslySetInnerHTML: ''});
-      }).toThrow(
-        'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
+      }).toThrowError(
+        'Can only set one of `children` or `props.dangerouslySetInnerHTML`.',
       );
@@ -779,9 +858,8 @@ describe('ReactDOMComponent', function() {
 
-    it('should validate against use of innerHTML', function() {
-
+    it('should validate against use of innerHTML', () => {
       spyOn(console, 'error');
       mountComponent({innerHTML: '<span>Hi Jim!</span>'});
-      expect(console.error.argsForCall.length).toBe(1);
-      expect(console.error.argsForCall[0][0]).toContain(
-        'Directly setting property `innerHTML` is not permitted. '
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toContain(
+        'Directly setting property `innerHTML` is not permitted. ',
       );
@@ -789,8 +867,8 @@ describe('ReactDOMComponent', function() {
 
-    it('should validate use of dangerouslySetInnerHTML', function() {
+    it('should validate use of dangerouslySetInnerHTML', () => {
       expect(function() {
         mountComponent({dangerouslySetInnerHTML: '<span>Hi Jim!</span>'});
-      }).toThrow(
+      }).toThrowError(
         '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
-        'Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.'
+          'Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.',
       );
@@ -798,8 +876,8 @@ describe('ReactDOMComponent', function() {
 
-    it('should validate use of dangerouslySetInnerHTML', function() {
+    it('should validate use of dangerouslySetInnerHTML', () => {
       expect(function() {
-        mountComponent({dangerouslySetInnerHTML: {foo: 'bar'} });
-      }).toThrow(
+        mountComponent({dangerouslySetInnerHTML: {foo: 'bar'}});
+      }).toThrowError(
         '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' +
-        'Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.'
+          'Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.',
       );
@@ -807,5 +885,5 @@ describe('ReactDOMComponent', function() {
 
-    it('should allow {__html: null}', function() {
+    it('should allow {__html: null}', () => {
       expect(function() {
-        mountComponent({dangerouslySetInnerHTML: {__html: null} });
+        mountComponent({dangerouslySetInnerHTML: {__html: null}});
       }).not.toThrow();
@@ -813,23 +891,48 @@ describe('ReactDOMComponent', function() {
 
-    it('should warn about contentEditable and children', function() {
+    it('should warn about contentEditable and children', () => {
       spyOn(console, 'error');
       mountComponent({contentEditable: true, children: ''});
-      expect(console.error.argsForCall.length).toBe(1);
-      expect(console.error.argsForCall[0][0]).toContain('contentEditable');
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toContain('contentEditable');
     });
 
-    it('should respect suppressContentEditableWarning', function() {
+    it('should respect suppressContentEditableWarning', () => {
       spyOn(console, 'error');
-      mountComponent({contentEditable: true, children: '', suppressContentEditableWarning: true});
-      expect(console.error.argsForCall.length).toBe(0);
+      mountComponent({
+        contentEditable: true,
+        children: '',
+        suppressContentEditableWarning: true,
+      });
+      expect(console.error.calls.count()).toBe(0);
     });
 
-    it('should validate against invalid styles', function() {
+    it('should validate against invalid styles', () => {
       expect(function() {
         mountComponent({style: 'display: none'});
-      }).toThrow(
+      }).toThrowError(
         'The `style` prop expects a mapping from style properties to values, ' +
-        'not a string. For example, style={{marginRight: spacing + \'em\'}} ' +
-        'when using JSX.'
+          "not a string. For example, style={{marginRight: spacing + 'em'}} " +
+          'when using JSX.',
+      );
+    });
+
+    it('should track input values', function() {
+      var container = document.createElement('div');
+      var inst = ReactDOM.render(
+        <input type="text" defaultValue="foo" />,
+        container,
       );
+
+      var tracker = inputValueTracking._getTrackerFromNode(inst);
+
+      expect(tracker.getValue()).toEqual('foo');
+    });
+
+    it('should track textarea values', function() {
+      var container = document.createElement('div');
+      var inst = ReactDOM.render(<textarea defaultValue="foo" />, container);
+
+      var tracker = inputValueTracking._getTrackerFromNode(inst);
+
+      expect(tracker.getValue()).toEqual('foo');
     });
@@ -839,10 +942,7 @@ describe('ReactDOMComponent', function() {
 
-      SimpleEventPlugin.didPutListener = jest.genMockFn();
-      SimpleEventPlugin.willDeleteListener = jest.genMockFn();
+      SimpleEventPlugin.didPutListener = jest.fn();
+      SimpleEventPlugin.willDeleteListener = jest.fn();
 
       var container = document.createElement('div');
-      ReactDOM.render(
-        <div onClick={() => true} />,
-        container
-      );
+      ReactDOM.render(<div onClick={() => true} />, container);
 
@@ -855,7 +955,7 @@ describe('ReactDOMComponent', function() {
 
-    it('should handle null and missing properly with event hooks', function() {
+    it('should handle null and missing properly with event hooks', () => {
       var SimpleEventPlugin = require('SimpleEventPlugin');
 
-      SimpleEventPlugin.didPutListener = jest.genMockFn();
-      SimpleEventPlugin.willDeleteListener = jest.genMockFn();
+      SimpleEventPlugin.didPutListener = jest.fn();
+      SimpleEventPlugin.willDeleteListener = jest.fn();
       var container = document.createElement('div');
@@ -891,8 +991,8 @@ describe('ReactDOMComponent', function() {
 
-    it('should warn for children on void elements', function() {
-      var X = React.createClass({
-        render: function() {
+    it('should warn for children on void elements', () => {
+      class X extends React.Component {
+        render() {
           return <input>moo</input>;
-        },
-      });
+        }
+      }
 
@@ -901,13 +1001,29 @@ describe('ReactDOMComponent', function() {
         ReactDOM.render(<X />, container);
-      }).toThrow(
-        'input is a void element tag and must not have `children` ' +
-        'or use `props.dangerouslySetInnerHTML`. Check the render method of X.'
+      }).toThrowError(
+        'input is a void element tag and must neither have `children` ' +
+          'nor use `dangerouslySetInnerHTML`. Check the render method of X.',
       );
     });
+
+    it('should support custom elements which extend native elements', () => {
+      if (ReactDOMFeatureFlags.useCreateElement) {
+        var container = document.createElement('div');
+        spyOn(document, 'createElement').and.callThrough();
+        ReactDOM.render(<div is="custom-div" />, container);
+        expect(document.createElement).toHaveBeenCalledWith(
+          'div',
+          'custom-div',
+        );
+      } else {
+        expect(
+          ReactDOMServer.renderToString(<div is="custom-div" />),
+        ).toContain('is="custom-div"');
+      }
+    });
   });
 
-  describe('updateComponent', function() {
+  describe('updateComponent', () => {
     var container;
 
-    beforeEach(function() {
+    beforeEach(() => {
       container = document.createElement('div');
@@ -915,3 +1031,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should warn against children for void elements', function() {
+    it('should warn against children for void elements', () => {
       ReactDOM.render(<input />, container);
@@ -920,5 +1036,5 @@ describe('ReactDOMComponent', function() {
         ReactDOM.render(<input>children</input>, container);
-      }).toThrow(
-        'input is a void element tag and must not have `children` or use ' +
-        '`props.dangerouslySetInnerHTML`.'
+      }).toThrowError(
+        'input is a void element tag and must neither have `children` nor use ' +
+          '`dangerouslySetInnerHTML`.',
       );
@@ -926,3 +1042,3 @@ describe('ReactDOMComponent', function() {
 
-    it('should warn against dangerouslySetInnerHTML for void elements', function() {
+    it('should warn against dangerouslySetInnerHTML for void elements', () => {
       ReactDOM.render(<input />, container);
@@ -932,7 +1048,7 @@ describe('ReactDOMComponent', function() {
           <input dangerouslySetInnerHTML={{__html: 'content'}} />,
-          container
+          container,
         );
-      }).toThrow(
-        'input is a void element tag and must not have `children` or use ' +
-        '`props.dangerouslySetInnerHTML`.'
+      }).toThrowError(
+        'input is a void element tag and must neither have `children` nor use ' +
+          '`dangerouslySetInnerHTML`.',
       );
@@ -940,4 +1056,4 @@ describe('ReactDOMComponent', function() {
 
-    it('should validate against multiple children props', function() {
-      ReactDOM.render(<div></div>, container);
+    it('should validate against multiple children props', () => {
+      ReactDOM.render(<div />, container);
 
@@ -945,7 +1061,7 @@ describe('ReactDOMComponent', function() {
         ReactDOM.render(
-          <div children="" dangerouslySetInnerHTML={{__html: ''}}></div>,
-          container
+          <div children="" dangerouslySetInnerHTML={{__html: ''}} />,
+          container,
         );
-      }).toThrow(
-        'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
+      }).toThrowError(
+        'Can only set one of `children` or `props.dangerouslySetInnerHTML`.',
       );
@@ -953,21 +1069,18 @@ describe('ReactDOMComponent', function() {
 
-    it('should warn about contentEditable and children', function() {
+    it('should warn about contentEditable and children', () => {
       spyOn(console, 'error');
-      ReactDOM.render(
-        <div contentEditable={true}><div /></div>,
-        container
-      );
-      expect(console.error.argsForCall.length).toBe(1);
-      expect(console.error.argsForCall[0][0]).toContain('contentEditable');
+      ReactDOM.render(<div contentEditable={true}><div /></div>, container);
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toContain('contentEditable');
     });
 
-    it('should validate against invalid styles', function() {
-      ReactDOM.render(<div></div>, container);
+    it('should validate against invalid styles', () => {
+      ReactDOM.render(<div />, container);
 
       expect(function() {
-        ReactDOM.render(<div style={1}></div>, container);
-      }).toThrow(
+        ReactDOM.render(<div style={1} />, container);
+      }).toThrowError(
         'The `style` prop expects a mapping from style properties to values, ' +
-        'not a string. For example, style={{marginRight: spacing + \'em\'}} ' +
-        'when using JSX.'
+          "not a string. For example, style={{marginRight: spacing + 'em'}} " +
+          'when using JSX.',
       );
@@ -975,15 +1088,15 @@ describe('ReactDOMComponent', function() {
 
-    it('should report component containing invalid styles', function() {
-      var Animal = React.createClass({
-        render: function() {
-          return <div style={1}></div>;
-        },
-      });
+    it('should report component containing invalid styles', () => {
+      class Animal extends React.Component {
+        render() {
+          return <div style={1} />;
+        }
+      }
 
       expect(function() {
-        ReactDOM.render(<Animal/>, container);
-      }).toThrow(
+        ReactDOM.render(<Animal />, container);
+      }).toThrowError(
         'The `style` prop expects a mapping from style properties to values, ' +
-        'not a string. For example, style={{marginRight: spacing + \'em\'}} ' +
-        'when using JSX. This DOM node was rendered by `Animal`.'
+          "not a string. For example, style={{marginRight: spacing + 'em'}} " +
+          'when using JSX. This DOM node was rendered by `Animal`.',
       );
@@ -991,12 +1104,16 @@ describe('ReactDOMComponent', function() {
 
-    it('should properly escape text content and attributes values', function() {
+    it('should properly escape text content and attributes values', () => {
       expect(
         ReactDOMServer.renderToStaticMarkup(
-          React.DOM.div({
-            title: '\'"<>&',
-            style: {
-              textAlign: '\'"<>&',
+          React.createElement(
+            'div',
+            {
+              title: '\'"<>&',
+              style: {
+                textAlign: '\'"<>&',
+              },
             },
-          }, '\'"<>&')
-        )
+            '\'"<>&',
+          ),
+        ),
       ).toBe(
@@ -1004,3 +1121,3 @@ describe('ReactDOMComponent', function() {
           '&#x27;&quot;&lt;&gt;&amp;' +
-        '</div>'
+          '</div>',
       );
@@ -1009,4 +1126,4 @@ describe('ReactDOMComponent', function() {
 
-  describe('unmountComponent', function() {
-    it('should clean up listeners', function() {
+  describe('unmountComponent', () => {
+    it('should clean up listeners', () => {
       var EventPluginHub = require('EventPluginHub');
@@ -1023,5 +1140,3 @@ describe('ReactDOMComponent', function() {
       var inst = ReactDOMComponentTree.getInstanceFromNode(rootNode);
-      expect(
-        EventPluginHub.getListener(inst, 'onClick')
-      ).toBe(callback);
+      expect(EventPluginHub.getListener(inst, 'onClick')).toBe(callback);
       expect(rootNode).toBe(ReactDOM.findDOMNode(instance));
@@ -1030,5 +1145,30 @@ describe('ReactDOMComponent', function() {
 
-      expect(
-        EventPluginHub.getListener(inst, 'onClick')
-      ).toBe(undefined);
+      expect(EventPluginHub.getListener(inst, 'onClick')).toBe(undefined);
+    });
+
+    it('should clean up input value tracking', function() {
+      var container = document.createElement('div');
+      var node = ReactDOM.render(
+        <input type="text" defaultValue="foo" />,
+        container,
+      );
+      var tracker = inputValueTracking._getTrackerFromNode(node);
+
+      spyOn(tracker, 'stopTracking');
+
+      ReactDOM.unmountComponentAtNode(container);
+
+      expect(tracker.stopTracking.calls.count()).toBe(1);
+    });
+
+    it('should clean up input textarea tracking', function() {
+      var container = document.createElement('div');
+      var node = ReactDOM.render(<textarea defaultValue="foo" />, container);
+      var tracker = inputValueTracking._getTrackerFromNode(node);
+
+      spyOn(tracker, 'stopTracking');
+
+      ReactDOM.unmountComponentAtNode(container);
+
+      expect(tracker.stopTracking.calls.count()).toBe(1);
     });
@@ -1036,11 +1176,12 @@ describe('ReactDOMComponent', function() {
     it('unmounts children before unsetting DOM node info', function() {
-      var Inner = React.createClass({
-        render: function() {
+      class Inner extends React.Component {
+        render() {
           return <span />;
-        },
-        componentWillUnmount: function() {
+        }
+
+        componentWillUnmount() {
           // Should not throw
           expect(ReactDOM.findDOMNode(this).nodeName).toBe('SPAN');
-        },
-      });
+        }
+      }
 
@@ -1052,3 +1193,3 @@ describe('ReactDOMComponent', function() {
 
-  describe('onScroll warning', function() {
+  describe('onScroll warning', () => {
     it('should warn about the `onScroll` issue when unsupported (IE8)', () => {
@@ -1056,4 +1197,3 @@ describe('ReactDOMComponent', function() {
       // before React so it's pre-mocked before React would require it.
-      jest.resetModuleRegistry()
-        .mock('isEventSupported');
+      jest.resetModuleRegistry().mock('isEventSupported');
       var isEventSupported = require('isEventSupported');
@@ -1065,10 +1205,16 @@ describe('ReactDOMComponent', function() {
       ReactTestUtils.renderIntoDocument(<div onScroll={function() {}} />);
-      expect(console.error.calls.length).toBe(1);
-      expect(console.error.argsForCall[0][0]).toBe(
-        'Warning: This browser doesn\'t support the `onScroll` event'
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toBe(
+        "Warning: This browser doesn't support the `onScroll` event",
       );
     });
+
+    it('should not warn when server-side rendering `onScroll`', () => {
+      spyOn(console, 'error');
+      ReactDOMServer.renderToString(<div onScroll={() => {}} />);
+      expect(console.error).not.toHaveBeenCalled();
+    });
   });
 
-  describe('tag sanitization', function() {
+  describe('tag sanitization', () => {
     it('should throw when an invalid tag name is used', () => {
@@ -1076,6 +1222,4 @@ describe('ReactDOMComponent', function() {
       var hackzor = React.createElement('script tag');
-      expect(
-        () => ReactTestUtils.renderIntoDocument(hackzor)
-      ).toThrow(
-        'Invalid tag: script tag'
+      expect(() => ReactTestUtils.renderIntoDocument(hackzor)).toThrowError(
+        'Invalid tag: script tag',
       );
@@ -1086,6 +1230,4 @@ describe('ReactDOMComponent', function() {
       var hackzor = React.createElement('div><img /><div');
-      expect(
-        () => ReactTestUtils.renderIntoDocument(hackzor)
-      ).toThrow(
-        'Invalid tag: div><img /><div'
+      expect(() => ReactTestUtils.renderIntoDocument(hackzor)).toThrowError(
+        'Invalid tag: div><img /><div',
       );
@@ -1094,6 +1236,6 @@ describe('ReactDOMComponent', function() {
 
-  describe('nesting validation', function() {
+  describe('nesting validation', () => {
     var ReactTestUtils;
 
-    beforeEach(function() {
+    beforeEach(() => {
       ReactTestUtils = require('ReactTestUtils');
@@ -1105,6 +1247,6 @@ describe('ReactDOMComponent', function() {
 
-      expect(console.error.calls.length).toBe(1);
-      expect(console.error.argsForCall[0][0]).toBe(
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toBe(
         'Warning: validateDOMNesting(...): <tr> cannot appear as a child of ' +
-        '<div>. See div > tr.'
+          '<div>. See div > tr.',
       );
@@ -1117,6 +1259,6 @@ describe('ReactDOMComponent', function() {
 
-      expect(console.error.calls.length).toBe(1);
-      expect(console.error.argsForCall[0][0]).toBe(
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toBe(
         'Warning: validateDOMNesting(...): <p> cannot appear as a descendant ' +
-        'of <p>. See p > ... > p.'
+          'of <p>. See p > ... > p.',
       );
@@ -1126,23 +1268,32 @@ describe('ReactDOMComponent', function() {
       spyOn(console, 'error');
-      var Row = React.createClass({
-        render: function() {
-          return <tr />;
-        },
-      });
-      var Foo = React.createClass({
-        render: function() {
+
+      class Row extends React.Component {
+        render() {
+          return <tr>x</tr>;
+        }
+      }
+
+      class Foo extends React.Component {
+        render() {
           return <table><Row /> </table>;
-        },
-      });
+        }
+      }
+
       ReactTestUtils.renderIntoDocument(<Foo />);
 
-      expect(console.error.calls.length).toBe(2);
-      expect(console.error.argsForCall[0][0]).toBe(
+      expect(console.error.calls.count()).toBe(3);
+      expect(console.error.calls.argsFor(0)[0]).toBe(
         'Warning: validateDOMNesting(...): <tr> cannot appear as a child of ' +
-        '<table>. See Foo > table > Row > tr. Add a <tbody> to your code to ' +
-        'match the DOM tree generated by the browser.'
+          '<table>. See Foo > table > Row > tr. Add a <tbody> to your code to ' +
+          'match the DOM tree generated by the browser.',
       );
-      expect(console.error.argsForCall[1][0]).toBe(
-        'Warning: validateDOMNesting(...): #text cannot appear as a child ' +
-        'of <table>. See Foo > table > #text.'
+      expect(console.error.calls.argsFor(1)[0]).toBe(
+        'Warning: validateDOMNesting(...): Text nodes cannot appear as a ' +
+          'child of <tr>. See Row > tr > #text.',
+      );
+      expect(console.error.calls.argsFor(2)[0]).toBe(
+        'Warning: validateDOMNesting(...): Whitespace text nodes cannot ' +
+          "appear as a child of <table>. Make sure you don't have any extra " +
+          'whitespace between tags on each line of your source code. See Foo > ' +
+          'table > #text.',
       );
@@ -1152,41 +1303,43 @@ describe('ReactDOMComponent', function() {
       spyOn(console, 'error');
-      var Row = React.createClass({
-        render: () => <tr />,
-      });
-      var FancyRow = React.createClass({
-        render: () => <Row />,
-      });
-      var Table = React.createClass({
-        render: function() {
+      function Row() {
+        return <tr />;
+      }
+      function FancyRow() {
+        return <Row />;
+      }
+
+      class Table extends React.Component {
+        render() {
           return <table>{this.props.children}</table>;
-        },
-      });
-      var FancyTable = React.createClass({
-        render: function() {
+        }
+      }
+
+      class FancyTable extends React.Component {
+        render() {
           return <Table>{this.props.children}</Table>;
-        },
-      });
+        }
+      }
 
-      var Viz1 = React.createClass({
-        render: () => <table><FancyRow /></table>,
-      });
-      var App1 = React.createClass({
-        render: () => <Viz1 />,
-      });
+      function Viz1() {
+        return <table><FancyRow /></table>;
+      }
+      function App1() {
+        return <Viz1 />;
+      }
       ReactTestUtils.renderIntoDocument(<App1 />);
-      expect(console.error.calls.length).toBe(1);
-      expect(console.error.argsForCall[0][0]).toContain(
-        'See Viz1 > table > FancyRow > Row > tr.'
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toContain(
+        'See Viz1 > table > FancyRow > Row > tr.',
       );
 
-      var Viz2 = React.createClass({
-        render: () => <FancyTable><FancyRow /></FancyTable>,
-      });
-      var App2 = React.createClass({
-        render: () => <Viz2 />,
-      });
+      function Viz2() {
+        return <FancyTable><FancyRow /></FancyTable>;
+      }
+      function App2() {
+        return <Viz2 />;
+      }
       ReactTestUtils.renderIntoDocument(<App2 />);
-      expect(console.error.calls.length).toBe(2);
-      expect(console.error.argsForCall[1][0]).toContain(
-        'See Viz2 > FancyTable > Table > table > FancyRow > Row > tr.'
+      expect(console.error.calls.count()).toBe(2);
+      expect(console.error.calls.argsFor(1)[0]).toContain(
+        'See Viz2 > FancyTable > Table > table > FancyRow > Row > tr.',
       );
@@ -1194,5 +1347,5 @@ describe('ReactDOMComponent', function() {
       ReactTestUtils.renderIntoDocument(<FancyTable><FancyRow /></FancyTable>);
-      expect(console.error.calls.length).toBe(3);
-      expect(console.error.argsForCall[2][0]).toContain(
-        'See FancyTable > Table > table > FancyRow > Row > tr.'
+      expect(console.error.calls.count()).toBe(3);
+      expect(console.error.calls.argsFor(2)[0]).toContain(
+        'See FancyTable > Table > table > FancyRow > Row > tr.',
       );
@@ -1200,5 +1353,5 @@ describe('ReactDOMComponent', function() {
       ReactTestUtils.renderIntoDocument(<table><FancyRow /></table>);
-      expect(console.error.calls.length).toBe(4);
-      expect(console.error.argsForCall[3][0]).toContain(
-        'See table > FancyRow > Row > tr.'
+      expect(console.error.calls.count()).toBe(4);
+      expect(console.error.calls.argsFor(3)[0]).toContain(
+        'See table > FancyRow > Row > tr.',
       );
@@ -1206,52 +1359,211 @@ describe('ReactDOMComponent', function() {
       ReactTestUtils.renderIntoDocument(<FancyTable><tr /></FancyTable>);
-      expect(console.error.calls.length).toBe(5);
-      expect(console.error.argsForCall[4][0]).toContain(
-        'See FancyTable > Table > table > tr.'
+      expect(console.error.calls.count()).toBe(5);
+      expect(console.error.calls.argsFor(4)[0]).toContain(
+        'See FancyTable > Table > table > tr.',
       );
 
-      var Link = React.createClass({
-        render: function() {
+      class Link extends React.Component {
+        render() {
           return <a>{this.props.children}</a>;
-        },
-      });
+        }
+      }
+
       ReactTestUtils.renderIntoDocument(<Link><div><Link /></div></Link>);
-      expect(console.error.calls.length).toBe(6);
-      expect(console.error.argsForCall[5][0]).toContain(
-        'See Link > a > ... > Link > a.'
+      expect(console.error.calls.count()).toBe(6);
+      expect(console.error.calls.argsFor(5)[0]).toContain(
+        'See Link > a > ... > Link > a.',
+      );
+    });
+
+    it('should warn about incorrect casing on properties (ssr)', () => {
+      spyOn(console, 'error');
+      ReactDOMServer.renderToString(
+        React.createElement('input', {type: 'text', tabindex: '1'}),
+      );
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toContain('tabIndex');
+    });
+
+    it('should warn about incorrect casing on event handlers (ssr)', () => {
+      spyOn(console, 'error');
+      ReactDOMServer.renderToString(
+        React.createElement('input', {type: 'text', onclick: '1'}),
+      );
+      ReactDOMServer.renderToString(
+        React.createElement('input', {type: 'text', onKeydown: '1'}),
       );
+      expect(console.error.calls.count()).toBe(2);
+      expect(console.error.calls.argsFor(0)[0]).toContain('onClick');
+      expect(console.error.calls.argsFor(1)[0]).toContain('onKeyDown');
     });
 
-    it('should warn about incorrect casing on properties', function() {
+    it('should warn about incorrect casing on properties', () => {
       spyOn(console, 'error');
-      ReactDOMServer.renderToString(React.createElement('input', {type: 'text', tabindex: '1'}));
-      expect(console.error.argsForCall.length).toBe(1);
-      expect(console.error.argsForCall[0][0]).toContain('tabIndex');
+      ReactTestUtils.renderIntoDocument(
+        React.createElement('input', {type: 'text', tabindex: '1'}),
+      );
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toContain('tabIndex');
     });
 
-    it('should warn about incorrect casing on event handlers', function() {
+    it('should warn about incorrect casing on event handlers', () => {
       spyOn(console, 'error');
-      ReactDOMServer.renderToString(React.createElement('input', {type: 'text', onclick: '1'}));
-      ReactDOMServer.renderToString(React.createElement('input', {type: 'text', onKeydown: '1'}));
-      expect(console.error.argsForCall.length).toBe(2);
-      expect(console.error.argsForCall[0][0]).toContain('onClick');
-      expect(console.error.argsForCall[1][0]).toContain('onKeyDown');
+      ReactTestUtils.renderIntoDocument(
+        React.createElement('input', {type: 'text', onclick: '1'}),
+      );
+      ReactTestUtils.renderIntoDocument(
+        React.createElement('input', {type: 'text', onKeydown: '1'}),
+      );
+      expect(console.error.calls.count()).toBe(2);
+      expect(console.error.calls.argsFor(0)[0]).toContain('onClick');
+      expect(console.error.calls.argsFor(1)[0]).toContain('onKeyDown');
     });
 
-    it('should warn about class', function() {
+    it('should warn about class', () => {
       spyOn(console, 'error');
-      ReactDOMServer.renderToString(React.createElement('div', {class: 'muffins'}));
-      expect(console.error.argsForCall.length).toBe(1);
-      expect(console.error.argsForCall[0][0]).toContain('className');
+      ReactDOMServer.renderToString(
+        React.createElement('div', {class: 'muffins'}),
+      );
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toContain('className');
     });
 
-    it('should warn about props that are no longer supported', function() {
+    it('should warn about props that are no longer supported', () => {
       spyOn(console, 'error');
       ReactTestUtils.renderIntoDocument(<div />);
-      expect(console.error.argsForCall.length).toBe(0);
+      expect(console.error.calls.count()).toBe(0);
 
       ReactTestUtils.renderIntoDocument(<div onFocusIn={() => {}} />);
-      expect(console.error.argsForCall.length).toBe(1);
+      expect(console.error.calls.count()).toBe(1);
 
       ReactTestUtils.renderIntoDocument(<div onFocusOut={() => {}} />);
-      expect(console.error.argsForCall.length).toBe(2);
+      expect(console.error.calls.count()).toBe(2);
+    });
+
+    it('gives source code refs for unknown prop warning', () => {
+      spyOn(console, 'error');
+      ReactDOMServer.renderToString(<div class="paladin" />);
+      ReactDOMServer.renderToString(<input type="text" onclick="1" />);
+      expect(console.error.calls.count()).toBe(2);
+      expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
+        'Warning: Unknown DOM property class. Did you mean className?\n    in div (at **)',
+      );
+      expect(normalizeCodeLocInfo(console.error.calls.argsFor(1)[0])).toBe(
+        'Warning: Unknown event handler property onclick. Did you mean ' +
+          '`onClick`?\n    in input (at **)',
+      );
+    });
+
+    it('gives source code refs for unknown prop warning for update render', () => {
+      spyOn(console, 'error');
+      var container = document.createElement('div');
+
+      ReactDOMServer.renderToString(<div className="paladin" />, container);
+      expect(console.error.calls.count()).toBe(0);
+
+      ReactDOMServer.renderToString(<div class="paladin" />, container);
+      expect(console.error.calls.count()).toBe(1);
+      expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
+        'Warning: Unknown DOM property class. Did you mean className?\n    in div (at **)',
+      );
+    });
+
+    it('gives source code refs for unknown prop warning for exact elements ', () => {
+      spyOn(console, 'error');
+
+      ReactDOMServer.renderToString(
+        <div className="foo1">
+          <div class="foo2" />
+          <div onClick="foo3" />
+          <div onclick="foo4" />
+          <div className="foo5" />
+          <div className="foo6" />
+        </div>,
+      );
+
+      expect(console.error.calls.count()).toBe(2);
+
+      expect(console.error.calls.argsFor(0)[0]).toContain('className');
+      var matches = console.error.calls.argsFor(0)[0].match(/.*\(.*:(\d+)\).*/);
+      var previousLine = matches[1];
+
+      expect(console.error.calls.argsFor(1)[0]).toContain('onClick');
+      matches = console.error.calls.argsFor(1)[0].match(/.*\(.*:(\d+)\).*/);
+      var currentLine = matches[1];
+
+      //verify line number has a proper relative difference,
+      //since hard coding the line number would make test too brittle
+      expect(parseInt(previousLine, 10) + 2).toBe(parseInt(currentLine, 10));
+    });
+
+    it('gives source code refs for unknown prop warning for exact elements in composition ', () => {
+      spyOn(console, 'error');
+      var container = document.createElement('div');
+
+      class Parent extends React.Component {
+        render() {
+          return <div><Child1 /><Child2 /><Child3 /><Child4 /></div>;
+        }
+      }
+
+      class Child1 extends React.Component {
+        render() {
+          return <div class="paladin">Child1</div>;
+        }
+      }
+
+      class Child2 extends React.Component {
+        render() {
+          return <div>Child2</div>;
+        }
+      }
+
+      class Child3 extends React.Component {
+        render() {
+          return <div onclick="1">Child3</div>;
+        }
+      }
+
+      class Child4 extends React.Component {
+        render() {
+          return <div>Child4</div>;
+        }
+      }
+
+      ReactDOMServer.renderToString(<Parent />, container);
+
+      expect(console.error.calls.count()).toBe(2);
+
+      expect(console.error.calls.argsFor(0)[0]).toContain('className');
+      var matches = console.error.calls.argsFor(0)[0].match(/.*\(.*:(\d+)\).*/);
+      var previousLine = matches[1];
+
+      expect(console.error.calls.argsFor(1)[0]).toContain('onClick');
+      matches = console.error.calls.argsFor(1)[0].match(/.*\(.*:(\d+)\).*/);
+      var currentLine = matches[1];
+
+      //verify line number has a proper relative difference,
+      //since hard coding the line number would make test too brittle
+      expect(parseInt(previousLine, 10) + 12).toBe(parseInt(currentLine, 10));
+    });
+
+    it('should suggest property name if available', () => {
+      spyOn(console, 'error');
+
+      ReactTestUtils.renderIntoDocument(
+        React.createElement('label', {for: 'test'}),
+      );
+      ReactTestUtils.renderIntoDocument(
+        React.createElement('input', {type: 'text', autofocus: true}),
+      );
+
+      expect(console.error.calls.count()).toBe(2);
+
+      expect(console.error.calls.argsFor(0)[0]).toBe(
+        'Warning: Unknown DOM property for. Did you mean htmlFor?\n    in label',
+      );
+
+      expect(console.error.calls.argsFor(1)[0]).toBe(
+        'Warning: Unknown DOM property autofocus. Did you mean autoFocus?\n    in input',
+      );
     });
diff --git a/src/renderers/dom/shared/__tests__/ReactDOMInvalidARIAHook-test.js b/src/renderers/dom/shared/__tests__/ReactDOMInvalidARIAHook-test.js
new file mode 100644
index 000000000..1fae95ffe
--- /dev/null
+++ b/src/renderers/dom/shared/__tests__/ReactDOMInvalidARIAHook-test.js
@@ -0,0 +1,67 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+describe('ReactDOMInvalidARIAHook', () => {
+  var React;
+  var ReactTestUtils;
+  var mountComponent;
+
+  beforeEach(() => {
+    jest.resetModuleRegistry();
+    React = require('React');
+    ReactTestUtils = require('ReactTestUtils');
+
+    mountComponent = function(props) {
+      ReactTestUtils.renderIntoDocument(<div {...props} />);
+    };
+  });
+
+  describe('aria-* props', () => {
+    it('should allow valid aria-* props', () => {
+      spyOn(console, 'error');
+      mountComponent({'aria-label': 'Bumble bees'});
+      expect(console.error.calls.count()).toBe(0);
+    });
+    it('should warn for one invalid aria-* prop', () => {
+      spyOn(console, 'error');
+      mountComponent({'aria-badprop': 'maybe'});
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toContain(
+        'Warning: Invalid aria prop `aria-badprop` on <div> tag. ' +
+          'For details, see https://fb.me/invalid-aria-prop',
+      );
+    });
+    it('should warn for many invalid aria-* props', () => {
+      spyOn(console, 'error');
+      mountComponent({
+        'aria-badprop': 'Very tall trees',
+        'aria-malprop': 'Turbulent seas',
+      });
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toContain(
+        'Warning: Invalid aria props `aria-badprop`, `aria-malprop` on <div> ' +
+          'tag. For details, see https://fb.me/invalid-aria-prop',
+      );
+    });
+    it('should warn for an improperly cased aria-* prop', () => {
+      spyOn(console, 'error');
+      // The valid attribute name is aria-haspopup.
+      mountComponent({'aria-hasPopup': 'true'});
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toContain(
+        'Warning: Unknown ARIA attribute aria-hasPopup. ' +
+          'Did you mean aria-haspopup?',
+      );
+    });
+  });
+});
diff --git a/src/renderers/dom/shared/__tests__/ReactDOMTextComponent-test.js b/src/renderers/dom/shared/__tests__/ReactDOMTextComponent-test.js
index 5c3e9a2e6..38c94772c 100644
--- a/src/renderers/dom/shared/__tests__/ReactDOMTextComponent-test.js
+++ b/src/renderers/dom/shared/__tests__/ReactDOMTextComponent-test.js
@@ -17,4 +17,4 @@ var ReactDOMServer;
 
-describe('ReactDOMTextComponent', function() {
-  beforeEach(function() {
+describe('ReactDOMTextComponent', () => {
+  beforeEach(() => {
     React = require('React');
@@ -24,3 +24,3 @@ describe('ReactDOMTextComponent', function() {
 
-  it('updates a mounted text component in place', function() {
+  it('updates a mounted text component in place', () => {
     var el = document.createElement('div');
@@ -42,3 +42,3 @@ describe('ReactDOMTextComponent', function() {
 
-  it('can be toggled in and out of the markup', function() {
+  it('can be toggled in and out of the markup', () => {
     var el = document.createElement('div');
@@ -65,3 +65,3 @@ describe('ReactDOMTextComponent', function() {
 
-  it('can reconcile text merged by Node.normalize()', function() {
+  it('can reconcile text merged by Node.normalize()', () => {
     var el = document.createElement('div');
@@ -77,3 +77,3 @@ describe('ReactDOMTextComponent', function() {
 
-  it('can reconcile text from pre-rendered markup', function() {
+  it('can reconcile text from pre-rendered markup', () => {
     var el = document.createElement('div');
@@ -92,3 +92,3 @@ describe('ReactDOMTextComponent', function() {
 
-  it('can reconcile text arbitrarily split into multiple nodes', function() {
+  it('can reconcile text arbitrarily split into multiple nodes', () => {
     var el = document.createElement('div');
diff --git a/src/renderers/dom/shared/__tests__/escapeTextContentForBrowser-test.js b/src/renderers/dom/shared/__tests__/escapeTextContentForBrowser-test.js
index e2cb4461a..8dc2b9792 100644
--- a/src/renderers/dom/shared/__tests__/escapeTextContentForBrowser-test.js
+++ b/src/renderers/dom/shared/__tests__/escapeTextContentForBrowser-test.js
@@ -13,7 +13,6 @@
 
-describe('escapeTextContentForBrowser', function() {
-
+describe('escapeTextContentForBrowser', () => {
   var escapeTextContentForBrowser = require('escapeTextContentForBrowser');
 
-  it('should escape boolean to string', function() {
+  it('should escape boolean to string', () => {
     expect(escapeTextContentForBrowser(true)).toBe('true');
@@ -22,3 +21,3 @@ describe('escapeTextContentForBrowser', function() {
 
-  it('should escape object to string', function() {
+  it('should escape object to string', () => {
     var escaped = escapeTextContentForBrowser({
@@ -32,3 +31,3 @@ describe('escapeTextContentForBrowser', function() {
 
-  it('should escape number to string', function() {
+  it('should escape number to string', () => {
     expect(escapeTextContentForBrowser(42)).toBe('42');
@@ -36,8 +35,10 @@ describe('escapeTextContentForBrowser', function() {
 
-  it('should escape string', function() {
-    var escaped = escapeTextContentForBrowser('<script type=\'\' src=""></script>');
+  it('should escape string', () => {
+    var escaped = escapeTextContentForBrowser(
+      '<script type=\'\' src=""></script>',
+    );
     expect(escaped).not.toContain('<');
     expect(escaped).not.toContain('>');
-    expect(escaped).not.toContain('\'');
-    expect(escaped).not.toContain('\"');
+    expect(escaped).not.toContain("'");
+    expect(escaped).not.toContain('"');
 
@@ -46,3 +47,2 @@ describe('escapeTextContentForBrowser', function() {
   });
-
 });
diff --git a/src/renderers/dom/shared/__tests__/quoteAttributeValueForBrowser-test.js b/src/renderers/dom/shared/__tests__/quoteAttributeValueForBrowser-test.js
index 5d7bc8601..884fc322c 100644
--- a/src/renderers/dom/shared/__tests__/quoteAttributeValueForBrowser-test.js
+++ b/src/renderers/dom/shared/__tests__/quoteAttributeValueForBrowser-test.js
@@ -13,7 +13,6 @@
 
-describe('quoteAttributeValueForBrowser', function() {
-
+describe('quoteAttributeValueForBrowser', () => {
   var quoteAttributeValueForBrowser = require('quoteAttributeValueForBrowser');
 
-  it('should escape boolean to string', function() {
+  it('should escape boolean to string', () => {
     expect(quoteAttributeValueForBrowser(true)).toBe('"true"');
@@ -22,3 +21,3 @@ describe('quoteAttributeValueForBrowser', function() {
 
-  it('should escape object to string', function() {
+  it('should escape object to string', () => {
     var escaped = quoteAttributeValueForBrowser({
@@ -32,3 +31,3 @@ describe('quoteAttributeValueForBrowser', function() {
 
-  it('should escape number to string', function() {
+  it('should escape number to string', () => {
     expect(quoteAttributeValueForBrowser(42)).toBe('"42"');
@@ -36,8 +35,10 @@ describe('quoteAttributeValueForBrowser', function() {
 
-  it('should escape string', function() {
-    var escaped = quoteAttributeValueForBrowser('<script type=\'\' src=""></script>');
+  it('should escape string', () => {
+    var escaped = quoteAttributeValueForBrowser(
+      '<script type=\'\' src=""></script>',
+    );
     expect(escaped).not.toContain('<');
     expect(escaped).not.toContain('>');
-    expect(escaped).not.toContain('\'');
-    expect(escaped.substr(1, -1)).not.toContain('\"');
+    expect(escaped).not.toContain("'");
+    expect(escaped.substr(1, -1)).not.toContain('"');
 
@@ -46,3 +47,2 @@ describe('quoteAttributeValueForBrowser', function() {
   });
-
 });
diff --git a/src/renderers/dom/shared/dangerousStyleValue.js b/src/renderers/dom/shared/dangerousStyleValue.js
index 8aa2e4960..74e130dda 100644
--- a/src/renderers/dom/shared/dangerousStyleValue.js
+++ b/src/renderers/dom/shared/dangerousStyleValue.js
@@ -29,3 +29,3 @@ var styleWarnings = {};
  */
-function dangerousStyleValue(name, value, component) {
+function dangerousStyleValue(name, value, component, isCustomProperty) {
   // Note that we've removed escapeTextForBrowser() calls here since the
@@ -46,4 +46,8 @@ function dangerousStyleValue(name, value, component) {
   var isNonNumeric = isNaN(value);
-  if (isNonNumeric || value === 0 ||
-      isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
+  if (
+    isCustomProperty ||
+    isNonNumeric ||
+    value === 0 ||
+    (isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])
+  ) {
     return '' + value; // cast to string
@@ -53,3 +57,5 @@ function dangerousStyleValue(name, value, component) {
     if (__DEV__) {
-      if (component) {
+      // Allow '0' to pass through without warning. 0 is already special and
+      // doesn't require units, so we don't need to warn about it.
+      if (component && value !== '0') {
         var owner = component._currentElement._owner;
@@ -71,4 +77,4 @@ function dangerousStyleValue(name, value, component) {
             'a `%s` tag (owner: `%s`) was passed a numeric string value ' +
-            'for CSS property `%s` (value: `%s`) which will be treated ' +
-            'as a unitless number in a future version of React.',
+              'for CSS property `%s` (value: `%s`) which will be treated ' +
+              'as a unitless number in a future version of React.',
             component._currentElement.type,
@@ -76,3 +82,3 @@ function dangerousStyleValue(name, value, component) {
             name,
-            value
+            value,
           );
diff --git a/src/renderers/dom/shared/devtools/ReactDOMUnknownPropertyDevtool.js b/src/renderers/dom/shared/devtools/ReactDOMUnknownPropertyDevtool.js
deleted file mode 100644
index 5adc35906..000000000
--- a/src/renderers/dom/shared/devtools/ReactDOMUnknownPropertyDevtool.js
+++ /dev/null
@@ -1,87 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @providesModule ReactDOMUnknownPropertyDevtool
- */
-
-'use strict';
-
-var DOMProperty = require('DOMProperty');
-var EventPluginRegistry = require('EventPluginRegistry');
-
-var warning = require('warning');
-
-if (__DEV__) {
-  var reactProps = {
-    children: true,
-    dangerouslySetInnerHTML: true,
-    key: true,
-    ref: true,
-  };
-  var warnedProperties = {};
-
-  var warnUnknownProperty = function(name) {
-    if (DOMProperty.properties.hasOwnProperty(name) || DOMProperty.isCustomAttribute(name)) {
-      return;
-    }
-    if (reactProps.hasOwnProperty(name) && reactProps[name] ||
-        warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
-      return;
-    }
-
-    warnedProperties[name] = true;
-    var lowerCasedName = name.toLowerCase();
-
-    // data-* attributes should be lowercase; suggest the lowercase version
-    var standardName = (
-      DOMProperty.isCustomAttribute(lowerCasedName) ?
-        lowerCasedName :
-      DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ?
-        DOMProperty.getPossibleStandardName[lowerCasedName] :
-        null
-    );
-
-    // For now, only warn when we have a suggested correction. This prevents
-    // logging too much when using transferPropsTo.
-    warning(
-      standardName == null,
-      'Unknown DOM property %s. Did you mean %s?',
-      name,
-      standardName
-    );
-
-    var registrationName = (
-      EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(
-        lowerCasedName
-      ) ?
-      EventPluginRegistry.possibleRegistrationNames[lowerCasedName] :
-      null
-    );
-
-    warning(
-      registrationName == null,
-      'Unknown event handler property %s. Did you mean `%s`?',
-      name,
-      registrationName
-    );
-  };
-}
-
-var ReactDOMUnknownPropertyDevtool = {
-  onCreateMarkupForProperty(name, value) {
-    warnUnknownProperty(name);
-  },
-  onSetValueForProperty(node, name, value) {
-    warnUnknownProperty(name);
-  },
-  onDeleteValueForProperty(node, name) {
-    warnUnknownProperty(name);
-  },
-};
-
-module.exports = ReactDOMUnknownPropertyDevtool;
diff --git a/src/renderers/dom/shared/escapeTextContentForBrowser.js b/src/renderers/dom/shared/escapeTextContentForBrowser.js
index 897daf43c..9a7a2f10d 100644
--- a/src/renderers/dom/shared/escapeTextContentForBrowser.js
+++ b/src/renderers/dom/shared/escapeTextContentForBrowser.js
@@ -1,3 +1,3 @@
 /**
- * Copyright 2013-present, Facebook, Inc.
+ * Copyright 2016-present, Facebook, Inc.
  * All rights reserved.
@@ -8,2 +8,27 @@
  *
+ * Based on the escape-html library, which is used under the MIT License below:
+ *
+ * Copyright (c) 2012-2013 TJ Holowaychuk
+ * Copyright (c) 2015 Andreas Lubbe
+ * Copyright (c) 2015 Tiancheng "Timothy" Gu
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files (the
+ * 'Software'), to deal in the Software without restriction, including
+ * without limitation the rights to use, copy, modify, merge, publish,
+ * distribute, sublicense, and/or sell copies of the Software, and to
+ * permit persons to whom the Software is furnished to do so, subject to
+ * the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
+ * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
+ * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
+ * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *
  * @providesModule escapeTextContentForBrowser
@@ -13,15 +38,63 @@
 
-var ESCAPE_LOOKUP = {
-  '&': '&amp;',
-  '>': '&gt;',
-  '<': '&lt;',
-  '"': '&quot;',
-  '\'': '&#x27;',
-};
+// code copied and modified from escape-html
+/**
+ * Module variables.
+ * @private
+ */
+
+var matchHtmlRegExp = /["'&<>]/;
+
+/**
+ * Escape special characters in the given string of html.
+ *
+ * @param  {string} string The string to escape for inserting into HTML
+ * @return {string}
+ * @public
+ */
+
+function escapeHtml(string) {
+  var str = '' + string;
+  var match = matchHtmlRegExp.exec(str);
+
+  if (!match) {
+    return str;
+  }
+
+  var escape;
+  var html = '';
+  var index = 0;
+  var lastIndex = 0;
+
+  for (index = match.index; index < str.length; index++) {
+    switch (str.charCodeAt(index)) {
+      case 34: // "
+        escape = '&quot;';
+        break;
+      case 38: // &
+        escape = '&amp;';
+        break;
+      case 39: // '
+        escape = '&#x27;'; // modified from escape-html; used to be '&#39'
+        break;
+      case 60: // <
+        escape = '&lt;';
+        break;
+      case 62: // >
+        escape = '&gt;';
+        break;
+      default:
+        continue;
+    }
+
+    if (lastIndex !== index) {
+      html += str.substring(lastIndex, index);
+    }
 
-var ESCAPE_REGEX = /[&><"']/g;
+    lastIndex = index + 1;
+    html += escape;
+  }
 
-function escaper(match) {
-  return ESCAPE_LOOKUP[match];
+  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;
 }
+// end code copied and modified from escape-html
 
@@ -34,3 +107,9 @@ function escaper(match) {
 function escapeTextContentForBrowser(text) {
-  return ('' + text).replace(ESCAPE_REGEX, escaper);
+  if (typeof text === 'boolean' || typeof text === 'number') {
+    // this shortcircuit helps perf for types that we know will never have
+    // special characters, especially given that this function is used often
+    // for numeric dom ids.
+    return '' + text;
+  }
+  return escapeHtml(text);
 }
diff --git a/src/renderers/dom/shared/hooks/ReactDOMInvalidARIAHook.js b/src/renderers/dom/shared/hooks/ReactDOMInvalidARIAHook.js
new file mode 100644
index 000000000..9f06f149f
--- /dev/null
+++ b/src/renderers/dom/shared/hooks/ReactDOMInvalidARIAHook.js
@@ -0,0 +1,117 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactDOMInvalidARIAHook
+ */
+
+'use strict';
+
+var DOMProperty = require('DOMProperty');
+var ReactComponentTreeHook = require('ReactComponentTreeHook');
+
+var warning = require('warning');
+
+var warnedProperties = {};
+var rARIA = new RegExp('^(aria)-[' + DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');
+
+function validateProperty(tagName, name, debugID) {
+  if (warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
+    return true;
+  }
+
+  if (rARIA.test(name)) {
+    var lowerCasedName = name.toLowerCase();
+    var standardName = DOMProperty.getPossibleStandardName.hasOwnProperty(
+      lowerCasedName,
+    )
+      ? DOMProperty.getPossibleStandardName[lowerCasedName]
+      : null;
+
+    // If this is an aria-* attribute, but is not listed in the known DOM
+    // DOM properties, then it is an invalid aria-* attribute.
+    if (standardName == null) {
+      warnedProperties[name] = true;
+      return false;
+    }
+    // aria-* attributes should be lowercase; suggest the lowercase version.
+    if (name !== standardName) {
+      warning(
+        false,
+        'Unknown ARIA attribute %s. Did you mean %s?%s',
+        name,
+        standardName,
+        ReactComponentTreeHook.getStackAddendumByID(debugID),
+      );
+      warnedProperties[name] = true;
+      return true;
+    }
+  }
+
+  return true;
+}
+
+function warnInvalidARIAProps(debugID, element) {
+  const invalidProps = [];
+
+  for (var key in element.props) {
+    var isValid = validateProperty(element.type, key, debugID);
+    if (!isValid) {
+      invalidProps.push(key);
+    }
+  }
+
+  const unknownPropString = invalidProps
+    .map(prop => '`' + prop + '`')
+    .join(', ');
+
+  if (invalidProps.length === 1) {
+    warning(
+      false,
+      'Invalid aria prop %s on <%s> tag. ' +
+        'For details, see https://fb.me/invalid-aria-prop%s',
+      unknownPropString,
+      element.type,
+      ReactComponentTreeHook.getStackAddendumByID(debugID),
+    );
+  } else if (invalidProps.length > 1) {
+    warning(
+      false,
+      'Invalid aria props %s on <%s> tag. ' +
+        'For details, see https://fb.me/invalid-aria-prop%s',
+      unknownPropString,
+      element.type,
+      ReactComponentTreeHook.getStackAddendumByID(debugID),
+    );
+  }
+}
+
+function handleElement(debugID, element) {
+  if (element == null || typeof element.type !== 'string') {
+    return;
+  }
+  if (element.type.indexOf('-') >= 0 || element.props.is) {
+    return;
+  }
+
+  warnInvalidARIAProps(debugID, element);
+}
+
+var ReactDOMInvalidARIAHook = {
+  onBeforeMountComponent(debugID, element) {
+    if (__DEV__) {
+      handleElement(debugID, element);
+    }
+  },
+  onBeforeUpdateComponent(debugID, element) {
+    if (__DEV__) {
+      handleElement(debugID, element);
+    }
+  },
+};
+
+module.exports = ReactDOMInvalidARIAHook;
diff --git a/src/renderers/dom/shared/hooks/ReactDOMNullInputValuePropHook.js b/src/renderers/dom/shared/hooks/ReactDOMNullInputValuePropHook.js
new file mode 100644
index 000000000..21cbae338
--- /dev/null
+++ b/src/renderers/dom/shared/hooks/ReactDOMNullInputValuePropHook.js
@@ -0,0 +1,58 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactDOMNullInputValuePropHook
+ */
+
+'use strict';
+
+var ReactComponentTreeHook = require('ReactComponentTreeHook');
+
+var warning = require('warning');
+
+var didWarnValueNull = false;
+
+function handleElement(debugID, element) {
+  if (element == null) {
+    return;
+  }
+  if (
+    element.type !== 'input' &&
+    element.type !== 'textarea' &&
+    element.type !== 'select'
+  ) {
+    return;
+  }
+  if (
+    element.props != null &&
+    element.props.value === null &&
+    !didWarnValueNull
+  ) {
+    warning(
+      false,
+      '`value` prop on `%s` should not be null. ' +
+        'Consider using the empty string to clear the component or `undefined` ' +
+        'for uncontrolled components.%s',
+      element.type,
+      ReactComponentTreeHook.getStackAddendumByID(debugID),
+    );
+
+    didWarnValueNull = true;
+  }
+}
+
+var ReactDOMNullInputValuePropHook = {
+  onBeforeMountComponent(debugID, element) {
+    handleElement(debugID, element);
+  },
+  onBeforeUpdateComponent(debugID, element) {
+    handleElement(debugID, element);
+  },
+};
+
+module.exports = ReactDOMNullInputValuePropHook;
diff --git a/src/renderers/dom/shared/hooks/ReactDOMUnknownPropertyHook.js b/src/renderers/dom/shared/hooks/ReactDOMUnknownPropertyHook.js
new file mode 100644
index 000000000..6720bc7f0
--- /dev/null
+++ b/src/renderers/dom/shared/hooks/ReactDOMUnknownPropertyHook.js
@@ -0,0 +1,150 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactDOMUnknownPropertyHook
+ */
+
+'use strict';
+
+var DOMProperty = require('DOMProperty');
+var EventPluginRegistry = require('EventPluginRegistry');
+var ReactComponentTreeHook = require('ReactComponentTreeHook');
+
+var warning = require('warning');
+
+if (__DEV__) {
+  var reactProps = {
+    children: true,
+    dangerouslySetInnerHTML: true,
+    key: true,
+    ref: true,
+
+    autoFocus: true,
+    defaultValue: true,
+    valueLink: true,
+    defaultChecked: true,
+    checkedLink: true,
+    innerHTML: true,
+    suppressContentEditableWarning: true,
+    onFocusIn: true,
+    onFocusOut: true,
+  };
+  var warnedProperties = {};
+
+  var validateProperty = function(tagName, name, debugID) {
+    if (
+      DOMProperty.properties.hasOwnProperty(name) ||
+      DOMProperty.isCustomAttribute(name)
+    ) {
+      return true;
+    }
+    if (
+      (reactProps.hasOwnProperty(name) && reactProps[name]) ||
+      (warnedProperties.hasOwnProperty(name) && warnedProperties[name])
+    ) {
+      return true;
+    }
+    if (EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {
+      return true;
+    }
+    warnedProperties[name] = true;
+    var lowerCasedName = name.toLowerCase();
+
+    // data-* attributes should be lowercase; suggest the lowercase version
+    var standardName = DOMProperty.isCustomAttribute(lowerCasedName)
+      ? lowerCasedName
+      : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName)
+        ? DOMProperty.getPossibleStandardName[lowerCasedName]
+        : null;
+
+    var registrationName = EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(
+      lowerCasedName,
+    )
+      ? EventPluginRegistry.possibleRegistrationNames[lowerCasedName]
+      : null;
+
+    if (standardName != null) {
+      warning(
+        false,
+        'Unknown DOM property %s. Did you mean %s?%s',
+        name,
+        standardName,
+        ReactComponentTreeHook.getStackAddendumByID(debugID),
+      );
+      return true;
+    } else if (registrationName != null) {
+      warning(
+        false,
+        'Unknown event handler property %s. Did you mean `%s`?%s',
+        name,
+        registrationName,
+        ReactComponentTreeHook.getStackAddendumByID(debugID),
+      );
+      return true;
+    } else {
+      // We were unable to guess which prop the user intended.
+      // It is likely that the user was just blindly spreading/forwarding props
+      // Components should be careful to only render valid props/attributes.
+      // Warning will be invoked in warnUnknownProperties to allow grouping.
+      return false;
+    }
+  };
+}
+
+var warnUnknownProperties = function(debugID, element) {
+  var unknownProps = [];
+  for (var key in element.props) {
+    var isValid = validateProperty(element.type, key, debugID);
+    if (!isValid) {
+      unknownProps.push(key);
+    }
+  }
+
+  var unknownPropString = unknownProps.map(prop => '`' + prop + '`').join(', ');
+
+  if (unknownProps.length === 1) {
+    warning(
+      false,
+      'Unknown prop %s on <%s> tag. Remove this prop from the element. ' +
+        'For details, see https://fb.me/react-unknown-prop%s',
+      unknownPropString,
+      element.type,
+      ReactComponentTreeHook.getStackAddendumByID(debugID),
+    );
+  } else if (unknownProps.length > 1) {
+    warning(
+      false,
+      'Unknown props %s on <%s> tag. Remove these props from the element. ' +
+        'For details, see https://fb.me/react-unknown-prop%s',
+      unknownPropString,
+      element.type,
+      ReactComponentTreeHook.getStackAddendumByID(debugID),
+    );
+  }
+};
+
+function handleElement(debugID, element) {
+  if (element == null || typeof element.type !== 'string') {
+    return;
+  }
+  if (element.type.indexOf('-') >= 0 || element.props.is) {
+    return;
+  }
+  warnUnknownProperties(debugID, element);
+}
+
+var ReactDOMUnknownPropertyHook = {
+  onBeforeMountComponent(debugID, element) {
+    handleElement(debugID, element);
+  },
+  onBeforeUpdateComponent(debugID, element) {
+    handleElement(debugID, element);
+  },
+};
+
+module.exports = ReactDOMUnknownPropertyHook;
diff --git a/src/renderers/native/NativeMethodsMixin.js b/src/renderers/native/NativeMethodsMixin.js
new file mode 100644
index 000000000..1ad5dc00b
--- /dev/null
+++ b/src/renderers/native/NativeMethodsMixin.js
@@ -0,0 +1,232 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule NativeMethodsMixin
+ * @flow
+ */
+'use strict';
+
+var ReactNativeAttributePayload = require('ReactNativeAttributePayload');
+var TextInputState = require('TextInputState');
+var UIManager = require('UIManager');
+
+var findNodeHandle = require('findNodeHandle');
+var invariant = require('invariant');
+
+type MeasureOnSuccessCallback = (
+  x: number,
+  y: number,
+  width: number,
+  height: number,
+  pageX: number,
+  pageY: number,
+) => void;
+
+type MeasureInWindowOnSuccessCallback = (
+  x: number,
+  y: number,
+  width: number,
+  height: number,
+) => void;
+
+type MeasureLayoutOnSuccessCallback = (
+  left: number,
+  top: number,
+  width: number,
+  height: number,
+) => void;
+
+function warnForStyleProps(props, validAttributes) {
+  for (var key in validAttributes.style) {
+    if (!(validAttributes[key] || props[key] === undefined)) {
+      console.error(
+        'You are setting the style `{ ' +
+          key +
+          ': ... }` as a prop. You ' +
+          'should nest it in a style object. ' +
+          'E.g. `{ style: { ' +
+          key +
+          ': ... } }`',
+      );
+    }
+  }
+}
+
+/**
+ * `NativeMethodsMixin` provides methods to access the underlying native
+ * component directly. This can be useful in cases when you want to focus
+ * a view or measure its on-screen dimensions, for example.
+ *
+ * The methods described here are available on most of the default components
+ * provided by React Native. Note, however, that they are *not* available on
+ * composite components that aren't directly backed by a native view. This will
+ * generally include most components that you define in your own app. For more
+ * information, see [Direct
+ * Manipulation](docs/direct-manipulation.html).
+ */
+var NativeMethodsMixin = {
+  /**
+   * Determines the location on screen, width, and height of the given view and
+   * returns the values via an async callback. If successful, the callback will
+   * be called with the following arguments:
+   *
+   *  - x
+   *  - y
+   *  - width
+   *  - height
+   *  - pageX
+   *  - pageY
+   *
+   * Note that these measurements are not available until after the rendering
+   * has been completed in native. If you need the measurements as soon as
+   * possible, consider using the [`onLayout`
+   * prop](docs/view.html#onlayout) instead.
+   */
+  measure: function(callback: MeasureOnSuccessCallback) {
+    UIManager.measure(findNodeHandle(this), mountSafeCallback(this, callback));
+  },
+
+  /**
+   * Determines the location of the given view in the window and returns the
+   * values via an async callback. If the React root view is embedded in
+   * another native view, this will give you the absolute coordinates. If
+   * successful, the callback will be called with the following
+   * arguments:
+   *
+   *  - x
+   *  - y
+   *  - width
+   *  - height
+   *
+   * Note that these measurements are not available until after the rendering
+   * has been completed in native.
+   */
+  measureInWindow: function(callback: MeasureInWindowOnSuccessCallback) {
+    UIManager.measureInWindow(
+      findNodeHandle(this),
+      mountSafeCallback(this, callback),
+    );
+  },
+
+  /**
+   * Like [`measure()`](#measure), but measures the view relative an ancestor,
+   * specified as `relativeToNativeNode`. This means that the returned x, y
+   * are relative to the origin x, y of the ancestor view.
+   *
+   * As always, to obtain a native node handle for a component, you can use
+   * `React.findNodeHandle(component)`.
+   */
+  measureLayout: function(
+    relativeToNativeNode: number,
+    onSuccess: MeasureLayoutOnSuccessCallback,
+    onFail: () => void /* currently unused */,
+  ) {
+    UIManager.measureLayout(
+      findNodeHandle(this),
+      relativeToNativeNode,
+      mountSafeCallback(this, onFail),
+      mountSafeCallback(this, onSuccess),
+    );
+  },
+
+  /**
+   * This function sends props straight to native. They will not participate in
+   * future diff process - this means that if you do not include them in the
+   * next render, they will remain active (see [Direct
+   * Manipulation](docs/direct-manipulation.html)).
+   */
+  setNativeProps: function(nativeProps: Object) {
+    if (__DEV__) {
+      warnForStyleProps(nativeProps, this.viewConfig.validAttributes);
+    }
+
+    var updatePayload = ReactNativeAttributePayload.create(
+      nativeProps,
+      this.viewConfig.validAttributes,
+    );
+
+    UIManager.updateView(
+      findNodeHandle(this),
+      this.viewConfig.uiViewClassName,
+      updatePayload,
+    );
+  },
+
+  /**
+   * Requests focus for the given input or view. The exact behavior triggered
+   * will depend on the platform and type of view.
+   */
+  focus: function() {
+    TextInputState.focusTextInput(findNodeHandle(this));
+  },
+
+  /**
+   * Removes focus from an input or view. This is the opposite of `focus()`.
+   */
+  blur: function() {
+    TextInputState.blurTextInput(findNodeHandle(this));
+  },
+};
+
+function throwOnStylesProp(component, props) {
+  if (props.styles !== undefined) {
+    var owner = component._owner || null;
+    var name = component.constructor.displayName;
+    var msg =
+      '`styles` is not a supported property of `' +
+      name +
+      '`, did ' +
+      'you mean `style` (singular)?';
+    if (owner && owner.constructor && owner.constructor.displayName) {
+      msg +=
+        '\n\nCheck the `' +
+        owner.constructor.displayName +
+        '` parent ' +
+        ' component.';
+    }
+    throw new Error(msg);
+  }
+}
+if (__DEV__) {
+  // hide this from Flow since we can't define these properties outside of
+  // __DEV__ without actually implementing them (setting them to undefined
+  // isn't allowed by ReactClass)
+  var NativeMethodsMixin_DEV = (NativeMethodsMixin: any);
+  invariant(
+    !NativeMethodsMixin_DEV.componentWillMount &&
+      !NativeMethodsMixin_DEV.componentWillReceiveProps,
+    'Do not override existing functions.',
+  );
+  NativeMethodsMixin_DEV.componentWillMount = function() {
+    throwOnStylesProp(this, this.props);
+  };
+  NativeMethodsMixin_DEV.componentWillReceiveProps = function(newProps) {
+    throwOnStylesProp(this, newProps);
+  };
+}
+
+/**
+ * In the future, we should cleanup callbacks by cancelling them instead of
+ * using this.
+ */
+function mountSafeCallback(
+  context: ReactComponent<any, any, any>,
+  callback: ?Function,
+): any {
+  return function() {
+    if (
+      !callback ||
+      (typeof context.isMounted === 'function' && !context.isMounted())
+    ) {
+      return undefined;
+    }
+    return callback.apply(context, arguments);
+  };
+}
+
+module.exports = NativeMethodsMixin;
diff --git a/src/renderers/native/ReactNative.js b/src/renderers/native/ReactNative.js
new file mode 100644
index 000000000..218defb7f
--- /dev/null
+++ b/src/renderers/native/ReactNative.js
@@ -0,0 +1,77 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNative
+ * @flow
+ */
+'use strict';
+
+// Require ReactNativeDefaultInjection first for its side effects of setting up
+// the JS environment
+var ReactNativeComponentTree = require('ReactNativeComponentTree');
+var ReactNativeDefaultInjection = require('ReactNativeDefaultInjection');
+
+var ReactNativeMount = require('ReactNativeMount');
+var ReactUpdates = require('ReactUpdates');
+
+var findNodeHandle = require('findNodeHandle');
+
+ReactNativeDefaultInjection.inject();
+
+var render = function(
+  element: ReactElement<any>,
+  mountInto: number,
+  callback?: ?() => void,
+): ?ReactComponent<any, any, any> {
+  return ReactNativeMount.renderComponent(element, mountInto, callback);
+};
+
+var ReactNative = {
+  hasReactNativeInitialized: false,
+  findNodeHandle: findNodeHandle,
+  render: render,
+  unmountComponentAtNode: ReactNativeMount.unmountComponentAtNode,
+
+  /* eslint-disable camelcase */
+  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
+  /* eslint-enable camelcase */
+
+  unmountComponentAtNodeAndRemoveContainer:
+    ReactNativeMount.unmountComponentAtNodeAndRemoveContainer,
+};
+
+// Inject the runtime into a devtools global hook regardless of browser.
+// Allows for debugging when the hook is injected on the page.
+/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__ */
+if (
+  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
+  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function'
+) {
+  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
+    ComponentTree: {
+      getClosestInstanceFromNode: function(node) {
+        return ReactNativeComponentTree.getClosestInstanceFromNode(node);
+      },
+      getNodeFromInstance: function(inst) {
+        // inst is an internal instance (but could be a composite)
+        while (inst._renderedComponent) {
+          inst = inst._renderedComponent;
+        }
+        if (inst) {
+          return ReactNativeComponentTree.getNodeFromInstance(inst);
+        } else {
+          return null;
+        }
+      },
+    },
+    Mount: ReactNativeMount,
+    Reconciler: require('ReactReconciler'),
+  });
+}
+
+module.exports = ReactNative;
diff --git a/src/renderers/native/ReactNative/__mocks__/View.js b/src/renderers/native/ReactNative/__mocks__/View.js
new file mode 100644
index 000000000..71856da16
--- /dev/null
+++ b/src/renderers/native/ReactNative/__mocks__/View.js
@@ -0,0 +1,19 @@
+/**
+ * Copyright 2013-2015, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ */
+
+'use strict';
+
+var createReactNativeComponentClass = require('createReactNativeComponentClass');
+
+var View = createReactNativeComponentClass({
+  validAttributes: {},
+  uiViewClassName: 'View',
+});
+
+module.exports = View;
diff --git a/src/renderers/native/ReactNativeAttributePayload.js b/src/renderers/native/ReactNativeAttributePayload.js
new file mode 100644
index 000000000..13a0aa52f
--- /dev/null
+++ b/src/renderers/native/ReactNativeAttributePayload.js
@@ -0,0 +1,516 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNativeAttributePayload
+ * @flow
+ */
+'use strict';
+
+var ReactNativePropRegistry = require('ReactNativePropRegistry');
+
+var deepDiffer = require('deepDiffer');
+var flattenStyle = require('flattenStyle');
+
+var emptyObject = {};
+
+/**
+ * Create a payload that contains all the updates between two sets of props.
+ *
+ * These helpers are all encapsulated into a single module, because they use
+ * mutation as a performance optimization which leads to subtle shared
+ * dependencies between the code paths. To avoid this mutable state leaking
+ * across modules, I've kept them isolated to this module.
+ */
+
+type AttributeDiffer = (prevProp: mixed, nextProp: mixed) => boolean;
+type AttributePreprocessor = (nextProp: mixed) => mixed;
+
+type CustomAttributeConfiguration =
+  | {diff: AttributeDiffer, process: AttributePreprocessor}
+  | {diff: AttributeDiffer}
+  | {process: AttributePreprocessor};
+
+type AttributeConfiguration = {
+  [key: string]:
+    | CustomAttributeConfiguration
+    | AttributeConfiguration /*| boolean*/,
+};
+
+type NestedNode = Array<NestedNode> | Object | number;
+
+// Tracks removed keys
+var removedKeys = null;
+var removedKeyCount = 0;
+
+function defaultDiffer(prevProp: mixed, nextProp: mixed): boolean {
+  if (typeof nextProp !== 'object' || nextProp === null) {
+    // Scalars have already been checked for equality
+    return true;
+  } else {
+    // For objects and arrays, the default diffing algorithm is a deep compare
+    return deepDiffer(prevProp, nextProp);
+  }
+}
+
+function resolveObject(idOrObject: number | Object): Object {
+  if (typeof idOrObject === 'number') {
+    return ReactNativePropRegistry.getByID(idOrObject);
+  }
+  return idOrObject;
+}
+
+function restoreDeletedValuesInNestedArray(
+  updatePayload: Object,
+  node: NestedNode,
+  validAttributes: AttributeConfiguration,
+) {
+  if (Array.isArray(node)) {
+    var i = node.length;
+    while (i-- && removedKeyCount > 0) {
+      restoreDeletedValuesInNestedArray(
+        updatePayload,
+        node[i],
+        validAttributes,
+      );
+    }
+  } else if (node && removedKeyCount > 0) {
+    var obj = resolveObject(node);
+    for (var propKey in removedKeys) {
+      if (!removedKeys[propKey]) {
+        continue;
+      }
+      var nextProp = obj[propKey];
+      if (nextProp === undefined) {
+        continue;
+      }
+
+      var attributeConfig = validAttributes[propKey];
+      if (!attributeConfig) {
+        continue; // not a valid native prop
+      }
+
+      if (typeof nextProp === 'function') {
+        nextProp = true;
+      }
+      if (typeof nextProp === 'undefined') {
+        nextProp = null;
+      }
+
+      if (typeof attributeConfig !== 'object') {
+        // case: !Object is the default case
+        updatePayload[propKey] = nextProp;
+      } else if (
+        typeof attributeConfig.diff === 'function' ||
+        typeof attributeConfig.process === 'function'
+      ) {
+        // case: CustomAttributeConfiguration
+        var nextValue = typeof attributeConfig.process === 'function'
+          ? attributeConfig.process(nextProp)
+          : nextProp;
+        updatePayload[propKey] = nextValue;
+      }
+      removedKeys[propKey] = false;
+      removedKeyCount--;
+    }
+  }
+}
+
+function diffNestedArrayProperty(
+  updatePayload: ?Object,
+  prevArray: Array<NestedNode>,
+  nextArray: Array<NestedNode>,
+  validAttributes: AttributeConfiguration,
+): ?Object {
+  var minLength = prevArray.length < nextArray.length
+    ? prevArray.length
+    : nextArray.length;
+  var i;
+  for (i = 0; i < minLength; i++) {
+    // Diff any items in the array in the forward direction. Repeated keys
+    // will be overwritten by later values.
+    updatePayload = diffNestedProperty(
+      updatePayload,
+      prevArray[i],
+      nextArray[i],
+      validAttributes,
+    );
+  }
+  for (; i < prevArray.length; i++) {
+    // Clear out all remaining properties.
+    updatePayload = clearNestedProperty(
+      updatePayload,
+      prevArray[i],
+      validAttributes,
+    );
+  }
+  for (; i < nextArray.length; i++) {
+    // Add all remaining properties.
+    updatePayload = addNestedProperty(
+      updatePayload,
+      nextArray[i],
+      validAttributes,
+    );
+  }
+  return updatePayload;
+}
+
+function diffNestedProperty(
+  updatePayload: ?Object,
+  prevProp: NestedNode,
+  nextProp: NestedNode,
+  validAttributes: AttributeConfiguration,
+): ?Object {
+  if (!updatePayload && prevProp === nextProp) {
+    // If no properties have been added, then we can bail out quickly on object
+    // equality.
+    return updatePayload;
+  }
+
+  if (!prevProp || !nextProp) {
+    if (nextProp) {
+      return addNestedProperty(updatePayload, nextProp, validAttributes);
+    }
+    if (prevProp) {
+      return clearNestedProperty(updatePayload, prevProp, validAttributes);
+    }
+    return updatePayload;
+  }
+
+  if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {
+    // Both are leaves, we can diff the leaves.
+    return diffProperties(
+      updatePayload,
+      resolveObject(prevProp),
+      resolveObject(nextProp),
+      validAttributes,
+    );
+  }
+
+  if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
+    // Both are arrays, we can diff the arrays.
+    return diffNestedArrayProperty(
+      updatePayload,
+      prevProp,
+      nextProp,
+      validAttributes,
+    );
+  }
+
+  if (Array.isArray(prevProp)) {
+    return diffProperties(
+      updatePayload,
+      // $FlowFixMe - We know that this is always an object when the input is.
+      flattenStyle(prevProp),
+      // $FlowFixMe - We know that this isn't an array because of above flow.
+      resolveObject(nextProp),
+      validAttributes,
+    );
+  }
+
+  return diffProperties(
+    updatePayload,
+    resolveObject(prevProp),
+    // $FlowFixMe - We know that this is always an object when the input is.
+    flattenStyle(nextProp),
+    validAttributes,
+  );
+}
+
+/**
+ * addNestedProperty takes a single set of props and valid attribute
+ * attribute configurations. It processes each prop and adds it to the
+ * updatePayload.
+ */
+function addNestedProperty(
+  updatePayload: ?Object,
+  nextProp: NestedNode,
+  validAttributes: AttributeConfiguration,
+) {
+  if (!nextProp) {
+    return updatePayload;
+  }
+
+  if (!Array.isArray(nextProp)) {
+    // Add each property of the leaf.
+    return addProperties(
+      updatePayload,
+      resolveObject(nextProp),
+      validAttributes,
+    );
+  }
+
+  for (var i = 0; i < nextProp.length; i++) {
+    // Add all the properties of the array.
+    updatePayload = addNestedProperty(
+      updatePayload,
+      nextProp[i],
+      validAttributes,
+    );
+  }
+
+  return updatePayload;
+}
+
+/**
+ * clearNestedProperty takes a single set of props and valid attributes. It
+ * adds a null sentinel to the updatePayload, for each prop key.
+ */
+function clearNestedProperty(
+  updatePayload: ?Object,
+  prevProp: NestedNode,
+  validAttributes: AttributeConfiguration,
+): ?Object {
+  if (!prevProp) {
+    return updatePayload;
+  }
+
+  if (!Array.isArray(prevProp)) {
+    // Add each property of the leaf.
+    return clearProperties(
+      updatePayload,
+      resolveObject(prevProp),
+      validAttributes,
+    );
+  }
+
+  for (var i = 0; i < prevProp.length; i++) {
+    // Add all the properties of the array.
+    updatePayload = clearNestedProperty(
+      updatePayload,
+      prevProp[i],
+      validAttributes,
+    );
+  }
+  return updatePayload;
+}
+
+/**
+ * diffProperties takes two sets of props and a set of valid attributes
+ * and write to updatePayload the values that changed or were deleted.
+ * If no updatePayload is provided, a new one is created and returned if
+ * anything changed.
+ */
+function diffProperties(
+  updatePayload: ?Object,
+  prevProps: Object,
+  nextProps: Object,
+  validAttributes: AttributeConfiguration,
+): ?Object {
+  var attributeConfig: ?(CustomAttributeConfiguration | AttributeConfiguration);
+  var nextProp;
+  var prevProp;
+
+  for (var propKey in nextProps) {
+    attributeConfig = validAttributes[propKey];
+    if (!attributeConfig) {
+      continue; // not a valid native prop
+    }
+
+    prevProp = prevProps[propKey];
+    nextProp = nextProps[propKey];
+
+    // functions are converted to booleans as markers that the associated
+    // events should be sent from native.
+    if (typeof nextProp === 'function') {
+      nextProp = (true: any);
+      // If nextProp is not a function, then don't bother changing prevProp
+      // since nextProp will win and go into the updatePayload regardless.
+      if (typeof prevProp === 'function') {
+        prevProp = (true: any);
+      }
+    }
+
+    // An explicit value of undefined is treated as a null because it overrides
+    // any other preceeding value.
+    if (typeof nextProp === 'undefined') {
+      nextProp = (null: any);
+      if (typeof prevProp === 'undefined') {
+        prevProp = (null: any);
+      }
+    }
+
+    if (removedKeys) {
+      removedKeys[propKey] = false;
+    }
+
+    if (updatePayload && updatePayload[propKey] !== undefined) {
+      // Something else already triggered an update to this key because another
+      // value diffed. Since we're now later in the nested arrays our value is
+      // more important so we need to calculate it and override the existing
+      // value. It doesn't matter if nothing changed, we'll set it anyway.
+
+      // Pattern match on: attributeConfig
+      if (typeof attributeConfig !== 'object') {
+        // case: !Object is the default case
+        updatePayload[propKey] = nextProp;
+      } else if (
+        typeof attributeConfig.diff === 'function' ||
+        typeof attributeConfig.process === 'function'
+      ) {
+        // case: CustomAttributeConfiguration
+        var nextValue = typeof attributeConfig.process === 'function'
+          ? attributeConfig.process(nextProp)
+          : nextProp;
+        updatePayload[propKey] = nextValue;
+      }
+      continue;
+    }
+
+    if (prevProp === nextProp) {
+      continue; // nothing changed
+    }
+
+    // Pattern match on: attributeConfig
+    if (typeof attributeConfig !== 'object') {
+      // case: !Object is the default case
+      if (defaultDiffer(prevProp, nextProp)) {
+        // a normal leaf has changed
+        (updatePayload || (updatePayload = {}))[propKey] = nextProp;
+      }
+    } else if (
+      typeof attributeConfig.diff === 'function' ||
+      typeof attributeConfig.process === 'function'
+    ) {
+      // case: CustomAttributeConfiguration
+      var shouldUpdate =
+        prevProp === undefined ||
+        (typeof attributeConfig.diff === 'function'
+          ? attributeConfig.diff(prevProp, nextProp)
+          : defaultDiffer(prevProp, nextProp));
+      if (shouldUpdate) {
+        nextValue = typeof attributeConfig.process === 'function'
+          ? attributeConfig.process(nextProp)
+          : nextProp;
+        (updatePayload || (updatePayload = {}))[propKey] = nextValue;
+      }
+    } else {
+      // default: fallthrough case when nested properties are defined
+      removedKeys = null;
+      removedKeyCount = 0;
+      // We think that attributeConfig is not CustomAttributeConfiguration at
+      // this point so we assume it must be AttributeConfiguration.
+      updatePayload = diffNestedProperty(
+        updatePayload,
+        prevProp,
+        nextProp,
+        ((attributeConfig: any): AttributeConfiguration),
+      );
+      if (removedKeyCount > 0 && updatePayload) {
+        restoreDeletedValuesInNestedArray(
+          updatePayload,
+          nextProp,
+          ((attributeConfig: any): AttributeConfiguration),
+        );
+        removedKeys = null;
+      }
+    }
+  }
+
+  // Also iterate through all the previous props to catch any that have been
+  // removed and make sure native gets the signal so it can reset them to the
+  // default.
+  for (propKey in prevProps) {
+    if (nextProps[propKey] !== undefined) {
+      continue; // we've already covered this key in the previous pass
+    }
+    attributeConfig = validAttributes[propKey];
+    if (!attributeConfig) {
+      continue; // not a valid native prop
+    }
+
+    if (updatePayload && updatePayload[propKey] !== undefined) {
+      // This was already updated to a diff result earlier.
+      continue;
+    }
+
+    prevProp = prevProps[propKey];
+    if (prevProp === undefined) {
+      continue; // was already empty anyway
+    }
+    // Pattern match on: attributeConfig
+    if (
+      typeof attributeConfig !== 'object' ||
+      typeof attributeConfig.diff === 'function' ||
+      typeof attributeConfig.process === 'function'
+    ) {
+      // case: CustomAttributeConfiguration | !Object
+      // Flag the leaf property for removal by sending a sentinel.
+      (updatePayload || (updatePayload = {}))[propKey] = null;
+      if (!removedKeys) {
+        removedKeys = {};
+      }
+      if (!removedKeys[propKey]) {
+        removedKeys[propKey] = true;
+        removedKeyCount++;
+      }
+    } else {
+      // default:
+      // This is a nested attribute configuration where all the properties
+      // were removed so we need to go through and clear out all of them.
+      updatePayload = clearNestedProperty(
+        updatePayload,
+        prevProp,
+        ((attributeConfig: any): AttributeConfiguration),
+      );
+    }
+  }
+  return updatePayload;
+}
+
+/**
+ * addProperties adds all the valid props to the payload after being processed.
+ */
+function addProperties(
+  updatePayload: ?Object,
+  props: Object,
+  validAttributes: AttributeConfiguration,
+): ?Object {
+  // TODO: Fast path
+  return diffProperties(updatePayload, emptyObject, props, validAttributes);
+}
+
+/**
+ * clearProperties clears all the previous props by adding a null sentinel
+ * to the payload for each valid key.
+ */
+function clearProperties(
+  updatePayload: ?Object,
+  prevProps: Object,
+  validAttributes: AttributeConfiguration,
+): ?Object {
+  // TODO: Fast path
+  return diffProperties(updatePayload, prevProps, emptyObject, validAttributes);
+}
+
+var ReactNativeAttributePayload = {
+  create: function(
+    props: Object,
+    validAttributes: AttributeConfiguration,
+  ): ?Object {
+    return addProperties(
+      null, // updatePayload
+      props,
+      validAttributes,
+    );
+  },
+
+  diff: function(
+    prevProps: Object,
+    nextProps: Object,
+    validAttributes: AttributeConfiguration,
+  ): ?Object {
+    return diffProperties(
+      null, // updatePayload
+      prevProps,
+      nextProps,
+      validAttributes,
+    );
+  },
+};
+
+module.exports = ReactNativeAttributePayload;
diff --git a/src/renderers/native/ReactNativeBaseComponent.js b/src/renderers/native/ReactNativeBaseComponent.js
new file mode 100644
index 000000000..37de96770
--- /dev/null
+++ b/src/renderers/native/ReactNativeBaseComponent.js
@@ -0,0 +1,233 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNativeBaseComponent
+ * @flow
+ */
+'use strict';
+
+var NativeMethodsMixin = require('NativeMethodsMixin');
+var ReactNativeAttributePayload = require('ReactNativeAttributePayload');
+var ReactNativeComponentTree = require('ReactNativeComponentTree');
+var ReactNativeEventEmitter = require('ReactNativeEventEmitter');
+var ReactNativeTagHandles = require('ReactNativeTagHandles');
+var ReactMultiChild = require('ReactMultiChild');
+var UIManager = require('UIManager');
+
+var deepFreezeAndThrowOnMutationInDev = require('deepFreezeAndThrowOnMutationInDev');
+
+var registrationNames = ReactNativeEventEmitter.registrationNames;
+var putListener = ReactNativeEventEmitter.putListener;
+var deleteListener = ReactNativeEventEmitter.deleteListener;
+var deleteAllListeners = ReactNativeEventEmitter.deleteAllListeners;
+
+type ReactNativeBaseComponentViewConfig = {
+  validAttributes: Object,
+  uiViewClassName: string,
+};
+
+// require('UIManagerStatTracker').install(); // uncomment to enable
+
+/**
+ * @constructor ReactNativeBaseComponent
+ * @extends ReactComponent
+ * @extends ReactMultiChild
+ * @param {!object} UIKit View Configuration.
+ */
+var ReactNativeBaseComponent = function(
+  viewConfig: ReactNativeBaseComponentViewConfig,
+) {
+  this.viewConfig = viewConfig;
+};
+
+/**
+ * Mixin for containers that contain UIViews. NOTE: markup is rendered markup
+ * which is a `viewID` ... see the return value for `mountComponent` !
+ */
+ReactNativeBaseComponent.Mixin = {
+  getPublicInstance: function() {
+    // TODO: This should probably use a composite wrapper
+    return this;
+  },
+
+  unmountComponent: function() {
+    ReactNativeComponentTree.uncacheNode(this);
+    deleteAllListeners(this);
+    this.unmountChildren();
+    this._rootNodeID = 0;
+  },
+
+  /**
+   * Every native component is responsible for allocating its own `tag`, and
+   * issuing the native `createView` command. But it is not responsible for
+   * recording the fact that its own `rootNodeID` is associated with a
+   * `nodeHandle`. Only the code that actually adds its `nodeHandle` (`tag`) as
+   * a child of a container can confidently record that in
+   * `ReactNativeTagHandles`.
+   */
+  initializeChildren: function(children, containerTag, transaction, context) {
+    var mountImages = this.mountChildren(children, transaction, context);
+    // In a well balanced tree, half of the nodes are in the bottom row and have
+    // no children - let's avoid calling out to the native bridge for a large
+    // portion of the children.
+    if (mountImages.length) {
+      // TODO: Pool these per platform view class. Reusing the `mountImages`
+      // array would likely be a jit deopt.
+      var createdTags = [];
+      for (var i = 0, l = mountImages.length; i < l; i++) {
+        var mountImage = mountImages[i];
+        var childTag = mountImage;
+        createdTags[i] = childTag;
+      }
+      UIManager.setChildren(containerTag, createdTags);
+    }
+  },
+
+  /**
+   * Updates the component's currently mounted representation.
+   *
+   * @param {object} nextElement
+   * @param {ReactReconcileTransaction} transaction
+   * @param {object} context
+   * @internal
+   */
+  receiveComponent: function(nextElement, transaction, context) {
+    var prevElement = this._currentElement;
+    this._currentElement = nextElement;
+
+    if (__DEV__) {
+      for (var key in this.viewConfig.validAttributes) {
+        if (nextElement.props.hasOwnProperty(key)) {
+          deepFreezeAndThrowOnMutationInDev(nextElement.props[key]);
+        }
+      }
+    }
+
+    var updatePayload = ReactNativeAttributePayload.diff(
+      prevElement.props,
+      nextElement.props,
+      this.viewConfig.validAttributes,
+    );
+
+    if (updatePayload) {
+      UIManager.updateView(
+        this._rootNodeID,
+        this.viewConfig.uiViewClassName,
+        updatePayload,
+      );
+    }
+
+    this._reconcileListenersUponUpdate(prevElement.props, nextElement.props);
+    this.updateChildren(nextElement.props.children, transaction, context);
+  },
+
+  /**
+   * @param {object} initialProps Native component props.
+   */
+  _registerListenersUponCreation: function(initialProps) {
+    for (var key in initialProps) {
+      // NOTE: The check for `!props[key]`, is only possible because this method
+      // registers listeners the *first* time a component is created.
+      if (registrationNames[key] && initialProps[key]) {
+        var listener = initialProps[key];
+        putListener(this, key, listener);
+      }
+    }
+  },
+
+  /**
+   * Reconciles event listeners, adding or removing if necessary.
+   * @param {object} prevProps Native component props including events.
+   * @param {object} nextProps Next native component props including events.
+   */
+  _reconcileListenersUponUpdate: function(prevProps, nextProps) {
+    for (var key in nextProps) {
+      if (registrationNames[key] && nextProps[key] !== prevProps[key]) {
+        if (nextProps[key]) {
+          putListener(this, key, nextProps[key]);
+        } else {
+          deleteListener(this, key);
+        }
+      }
+    }
+  },
+
+  /**
+   * Currently this still uses IDs for reconciliation so this can return null.
+   *
+   * @return {null} Null.
+   */
+  getHostNode: function() {
+    return this._rootNodeID;
+  },
+
+  /**
+   * @param {ReactNativeReconcileTransaction} transaction
+   * @param {?ReactNativeBaseComponent} the parent component instance
+   * @param {?object} info about the host container
+   * @param {object} context
+   * @return {string} Unique iOS view tag.
+   */
+  mountComponent: function(
+    transaction,
+    hostParent,
+    hostContainerInfo,
+    context,
+  ) {
+    var tag = ReactNativeTagHandles.allocateTag();
+
+    this._rootNodeID = tag;
+    this._hostParent = hostParent;
+    this._hostContainerInfo = hostContainerInfo;
+
+    if (__DEV__) {
+      for (var key in this.viewConfig.validAttributes) {
+        if (this._currentElement.props.hasOwnProperty(key)) {
+          deepFreezeAndThrowOnMutationInDev(this._currentElement.props[key]);
+        }
+      }
+    }
+
+    var updatePayload = ReactNativeAttributePayload.create(
+      this._currentElement.props,
+      this.viewConfig.validAttributes,
+    );
+
+    var nativeTopRootTag = hostContainerInfo._tag;
+    UIManager.createView(
+      tag,
+      this.viewConfig.uiViewClassName,
+      nativeTopRootTag,
+      updatePayload,
+    );
+
+    ReactNativeComponentTree.precacheNode(this, tag);
+
+    this._registerListenersUponCreation(this._currentElement.props);
+    this.initializeChildren(
+      this._currentElement.props.children,
+      tag,
+      transaction,
+      context,
+    );
+    return tag;
+  },
+};
+
+/**
+ * Order of mixins is important. ReactNativeBaseComponent overrides methods in
+ * ReactMultiChild.
+ */
+Object.assign(
+  ReactNativeBaseComponent.prototype,
+  ReactMultiChild.Mixin,
+  ReactNativeBaseComponent.Mixin,
+  NativeMethodsMixin,
+);
+
+module.exports = ReactNativeBaseComponent;
diff --git a/src/renderers/native/ReactNativeBridgeEventPlugin.js b/src/renderers/native/ReactNativeBridgeEventPlugin.js
new file mode 100644
index 000000000..35c2dad39
--- /dev/null
+++ b/src/renderers/native/ReactNativeBridgeEventPlugin.js
@@ -0,0 +1,70 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNativeBridgeEventPlugin
+ * @flow
+ */
+'use strict';
+
+var EventPropagators = require('EventPropagators');
+var SyntheticEvent = require('SyntheticEvent');
+var UIManager = require('UIManager');
+
+var warning = require('warning');
+
+var customBubblingEventTypes = UIManager.customBubblingEventTypes;
+var customDirectEventTypes = UIManager.customDirectEventTypes;
+
+var allTypesByEventName = {};
+
+for (var bubblingTypeName in customBubblingEventTypes) {
+  allTypesByEventName[bubblingTypeName] =
+    customBubblingEventTypes[bubblingTypeName];
+}
+
+for (var directTypeName in customDirectEventTypes) {
+  warning(
+    !customBubblingEventTypes[directTypeName],
+    'Event cannot be both direct and bubbling: %s',
+    directTypeName,
+  );
+  allTypesByEventName[directTypeName] = customDirectEventTypes[directTypeName];
+}
+
+var ReactNativeBridgeEventPlugin = {
+  eventTypes: {...customBubblingEventTypes, ...customDirectEventTypes},
+
+  /**
+   * @see {EventPluginHub.extractEvents}
+   */
+  extractEvents: function(
+    topLevelType: string,
+    targetInst: Object,
+    nativeEvent: Event,
+    nativeEventTarget: Object,
+  ): ?Object {
+    var bubbleDispatchConfig = customBubblingEventTypes[topLevelType];
+    var directDispatchConfig = customDirectEventTypes[topLevelType];
+    var event = SyntheticEvent.getPooled(
+      bubbleDispatchConfig || directDispatchConfig,
+      targetInst,
+      nativeEvent,
+      nativeEventTarget,
+    );
+    if (bubbleDispatchConfig) {
+      EventPropagators.accumulateTwoPhaseDispatches(event);
+    } else if (directDispatchConfig) {
+      EventPropagators.accumulateDirectDispatches(event);
+    } else {
+      return null;
+    }
+    return event;
+  },
+};
+
+module.exports = ReactNativeBridgeEventPlugin;
diff --git a/src/renderers/native/ReactNativeComponentEnvironment.js b/src/renderers/native/ReactNativeComponentEnvironment.js
new file mode 100644
index 000000000..041b7bac5
--- /dev/null
+++ b/src/renderers/native/ReactNativeComponentEnvironment.js
@@ -0,0 +1,32 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNativeComponentEnvironment
+ * @flow
+ */
+'use strict';
+
+var ReactNativeDOMIDOperations = require('ReactNativeDOMIDOperations');
+var ReactNativeReconcileTransaction = require('ReactNativeReconcileTransaction');
+
+var ReactNativeComponentEnvironment = {
+  processChildrenUpdates:
+    ReactNativeDOMIDOperations.dangerouslyProcessChildrenUpdates,
+
+  replaceNodeWithMarkup:
+    ReactNativeDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,
+
+  /**
+   * @param {DOMElement} Element to clear.
+   */
+  clearNode: function(/*containerView*/) {},
+
+  ReactReconcileTransaction: ReactNativeReconcileTransaction,
+};
+
+module.exports = ReactNativeComponentEnvironment;
diff --git a/src/renderers/native/ReactNativeComponentTree.js b/src/renderers/native/ReactNativeComponentTree.js
new file mode 100644
index 000000000..7b16b8512
--- /dev/null
+++ b/src/renderers/native/ReactNativeComponentTree.js
@@ -0,0 +1,66 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNativeComponentTree
+ */
+
+'use strict';
+
+var invariant = require('invariant');
+
+var instanceCache = {};
+
+/**
+ * Drill down (through composites and empty components) until we get a host or
+ * host text component.
+ *
+ * This is pretty polymorphic but unavoidable with the current structure we have
+ * for `_renderedChildren`.
+ */
+function getRenderedHostOrTextFromComponent(component) {
+  var rendered;
+  while ((rendered = component._renderedComponent)) {
+    component = rendered;
+  }
+  return component;
+}
+
+/**
+ * Populate `_hostNode` on the rendered host/text component with the given
+ * DOM node. The passed `inst` can be a composite.
+ */
+function precacheNode(inst, tag) {
+  var nativeInst = getRenderedHostOrTextFromComponent(inst);
+  instanceCache[tag] = nativeInst;
+}
+
+function uncacheNode(inst) {
+  var tag = inst._rootNodeID;
+  if (tag) {
+    delete instanceCache[tag];
+  }
+}
+
+function getInstanceFromTag(tag) {
+  return instanceCache[tag] || null;
+}
+
+function getTagFromInstance(inst) {
+  invariant(inst._rootNodeID, 'All native instances should have a tag.');
+  return inst._rootNodeID;
+}
+
+var ReactNativeComponentTree = {
+  getClosestInstanceFromNode: getInstanceFromTag,
+  getInstanceFromNode: getInstanceFromTag,
+  getNodeFromInstance: getTagFromInstance,
+  precacheNode: precacheNode,
+  uncacheNode: uncacheNode,
+};
+
+module.exports = ReactNativeComponentTree;
diff --git a/src/renderers/native/ReactNativeContainerInfo.js b/src/renderers/native/ReactNativeContainerInfo.js
new file mode 100644
index 000000000..6d24f4c75
--- /dev/null
+++ b/src/renderers/native/ReactNativeContainerInfo.js
@@ -0,0 +1,21 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNativeContainerInfo
+ * @flow
+ */
+'use strict';
+
+function ReactNativeContainerInfo(tag: number) {
+  var info = {
+    _tag: tag,
+  };
+  return info;
+}
+
+module.exports = ReactNativeContainerInfo;
diff --git a/src/renderers/native/ReactNativeDOMIDOperations.js b/src/renderers/native/ReactNativeDOMIDOperations.js
new file mode 100644
index 000000000..c008373f6
--- /dev/null
+++ b/src/renderers/native/ReactNativeDOMIDOperations.js
@@ -0,0 +1,85 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNativeDOMIDOperations
+ */
+'use strict';
+
+var ReactNativeComponentTree = require('ReactNativeComponentTree');
+var UIManager = require('UIManager');
+
+/**
+ * Updates a component's children by processing a series of updates.
+ * For each of the update/create commands, the `fromIndex` refers to the index
+ * that the item existed at *before* any of the updates are applied, and the
+ * `toIndex` refers to the index after *all* of the updates are applied
+ * (including deletes/moves). TODO: refactor so this can be shared with
+ * DOMChildrenOperations.
+ *
+ * @param {ReactNativeBaseComponent} updates List of update configurations.
+ * @param {array<string>} markup List of markup strings - in the case of React
+ * IOS, the ids of new components assumed to be already created.
+ */
+var dangerouslyProcessChildrenUpdates = function(inst, childrenUpdates) {
+  if (!childrenUpdates.length) {
+    return;
+  }
+
+  var containerTag = ReactNativeComponentTree.getNodeFromInstance(inst);
+
+  var moveFromIndices;
+  var moveToIndices;
+  var addChildTags;
+  var addAtIndices;
+  var removeAtIndices;
+
+  for (var i = 0; i < childrenUpdates.length; i++) {
+    var update = childrenUpdates[i];
+    if (update.type === 'MOVE_EXISTING') {
+      (moveFromIndices || (moveFromIndices = [])).push(update.fromIndex);
+      (moveToIndices || (moveToIndices = [])).push(update.toIndex);
+    } else if (update.type === 'REMOVE_NODE') {
+      (removeAtIndices || (removeAtIndices = [])).push(update.fromIndex);
+    } else if (update.type === 'INSERT_MARKUP') {
+      var mountImage = update.content;
+      var tag = mountImage;
+      (addAtIndices || (addAtIndices = [])).push(update.toIndex);
+      (addChildTags || (addChildTags = [])).push(tag);
+    }
+  }
+
+  UIManager.manageChildren(
+    containerTag,
+    moveFromIndices,
+    moveToIndices,
+    addChildTags,
+    addAtIndices,
+    removeAtIndices,
+  );
+};
+
+/**
+ * Operations used to process updates to DOM nodes. This is made injectable via
+ * `ReactComponent.DOMIDOperations`.
+ */
+var ReactNativeDOMIDOperations = {
+  dangerouslyProcessChildrenUpdates,
+
+  /**
+   * Replaces a view that exists in the document with markup.
+   *
+   * @param {string} id ID of child to be replaced.
+   * @param {string} markup Mount image to replace child with id.
+   */
+  dangerouslyReplaceNodeWithMarkupByID: function(id, mountImage) {
+    var oldTag = id;
+    UIManager.replaceExistingNonRootView(oldTag, mountImage);
+  },
+};
+
+module.exports = ReactNativeDOMIDOperations;
diff --git a/src/renderers/native/ReactNativeDefaultInjection.js b/src/renderers/native/ReactNativeDefaultInjection.js
new file mode 100644
index 000000000..3deef3b0e
--- /dev/null
+++ b/src/renderers/native/ReactNativeDefaultInjection.js
@@ -0,0 +1,109 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNativeDefaultInjection
+ * @flow
+ */
+'use strict';
+
+/**
+ * Make sure essential globals are available and are patched correctly. Please don't remove this
+ * line. Bundles created by react-packager `require` it before executing any application code. This
+ * ensures it exists in the dependency graph and can be `require`d.
+ * TODO: require this in packager, not in React #10932517
+ */
+require('InitializeJavaScriptAppEngine');
+
+var EventPluginHub = require('EventPluginHub');
+var EventPluginUtils = require('EventPluginUtils');
+var RCTEventEmitter = require('RCTEventEmitter');
+var React = require('React');
+var ReactComponentEnvironment = require('ReactComponentEnvironment');
+var ReactDefaultBatchingStrategy = require('ReactDefaultBatchingStrategy');
+var ReactEmptyComponent = require('ReactEmptyComponent');
+var ReactNativeBridgeEventPlugin = require('ReactNativeBridgeEventPlugin');
+var ReactHostComponent = require('ReactHostComponent');
+var ReactNativeComponentEnvironment = require('ReactNativeComponentEnvironment');
+var ReactNativeComponentTree = require('ReactNativeComponentTree');
+var ReactNativeEventEmitter = require('ReactNativeEventEmitter');
+var ReactNativeEventPluginOrder = require('ReactNativeEventPluginOrder');
+var ReactNativeGlobalResponderHandler = require('ReactNativeGlobalResponderHandler');
+var ReactNativeTextComponent = require('ReactNativeTextComponent');
+var ReactNativeTreeTraversal = require('ReactNativeTreeTraversal');
+var ReactSimpleEmptyComponent = require('ReactSimpleEmptyComponent');
+var ReactUpdates = require('ReactUpdates');
+var ResponderEventPlugin = require('ResponderEventPlugin');
+
+var invariant = require('invariant');
+
+function inject() {
+  /**
+   * Register the event emitter with the native bridge
+   */
+  RCTEventEmitter.register(ReactNativeEventEmitter);
+
+  /**
+   * Inject module for resolving DOM hierarchy and plugin ordering.
+   */
+  EventPluginHub.injection.injectEventPluginOrder(ReactNativeEventPluginOrder);
+  EventPluginUtils.injection.injectComponentTree(ReactNativeComponentTree);
+  EventPluginUtils.injection.injectTreeTraversal(ReactNativeTreeTraversal);
+
+  ResponderEventPlugin.injection.injectGlobalResponderHandler(
+    ReactNativeGlobalResponderHandler,
+  );
+
+  /**
+   * Some important event plugins included by default (without having to require
+   * them).
+   */
+  EventPluginHub.injection.injectEventPluginsByName({
+    ResponderEventPlugin: ResponderEventPlugin,
+    ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin,
+  });
+
+  ReactUpdates.injection.injectReconcileTransaction(
+    ReactNativeComponentEnvironment.ReactReconcileTransaction,
+  );
+
+  ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
+
+  ReactComponentEnvironment.injection.injectEnvironment(
+    ReactNativeComponentEnvironment,
+  );
+
+  var EmptyComponent = instantiate => {
+    // Can't import View at the top because it depends on React to make its composite
+    var View = require('View');
+    return new ReactSimpleEmptyComponent(
+      React.createElement(View, {
+        collapsable: true,
+        style: {position: 'absolute'},
+      }),
+      instantiate,
+    );
+  };
+
+  ReactEmptyComponent.injection.injectEmptyComponentFactory(EmptyComponent);
+
+  ReactHostComponent.injection.injectTextComponentClass(
+    ReactNativeTextComponent,
+  );
+  ReactHostComponent.injection.injectGenericComponentClass(function(tag) {
+    // Show a nicer error message for non-function tags
+    var info = '';
+    if (typeof tag === 'string' && /^[a-z]/.test(tag)) {
+      info += ' Each component name should start with an uppercase letter.';
+    }
+    invariant(false, 'Expected a component class, got %s.%s', tag, info);
+  });
+}
+
+module.exports = {
+  inject: inject,
+};
diff --git a/src/renderers/native/ReactNativeEventEmitter.js b/src/renderers/native/ReactNativeEventEmitter.js
new file mode 100644
index 000000000..95011989c
--- /dev/null
+++ b/src/renderers/native/ReactNativeEventEmitter.js
@@ -0,0 +1,219 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNativeEventEmitter
+ * @flow
+ */
+'use strict';
+
+var EventPluginHub = require('EventPluginHub');
+var EventPluginRegistry = require('EventPluginRegistry');
+var ReactEventEmitterMixin = require('ReactEventEmitterMixin');
+var ReactNativeComponentTree = require('ReactNativeComponentTree');
+var ReactNativeTagHandles = require('ReactNativeTagHandles');
+var ReactUpdates = require('ReactUpdates');
+
+var warning = require('warning');
+
+/**
+ * Version of `ReactBrowserEventEmitter` that works on the receiving side of a
+ * serialized worker boundary.
+ */
+
+// Shared default empty native event - conserve memory.
+var EMPTY_NATIVE_EVENT = {};
+
+/**
+ * Selects a subsequence of `Touch`es, without destroying `touches`.
+ *
+ * @param {Array<Touch>} touches Deserialized touch objects.
+ * @param {Array<number>} indices Indices by which to pull subsequence.
+ * @return {Array<Touch>} Subsequence of touch objects.
+ */
+var touchSubsequence = function(touches, indices) {
+  var ret = [];
+  for (var i = 0; i < indices.length; i++) {
+    ret.push(touches[indices[i]]);
+  }
+  return ret;
+};
+
+/**
+ * TODO: Pool all of this.
+ *
+ * Destroys `touches` by removing touch objects at indices `indices`. This is
+ * to maintain compatibility with W3C touch "end" events, where the active
+ * touches don't include the set that has just been "ended".
+ *
+ * @param {Array<Touch>} touches Deserialized touch objects.
+ * @param {Array<number>} indices Indices to remove from `touches`.
+ * @return {Array<Touch>} Subsequence of removed touch objects.
+ */
+var removeTouchesAtIndices = function(
+  touches: Array<Object>,
+  indices: Array<number>,
+): Array<Object> {
+  var rippedOut = [];
+  // use an unsafe downcast to alias to nullable elements,
+  // so we can delete and then compact.
+  var temp: Array<?Object> = (touches: Array<any>);
+  for (var i = 0; i < indices.length; i++) {
+    var index = indices[i];
+    rippedOut.push(touches[index]);
+    temp[index] = null;
+  }
+  var fillAt = 0;
+  for (var j = 0; j < temp.length; j++) {
+    var cur = temp[j];
+    if (cur !== null) {
+      temp[fillAt++] = cur;
+    }
+  }
+  temp.length = fillAt;
+  return rippedOut;
+};
+
+/**
+ * `ReactNativeEventEmitter` is used to attach top-level event listeners. For example:
+ *
+ *   ReactNativeEventEmitter.putListener('myID', 'onClick', myFunction);
+ *
+ * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
+ *
+ * @internal
+ */
+var ReactNativeEventEmitter = {
+  ...ReactEventEmitterMixin,
+
+  registrationNames: EventPluginRegistry.registrationNameModules,
+
+  putListener: EventPluginHub.putListener,
+
+  getListener: EventPluginHub.getListener,
+
+  deleteListener: EventPluginHub.deleteListener,
+
+  deleteAllListeners: EventPluginHub.deleteAllListeners,
+
+  /**
+   * Internal version of `receiveEvent` in terms of normalized (non-tag)
+   * `rootNodeID`.
+   *
+   * @see receiveEvent.
+   *
+   * @param {rootNodeID} rootNodeID React root node ID that event occurred on.
+   * @param {TopLevelType} topLevelType Top level type of event.
+   * @param {object} nativeEventParam Object passed from native.
+   */
+  _receiveRootNodeIDEvent: function(
+    rootNodeID: number,
+    topLevelType: string,
+    nativeEventParam: Object,
+  ) {
+    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT;
+    var inst = ReactNativeComponentTree.getInstanceFromNode(rootNodeID);
+    if (!inst) {
+      // If the original instance is already gone, we don't have to dispatch
+      // any events.
+      return;
+    }
+    ReactUpdates.batchedUpdates(function() {
+      ReactNativeEventEmitter.handleTopLevel(
+        topLevelType,
+        inst,
+        nativeEvent,
+        nativeEvent.target,
+      );
+    });
+  },
+
+  /**
+   * Publicly exposed method on module for native objc to invoke when a top
+   * level event is extracted.
+   * @param {rootNodeID} rootNodeID React root node ID that event occurred on.
+   * @param {TopLevelType} topLevelType Top level type of event.
+   * @param {object} nativeEventParam Object passed from native.
+   */
+  receiveEvent: function(
+    tag: number,
+    topLevelType: string,
+    nativeEventParam: Object,
+  ) {
+    var rootNodeID = tag;
+    ReactNativeEventEmitter._receiveRootNodeIDEvent(
+      rootNodeID,
+      topLevelType,
+      nativeEventParam,
+    );
+  },
+
+  /**
+   * Simple multi-wrapper around `receiveEvent` that is intended to receive an
+   * efficient representation of `Touch` objects, and other information that
+   * can be used to construct W3C compliant `Event` and `Touch` lists.
+   *
+   * This may create dispatch behavior that differs than web touch handling. We
+   * loop through each of the changed touches and receive it as a single event.
+   * So two `touchStart`/`touchMove`s that occur simultaneously are received as
+   * two separate touch event dispatches - when they arguably should be one.
+   *
+   * This implementation reuses the `Touch` objects themselves as the `Event`s
+   * since we dispatch an event for each touch (though that might not be spec
+   * compliant). The main purpose of reusing them is to save allocations.
+   *
+   * TODO: Dispatch multiple changed touches in one event. The bubble path
+   * could be the first common ancestor of all the `changedTouches`.
+   *
+   * One difference between this behavior and W3C spec: cancelled touches will
+   * not appear in `.touches`, or in any future `.touches`, though they may
+   * still be "actively touching the surface".
+   *
+   * Web desktop polyfills only need to construct a fake touch event with
+   * identifier 0, also abandoning traditional click handlers.
+   */
+  receiveTouches: function(
+    eventTopLevelType: string,
+    touches: Array<Object>,
+    changedIndices: Array<number>,
+  ) {
+    var changedTouches = eventTopLevelType === 'topTouchEnd' ||
+      eventTopLevelType === 'topTouchCancel'
+      ? removeTouchesAtIndices(touches, changedIndices)
+      : touchSubsequence(touches, changedIndices);
+
+    for (var jj = 0; jj < changedTouches.length; jj++) {
+      var touch = changedTouches[jj];
+      // Touch objects can fulfill the role of `DOM` `Event` objects if we set
+      // the `changedTouches`/`touches`. This saves allocations.
+      touch.changedTouches = changedTouches;
+      touch.touches = touches;
+      var nativeEvent = touch;
+      var rootNodeID = null;
+      var target = nativeEvent.target;
+      if (target !== null && target !== undefined) {
+        if (target < ReactNativeTagHandles.tagsStartAt) {
+          if (__DEV__) {
+            warning(
+              false,
+              'A view is reporting that a touch occured on tag zero.',
+            );
+          }
+        } else {
+          rootNodeID = target;
+        }
+      }
+      ReactNativeEventEmitter._receiveRootNodeIDEvent(
+        rootNodeID,
+        eventTopLevelType,
+        nativeEvent,
+      );
+    }
+  },
+};
+
+module.exports = ReactNativeEventEmitter;
diff --git a/src/renderers/native/ReactNativeEventPluginOrder.js b/src/renderers/native/ReactNativeEventPluginOrder.js
new file mode 100644
index 000000000..b1b5f66d1
--- /dev/null
+++ b/src/renderers/native/ReactNativeEventPluginOrder.js
@@ -0,0 +1,19 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNativeEventPluginOrder
+ * @flow
+ */
+'use strict';
+
+var ReactNativeEventPluginOrder = [
+  'ResponderEventPlugin',
+  'ReactNativeBridgeEventPlugin',
+];
+
+module.exports = ReactNativeEventPluginOrder;
diff --git a/src/renderers/native/ReactNativeGlobalResponderHandler.js b/src/renderers/native/ReactNativeGlobalResponderHandler.js
new file mode 100644
index 000000000..26bf46d87
--- /dev/null
+++ b/src/renderers/native/ReactNativeGlobalResponderHandler.js
@@ -0,0 +1,25 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNativeGlobalResponderHandler
+ */
+'use strict';
+
+var UIManager = require('UIManager');
+
+var ReactNativeGlobalResponderHandler = {
+  onChange: function(from, to, blockNativeResponder) {
+    if (to !== null) {
+      UIManager.setJSResponder(to._rootNodeID, blockNativeResponder);
+    } else {
+      UIManager.clearJSResponder();
+    }
+  },
+};
+
+module.exports = ReactNativeGlobalResponderHandler;
diff --git a/src/renderers/native/ReactNativeMount.js b/src/renderers/native/ReactNativeMount.js
new file mode 100644
index 000000000..8654fbcec
--- /dev/null
+++ b/src/renderers/native/ReactNativeMount.js
@@ -0,0 +1,221 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNativeMount
+ * @flow
+ */
+'use strict';
+
+var React = require('React');
+var ReactInstrumentation = require('ReactInstrumentation');
+var ReactNativeContainerInfo = require('ReactNativeContainerInfo');
+var ReactNativeTagHandles = require('ReactNativeTagHandles');
+var ReactReconciler = require('ReactReconciler');
+var ReactUpdateQueue = require('ReactUpdateQueue');
+var ReactUpdates = require('ReactUpdates');
+var UIManager = require('UIManager');
+
+var emptyObject = require('emptyObject');
+var instantiateReactComponent = require('instantiateReactComponent');
+var shouldUpdateReactComponent = require('shouldUpdateReactComponent');
+
+/**
+ * Temporary (?) hack so that we can store all top-level pending updates on
+ * composites instead of having to worry about different types of components
+ * here.
+ */
+var TopLevelWrapper = function() {};
+TopLevelWrapper.prototype.isReactComponent = {};
+if (__DEV__) {
+  TopLevelWrapper.displayName = 'TopLevelWrapper';
+}
+TopLevelWrapper.prototype.render = function() {
+  return this.props.child;
+};
+TopLevelWrapper.isReactTopLevelWrapper = true;
+
+/**
+ * Mounts this component and inserts it into the DOM.
+ *
+ * @param {ReactComponent} componentInstance The instance to mount.
+ * @param {number} rootID ID of the root node.
+ * @param {number} containerTag container element to mount into.
+ * @param {ReactReconcileTransaction} transaction
+ */
+function mountComponentIntoNode(componentInstance, containerTag, transaction) {
+  var markup = ReactReconciler.mountComponent(
+    componentInstance,
+    transaction,
+    null,
+    ReactNativeContainerInfo(containerTag),
+    emptyObject,
+    0 /* parentDebugID */,
+  );
+  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
+  ReactNativeMount._mountImageIntoNode(markup, containerTag);
+}
+
+/**
+ * Batched mount.
+ *
+ * @param {ReactComponent} componentInstance The instance to mount.
+ * @param {number} rootID ID of the root node.
+ * @param {number} containerTag container element to mount into.
+ */
+function batchedMountComponentIntoNode(componentInstance, containerTag) {
+  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
+  transaction.perform(
+    mountComponentIntoNode,
+    null,
+    componentInstance,
+    containerTag,
+    transaction,
+  );
+  ReactUpdates.ReactReconcileTransaction.release(transaction);
+}
+
+/**
+ * As soon as `ReactMount` is refactored to not rely on the DOM, we can share
+ * code between the two. For now, we'll hard code the ID logic.
+ */
+var ReactNativeMount = {
+  _instancesByContainerID: {},
+
+  // these two functions are needed by React Devtools
+  findNodeHandle: require('findNodeHandle'),
+
+  /**
+   * @param {ReactComponent} instance Instance to render.
+   * @param {containerTag} containerView Handle to native view tag
+   */
+  renderComponent: function(
+    nextElement: ReactElement<*>,
+    containerTag: number,
+    callback?: ?() => void,
+  ): ?ReactComponent<any, any, any> {
+    var nextWrappedElement = React.createElement(TopLevelWrapper, {
+      child: nextElement,
+    });
+
+    var topRootNodeID = containerTag;
+    var prevComponent = ReactNativeMount._instancesByContainerID[topRootNodeID];
+    if (prevComponent) {
+      var prevWrappedElement = prevComponent._currentElement;
+      var prevElement = prevWrappedElement.props.child;
+      if (shouldUpdateReactComponent(prevElement, nextElement)) {
+        ReactUpdateQueue.enqueueElementInternal(
+          prevComponent,
+          nextWrappedElement,
+          emptyObject,
+        );
+        if (callback) {
+          ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
+        }
+        return prevComponent;
+      } else {
+        ReactNativeMount.unmountComponentAtNode(containerTag);
+      }
+    }
+
+    if (!ReactNativeTagHandles.reactTagIsNativeTopRootID(containerTag)) {
+      console.error('You cannot render into anything but a top root');
+      return null;
+    }
+
+    ReactNativeTagHandles.assertRootTag(containerTag);
+
+    var instance = instantiateReactComponent(nextWrappedElement, false);
+    ReactNativeMount._instancesByContainerID[containerTag] = instance;
+
+    // The initial render is synchronous but any updates that happen during
+    // rendering, in componentWillMount or componentDidMount, will be batched
+    // according to the current batching strategy.
+
+    ReactUpdates.batchedUpdates(
+      batchedMountComponentIntoNode,
+      instance,
+      containerTag,
+    );
+    var component = instance.getPublicInstance();
+    if (callback) {
+      callback.call(component);
+    }
+    return component;
+  },
+
+  /**
+   * @param {View} view View tree image.
+   * @param {number} containerViewID View to insert sub-view into.
+   */
+  _mountImageIntoNode: function(mountImage: number, containerID: number) {
+    // Since we now know that the `mountImage` has been mounted, we can
+    // mark it as such.
+    var childTag = mountImage;
+    UIManager.setChildren(containerID, [childTag]);
+  },
+
+  /**
+   * Standard unmounting of the component that is rendered into `containerID`,
+   * but will also execute a command to remove the actual container view
+   * itself. This is useful when a client is cleaning up a React tree, and also
+   * knows that the container will no longer be needed. When executing
+   * asynchronously, it's easier to just have this method be the one that calls
+   * for removal of the view.
+   */
+  unmountComponentAtNodeAndRemoveContainer: function(containerTag: number) {
+    ReactNativeMount.unmountComponentAtNode(containerTag);
+    // call back into native to remove all of the subviews from this container
+    UIManager.removeRootView(containerTag);
+  },
+
+  /**
+   * Unmount component at container ID by iterating through each child component
+   * that has been rendered and unmounting it. There should just be one child
+   * component at this time.
+   */
+  unmountComponentAtNode: function(containerTag: number): boolean {
+    if (!ReactNativeTagHandles.reactTagIsNativeTopRootID(containerTag)) {
+      console.error('You cannot render into anything but a top root');
+      return false;
+    }
+
+    var instance = ReactNativeMount._instancesByContainerID[containerTag];
+    if (!instance) {
+      return false;
+    }
+    if (__DEV__) {
+      ReactInstrumentation.debugTool.onBeginFlush();
+    }
+    ReactNativeMount.unmountComponentFromNode(instance, containerTag);
+    delete ReactNativeMount._instancesByContainerID[containerTag];
+    if (__DEV__) {
+      ReactInstrumentation.debugTool.onEndFlush();
+    }
+    return true;
+  },
+
+  /**
+   * Unmounts a component and sends messages back to iOS to remove its subviews.
+   *
+   * @param {ReactComponent} instance React component instance.
+   * @param {string} containerID ID of container we're removing from.
+   * @final
+   * @internal
+   * @see {ReactNativeMount.unmountComponentAtNode}
+   */
+  unmountComponentFromNode: function(
+    instance: ReactComponent<any, any, any>,
+    containerID: number,
+  ) {
+    // Call back into native to remove all of the subviews from this container
+    ReactReconciler.unmountComponent(instance);
+    UIManager.removeSubviewsFromContainerWithID(containerID);
+  },
+};
+
+module.exports = ReactNativeMount;
diff --git a/src/renderers/native/ReactNativePropRegistry.js b/src/renderers/native/ReactNativePropRegistry.js
new file mode 100644
index 000000000..3cffb9acf
--- /dev/null
+++ b/src/renderers/native/ReactNativePropRegistry.js
@@ -0,0 +1,44 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNativePropRegistry
+ * @flow
+ */
+'use strict';
+
+var objects = {};
+var uniqueID = 1;
+var emptyObject = {};
+
+class ReactNativePropRegistry {
+  static register(object: Object): number {
+    var id = ++uniqueID;
+    if (__DEV__) {
+      Object.freeze(object);
+    }
+    objects[id] = object;
+    return id;
+  }
+
+  static getByID(id: number): Object {
+    if (!id) {
+      // Used in the style={[condition && id]} pattern,
+      // we want it to be a no-op when the value is false or null
+      return emptyObject;
+    }
+
+    var object = objects[id];
+    if (!object) {
+      console.warn('Invalid style with id `' + id + '`. Skipping ...');
+      return emptyObject;
+    }
+    return object;
+  }
+}
+
+module.exports = ReactNativePropRegistry;
diff --git a/src/renderers/native/ReactNativeReconcileTransaction.js b/src/renderers/native/ReactNativeReconcileTransaction.js
new file mode 100644
index 000000000..9ee4fc981
--- /dev/null
+++ b/src/renderers/native/ReactNativeReconcileTransaction.js
@@ -0,0 +1,132 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNativeReconcileTransaction
+ * @flow
+ */
+'use strict';
+
+var CallbackQueue = require('CallbackQueue');
+var PooledClass = require('PooledClass');
+var Transaction = require('Transaction');
+var ReactInstrumentation = require('ReactInstrumentation');
+var ReactUpdateQueue = require('ReactUpdateQueue');
+
+/**
+ * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks during
+ * the performing of the transaction.
+ */
+var ON_DOM_READY_QUEUEING = {
+  /**
+   * Initializes the internal `onDOMReady` queue.
+   */
+  initialize: function() {
+    this.reactMountReady.reset();
+  },
+
+  /**
+   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
+   */
+  close: function() {
+    this.reactMountReady.notifyAll();
+  },
+};
+
+/**
+ * Executed within the scope of the `Transaction` instance. Consider these as
+ * being member methods, but with an implied ordering while being isolated from
+ * each other.
+ */
+var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];
+
+if (__DEV__) {
+  TRANSACTION_WRAPPERS.push({
+    initialize: ReactInstrumentation.debugTool.onBeginFlush,
+    close: ReactInstrumentation.debugTool.onEndFlush,
+  });
+}
+
+/**
+ * Currently:
+ * - The order that these are listed in the transaction is critical:
+ * - Suppresses events.
+ * - Restores selection range.
+ *
+ * Future:
+ * - Restore document/overflow scroll positions that were unintentionally
+ *   modified via DOM insertions above the top viewport boundary.
+ * - Implement/integrate with customized constraint based layout system and keep
+ *   track of which dimensions must be remeasured.
+ *
+ * @class ReactNativeReconcileTransaction
+ */
+function ReactNativeReconcileTransaction() {
+  this.reinitializeTransaction();
+  this.reactMountReady = CallbackQueue.getPooled(null);
+}
+
+var Mixin = {
+  /**
+   * @see Transaction
+   * @abstract
+   * @final
+   * @return {array<object>} List of operation wrap procedures.
+   *   TODO: convert to array<TransactionWrapper>
+   */
+  getTransactionWrappers: function() {
+    return TRANSACTION_WRAPPERS;
+  },
+
+  /**
+   * @return {object} The queue to collect `onDOMReady` callbacks with.
+   *   TODO: convert to ReactMountReady
+   */
+  getReactMountReady: function() {
+    return this.reactMountReady;
+  },
+
+  /**
+   * @return {object} The queue to collect React async events.
+   */
+  getUpdateQueue: function() {
+    return ReactUpdateQueue;
+  },
+
+  /**
+   * Save current transaction state -- if the return value from this method is
+   * passed to `rollback`, the transaction will be reset to that state.
+   */
+  checkpoint: function() {
+    // reactMountReady is the our only stateful wrapper
+    return this.reactMountReady.checkpoint();
+  },
+
+  rollback: function(checkpoint) {
+    this.reactMountReady.rollback(checkpoint);
+  },
+
+  /**
+   * `PooledClass` looks for this, and will invoke this before allowing this
+   * instance to be reused.
+   */
+  destructor: function() {
+    CallbackQueue.release(this.reactMountReady);
+    this.reactMountReady = null;
+  },
+};
+
+Object.assign(
+  ReactNativeReconcileTransaction.prototype,
+  Transaction,
+  ReactNativeReconcileTransaction,
+  Mixin,
+);
+
+PooledClass.addPoolingTo(ReactNativeReconcileTransaction);
+
+module.exports = ReactNativeReconcileTransaction;
diff --git a/src/renderers/native/ReactNativeTagHandles.js b/src/renderers/native/ReactNativeTagHandles.js
new file mode 100644
index 000000000..6b878dbdb
--- /dev/null
+++ b/src/renderers/native/ReactNativeTagHandles.js
@@ -0,0 +1,58 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNativeTagHandles
+ * @flow
+ */
+'use strict';
+
+var invariant = require('invariant');
+
+/**
+ * Keeps track of allocating and associating native "tags" which are numeric,
+ * unique view IDs. All the native tags are negative numbers, to avoid
+ * collisions, but in the JS we keep track of them as positive integers to store
+ * them effectively in Arrays. So we must refer to them as "inverses" of the
+ * native tags (that are * normally negative).
+ *
+ * It *must* be the case that every `rootNodeID` always maps to the exact same
+ * `tag` forever. The easiest way to accomplish this is to never delete
+ * anything from this table.
+ * Why: Because `dangerouslyReplaceNodeWithMarkupByID` relies on being able to
+ * unmount a component with a `rootNodeID`, then mount a new one in its place,
+ */
+var INITIAL_TAG_COUNT = 1;
+var ReactNativeTagHandles = {
+  tagsStartAt: INITIAL_TAG_COUNT,
+  tagCount: INITIAL_TAG_COUNT,
+
+  allocateTag: function(): number {
+    // Skip over root IDs as those are reserved for native
+    while (this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount)) {
+      ReactNativeTagHandles.tagCount++;
+    }
+    var tag = ReactNativeTagHandles.tagCount;
+    ReactNativeTagHandles.tagCount++;
+    return tag;
+  },
+
+  assertRootTag: function(tag: number): void {
+    invariant(
+      this.reactTagIsNativeTopRootID(tag),
+      'Expect a native root tag, instead got %s',
+      tag,
+    );
+  },
+
+  reactTagIsNativeTopRootID: function(reactTag: number): boolean {
+    // We reserve all tags that are 1 mod 10 for native root views
+    return reactTag % 10 === 1;
+  },
+};
+
+module.exports = ReactNativeTagHandles;
diff --git a/src/renderers/native/ReactNativeTextComponent.js b/src/renderers/native/ReactNativeTextComponent.js
new file mode 100644
index 000000000..bc98cabf2
--- /dev/null
+++ b/src/renderers/native/ReactNativeTextComponent.js
@@ -0,0 +1,79 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNativeTextComponent
+ */
+
+'use strict';
+
+var ReactNativeComponentTree = require('ReactNativeComponentTree');
+var ReactNativeTagHandles = require('ReactNativeTagHandles');
+var UIManager = require('UIManager');
+
+var invariant = require('invariant');
+
+var ReactNativeTextComponent = function(text) {
+  // This is really a ReactText (ReactNode), not a ReactElement
+  this._currentElement = text;
+  this._stringText = '' + text;
+  this._hostParent = null;
+  this._rootNodeID = 0;
+};
+
+Object.assign(ReactNativeTextComponent.prototype, {
+  mountComponent: function(
+    transaction,
+    hostParent,
+    hostContainerInfo,
+    context,
+  ) {
+    // TODO: hostParent should have this context already. Stop abusing context.
+    invariant(
+      context.isInAParentText,
+      'RawText "%s" must be wrapped in an explicit <Text> component.',
+      this._stringText,
+    );
+    this._hostParent = hostParent;
+    var tag = ReactNativeTagHandles.allocateTag();
+    this._rootNodeID = tag;
+    var nativeTopRootTag = hostContainerInfo._tag;
+    UIManager.createView(tag, 'RCTRawText', nativeTopRootTag, {
+      text: this._stringText,
+    });
+
+    ReactNativeComponentTree.precacheNode(this, tag);
+
+    return tag;
+  },
+
+  getHostNode: function() {
+    return this._rootNodeID;
+  },
+
+  receiveComponent: function(nextText, transaction, context) {
+    if (nextText !== this._currentElement) {
+      this._currentElement = nextText;
+      var nextStringText = '' + nextText;
+      if (nextStringText !== this._stringText) {
+        this._stringText = nextStringText;
+        UIManager.updateView(this._rootNodeID, 'RCTRawText', {
+          text: this._stringText,
+        });
+      }
+    }
+  },
+
+  unmountComponent: function() {
+    ReactNativeComponentTree.uncacheNode(this);
+    this._currentElement = null;
+    this._stringText = null;
+    this._rootNodeID = 0;
+  },
+});
+
+module.exports = ReactNativeTextComponent;
diff --git a/src/renderers/native/ReactNativeTreeTraversal.js b/src/renderers/native/ReactNativeTreeTraversal.js
new file mode 100644
index 000000000..80c6f5ddf
--- /dev/null
+++ b/src/renderers/native/ReactNativeTreeTraversal.js
@@ -0,0 +1,126 @@
+/**
+ * Copyright 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNativeTreeTraversal
+ */
+
+'use strict';
+
+// Same as ReactDOMTreeTraversal without the invariants.
+
+/**
+ * Return the lowest common ancestor of A and B, or null if they are in
+ * different trees.
+ */
+function getLowestCommonAncestor(instA, instB) {
+  var depthA = 0;
+  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
+    depthA++;
+  }
+  var depthB = 0;
+  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
+    depthB++;
+  }
+
+  // If A is deeper, crawl up.
+  while (depthA - depthB > 0) {
+    instA = instA._hostParent;
+    depthA--;
+  }
+
+  // If B is deeper, crawl up.
+  while (depthB - depthA > 0) {
+    instB = instB._hostParent;
+    depthB--;
+  }
+
+  // Walk in lockstep until we find a match.
+  var depth = depthA;
+  while (depth--) {
+    if (instA === instB) {
+      return instA;
+    }
+    instA = instA._hostParent;
+    instB = instB._hostParent;
+  }
+  return null;
+}
+
+/**
+ * Return if A is an ancestor of B.
+ */
+function isAncestor(instA, instB) {
+  while (instB) {
+    if (instB === instA) {
+      return true;
+    }
+    instB = instB._hostParent;
+  }
+  return false;
+}
+
+/**
+ * Return the parent instance of the passed-in instance.
+ */
+function getParentInstance(inst) {
+  return inst._hostParent;
+}
+
+/**
+ * Simulates the traversal of a two-phase, capture/bubble event dispatch.
+ */
+function traverseTwoPhase(inst, fn, arg) {
+  var path = [];
+  while (inst) {
+    path.push(inst);
+    inst = inst._hostParent;
+  }
+  var i;
+  for (i = path.length; i-- > 0; ) {
+    fn(path[i], 'captured', arg);
+  }
+  for (i = 0; i < path.length; i++) {
+    fn(path[i], 'bubbled', arg);
+  }
+}
+
+/**
+ * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
+ * should would receive a `mouseEnter` or `mouseLeave` event.
+ *
+ * Does not invoke the callback on the nearest common ancestor because nothing
+ * "entered" or "left" that element.
+ */
+function traverseEnterLeave(from, to, fn, argFrom, argTo) {
+  var common = from && to ? getLowestCommonAncestor(from, to) : null;
+  var pathFrom = [];
+  while (from && from !== common) {
+    pathFrom.push(from);
+    from = from._hostParent;
+  }
+  var pathTo = [];
+  while (to && to !== common) {
+    pathTo.push(to);
+    to = to._hostParent;
+  }
+  var i;
+  for (i = 0; i < pathFrom.length; i++) {
+    fn(pathFrom[i], 'bubbled', argFrom);
+  }
+  for (i = pathTo.length; i-- > 0; ) {
+    fn(pathTo[i], 'captured', argTo);
+  }
+}
+
+module.exports = {
+  isAncestor: isAncestor,
+  getLowestCommonAncestor: getLowestCommonAncestor,
+  getParentInstance: getParentInstance,
+  traverseTwoPhase: traverseTwoPhase,
+  traverseEnterLeave: traverseEnterLeave,
+};
diff --git a/src/renderers/native/__mocks__/InitializeJavaScriptAppEngine.js b/src/renderers/native/__mocks__/InitializeJavaScriptAppEngine.js
new file mode 100644
index 000000000..9df419b05
--- /dev/null
+++ b/src/renderers/native/__mocks__/InitializeJavaScriptAppEngine.js
@@ -0,0 +1,15 @@
+/**
+ * Copyright 2013-2015, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ */
+
+'use strict';
+
+// Noop
+
+// TODO #10932517: Move all initialization callers back into react-native
+
diff --git a/src/renderers/native/__mocks__/RCTEventEmitter.js b/src/renderers/native/__mocks__/RCTEventEmitter.js
new file mode 100644
index 000000000..d6e66ad50
--- /dev/null
+++ b/src/renderers/native/__mocks__/RCTEventEmitter.js
@@ -0,0 +1,16 @@
+/**
+ * Copyright 2013-2015, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ */
+
+'use strict';
+
+var RCTEventEmitter = {
+  register: jest.fn(),
+};
+
+module.exports = RCTEventEmitter;
diff --git a/src/isomorphic/modern/types/__tests__/ReactTypeScriptPropTypes-test.js b/src/renderers/native/__mocks__/TextInputState.js
similarity index 58%
rename from src/isomorphic/modern/types/__tests__/ReactTypeScriptPropTypes-test.js
rename to src/renderers/native/__mocks__/TextInputState.js
index 82a72b428..a0b4e576d 100644
--- a/src/isomorphic/modern/types/__tests__/ReactTypeScriptPropTypes-test.js
+++ b/src/renderers/native/__mocks__/TextInputState.js
@@ -1,3 +1,3 @@
 /**
- * Copyright 2014-present, Facebook, Inc.
+ * Copyright 2013-2015, Facebook, Inc.
  * All rights reserved.
@@ -7,4 +7,2 @@
  * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
  */
@@ -13,6 +11,7 @@
 
-describe('ReactTypeScriptPropTypes', function() {
+// Mock of the Native Hooks
+// TODO: Should this move into the components themselves? E.g. focusable
 
-  // TODO: Test TypeScript integration and ensure that prop types works.
+var TextInputState = {};
 
-});
+module.exports = TextInputState;
diff --git a/src/renderers/native/__mocks__/UIManager.js b/src/renderers/native/__mocks__/UIManager.js
new file mode 100644
index 000000000..dffb8fd9f
--- /dev/null
+++ b/src/renderers/native/__mocks__/UIManager.js
@@ -0,0 +1,69 @@
+/**
+ * Copyright 2013-2015, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ */
+
+'use strict';
+
+// Mock of the Native Hooks
+
+var RCTUIManager = {
+  createView: jest.fn(),
+  setChildren: jest.fn(),
+  manageChildren: jest.fn(),
+  updateView: jest.fn(),
+  removeSubviewsFromContainerWithID: jest.fn(),
+  replaceExistingNonRootView: jest.fn(),
+  customBubblingEventTypes: {
+    topBlur: {
+      phasedRegistrationNames: {
+        bubbled: 'onBlur',
+        captured: 'onBlurCapture',
+      },
+    },
+    topFocus: {
+      phasedRegistrationNames: {
+        bubbled: 'onFocus',
+        captured: 'onFocusCapture',
+      },
+    },
+    topTouchCancel: {
+      phasedRegistrationNames: {
+        bubbled: 'onTouchCancel',
+        captured: 'onTouchCancelCapture',
+      },
+    },
+    topTouchEnd: {
+      phasedRegistrationNames: {
+        bubbled: 'onTouchEnd',
+        captured: 'onTouchEndCapture',
+      },
+    },
+    topTouchMove: {
+      phasedRegistrationNames: {
+        bubbled: 'onTouchMove',
+        captured: 'onTouchMoveCapture',
+      },
+    },
+    topTouchStart: {
+      phasedRegistrationNames: {
+        bubbled: 'onTouchStart',
+        captured: 'onTouchStartCapture',
+      },
+    },
+  },
+  customDirectEventTypes: {
+    topAccessibilityTap: {
+      registrationName: 'onAccessibilityTap',
+    },
+    topTextLayout: {
+      registrationName: 'onTextLayout',
+    },
+  },
+};
+
+module.exports = RCTUIManager;
diff --git a/src/renderers/native/__mocks__/deepDiffer.js b/src/renderers/native/__mocks__/deepDiffer.js
new file mode 100644
index 000000000..313565af4
--- /dev/null
+++ b/src/renderers/native/__mocks__/deepDiffer.js
@@ -0,0 +1,63 @@
+/**
+ * Copyright 2013-2015, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ */
+
+'use strict';
+
+// TODO: Move deepDiffer into react
+
+var deepDiffer = function(one: any, two: any): boolean {
+  if (one === two) {
+    // Short circuit on identical object references instead of traversing them.
+    return false;
+  }
+  if (typeof one === 'function' && typeof two === 'function') {
+    // We consider all functions equal
+    return false;
+  }
+  if (typeof one !== 'object' || one === null) {
+    // Primitives can be directly compared
+    return one !== two;
+  }
+  if (typeof two !== 'object' || two === null) {
+    // We know they are different because the previous case would have triggered
+    // otherwise.
+    return true;
+  }
+  if (one.constructor !== two.constructor) {
+    return true;
+  }
+  if (Array.isArray(one)) {
+    // We know two is also an array because the constructors are equal
+    var len = one.length;
+    if (two.length !== len) {
+      return true;
+    }
+    for (var ii = 0; ii < len; ii++) {
+      if (deepDiffer(one[ii], two[ii])) {
+        return true;
+      }
+    }
+  } else {
+    for (var key in one) {
+      if (deepDiffer(one[key], two[key])) {
+        return true;
+      }
+    }
+    for (var twoKey in two) {
+      // The only case we haven't checked yet is keys that are in two but aren't
+      // in one, which means they are different.
+      if (one[twoKey] === undefined && two[twoKey] !== undefined) {
+        return true;
+      }
+    }
+  }
+  return false;
+};
+
+module.exports = deepDiffer;
diff --git a/src/renderers/native/__mocks__/deepFreezeAndThrowOnMutationInDev.js b/src/renderers/native/__mocks__/deepFreezeAndThrowOnMutationInDev.js
new file mode 100644
index 000000000..8d8ceb859
--- /dev/null
+++ b/src/renderers/native/__mocks__/deepFreezeAndThrowOnMutationInDev.js
@@ -0,0 +1,16 @@
+/**
+ * Copyright 2013-2015, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ */
+
+'use strict';
+
+// TODO: move into react or fbjs
+
+var deepFreezeAndThrowOnMutationInDev = function() {};
+
+module.exports = deepFreezeAndThrowOnMutationInDev;
diff --git a/src/renderers/native/__mocks__/flattenStyle.js b/src/renderers/native/__mocks__/flattenStyle.js
new file mode 100644
index 000000000..d9b46a98a
--- /dev/null
+++ b/src/renderers/native/__mocks__/flattenStyle.js
@@ -0,0 +1,16 @@
+/**
+ * Copyright 2013-2015, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ */
+
+'use strict';
+
+// TODO: Move flattenStyle into react
+
+var flattenStyle = function() {};
+
+module.exports = flattenStyle;
diff --git a/src/renderers/native/__tests__/ReactNativeAttributePayload-test.js b/src/renderers/native/__tests__/ReactNativeAttributePayload-test.js
new file mode 100644
index 000000000..77c8ae799
--- /dev/null
+++ b/src/renderers/native/__tests__/ReactNativeAttributePayload-test.js
@@ -0,0 +1,236 @@
+/**
+ * Copyright (c) 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ */
+'use strict';
+
+var ReactNativeAttributePayload = require('ReactNativeAttributePayload');
+var ReactNativePropRegistry = require('ReactNativePropRegistry');
+
+var diff = ReactNativeAttributePayload.diff;
+
+describe('ReactNativeAttributePayload', () => {
+  it('should work with simple example', () => {
+    expect(diff({a: 1, c: 3}, {b: 2, c: 3}, {a: true, b: true})).toEqual({
+      a: null,
+      b: 2,
+    });
+  });
+
+  it('should skip fields that are equal', () => {
+    expect(
+      diff(
+        {a: 1, b: 'two', c: true, d: false, e: undefined, f: 0},
+        {a: 1, b: 'two', c: true, d: false, e: undefined, f: 0},
+        {a: true, b: true, c: true, d: true, e: true, f: true},
+      ),
+    ).toEqual(null);
+  });
+
+  it('should remove fields', () => {
+    expect(diff({a: 1}, {}, {a: true})).toEqual({a: null});
+  });
+
+  it('should remove fields that are set to undefined', () => {
+    expect(diff({a: 1}, {a: undefined}, {a: true})).toEqual({a: null});
+  });
+
+  it('should ignore invalid fields', () => {
+    expect(diff({a: 1}, {b: 2}, {})).toEqual(null);
+  });
+
+  it('should use the diff attribute', () => {
+    var diffA = jest.fn((a, b) => true);
+    var diffB = jest.fn((a, b) => false);
+    expect(
+      diff(
+        {a: [1], b: [3]},
+        {a: [2], b: [4]},
+        {a: {diff: diffA}, b: {diff: diffB}},
+      ),
+    ).toEqual({a: [2]});
+    expect(diffA).toBeCalledWith([1], [2]);
+    expect(diffB).toBeCalledWith([3], [4]);
+  });
+
+  it('should not use the diff attribute on addition/removal', () => {
+    var diffA = jest.fn();
+    var diffB = jest.fn();
+    expect(
+      diff({a: [1]}, {b: [2]}, {a: {diff: diffA}, b: {diff: diffB}}),
+    ).toEqual({a: null, b: [2]});
+    expect(diffA).not.toBeCalled();
+    expect(diffB).not.toBeCalled();
+  });
+
+  it('should do deep diffs of Objects by default', () => {
+    expect(
+      diff(
+        {a: [1], b: {k: [3, 4]}, c: {k: [4, 4]}},
+        {a: [2], b: {k: [3, 4]}, c: {k: [4, 5]}},
+        {a: true, b: true, c: true},
+      ),
+    ).toEqual({a: [2], c: {k: [4, 5]}});
+  });
+
+  it('should work with undefined styles', () => {
+    expect(
+      diff(
+        {style: {a: '#ffffff', b: 1}},
+        {style: undefined},
+        {style: {b: true}},
+      ),
+    ).toEqual({b: null});
+    expect(
+      diff(
+        {style: undefined},
+        {style: {a: '#ffffff', b: 1}},
+        {style: {b: true}},
+      ),
+    ).toEqual({b: 1});
+    expect(
+      diff({style: undefined}, {style: undefined}, {style: {b: true}}),
+    ).toEqual(null);
+  });
+
+  it('should work with empty styles', () => {
+    expect(diff({a: 1, c: 3}, {}, {a: true, b: true})).toEqual({a: null});
+    expect(diff({}, {a: 1, c: 3}, {a: true, b: true})).toEqual({a: 1});
+    expect(diff({}, {}, {a: true, b: true})).toEqual(null);
+  });
+
+  it('should flatten nested styles and predefined styles', () => {
+    var validStyleAttribute = {someStyle: {foo: true, bar: true}};
+
+    expect(
+      diff({}, {someStyle: [{foo: 1}, {bar: 2}]}, validStyleAttribute),
+    ).toEqual({foo: 1, bar: 2});
+
+    expect(
+      diff({someStyle: [{foo: 1}, {bar: 2}]}, {}, validStyleAttribute),
+    ).toEqual({foo: null, bar: null});
+
+    var barStyle = ReactNativePropRegistry.register({
+      bar: 3,
+    });
+
+    expect(
+      diff(
+        {},
+        {someStyle: [[{foo: 1}, {foo: 2}], barStyle]},
+        validStyleAttribute,
+      ),
+    ).toEqual({foo: 2, bar: 3});
+  });
+
+  it('should reset a value to a previous if it is removed', () => {
+    var validStyleAttribute = {someStyle: {foo: true, bar: true}};
+
+    expect(
+      diff(
+        {someStyle: [{foo: 1}, {foo: 3}]},
+        {someStyle: [{foo: 1}, {bar: 2}]},
+        validStyleAttribute,
+      ),
+    ).toEqual({foo: 1, bar: 2});
+  });
+
+  it('should not clear removed props if they are still in another slot', () => {
+    var validStyleAttribute = {someStyle: {foo: true, bar: true}};
+
+    expect(
+      diff(
+        {someStyle: [{}, {foo: 3, bar: 2}]},
+        {someStyle: [{foo: 3}, {bar: 2}]},
+        validStyleAttribute,
+      ),
+    ).toEqual({foo: 3}); // this should ideally be null. heuristic tradeoff.
+
+    expect(
+      diff(
+        {someStyle: [{}, {foo: 3, bar: 2}]},
+        {someStyle: [{foo: 1, bar: 1}, {bar: 2}]},
+        validStyleAttribute,
+      ),
+    ).toEqual({bar: 2, foo: 1});
+  });
+
+  it('should clear a prop if a later style is explicit null/undefined', () => {
+    var validStyleAttribute = {someStyle: {foo: true, bar: true}};
+    expect(
+      diff(
+        {someStyle: [{}, {foo: 3, bar: 2}]},
+        {someStyle: [{foo: 1}, {bar: 2, foo: null}]},
+        validStyleAttribute,
+      ),
+    ).toEqual({foo: null});
+
+    expect(
+      diff(
+        {someStyle: [{foo: 3}, {foo: null, bar: 2}]},
+        {someStyle: [{foo: null}, {bar: 2}]},
+        validStyleAttribute,
+      ),
+    ).toEqual({foo: null});
+
+    expect(
+      diff(
+        {someStyle: [{foo: 1}, {foo: null}]},
+        {someStyle: [{foo: 2}, {foo: null}]},
+        validStyleAttribute,
+      ),
+    ).toEqual({foo: null}); // this should ideally be null. heuristic.
+
+    // Test the same case with object equality because an early bailout doesn't
+    // work in this case.
+    var fooObj = {foo: 3};
+    expect(
+      diff(
+        {someStyle: [{foo: 1}, fooObj]},
+        {someStyle: [{foo: 2}, fooObj]},
+        validStyleAttribute,
+      ),
+    ).toEqual({foo: 3}); // this should ideally be null. heuristic.
+
+    expect(
+      diff(
+        {someStyle: [{foo: 1}, {foo: 3}]},
+        {someStyle: [{foo: 2}, {foo: undefined}]},
+        validStyleAttribute,
+      ),
+    ).toEqual({foo: null}); // this should ideally be null. heuristic.
+  });
+
+  // Function properties are just markers to native that events should be sent.
+  it('should convert functions to booleans', () => {
+    // Note that if the property changes from one function to another, we don't
+    // need to send an update.
+    expect(
+      diff(
+        {
+          a: function() {
+            return 1;
+          },
+          b: function() {
+            return 2;
+          },
+          c: 3,
+        },
+        {
+          b: function() {
+            return 9;
+          },
+          c: function() {
+            return 3;
+          },
+        },
+        {a: true, b: true, c: true},
+      ),
+    ).toEqual({a: null, c: true});
+  });
+});
diff --git a/src/renderers/native/__tests__/ReactNativeEvents-test.js b/src/renderers/native/__tests__/ReactNativeEvents-test.js
new file mode 100644
index 000000000..40543e92f
--- /dev/null
+++ b/src/renderers/native/__tests__/ReactNativeEvents-test.js
@@ -0,0 +1,88 @@
+/**
+ * Copyright 2013-2015, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+var RCTEventEmitter;
+var React;
+var ReactErrorUtils;
+var ReactNative;
+var UIManager;
+var createReactNativeComponentClass;
+
+beforeEach(() => {
+  jest.resetModuleRegistry();
+
+  RCTEventEmitter = require('RCTEventEmitter');
+  React = require('React');
+  ReactErrorUtils = require('ReactErrorUtils');
+  ReactNative = require('ReactNative');
+  UIManager = require('UIManager');
+  createReactNativeComponentClass = require('createReactNativeComponentClass');
+
+  // Ensure errors from event callbacks are properly surfaced (otherwise,
+  // jest/jsdom swallows them when we do the .dispatchEvent call)
+  ReactErrorUtils.invokeGuardedCallback =
+    ReactErrorUtils.invokeGuardedCallbackWithCatch;
+});
+
+it('handles events', () => {
+  expect(RCTEventEmitter.register.mock.calls.length).toBe(1);
+  var EventEmitter = RCTEventEmitter.register.mock.calls[0][0];
+  var View = createReactNativeComponentClass({
+    validAttributes: {foo: true},
+    uiViewClassName: 'View',
+  });
+
+  var log = [];
+  ReactNative.render(
+    <View
+      foo="outer"
+      onTouchEnd={() => log.push('outer touchend')}
+      onTouchEndCapture={() => log.push('outer touchend capture')}
+      onTouchStart={() => log.push('outer touchstart')}
+      onTouchStartCapture={() => log.push('outer touchstart capture')}>
+      <View
+        foo="inner"
+        onTouchEndCapture={() => log.push('inner touchend capture')}
+        onTouchEnd={() => log.push('inner touchend')}
+        onTouchStartCapture={() => log.push('inner touchstart capture')}
+        onTouchStart={() => log.push('inner touchstart')}
+      />
+    </View>,
+    1,
+  );
+
+  expect(UIManager.createView.mock.calls.length).toBe(2);
+  var innerTag = UIManager.createView.mock.calls[1][0];
+
+  EventEmitter.receiveTouches(
+    'topTouchStart',
+    [{target: innerTag, identifier: 17}],
+    [0],
+  );
+  EventEmitter.receiveTouches(
+    'topTouchEnd',
+    [{target: innerTag, identifier: 17}],
+    [0],
+  );
+
+  expect(log).toEqual([
+    'outer touchstart capture',
+    'inner touchstart capture',
+    'inner touchstart',
+    'outer touchstart',
+    'outer touchend capture',
+    'inner touchend capture',
+    'inner touchend',
+    'outer touchend',
+  ]);
+});
diff --git a/src/renderers/native/__tests__/ReactNativeMount-test.js b/src/renderers/native/__tests__/ReactNativeMount-test.js
new file mode 100644
index 000000000..bf479384a
--- /dev/null
+++ b/src/renderers/native/__tests__/ReactNativeMount-test.js
@@ -0,0 +1,60 @@
+/**
+ * Copyright 2013-2015, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+var React;
+var ReactNative;
+var createReactNativeComponentClass;
+var UIManager;
+
+describe('ReactNative', () => {
+  beforeEach(() => {
+    React = require('React');
+    ReactNative = require('ReactNative');
+    UIManager = require('UIManager');
+    createReactNativeComponentClass = require('createReactNativeComponentClass');
+  });
+
+  it('should be able to create and render a native component', () => {
+    var View = createReactNativeComponentClass({
+      validAttributes: {foo: true},
+      uiViewClassName: 'View',
+    });
+
+    ReactNative.render(<View foo="test" />, 1);
+    expect(UIManager.createView).toBeCalled();
+    expect(UIManager.setChildren).toBeCalled();
+    expect(UIManager.manageChildren).not.toBeCalled();
+    expect(UIManager.updateView).not.toBeCalled();
+  });
+
+  it('should be able to create and update a native component', () => {
+    var View = createReactNativeComponentClass({
+      validAttributes: {foo: true},
+      uiViewClassName: 'View',
+    });
+
+    ReactNative.render(<View foo="foo" />, 11);
+
+    expect(UIManager.createView.mock.calls.length).toBe(2);
+    expect(UIManager.setChildren.mock.calls.length).toBe(2);
+    expect(UIManager.manageChildren).not.toBeCalled();
+    expect(UIManager.updateView).not.toBeCalled();
+
+    ReactNative.render(<View foo="bar" />, 11);
+
+    expect(UIManager.createView.mock.calls.length).toBe(2);
+    expect(UIManager.setChildren.mock.calls.length).toBe(2);
+    expect(UIManager.manageChildren).not.toBeCalled();
+    expect(UIManager.updateView).toBeCalledWith(3, 'View', {foo: 'bar'});
+  });
+});
diff --git a/src/renderers/native/createReactNativeComponentClass.js b/src/renderers/native/createReactNativeComponentClass.js
new file mode 100644
index 000000000..4d4e0d03f
--- /dev/null
+++ b/src/renderers/native/createReactNativeComponentClass.js
@@ -0,0 +1,48 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule createReactNativeComponentClass
+ * @flow
+ */
+
+'use strict';
+
+var ReactNativeBaseComponent = require('ReactNativeBaseComponent');
+
+// See also ReactNativeBaseComponent
+type ReactNativeBaseComponentViewConfig = {
+  validAttributes: Object,
+  uiViewClassName: string,
+  propTypes?: Object,
+};
+
+/**
+ * @param {string} config iOS View configuration.
+ * @private
+ */
+var createReactNativeComponentClass = function(
+  viewConfig: ReactNativeBaseComponentViewConfig,
+): ReactClass<any> {
+  var Constructor = function(element) {
+    this._currentElement = element;
+    this._topLevelWrapper = null;
+    this._hostParent = null;
+    this._hostContainerInfo = null;
+    this._rootNodeID = 0;
+    this._renderedChildren = null;
+  };
+  Constructor.displayName = viewConfig.uiViewClassName;
+  Constructor.viewConfig = viewConfig;
+  Constructor.propTypes = viewConfig.propTypes;
+  Constructor.prototype = new ReactNativeBaseComponent(viewConfig);
+  Constructor.prototype.constructor = Constructor;
+
+  return ((Constructor: any): ReactClass<any>);
+};
+
+module.exports = createReactNativeComponentClass;
diff --git a/src/renderers/native/findNodeHandle.js b/src/renderers/native/findNodeHandle.js
new file mode 100644
index 000000000..3226c2e93
--- /dev/null
+++ b/src/renderers/native/findNodeHandle.js
@@ -0,0 +1,106 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule findNodeHandle
+ * @flow
+ */
+
+'use strict';
+
+var ReactCurrentOwner = require('ReactCurrentOwner');
+var ReactInstanceMap = require('ReactInstanceMap');
+
+var invariant = require('invariant');
+var warning = require('warning');
+
+/**
+ * ReactNative vs ReactWeb
+ * -----------------------
+ * React treats some pieces of data opaquely. This means that the information
+ * is first class (it can be passed around), but cannot be inspected. This
+ * allows us to build infrastructure that reasons about resources, without
+ * making assumptions about the nature of those resources, and this allows that
+ * infra to be shared across multiple platforms, where the resources are very
+ * different. General infra (such as `ReactMultiChild`) reasons opaquely about
+ * the data, but platform specific code (such as `ReactNativeBaseComponent`) can
+ * make assumptions about the data.
+ *
+ *
+ * `rootNodeID`, uniquely identifies a position in the generated native view
+ * tree. Many layers of composite components (created with `React.createClass`)
+ * can all share the same `rootNodeID`.
+ *
+ * `nodeHandle`: A sufficiently unambiguous way to refer to a lower level
+ * resource (dom node, native view etc). The `rootNodeID` is sufficient for web
+ * `nodeHandle`s, because the position in a tree is always enough to uniquely
+ * identify a DOM node (we never have nodes in some bank outside of the
+ * document). The same would be true for `ReactNative`, but we must maintain a
+ * mapping that we can send efficiently serializable
+ * strings across native boundaries.
+ *
+ * Opaque name      TodaysWebReact   FutureWebWorkerReact   ReactNative
+ * ----------------------------------------------------------------------------
+ * nodeHandle       N/A              rootNodeID             tag
+ */
+
+function findNodeHandle(componentOrHandle: any): ?number {
+  if (__DEV__) {
+    var owner = ReactCurrentOwner.current;
+    if (owner !== null) {
+      warning(
+        owner._warnedAboutRefsInRender,
+        '%s is accessing findNodeHandle inside its render(). ' +
+          'render() should be a pure function of props and state. It should ' +
+          'never access something that requires stale data from the previous ' +
+          'render, such as refs. Move this logic to componentDidMount and ' +
+          'componentDidUpdate instead.',
+        owner.getName() || 'A component',
+      );
+      owner._warnedAboutRefsInRender = true;
+    }
+  }
+  if (componentOrHandle == null) {
+    return null;
+  }
+  if (typeof componentOrHandle === 'number') {
+    // Already a node handle
+    return componentOrHandle;
+  }
+
+  var component = componentOrHandle;
+
+  // TODO (balpert): Wrap iOS native components in a composite wrapper, then
+  // ReactInstanceMap.get here will always succeed for mounted components
+  var internalInstance = ReactInstanceMap.get(component);
+  if (internalInstance) {
+    return internalInstance.getHostNode();
+  } else {
+    var rootNodeID = component._rootNodeID;
+    if (rootNodeID) {
+      return rootNodeID;
+    } else {
+      invariant(
+        // Native
+        (typeof component === 'object' && '_rootNodeID' in component) ||
+          // Composite
+          (component.render != null && typeof component.render === 'function'),
+        'findNodeHandle(...): Argument is not a component ' +
+          '(type: %s, keys: %s)',
+        typeof component,
+        Object.keys(component),
+      );
+      invariant(
+        false,
+        'findNodeHandle(...): Unable to find node handle for unmounted ' +
+          'component.',
+      );
+    }
+  }
+}
+
+module.exports = findNodeHandle;
diff --git a/src/renderers/noop/ReactNoop.js b/src/renderers/noop/ReactNoop.js
new file mode 100644
index 000000000..3f420e9f0
--- /dev/null
+++ b/src/renderers/noop/ReactNoop.js
@@ -0,0 +1,261 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactNoop
+ * @flow
+ */
+
+/**
+ * This is a renderer of React that doesn't have a render target output.
+ * It is useful to demonstrate the internals of the reconciler in isolation
+ * and for testing semantics of reconciliation separate from the host
+ * environment.
+ */
+
+'use strict';
+
+import type {Fiber} from 'ReactFiber';
+import type {UpdateQueue} from 'ReactFiberUpdateQueue';
+import type {HostChildren} from 'ReactFiberReconciler';
+
+var ReactFiberReconciler = require('ReactFiberReconciler');
+var {AnimationPriority} = require('ReactPriorityLevel');
+
+var scheduledAnimationCallback = null;
+var scheduledDeferredCallback = null;
+
+const TERMINAL_TAG = 99;
+
+type Container = {rootID: number, children: Array<Instance>};
+type Props = {prop: any};
+type Instance = {
+  tag: 99,
+  type: string,
+  id: number,
+  children: Array<Instance>,
+  prop: any,
+};
+
+var instanceCounter = 0;
+
+function recursivelyAppendChildren(
+  flatArray: Array<Instance>,
+  child: HostChildren<Instance>,
+) {
+  if (!child) {
+    return;
+  }
+  if (child.tag === TERMINAL_TAG) {
+    flatArray.push(child);
+  } else {
+    let node = child;
+    do {
+      recursivelyAppendChildren(flatArray, node.output);
+    } while ((node = node.sibling));
+  }
+}
+
+function flattenChildren(children: HostChildren<Instance>) {
+  const flatArray = [];
+  recursivelyAppendChildren(flatArray, children);
+  return flatArray;
+}
+
+var NoopRenderer = ReactFiberReconciler({
+  updateContainer(
+    containerInfo: Container,
+    children: HostChildren<Instance>,
+  ): void {
+    containerInfo.children = flattenChildren(children);
+  },
+
+  createInstance(
+    type: string,
+    props: Props,
+    children: HostChildren<Instance>,
+  ): Instance {
+    const inst = {
+      tag: TERMINAL_TAG,
+      id: instanceCounter++,
+      type: type,
+      children: flattenChildren(children),
+      prop: props.prop,
+    };
+    // Hide from unit tests
+    Object.defineProperty(inst, 'tag', {value: inst.tag, enumerable: false});
+    Object.defineProperty(inst, 'id', {value: inst.id, enumerable: false});
+    return inst;
+  },
+
+  prepareUpdate(
+    instance: Instance,
+    oldProps: Props,
+    newProps: Props,
+    children: HostChildren<Instance>,
+  ): boolean {
+    return true;
+  },
+
+  commitUpdate(
+    instance: Instance,
+    oldProps: Props,
+    newProps: Props,
+    children: HostChildren<Instance>,
+  ): void {
+    instance.children = flattenChildren(children);
+    instance.prop = newProps.prop;
+  },
+
+  deleteInstance(instance: Instance): void {},
+
+  scheduleAnimationCallback(callback) {
+    scheduledAnimationCallback = callback;
+  },
+
+  scheduleDeferredCallback(callback) {
+    scheduledDeferredCallback = callback;
+  },
+});
+
+var rootContainer = {rootID: 0, children: []};
+
+var root = null;
+
+var ReactNoop = {
+  root: rootContainer,
+
+  render(element: ReactElement<any>) {
+    if (!root) {
+      root = NoopRenderer.mountContainer(element, rootContainer);
+    } else {
+      NoopRenderer.updateContainer(element, root);
+    }
+  },
+
+  flushAnimationPri() {
+    var cb = scheduledAnimationCallback;
+    if (cb === null) {
+      return;
+    }
+    scheduledAnimationCallback = null;
+    cb();
+  },
+
+  flushDeferredPri(timeout: number = Infinity) {
+    var cb = scheduledDeferredCallback;
+    if (cb === null) {
+      return;
+    }
+    scheduledDeferredCallback = null;
+    var timeRemaining = timeout;
+    cb({
+      timeRemaining() {
+        // Simulate a fix amount of time progressing between each call.
+        timeRemaining -= 5;
+        if (timeRemaining < 0) {
+          timeRemaining = 0;
+        }
+        return timeRemaining;
+      },
+    });
+  },
+
+  flush() {
+    ReactNoop.flushAnimationPri();
+    ReactNoop.flushDeferredPri();
+  },
+
+  performAnimationWork(fn: Function) {
+    NoopRenderer.performWithPriority(AnimationPriority, fn);
+  },
+
+  // Logs the current state of the tree.
+  dumpTree() {
+    if (!root) {
+      console.log('Nothing rendered yet.');
+      return;
+    }
+
+    var bufferedLog = [];
+    function log(...args) {
+      bufferedLog.push(...args, '\n');
+    }
+
+    function logHostInstances(children: Array<Instance>, depth) {
+      for (var i = 0; i < children.length; i++) {
+        var child = children[i];
+        log('  '.repeat(depth) + '- ' + child.type + '#' + child.id);
+        logHostInstances(child.children, depth + 1);
+      }
+    }
+    function logContainer(container: Container, depth) {
+      log('  '.repeat(depth) + '- [root#' + container.rootID + ']');
+      logHostInstances(container.children, depth + 1);
+    }
+
+    function logUpdateQueue(updateQueue: UpdateQueue, depth) {
+      log(
+        '  '.repeat(depth + 1) + 'QUEUED UPDATES',
+        updateQueue.isReplace ? 'is replace' : '',
+        updateQueue.isForced ? 'is forced' : '',
+      );
+      log(
+        '  '.repeat(depth + 1) + '~',
+        updateQueue.partialState,
+        updateQueue.callback ? 'with callback' : '',
+      );
+      var next;
+      while ((next = updateQueue.next)) {
+        log(
+          '  '.repeat(depth + 1) + '~',
+          next.partialState,
+          next.callback ? 'with callback' : '',
+        );
+      }
+    }
+
+    function logFiber(fiber: Fiber, depth) {
+      log(
+        '  '.repeat(depth) +
+          '- ' +
+          (fiber.type ? fiber.type.name || fiber.type : '[root]'),
+        '[' + fiber.pendingWorkPriority + (fiber.pendingProps ? '*' : '') + ']',
+      );
+      if (fiber.updateQueue) {
+        logUpdateQueue(fiber.updateQueue, depth);
+      }
+      const childInProgress = fiber.progressedChild;
+      if (childInProgress && childInProgress !== fiber.child) {
+        log(
+          '  '.repeat(depth + 1) + 'IN PROGRESS: ' + fiber.progressedPriority,
+        );
+        logFiber(childInProgress, depth + 1);
+        if (fiber.child) {
+          log('  '.repeat(depth + 1) + 'CURRENT');
+        }
+      } else if (fiber.child && fiber.updateQueue) {
+        log('  '.repeat(depth + 1) + 'CHILDREN');
+      }
+      if (fiber.child) {
+        logFiber(fiber.child, depth + 1);
+      }
+      if (fiber.sibling) {
+        logFiber(fiber.sibling, depth);
+      }
+    }
+
+    log('HOST INSTANCES:');
+    logContainer(rootContainer, 0);
+    log('FIBERS:');
+    logFiber((root.stateNode: any).current, 0);
+
+    console.log(...bufferedLog);
+  },
+};
+
+module.exports = ReactNoop;
diff --git a/src/renderers/shared/ReactDebugTool.js b/src/renderers/shared/ReactDebugTool.js
new file mode 100644
index 000000000..a83432a1a
--- /dev/null
+++ b/src/renderers/shared/ReactDebugTool.js
@@ -0,0 +1,438 @@
+/**
+ * Copyright 2016-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactDebugTool
+ * @flow
+ */
+
+'use strict';
+
+var ReactInvalidSetStateWarningHook = require('ReactInvalidSetStateWarningHook');
+var ReactHostOperationHistoryHook = require('ReactHostOperationHistoryHook');
+var ReactComponentTreeHook = require('ReactComponentTreeHook');
+var ExecutionEnvironment = require('ExecutionEnvironment');
+
+var performanceNow = require('performanceNow');
+var warning = require('warning');
+
+import type {ReactElement} from 'ReactElementType';
+import type {DebugID} from 'ReactInstanceType';
+import type {Operation} from 'ReactHostOperationHistoryHook';
+
+type Hook = any;
+
+type TimerType =
+  | 'ctor'
+  | 'render'
+  | 'componentWillMount'
+  | 'componentWillUnmount'
+  | 'componentWillReceiveProps'
+  | 'shouldComponentUpdate'
+  | 'componentWillUpdate'
+  | 'componentDidUpdate'
+  | 'componentDidMount';
+
+type Measurement = {
+  timerType: TimerType,
+  instanceID: DebugID,
+  duration: number,
+};
+
+type TreeSnapshot = {
+  [key: DebugID]: {
+    displayName: string,
+    text: string,
+    updateCount: number,
+    childIDs: Array<DebugID>,
+    ownerID: DebugID,
+    parentID: DebugID,
+  },
+};
+
+type HistoryItem = {
+  duration: number,
+  measurements: Array<Measurement>,
+  operations: Array<Operation>,
+  treeSnapshot: TreeSnapshot,
+};
+
+export type FlushHistory = Array<HistoryItem>;
+
+var hooks = [];
+var didHookThrowForEvent = {};
+
+function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
+  try {
+    fn.call(context, arg1, arg2, arg3, arg4, arg5);
+  } catch (e) {
+    warning(
+      didHookThrowForEvent[event],
+      'Exception thrown by hook while handling %s: %s',
+      event,
+      e + '\n' + e.stack,
+    );
+    didHookThrowForEvent[event] = true;
+  }
+}
+
+function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
+  for (var i = 0; i < hooks.length; i++) {
+    var hook = hooks[i];
+    var fn = hook[event];
+    if (fn) {
+      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
+    }
+  }
+}
+
+var isProfiling = false;
+var flushHistory = [];
+var lifeCycleTimerStack = [];
+var currentFlushNesting = 0;
+var currentFlushMeasurements = [];
+var currentFlushStartTime = 0;
+var currentTimerDebugID = null;
+var currentTimerStartTime = 0;
+var currentTimerNestedFlushDuration = 0;
+var currentTimerType = null;
+
+var lifeCycleTimerHasWarned = false;
+
+function clearHistory() {
+  ReactComponentTreeHook.purgeUnmountedComponents();
+  ReactHostOperationHistoryHook.clearHistory();
+}
+
+function getTreeSnapshot(registeredIDs) {
+  return registeredIDs.reduce((tree, id) => {
+    var ownerID = ReactComponentTreeHook.getOwnerID(id);
+    var parentID = ReactComponentTreeHook.getParentID(id);
+    tree[id] = {
+      displayName: ReactComponentTreeHook.getDisplayName(id),
+      text: ReactComponentTreeHook.getText(id),
+      updateCount: ReactComponentTreeHook.getUpdateCount(id),
+      childIDs: ReactComponentTreeHook.getChildIDs(id),
+      // Text nodes don't have owners but this is close enough.
+      ownerID:
+        ownerID ||
+          (parentID && ReactComponentTreeHook.getOwnerID(parentID)) ||
+          0,
+      parentID,
+    };
+    return tree;
+  }, {});
+}
+
+function resetMeasurements() {
+  var previousStartTime = currentFlushStartTime;
+  var previousMeasurements = currentFlushMeasurements;
+  var previousOperations = ReactHostOperationHistoryHook.getHistory();
+
+  if (currentFlushNesting === 0) {
+    currentFlushStartTime = 0;
+    currentFlushMeasurements = [];
+    clearHistory();
+    return;
+  }
+
+  if (previousMeasurements.length || previousOperations.length) {
+    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
+    flushHistory.push({
+      duration: performanceNow() - previousStartTime,
+      measurements: previousMeasurements || [],
+      operations: previousOperations || [],
+      treeSnapshot: getTreeSnapshot(registeredIDs),
+    });
+  }
+
+  clearHistory();
+  currentFlushStartTime = performanceNow();
+  currentFlushMeasurements = [];
+}
+
+function checkDebugID(debugID, allowRoot = false) {
+  if (allowRoot && debugID === 0) {
+    return;
+  }
+  if (!debugID) {
+    warning(false, 'ReactDebugTool: debugID may not be empty.');
+  }
+}
+
+function beginLifeCycleTimer(debugID, timerType) {
+  if (currentFlushNesting === 0) {
+    return;
+  }
+  if (currentTimerType && !lifeCycleTimerHasWarned) {
+    warning(
+      false,
+      'There is an internal error in the React performance measurement code. ' +
+        'Did not expect %s timer to start while %s timer is still in ' +
+        'progress for %s instance.',
+      timerType,
+      currentTimerType || 'no',
+      debugID === currentTimerDebugID ? 'the same' : 'another',
+    );
+    lifeCycleTimerHasWarned = true;
+  }
+  currentTimerStartTime = performanceNow();
+  currentTimerNestedFlushDuration = 0;
+  currentTimerDebugID = debugID;
+  currentTimerType = timerType;
+}
+
+function endLifeCycleTimer(debugID, timerType) {
+  if (currentFlushNesting === 0) {
+    return;
+  }
+  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
+    warning(
+      false,
+      'There is an internal error in the React performance measurement code. ' +
+        'We did not expect %s timer to stop while %s timer is still in ' +
+        'progress for %s instance. Please report this as a bug in React.',
+      timerType,
+      currentTimerType || 'no',
+      debugID === currentTimerDebugID ? 'the same' : 'another',
+    );
+    lifeCycleTimerHasWarned = true;
+  }
+  if (isProfiling) {
+    currentFlushMeasurements.push({
+      timerType,
+      instanceID: debugID,
+      duration:
+        performanceNow() -
+          currentTimerStartTime -
+          currentTimerNestedFlushDuration,
+    });
+  }
+  currentTimerStartTime = 0;
+  currentTimerNestedFlushDuration = 0;
+  currentTimerDebugID = null;
+  currentTimerType = null;
+}
+
+function pauseCurrentLifeCycleTimer() {
+  var currentTimer = {
+    startTime: currentTimerStartTime,
+    nestedFlushStartTime: performanceNow(),
+    debugID: currentTimerDebugID,
+    timerType: currentTimerType,
+  };
+  lifeCycleTimerStack.push(currentTimer);
+  currentTimerStartTime = 0;
+  currentTimerNestedFlushDuration = 0;
+  currentTimerDebugID = null;
+  currentTimerType = null;
+}
+
+function resumeCurrentLifeCycleTimer() {
+  var {
+    startTime,
+    nestedFlushStartTime,
+    debugID,
+    timerType,
+  } = lifeCycleTimerStack.pop();
+  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
+  currentTimerStartTime = startTime;
+  currentTimerNestedFlushDuration += nestedFlushDuration;
+  currentTimerDebugID = debugID;
+  currentTimerType = timerType;
+}
+
+var lastMarkTimeStamp = 0;
+var canUsePerformanceMeasure: boolean =
+  typeof performance !== 'undefined' &&
+  typeof performance.mark === 'function' &&
+  typeof performance.clearMarks === 'function' &&
+  typeof performance.measure === 'function' &&
+  typeof performance.clearMeasures === 'function';
+
+function shouldMark(debugID) {
+  if (!isProfiling || !canUsePerformanceMeasure) {
+    return false;
+  }
+  var element = ReactComponentTreeHook.getElement(debugID);
+  if (element == null || typeof element !== 'object') {
+    return false;
+  }
+  var isHostElement = typeof element.type === 'string';
+  if (isHostElement) {
+    return false;
+  }
+  return true;
+}
+
+function markBegin(debugID, markType) {
+  if (!shouldMark(debugID)) {
+    return;
+  }
+
+  var markName = `${debugID}::${markType}`;
+  lastMarkTimeStamp = performanceNow();
+  performance.mark(markName);
+}
+
+function markEnd(debugID, markType) {
+  if (!shouldMark(debugID)) {
+    return;
+  }
+
+  var markName = `${debugID}::${markType}`;
+  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';
+
+  // Chrome has an issue of dropping markers recorded too fast:
+  // https://bugs.chromium.org/p/chromium/issues/detail?id=640652
+  // To work around this, we will not report very small measurements.
+  // I determined the magic number by tweaking it back and forth.
+  // 0.05ms was enough to prevent the issue, but I set it to 0.1ms to be safe.
+  // When the bug is fixed, we can `measure()` unconditionally if we want to.
+  var timeStamp = performanceNow();
+  if (timeStamp - lastMarkTimeStamp > 0.1) {
+    var measurementName = `${displayName} [${markType}]`;
+    performance.measure(measurementName, markName);
+  }
+
+  performance.clearMarks(markName);
+  if (measurementName) {
+    performance.clearMeasures(measurementName);
+  }
+}
+
+var ReactDebugTool = {
+  addHook(hook: Hook): void {
+    hooks.push(hook);
+  },
+  removeHook(hook: Hook): void {
+    for (var i = 0; i < hooks.length; i++) {
+      if (hooks[i] === hook) {
+        hooks.splice(i, 1);
+        i--;
+      }
+    }
+  },
+  isProfiling(): boolean {
+    return isProfiling;
+  },
+  beginProfiling(): void {
+    if (isProfiling) {
+      return;
+    }
+
+    isProfiling = true;
+    flushHistory.length = 0;
+    resetMeasurements();
+    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
+  },
+  endProfiling(): void {
+    if (!isProfiling) {
+      return;
+    }
+
+    isProfiling = false;
+    resetMeasurements();
+    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
+  },
+  getFlushHistory(): FlushHistory {
+    return flushHistory;
+  },
+  onBeginFlush(): void {
+    currentFlushNesting++;
+    resetMeasurements();
+    pauseCurrentLifeCycleTimer();
+    emitEvent('onBeginFlush');
+  },
+  onEndFlush(): void {
+    resetMeasurements();
+    currentFlushNesting--;
+    resumeCurrentLifeCycleTimer();
+    emitEvent('onEndFlush');
+  },
+  onBeginLifeCycleTimer(debugID: DebugID, timerType: TimerType): void {
+    checkDebugID(debugID);
+    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
+    markBegin(debugID, timerType);
+    beginLifeCycleTimer(debugID, timerType);
+  },
+  onEndLifeCycleTimer(debugID: DebugID, timerType: TimerType): void {
+    checkDebugID(debugID);
+    endLifeCycleTimer(debugID, timerType);
+    markEnd(debugID, timerType);
+    emitEvent('onEndLifeCycleTimer', debugID, timerType);
+  },
+  onBeginProcessingChildContext(): void {
+    emitEvent('onBeginProcessingChildContext');
+  },
+  onEndProcessingChildContext(): void {
+    emitEvent('onEndProcessingChildContext');
+  },
+  onHostOperation(operation: Operation) {
+    checkDebugID(operation.instanceID);
+    emitEvent('onHostOperation', operation);
+  },
+  onSetState(): void {
+    emitEvent('onSetState');
+  },
+  onSetChildren(debugID: DebugID, childDebugIDs: Array<DebugID>) {
+    checkDebugID(debugID);
+    childDebugIDs.forEach(checkDebugID);
+    emitEvent('onSetChildren', debugID, childDebugIDs);
+  },
+  onBeforeMountComponent(
+    debugID: DebugID,
+    element: ReactElement,
+    parentDebugID: DebugID,
+  ): void {
+    checkDebugID(debugID);
+    checkDebugID(parentDebugID, true);
+    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
+    markBegin(debugID, 'mount');
+  },
+  onMountComponent(debugID: DebugID): void {
+    checkDebugID(debugID);
+    markEnd(debugID, 'mount');
+    emitEvent('onMountComponent', debugID);
+  },
+  onBeforeUpdateComponent(debugID: DebugID, element: ReactElement): void {
+    checkDebugID(debugID);
+    emitEvent('onBeforeUpdateComponent', debugID, element);
+    markBegin(debugID, 'update');
+  },
+  onUpdateComponent(debugID: DebugID): void {
+    checkDebugID(debugID);
+    markEnd(debugID, 'update');
+    emitEvent('onUpdateComponent', debugID);
+  },
+  onBeforeUnmountComponent(debugID: DebugID): void {
+    checkDebugID(debugID);
+    emitEvent('onBeforeUnmountComponent', debugID);
+    markBegin(debugID, 'unmount');
+  },
+  onUnmountComponent(debugID: DebugID): void {
+    checkDebugID(debugID);
+    markEnd(debugID, 'unmount');
+    emitEvent('onUnmountComponent', debugID);
+  },
+  onTestEvent(): void {
+    emitEvent('onTestEvent');
+  },
+};
+
+// TODO remove these when RN/www gets updated
+(ReactDebugTool: any).addDevtool = ReactDebugTool.addHook;
+(ReactDebugTool: any).removeDevtool = ReactDebugTool.removeHook;
+
+ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
+ReactDebugTool.addHook(ReactComponentTreeHook);
+var url = (ExecutionEnvironment.canUseDOM && window.location.href) || '';
+if (/[?&]react_perf\b/.test(url)) {
+  ReactDebugTool.beginProfiling();
+}
+
+module.exports = ReactDebugTool;
diff --git a/src/renderers/shared/ReactInstrumentation.js b/src/renderers/shared/ReactInstrumentation.js
new file mode 100644
index 000000000..a5de36d00
--- /dev/null
+++ b/src/renderers/shared/ReactInstrumentation.js
@@ -0,0 +1,23 @@
+/**
+ * Copyright 2016-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactInstrumentation
+ * @flow
+ */
+
+'use strict';
+
+// Trust the developer to only use ReactInstrumentation with a __DEV__ check
+var debugTool = ((null: any): typeof ReactDebugTool);
+
+if (__DEV__) {
+  var ReactDebugTool = require('ReactDebugTool');
+  debugTool = ReactDebugTool;
+}
+
+module.exports = {debugTool};
diff --git a/src/renderers/shared/ReactPerf.js b/src/renderers/shared/ReactPerf.js
new file mode 100644
index 000000000..17abb5809
--- /dev/null
+++ b/src/renderers/shared/ReactPerf.js
@@ -0,0 +1,458 @@
+/**
+ * Copyright 2016-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactPerf
+ * @flow
+ */
+
+'use strict';
+
+var ReactDebugTool = require('ReactDebugTool');
+var lowPriorityWarning = require('lowPriorityWarning');
+var alreadyWarned = false;
+
+import type {FlushHistory} from 'ReactDebugTool';
+
+function roundFloat(val, base = 2) {
+  var n = Math.pow(10, base);
+  return Math.floor(val * n) / n;
+}
+
+// Flow type definition of console.table is too strict right now, see
+// https://github.com/facebook/flow/pull/2353 for updates
+function consoleTable(table: Array<{[key: string]: any}>): void {
+  console.table((table: any));
+}
+
+function warnInProduction() {
+  if (alreadyWarned) {
+    return;
+  }
+  alreadyWarned = true;
+  if (typeof console !== 'undefined') {
+    console.error(
+      'ReactPerf is not supported in the production builds of React. ' +
+        'To collect measurements, please use the development build of React instead.',
+    );
+  }
+}
+
+function getLastMeasurements() {
+  if (!__DEV__) {
+    warnInProduction();
+    return [];
+  }
+
+  return ReactDebugTool.getFlushHistory();
+}
+
+function getExclusive(flushHistory = getLastMeasurements()) {
+  if (!__DEV__) {
+    warnInProduction();
+    return [];
+  }
+
+  var aggregatedStats = {};
+  var affectedIDs = {};
+
+  function updateAggregatedStats(
+    treeSnapshot,
+    instanceID,
+    timerType,
+    applyUpdate,
+  ) {
+    var {displayName} = treeSnapshot[instanceID];
+    var key = displayName;
+    var stats = aggregatedStats[key];
+    if (!stats) {
+      affectedIDs[key] = {};
+      stats = aggregatedStats[key] = {
+        key,
+        instanceCount: 0,
+        counts: {},
+        durations: {},
+        totalDuration: 0,
+      };
+    }
+    if (!stats.durations[timerType]) {
+      stats.durations[timerType] = 0;
+    }
+    if (!stats.counts[timerType]) {
+      stats.counts[timerType] = 0;
+    }
+    affectedIDs[key][instanceID] = true;
+    applyUpdate(stats);
+  }
+
+  flushHistory.forEach(flush => {
+    var {measurements, treeSnapshot} = flush;
+    measurements.forEach(measurement => {
+      var {duration, instanceID, timerType} = measurement;
+      updateAggregatedStats(treeSnapshot, instanceID, timerType, stats => {
+        stats.totalDuration += duration;
+        stats.durations[timerType] += duration;
+        stats.counts[timerType]++;
+      });
+    });
+  });
+
+  return Object.keys(aggregatedStats)
+    .map(key => ({
+      ...aggregatedStats[key],
+      instanceCount: Object.keys(affectedIDs[key]).length,
+    }))
+    .sort((a, b) => b.totalDuration - a.totalDuration);
+}
+
+function getInclusive(flushHistory = getLastMeasurements()) {
+  if (!__DEV__) {
+    warnInProduction();
+    return [];
+  }
+
+  var aggregatedStats = {};
+  var affectedIDs = {};
+
+  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
+    var {displayName, ownerID} = treeSnapshot[instanceID];
+    var owner = treeSnapshot[ownerID];
+    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
+    var stats = aggregatedStats[key];
+    if (!stats) {
+      affectedIDs[key] = {};
+      stats = aggregatedStats[key] = {
+        key,
+        instanceCount: 0,
+        inclusiveRenderDuration: 0,
+        renderCount: 0,
+      };
+    }
+    affectedIDs[key][instanceID] = true;
+    applyUpdate(stats);
+  }
+
+  var isCompositeByID = {};
+  flushHistory.forEach(flush => {
+    var {measurements} = flush;
+    measurements.forEach(measurement => {
+      var {instanceID, timerType} = measurement;
+      if (timerType !== 'render') {
+        return;
+      }
+      isCompositeByID[instanceID] = true;
+    });
+  });
+
+  flushHistory.forEach(flush => {
+    var {measurements, treeSnapshot} = flush;
+    measurements.forEach(measurement => {
+      var {duration, instanceID, timerType} = measurement;
+      if (timerType !== 'render') {
+        return;
+      }
+      updateAggregatedStats(treeSnapshot, instanceID, stats => {
+        stats.renderCount++;
+      });
+      var nextParentID = instanceID;
+      while (nextParentID) {
+        // As we traverse parents, only count inclusive time towards composites.
+        // We know something is a composite if its render() was called.
+        if (isCompositeByID[nextParentID]) {
+          updateAggregatedStats(treeSnapshot, nextParentID, stats => {
+            stats.inclusiveRenderDuration += duration;
+          });
+        }
+        nextParentID = treeSnapshot[nextParentID].parentID;
+      }
+    });
+  });
+
+  return Object.keys(aggregatedStats)
+    .map(key => ({
+      ...aggregatedStats[key],
+      instanceCount: Object.keys(affectedIDs[key]).length,
+    }))
+    .sort((a, b) => b.inclusiveRenderDuration - a.inclusiveRenderDuration);
+}
+
+function getWasted(flushHistory = getLastMeasurements()) {
+  if (!__DEV__) {
+    warnInProduction();
+    return [];
+  }
+
+  var aggregatedStats = {};
+  var affectedIDs = {};
+
+  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
+    var {displayName, ownerID} = treeSnapshot[instanceID];
+    var owner = treeSnapshot[ownerID];
+    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
+    var stats = aggregatedStats[key];
+    if (!stats) {
+      affectedIDs[key] = {};
+      stats = aggregatedStats[key] = {
+        key,
+        instanceCount: 0,
+        inclusiveRenderDuration: 0,
+        renderCount: 0,
+      };
+    }
+    affectedIDs[key][instanceID] = true;
+    applyUpdate(stats);
+  }
+
+  flushHistory.forEach(flush => {
+    var {measurements, treeSnapshot, operations} = flush;
+    var isDefinitelyNotWastedByID = {};
+
+    // Find host components associated with an operation in this batch.
+    // Mark all components in their parent tree as definitely not wasted.
+    operations.forEach(operation => {
+      var {instanceID} = operation;
+      var nextParentID = instanceID;
+      while (nextParentID) {
+        isDefinitelyNotWastedByID[nextParentID] = true;
+        nextParentID = treeSnapshot[nextParentID].parentID;
+      }
+    });
+
+    // Find composite components that rendered in this batch.
+    // These are potential candidates for being wasted renders.
+    var renderedCompositeIDs = {};
+    measurements.forEach(measurement => {
+      var {instanceID, timerType} = measurement;
+      if (timerType !== 'render') {
+        return;
+      }
+      renderedCompositeIDs[instanceID] = true;
+    });
+
+    measurements.forEach(measurement => {
+      var {duration, instanceID, timerType} = measurement;
+      if (timerType !== 'render') {
+        return;
+      }
+
+      // If there was a DOM update below this component, or it has just been
+      // mounted, its render() is not considered wasted.
+      var {updateCount} = treeSnapshot[instanceID];
+      if (isDefinitelyNotWastedByID[instanceID] || updateCount === 0) {
+        return;
+      }
+
+      // We consider this render() wasted.
+      updateAggregatedStats(treeSnapshot, instanceID, stats => {
+        stats.renderCount++;
+      });
+
+      var nextParentID = instanceID;
+      while (nextParentID) {
+        // Any parents rendered during this batch are considered wasted
+        // unless we previously marked them as dirty.
+        var isWasted =
+          renderedCompositeIDs[nextParentID] &&
+          !isDefinitelyNotWastedByID[nextParentID];
+        if (isWasted) {
+          updateAggregatedStats(treeSnapshot, nextParentID, stats => {
+            stats.inclusiveRenderDuration += duration;
+          });
+        }
+        nextParentID = treeSnapshot[nextParentID].parentID;
+      }
+    });
+  });
+
+  return Object.keys(aggregatedStats)
+    .map(key => ({
+      ...aggregatedStats[key],
+      instanceCount: Object.keys(affectedIDs[key]).length,
+    }))
+    .sort((a, b) => b.inclusiveRenderDuration - a.inclusiveRenderDuration);
+}
+
+function getOperations(flushHistory = getLastMeasurements()) {
+  if (!__DEV__) {
+    warnInProduction();
+    return [];
+  }
+
+  var stats = [];
+  flushHistory.forEach((flush, flushIndex) => {
+    var {operations, treeSnapshot} = flush;
+    operations.forEach(operation => {
+      var {instanceID, type, payload} = operation;
+      var {displayName, ownerID} = treeSnapshot[instanceID];
+      var owner = treeSnapshot[ownerID];
+      var key = (owner ? owner.displayName + ' > ' : '') + displayName;
+
+      stats.push({
+        flushIndex,
+        instanceID,
+        key,
+        type,
+        ownerID,
+        payload,
+      });
+    });
+  });
+  return stats;
+}
+
+function printExclusive(flushHistory?: FlushHistory) {
+  if (!__DEV__) {
+    warnInProduction();
+    return;
+  }
+
+  var stats = getExclusive(flushHistory);
+  var table = stats.map(item => {
+    var {key, instanceCount, totalDuration} = item;
+    var renderCount = item.counts.render || 0;
+    var renderDuration = item.durations.render || 0;
+    return {
+      Component: key,
+      'Total time (ms)': roundFloat(totalDuration),
+      'Instance count': instanceCount,
+      'Total render time (ms)': roundFloat(renderDuration),
+      'Average render time (ms)': renderCount
+        ? roundFloat(renderDuration / renderCount)
+        : undefined,
+      'Render count': renderCount,
+      'Total lifecycle time (ms)': roundFloat(totalDuration - renderDuration),
+    };
+  });
+  consoleTable(table);
+}
+
+function printInclusive(flushHistory?: FlushHistory) {
+  if (!__DEV__) {
+    warnInProduction();
+    return;
+  }
+
+  var stats = getInclusive(flushHistory);
+  var table = stats.map(item => {
+    var {key, instanceCount, inclusiveRenderDuration, renderCount} = item;
+    return {
+      'Owner > Component': key,
+      'Inclusive render time (ms)': roundFloat(inclusiveRenderDuration),
+      'Instance count': instanceCount,
+      'Render count': renderCount,
+    };
+  });
+  consoleTable(table);
+}
+
+function printWasted(flushHistory?: FlushHistory) {
+  if (!__DEV__) {
+    warnInProduction();
+    return;
+  }
+
+  var stats = getWasted(flushHistory);
+  var table = stats.map(item => {
+    var {key, instanceCount, inclusiveRenderDuration, renderCount} = item;
+    return {
+      'Owner > Component': key,
+      'Inclusive wasted time (ms)': roundFloat(inclusiveRenderDuration),
+      'Instance count': instanceCount,
+      'Render count': renderCount,
+    };
+  });
+  consoleTable(table);
+}
+
+function printOperations(flushHistory?: FlushHistory) {
+  if (!__DEV__) {
+    warnInProduction();
+    return;
+  }
+
+  var stats = getOperations(flushHistory);
+  var table = stats.map(stat => ({
+    'Owner > Node': stat.key,
+    Operation: stat.type,
+    Payload: typeof stat.payload === 'object'
+      ? JSON.stringify(stat.payload)
+      : stat.payload,
+    'Flush index': stat.flushIndex,
+    'Owner Component ID': stat.ownerID,
+    'DOM Component ID': stat.instanceID,
+  }));
+  consoleTable(table);
+}
+
+var warnedAboutPrintDOM = false;
+function printDOM(measurements: FlushHistory) {
+  lowPriorityWarning(
+    warnedAboutPrintDOM,
+    '`ReactPerf.printDOM(...)` is deprecated. Use ' +
+      '`ReactPerf.printOperations(...)` instead.',
+  );
+  warnedAboutPrintDOM = true;
+  return printOperations(measurements);
+}
+
+var warnedAboutGetMeasurementsSummaryMap = false;
+function getMeasurementsSummaryMap(measurements: FlushHistory) {
+  lowPriorityWarning(
+    warnedAboutGetMeasurementsSummaryMap,
+    '`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use ' +
+      '`ReactPerf.getWasted(...)` instead.',
+  );
+  warnedAboutGetMeasurementsSummaryMap = true;
+  return getWasted(measurements);
+}
+
+function start() {
+  if (!__DEV__) {
+    warnInProduction();
+    return;
+  }
+
+  ReactDebugTool.beginProfiling();
+}
+
+function stop() {
+  if (!__DEV__) {
+    warnInProduction();
+    return;
+  }
+
+  ReactDebugTool.endProfiling();
+}
+
+function isRunning() {
+  if (!__DEV__) {
+    warnInProduction();
+    return false;
+  }
+
+  return ReactDebugTool.isProfiling();
+}
+
+var ReactPerfAnalysis = {
+  getLastMeasurements,
+  getExclusive,
+  getInclusive,
+  getWasted,
+  getOperations,
+  printExclusive,
+  printInclusive,
+  printWasted,
+  printOperations,
+  start,
+  stop,
+  isRunning,
+  // Deprecated:
+  printDOM,
+  getMeasurementsSummaryMap,
+};
+
+module.exports = ReactPerfAnalysis;
diff --git a/src/renderers/shared/__tests__/ReactDebugTool-test.js b/src/renderers/shared/__tests__/ReactDebugTool-test.js
new file mode 100644
index 000000000..ab702ce34
--- /dev/null
+++ b/src/renderers/shared/__tests__/ReactDebugTool-test.js
@@ -0,0 +1,84 @@
+/**
+ * Copyright 2016-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+describe('ReactDebugTool', () => {
+  var ReactDebugTool;
+
+  beforeEach(() => {
+    jest.resetModuleRegistry();
+    ReactDebugTool = require('ReactDebugTool');
+  });
+
+  it('should add and remove hooks', () => {
+    var handler1 = jasmine.createSpy('spy');
+    var handler2 = jasmine.createSpy('spy');
+    var hook1 = {onTestEvent: handler1};
+    var hook2 = {onTestEvent: handler2};
+
+    ReactDebugTool.addHook(hook1);
+    ReactDebugTool.onTestEvent();
+    expect(handler1.calls.count()).toBe(1);
+    expect(handler2.calls.count()).toBe(0);
+
+    ReactDebugTool.onTestEvent();
+    expect(handler1.calls.count()).toBe(2);
+    expect(handler2.calls.count()).toBe(0);
+
+    ReactDebugTool.addHook(hook2);
+    ReactDebugTool.onTestEvent();
+    expect(handler1.calls.count()).toBe(3);
+    expect(handler2.calls.count()).toBe(1);
+
+    ReactDebugTool.onTestEvent();
+    expect(handler1.calls.count()).toBe(4);
+    expect(handler2.calls.count()).toBe(2);
+
+    ReactDebugTool.removeHook(hook1);
+    ReactDebugTool.onTestEvent();
+    expect(handler1.calls.count()).toBe(4);
+    expect(handler2.calls.count()).toBe(3);
+
+    ReactDebugTool.removeHook(hook2);
+    ReactDebugTool.onTestEvent();
+    expect(handler1.calls.count()).toBe(4);
+    expect(handler2.calls.count()).toBe(3);
+  });
+
+  it('warns once when an error is thrown in hook', () => {
+    spyOn(console, 'error');
+    ReactDebugTool.addHook({
+      onTestEvent() {
+        throw new Error('Hi.');
+      },
+    });
+
+    ReactDebugTool.onTestEvent();
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'Exception thrown by hook while handling ' + 'onTestEvent: Error: Hi.',
+    );
+
+    ReactDebugTool.onTestEvent();
+    expect(console.error.calls.count()).toBe(1);
+  });
+
+  it('returns isProfiling state', () => {
+    expect(ReactDebugTool.isProfiling()).toBe(false);
+
+    ReactDebugTool.beginProfiling();
+    expect(ReactDebugTool.isProfiling()).toBe(true);
+
+    ReactDebugTool.endProfiling();
+    expect(ReactDebugTool.isProfiling()).toBe(false);
+  });
+});
diff --git a/src/renderers/shared/__tests__/ReactPerf-test.js b/src/renderers/shared/__tests__/ReactPerf-test.js
new file mode 100644
index 000000000..3c5f3d58e
--- /dev/null
+++ b/src/renderers/shared/__tests__/ReactPerf-test.js
@@ -0,0 +1,741 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+describe('ReactPerf', () => {
+  var React;
+  var ReactDOM;
+  var ReactPerf;
+  var ReactTestUtils;
+  var emptyFunction;
+
+  var App;
+  var Box;
+  var Div;
+  var LifeCycle;
+
+  beforeEach(() => {
+    var now = 0;
+    jest.setMock('fbjs/lib/performanceNow', function() {
+      return now++;
+    });
+
+    if (typeof console.table !== 'function') {
+      console.table = () => {};
+      console.table.isFake = true;
+    }
+
+    React = require('React');
+    ReactDOM = require('ReactDOM');
+    ReactPerf = require('ReactPerf');
+    ReactTestUtils = require('ReactTestUtils');
+    emptyFunction = require('emptyFunction');
+
+    App = class extends React.Component {
+      render() {
+        return <div><Box /><Box flip={this.props.flipSecond} /></div>;
+      }
+    };
+
+    Box = class extends React.Component {
+      render() {
+        return <div key={!!this.props.flip}><input /></div>;
+      }
+    };
+
+    // ReactPerf only measures composites, so we put everything in one.
+    Div = class extends React.Component {
+      render() {
+        return <div {...this.props} />;
+      }
+    };
+
+    LifeCycle = class extends React.Component {
+      shouldComponentUpdate = emptyFunction.thatReturnsTrue;
+      componentWillMount = emptyFunction;
+      componentDidMount = emptyFunction;
+      componentWillReceiveProps = emptyFunction;
+      componentWillUpdate = emptyFunction;
+      componentDidUpdate = emptyFunction;
+      componentWillUnmount = emptyFunction;
+      render = emptyFunction.thatReturnsNull;
+    };
+  });
+
+  afterEach(() => {
+    if (console.table.isFake) {
+      delete console.table;
+    }
+  });
+
+  function measure(fn) {
+    ReactPerf.start();
+    fn();
+    ReactPerf.stop();
+
+    // Make sure none of the methods crash.
+    ReactPerf.getWasted();
+    ReactPerf.getInclusive();
+    ReactPerf.getExclusive();
+    ReactPerf.getOperations();
+
+    return ReactPerf.getLastMeasurements();
+  }
+
+  it('should count no-op update as waste', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<App />, container);
+    var measurements = measure(() => {
+      ReactDOM.render(<App />, container);
+    });
+
+    var summary = ReactPerf.getWasted(measurements);
+    expect(summary).toEqual([
+      {
+        key: 'App',
+        instanceCount: 1,
+        inclusiveRenderDuration: 3,
+        renderCount: 1,
+      },
+      {
+        key: 'App > Box',
+        instanceCount: 2,
+        inclusiveRenderDuration: 2,
+        renderCount: 2,
+      },
+    ]);
+  });
+
+  it('should count no-op update in child as waste', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<App />, container);
+
+    // Here, we add a Box -- two of the <Box /> updates are wasted time (but the
+    // addition of the third is not)
+    var measurements = measure(() => {
+      ReactDOM.render(<App flipSecond={true} />, container);
+    });
+
+    var summary = ReactPerf.getWasted(measurements);
+    expect(summary).toEqual([
+      {
+        key: 'App > Box',
+        instanceCount: 1,
+        inclusiveRenderDuration: 1,
+        renderCount: 1,
+      },
+    ]);
+  });
+
+  function expectNoWaste(fn) {
+    var measurements = measure(fn);
+    var summary = ReactPerf.getWasted(measurements);
+    expect(summary).toEqual([]);
+  }
+
+  it('should not count initial render as waste', () => {
+    expectNoWaste(() => {
+      ReactTestUtils.renderIntoDocument(<App />);
+    });
+  });
+
+  it('should not count unmount as waste', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<Div>hello</Div>, container);
+    expectNoWaste(() => {
+      ReactDOM.unmountComponentAtNode(container);
+    });
+  });
+
+  it('should not count content update as waste', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<Div>hello</Div>, container);
+    expectNoWaste(() => {
+      ReactDOM.render(<Div>hello world</Div>, container);
+    });
+  });
+
+  it('should not count child addition as waste', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<Div><span /></Div>, container);
+    expectNoWaste(() => {
+      ReactDOM.render(<Div><span /><span /></Div>, container);
+    });
+  });
+
+  it('should not count child removal as waste', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<Div><span /><span /></Div>, container);
+    expectNoWaste(() => {
+      ReactDOM.render(<Div><span /></Div>, container);
+    });
+  });
+
+  it('should not count property update as waste', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<Div className="yellow">hey</Div>, container);
+    expectNoWaste(() => {
+      ReactDOM.render(<Div className="blue">hey</Div>, container);
+    });
+  });
+
+  it('should not count style update as waste', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<Div style={{color: 'yellow'}}>hey</Div>, container);
+    expectNoWaste(() => {
+      ReactDOM.render(<Div style={{color: 'blue'}}>hey</Div>, container);
+    });
+  });
+
+  it('should not count property removal as waste', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<Div className="yellow">hey</Div>, container);
+    expectNoWaste(() => {
+      ReactDOM.render(<Div>hey</Div>, container);
+    });
+  });
+
+  it('should not count raw HTML update as waste', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(
+      <Div dangerouslySetInnerHTML={{__html: 'me'}} />,
+      container,
+    );
+    expectNoWaste(() => {
+      ReactDOM.render(
+        <Div dangerouslySetInnerHTML={{__html: 'you'}} />,
+        container,
+      );
+    });
+  });
+
+  it('should not count child reordering as waste', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<Div><div key="A" /><div key="B" /></Div>, container);
+    expectNoWaste(() => {
+      ReactDOM.render(<Div><div key="B" /><div key="A" /></Div>, container);
+    });
+  });
+
+  it('should not count text update as waste', () => {
+    var container = document.createElement('div');
+    ReactDOM.render(<Div>{'hello'}{'world'}</Div>, container);
+    expectNoWaste(() => {
+      ReactDOM.render(<Div>{'hello'}{'friend'}</Div>, container);
+    });
+  });
+
+  it('should not count replacing null with a host as waste', () => {
+    var element = null;
+    function Foo() {
+      return element;
+    }
+    var container = document.createElement('div');
+    ReactDOM.render(<Foo />, container);
+    expectNoWaste(() => {
+      element = <div />;
+      ReactDOM.render(<Foo />, container);
+    });
+  });
+
+  it('should not count replacing a host with null as waste', () => {
+    var element = <div />;
+    function Foo() {
+      return element;
+    }
+    var container = document.createElement('div');
+    ReactDOM.render(<Foo />, container);
+    expectNoWaste(() => {
+      element = null;
+      ReactDOM.render(<Foo />, container);
+    });
+  });
+
+  it('should include stats for components unmounted during measurement', () => {
+    var container = document.createElement('div');
+    var measurements = measure(() => {
+      ReactDOM.render(<Div><Div key="a" /></Div>, container);
+      ReactDOM.render(<Div><Div key="b" /></Div>, container);
+    });
+    expect(ReactPerf.getExclusive(measurements)).toEqual([
+      {
+        key: 'Div',
+        instanceCount: 3,
+        counts: {ctor: 3, render: 4},
+        durations: {ctor: 3, render: 4},
+        totalDuration: 7,
+      },
+    ]);
+  });
+
+  it('should include lifecycle methods in measurements', () => {
+    var container = document.createElement('div');
+    var measurements = measure(() => {
+      var instance = ReactDOM.render(<LifeCycle />, container);
+      ReactDOM.render(<LifeCycle />, container);
+      instance.setState({});
+      ReactDOM.unmountComponentAtNode(container);
+    });
+    expect(ReactPerf.getExclusive(measurements)).toEqual([
+      {
+        key: 'LifeCycle',
+        instanceCount: 1,
+        totalDuration: 14,
+        counts: {
+          ctor: 1,
+          shouldComponentUpdate: 2,
+          componentWillMount: 1,
+          componentDidMount: 1,
+          componentWillReceiveProps: 1,
+          componentWillUpdate: 2,
+          componentDidUpdate: 2,
+          componentWillUnmount: 1,
+          render: 3,
+        },
+        durations: {
+          ctor: 1,
+          shouldComponentUpdate: 2,
+          componentWillMount: 1,
+          componentDidMount: 1,
+          componentWillReceiveProps: 1,
+          componentWillUpdate: 2,
+          componentDidUpdate: 2,
+          componentWillUnmount: 1,
+          render: 3,
+        },
+      },
+    ]);
+  });
+
+  it('should include render time of functional components', () => {
+    function Foo() {
+      return null;
+    }
+
+    var container = document.createElement('div');
+    var measurements = measure(() => {
+      ReactDOM.render(<Foo />, container);
+    });
+    expect(ReactPerf.getExclusive(measurements)).toEqual([
+      {
+        key: 'Foo',
+        instanceCount: 1,
+        totalDuration: 1,
+        counts: {
+          render: 1,
+        },
+        durations: {
+          render: 1,
+        },
+      },
+    ]);
+  });
+
+  it('should not count time in a portal towards lifecycle method', () => {
+    function Foo() {
+      return null;
+    }
+
+    var portalContainer = document.createElement('div');
+    class Portal extends React.Component {
+      componentDidMount() {
+        ReactDOM.render(<Foo />, portalContainer);
+      }
+      render() {
+        return null;
+      }
+    }
+
+    var container = document.createElement('div');
+    var measurements = measure(() => {
+      ReactDOM.render(<Portal />, container);
+    });
+
+    expect(ReactPerf.getExclusive(measurements)).toEqual([
+      {
+        key: 'Portal',
+        instanceCount: 1,
+        totalDuration: 6,
+        counts: {
+          ctor: 1,
+          componentDidMount: 1,
+          render: 1,
+        },
+        durations: {
+          ctor: 1,
+          // We want to exclude nested imperative ReactDOM.render() from lifecycle hook's own time.
+          // Otherwise it would artificially float to the top even though its exclusive time is small.
+          // This is how we get 4 as a number with the performanceNow() mock:
+          // - we capture the time we enter componentDidMount (n = 0)
+          // - we capture the time when we enter a nested flush (n = 1)
+          // - in the nested flush, we call it twice: before and after <Foo /> rendering. (n = 3)
+          // - we capture the time when we exit a nested flush (n = 4)
+          // - we capture the time we exit componentDidMount (n = 5)
+          // Time spent in componentDidMount = (5 - 0 - (4 - 3)) = 4.
+          componentDidMount: 4,
+          render: 1,
+        },
+      },
+      {
+        key: 'Foo',
+        instanceCount: 1,
+        totalDuration: 1,
+        counts: {
+          render: 1,
+        },
+        durations: {
+          render: 1,
+        },
+      },
+    ]);
+  });
+
+  it('warns once when using getMeasurementsSummaryMap', () => {
+    var measurements = measure(() => {});
+    spyOn(console, 'warn');
+    ReactPerf.getMeasurementsSummaryMap(measurements);
+    expect(console.warn.calls.count()).toBe(1);
+    expect(console.warn.calls.argsFor(0)[0]).toContain(
+      '`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use ' +
+        '`ReactPerf.getWasted(...)` instead.',
+    );
+
+    ReactPerf.getMeasurementsSummaryMap(measurements);
+    expect(console.warn.calls.count()).toBe(1);
+  });
+
+  it('warns once when using printDOM', () => {
+    var measurements = measure(() => {});
+    spyOn(console, 'warn');
+    ReactPerf.printDOM(measurements);
+    expect(console.warn.calls.count()).toBe(1);
+    expect(console.warn.calls.argsFor(0)[0]).toContain(
+      '`ReactPerf.printDOM(...)` is deprecated. Use ' +
+        '`ReactPerf.printOperations(...)` instead.',
+    );
+
+    ReactPerf.printDOM(measurements);
+    expect(console.warn.calls.count()).toBe(1);
+  });
+
+  it('returns isRunning state', () => {
+    expect(ReactPerf.isRunning()).toBe(false);
+
+    ReactPerf.start();
+    expect(ReactPerf.isRunning()).toBe(true);
+
+    ReactPerf.stop();
+    expect(ReactPerf.isRunning()).toBe(false);
+  });
+
+  it('start has no effect when already running', () => {
+    expect(ReactPerf.isRunning()).toBe(false);
+
+    ReactPerf.start();
+    expect(ReactPerf.isRunning()).toBe(true);
+
+    ReactPerf.start();
+    expect(ReactPerf.isRunning()).toBe(true);
+
+    ReactPerf.stop();
+    expect(ReactPerf.isRunning()).toBe(false);
+  });
+
+  it('stop has no effect when already stopped', () => {
+    expect(ReactPerf.isRunning()).toBe(false);
+
+    ReactPerf.stop();
+    expect(ReactPerf.isRunning()).toBe(false);
+
+    ReactPerf.stop();
+    expect(ReactPerf.isRunning()).toBe(false);
+  });
+
+  it('should print console error only once', () => {
+    __DEV__ = false;
+
+    spyOn(console, 'error');
+
+    expect(ReactPerf.getLastMeasurements()).toEqual([]);
+    expect(ReactPerf.getExclusive()).toEqual([]);
+    expect(ReactPerf.getInclusive()).toEqual([]);
+    expect(ReactPerf.getWasted()).toEqual([]);
+    expect(ReactPerf.getOperations()).toEqual([]);
+    expect(ReactPerf.printExclusive()).toEqual(undefined);
+    expect(ReactPerf.printInclusive()).toEqual(undefined);
+    expect(ReactPerf.printWasted()).toEqual(undefined);
+    expect(ReactPerf.printOperations()).toEqual(undefined);
+    expect(ReactPerf.start()).toBe(undefined);
+    expect(ReactPerf.stop()).toBe(undefined);
+    expect(ReactPerf.isRunning()).toBe(false);
+
+    expect(console.error.calls.count()).toBe(1);
+
+    __DEV__ = true;
+  });
+
+  it('should work when measurement starts during reconciliation', () => {
+    // https://github.com/facebook/react/issues/6949#issuecomment-230371009
+    class Measurer extends React.Component {
+      componentWillMount() {
+        ReactPerf.start();
+      }
+
+      componentDidMount() {
+        ReactPerf.stop();
+      }
+
+      componentWillUpdate() {
+        ReactPerf.start();
+      }
+
+      componentDidUpdate() {
+        ReactPerf.stop();
+      }
+
+      render() {
+        // Force reconciliation despite constant element
+        return React.cloneElement(this.props.children);
+      }
+    }
+
+    var container = document.createElement('div');
+    ReactDOM.render(<Measurer><App /></Measurer>, container);
+    expect(ReactPerf.getWasted()).toEqual([]);
+
+    ReactDOM.render(<Measurer><App /></Measurer>, container);
+    expect(ReactPerf.getWasted()).toEqual([
+      {
+        key: 'Measurer',
+        instanceCount: 1,
+        inclusiveRenderDuration: 4,
+        renderCount: 1,
+      },
+      {
+        key: 'App',
+        instanceCount: 1,
+        inclusiveRenderDuration: 3,
+        renderCount: 1,
+      },
+      {
+        key: 'App > Box',
+        instanceCount: 2,
+        inclusiveRenderDuration: 2,
+        renderCount: 2,
+      },
+    ]);
+  });
+
+  it('should not print errant warnings if render() throws', () => {
+    var container = document.createElement('div');
+    var thrownErr = new Error('Muhaha!');
+
+    class Evil extends React.Component {
+      render() {
+        throw thrownErr;
+      }
+    }
+
+    ReactPerf.start();
+    try {
+      ReactDOM.render(
+        <div>
+          <LifeCycle />
+          <Evil />
+        </div>,
+        container,
+      );
+    } catch (err) {
+      if (err !== thrownErr) {
+        throw err;
+      }
+    }
+    ReactPerf.stop();
+  });
+
+  it('should not print errant warnings if componentWillMount() throws', () => {
+    var container = document.createElement('div');
+    var thrownErr = new Error('Muhaha!');
+
+    class Evil extends React.Component {
+      componentWillMount() {
+        throw thrownErr;
+      }
+      render() {
+        return <div />;
+      }
+    }
+
+    ReactPerf.start();
+    try {
+      ReactDOM.render(
+        <div>
+          <LifeCycle />
+          <Evil />
+        </div>,
+        container,
+      );
+    } catch (err) {
+      if (err !== thrownErr) {
+        throw err;
+      }
+    }
+    ReactPerf.stop();
+  });
+
+  it('should not print errant warnings if componentDidMount() throws', () => {
+    var container = document.createElement('div');
+    var thrownErr = new Error('Muhaha!');
+
+    class Evil extends React.Component {
+      componentDidMount() {
+        throw thrownErr;
+      }
+      render() {
+        return <div />;
+      }
+    }
+
+    ReactPerf.start();
+    try {
+      ReactDOM.render(
+        <div>
+          <LifeCycle />
+          <Evil />
+        </div>,
+        container,
+      );
+    } catch (err) {
+      if (err !== thrownErr) {
+        throw err;
+      }
+    }
+    ReactPerf.stop();
+  });
+
+  it('should not print errant warnings if portal throws in render()', () => {
+    var container = document.createElement('div');
+    var thrownErr = new Error('Muhaha!');
+
+    class Evil extends React.Component {
+      render() {
+        throw thrownErr;
+      }
+    }
+    class EvilPortal extends React.Component {
+      componentWillMount() {
+        var portalContainer = document.createElement('div');
+        ReactDOM.render(<Evil />, portalContainer);
+      }
+      render() {
+        return <div />;
+      }
+    }
+
+    ReactPerf.start();
+    try {
+      ReactDOM.render(
+        <div>
+          <LifeCycle />
+          <EvilPortal />
+        </div>,
+        container,
+      );
+    } catch (err) {
+      if (err !== thrownErr) {
+        throw err;
+      }
+    }
+    ReactDOM.unmountComponentAtNode(container);
+    ReactPerf.stop();
+  });
+
+  it('should not print errant warnings if portal throws in componentWillMount()', () => {
+    var container = document.createElement('div');
+    var thrownErr = new Error('Muhaha!');
+
+    class Evil extends React.Component {
+      componentWillMount() {
+        throw thrownErr;
+      }
+      render() {
+        return <div />;
+      }
+    }
+    class EvilPortal extends React.Component {
+      componentWillMount() {
+        var portalContainer = document.createElement('div');
+        ReactDOM.render(<Evil />, portalContainer);
+      }
+      render() {
+        return <div />;
+      }
+    }
+
+    ReactPerf.start();
+    try {
+      ReactDOM.render(
+        <div>
+          <LifeCycle />
+          <EvilPortal />
+        </div>,
+        container,
+      );
+    } catch (err) {
+      if (err !== thrownErr) {
+        throw err;
+      }
+    }
+    ReactDOM.unmountComponentAtNode(container);
+    ReactPerf.stop();
+  });
+
+  it('should not print errant warnings if portal throws in componentDidMount()', () => {
+    var container = document.createElement('div');
+    var thrownErr = new Error('Muhaha!');
+
+    class Evil extends React.Component {
+      componentDidMount() {
+        throw thrownErr;
+      }
+      render() {
+        return <div />;
+      }
+    }
+    class EvilPortal extends React.Component {
+      componentWillMount() {
+        var portalContainer = document.createElement('div');
+        ReactDOM.render(<Evil />, portalContainer);
+      }
+      render() {
+        return <div />;
+      }
+    }
+
+    ReactPerf.start();
+    try {
+      ReactDOM.render(
+        <div>
+          <LifeCycle />
+          <EvilPortal />
+        </div>,
+        container,
+      );
+    } catch (err) {
+      if (err !== thrownErr) {
+        throw err;
+      }
+    }
+    ReactDOM.unmountComponentAtNode(container);
+    ReactPerf.stop();
+  });
+});
diff --git a/src/renderers/shared/event/eventPlugins/ResponderTouchHistoryStore.js b/src/renderers/shared/event/eventPlugins/ResponderTouchHistoryStore.js
deleted file mode 100644
index 128494333..000000000
--- a/src/renderers/shared/event/eventPlugins/ResponderTouchHistoryStore.js
+++ /dev/null
@@ -1,185 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @providesModule ResponderTouchHistoryStore
- */
-
-'use strict';
-
-var EventPluginUtils = require('EventPluginUtils');
-
-var invariant = require('invariant');
-
-var isMoveish = EventPluginUtils.isMoveish;
-var isStartish = EventPluginUtils.isStartish;
-var isEndish = EventPluginUtils.isEndish;
-
-var MAX_TOUCH_BANK = 20;
-
-/**
- * Touch position/time tracking information by touchID. Typically, we'll only
- * see IDs with a range of 1-20 (they are recycled when touches end and then
- * start again). This data is commonly needed by many different interaction
- * logic modules so precomputing it is very helpful to do once.
- * Each touch object in `touchBank` is of the following form:
- * { touchActive: boolean,
- *   startTimeStamp: number,
- *   startPageX: number,
- *   startPageY: number,
- *   currentPageX: number,
- *   currentPageY: number,
- *   currentTimeStamp: number
- * }
- */
-var touchHistory = {
-  touchBank: [],
-  numberActiveTouches: 0,
-  // If there is only one active touch, we remember its location. This prevents
-  // us having to loop through all of the touches all the time in the most
-  // common case.
-  indexOfSingleActiveTouch: -1,
-  mostRecentTimeStamp: 0,
-};
-
-var timestampForTouch = function(touch) {
-  // The legacy internal implementation provides "timeStamp", which has been
-  // renamed to "timestamp". Let both work for now while we iron it out
-  // TODO (evv): rename timeStamp to timestamp in internal code
-  return touch.timeStamp || touch.timestamp;
-};
-
-/**
- * TODO: Instead of making gestures recompute filtered velocity, we could
- * include a built in velocity computation that can be reused globally.
- * @param {Touch} touch Native touch object.
- */
-var initializeTouchData = function(touch) {
-  return {
-    touchActive: true,
-    startTimeStamp: timestampForTouch(touch),
-    startPageX: touch.pageX,
-    startPageY: touch.pageY,
-    currentPageX: touch.pageX,
-    currentPageY: touch.pageY,
-    currentTimeStamp: timestampForTouch(touch),
-    previousPageX: touch.pageX,
-    previousPageY: touch.pageY,
-    previousTimeStamp: timestampForTouch(touch),
-  };
-};
-
-var reinitializeTouchTrack = function(touchTrack, touch) {
-  touchTrack.touchActive = true;
-  touchTrack.startTimeStamp = timestampForTouch(touch);
-  touchTrack.startPageX = touch.pageX;
-  touchTrack.startPageY = touch.pageY;
-  touchTrack.currentPageX = touch.pageX;
-  touchTrack.currentPageY = touch.pageY;
-  touchTrack.currentTimeStamp = timestampForTouch(touch);
-  touchTrack.previousPageX = touch.pageX;
-  touchTrack.previousPageY = touch.pageY;
-  touchTrack.previousTimeStamp = timestampForTouch(touch);
-};
-
-var validateTouch = function(touch) {
-  var identifier = touch.identifier;
-  invariant(identifier != null, 'Touch object is missing identifier');
-  if (identifier > MAX_TOUCH_BANK) {
-    console.warn(
-      'Touch identifier ' + identifier + ' is greater than maximum ' +
-      'supported ' + MAX_TOUCH_BANK + ' which causes performance issues ' +
-      'backfilling array locations for all of the indices.'
-    );
-  }
-};
-
-var recordStartTouchData = function(touch) {
-  var touchBank = touchHistory.touchBank;
-  var identifier = touch.identifier;
-  var touchTrack = touchBank[identifier];
-  if (__DEV__) {
-    validateTouch(touch);
-  }
-  if (touchTrack) {
-    reinitializeTouchTrack(touchTrack, touch);
-  } else {
-    touchBank[touch.identifier] = initializeTouchData(touch);
-  }
-  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
-};
-
-var recordMoveTouchData = function(touch) {
-  var touchBank = touchHistory.touchBank;
-  var touchTrack = touchBank[touch.identifier];
-  if (__DEV__) {
-    validateTouch(touch);
-    invariant(touchTrack, 'Touch data should have been recorded on start');
-  }
-  touchTrack.touchActive = true;
-  touchTrack.previousPageX = touchTrack.currentPageX;
-  touchTrack.previousPageY = touchTrack.currentPageY;
-  touchTrack.previousTimeStamp = touchTrack.currentTimeStamp;
-  touchTrack.currentPageX = touch.pageX;
-  touchTrack.currentPageY = touch.pageY;
-  touchTrack.currentTimeStamp = timestampForTouch(touch);
-  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
-};
-
-var recordEndTouchData = function(touch) {
-  var touchBank = touchHistory.touchBank;
-  var touchTrack = touchBank[touch.identifier];
-  if (__DEV__) {
-    validateTouch(touch);
-    invariant(touchTrack, 'Touch data should have been recorded on start');
-  }
-  touchTrack.previousPageX = touchTrack.currentPageX;
-  touchTrack.previousPageY = touchTrack.currentPageY;
-  touchTrack.previousTimeStamp = touchTrack.currentTimeStamp;
-  touchTrack.currentPageX = touch.pageX;
-  touchTrack.currentPageY = touch.pageY;
-  touchTrack.currentTimeStamp = timestampForTouch(touch);
-  touchTrack.touchActive = false;
-  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
-};
-
-var ResponderTouchHistoryStore = {
-  recordTouchTrack: function(topLevelType, nativeEvent) {
-    var touchBank = touchHistory.touchBank;
-    if (isMoveish(topLevelType)) {
-      nativeEvent.changedTouches.forEach(recordMoveTouchData);
-    } else if (isStartish(topLevelType)) {
-      nativeEvent.changedTouches.forEach(recordStartTouchData);
-      touchHistory.numberActiveTouches = nativeEvent.touches.length;
-      if (touchHistory.numberActiveTouches === 1) {
-        touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;
-      }
-    } else if (isEndish(topLevelType)) {
-      nativeEvent.changedTouches.forEach(recordEndTouchData);
-      touchHistory.numberActiveTouches = nativeEvent.touches.length;
-      if (touchHistory.numberActiveTouches === 1) {
-        for (var i = 0; i < touchBank.length; i++) {
-          var touchTrackToCheck = touchBank[i];
-          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
-            touchHistory.indexOfSingleActiveTouch = i;
-            break;
-          }
-        }
-        if (__DEV__) {
-          var activeTouchData = touchBank[touchHistory.indexOfSingleActiveTouch];
-          var foundActive = activeTouchData != null && !!activeTouchData.touchActive;
-          invariant(foundActive, 'Cannot find single active touch');
-        }
-      }
-    }
-  },
-
-  touchHistory: touchHistory,
-};
-
-
-module.exports = ResponderTouchHistoryStore;
diff --git a/src/renderers/shared/fiber/ReactChildFiber.js b/src/renderers/shared/fiber/ReactChildFiber.js
new file mode 100644
index 000000000..31d186022
--- /dev/null
+++ b/src/renderers/shared/fiber/ReactChildFiber.js
@@ -0,0 +1,294 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactChildFiber
+ * @flow
+ */
+
+'use strict';
+
+import type {ReactCoroutine, ReactYield} from 'ReactCoroutine';
+import type {Fiber} from 'ReactFiber';
+import type {PriorityLevel} from 'ReactPriorityLevel';
+
+import type {ReactNodeList} from 'ReactTypes';
+
+var REACT_ELEMENT_TYPE = require('ReactElementSymbol');
+var {REACT_COROUTINE_TYPE, REACT_YIELD_TYPE} = require('ReactCoroutine');
+
+var ReactFiber = require('ReactFiber');
+var ReactReifiedYield = require('ReactReifiedYield');
+
+const {
+  cloneFiber,
+  createFiberFromElement,
+  createFiberFromCoroutine,
+  createFiberFromYield,
+} = ReactFiber;
+
+const {createReifiedYield} = ReactReifiedYield;
+
+const isArray = Array.isArray;
+
+function ChildReconciler(shouldClone) {
+  function createSubsequentChild(
+    returnFiber: Fiber,
+    existingChild: ?Fiber,
+    previousSibling: Fiber,
+    newChildren,
+    priority: PriorityLevel,
+  ): Fiber {
+    if (typeof newChildren !== 'object' || newChildren === null) {
+      return previousSibling;
+    }
+
+    switch (newChildren.$$typeof) {
+      case REACT_ELEMENT_TYPE: {
+        const element = (newChildren: ReactElement<any>);
+        if (
+          existingChild &&
+          element.type === existingChild.type &&
+          element.key === existingChild.key
+        ) {
+          // TODO: This is not sufficient since previous siblings could be new.
+          // Will fix reconciliation properly later.
+          const clone = shouldClone
+            ? cloneFiber(existingChild, priority)
+            : existingChild;
+          if (!shouldClone) {
+            // TODO: This might be lowering the priority of nested unfinished work.
+            clone.pendingWorkPriority = priority;
+          }
+          clone.pendingProps = element.props;
+          clone.sibling = null;
+          clone.return = returnFiber;
+          previousSibling.sibling = clone;
+          return clone;
+        }
+        const child = createFiberFromElement(element, priority);
+        previousSibling.sibling = child;
+        child.return = returnFiber;
+        return child;
+      }
+
+      case REACT_COROUTINE_TYPE: {
+        const coroutine = (newChildren: ReactCoroutine);
+        const child = createFiberFromCoroutine(coroutine, priority);
+        previousSibling.sibling = child;
+        child.return = returnFiber;
+        return child;
+      }
+
+      case REACT_YIELD_TYPE: {
+        const yieldNode = (newChildren: ReactYield);
+        const reifiedYield = createReifiedYield(yieldNode);
+        const child = createFiberFromYield(yieldNode, priority);
+        child.output = reifiedYield;
+        previousSibling.sibling = child;
+        child.return = returnFiber;
+        return child;
+      }
+    }
+
+    if (isArray(newChildren)) {
+      let prev: Fiber = previousSibling;
+      let existing: ?Fiber = existingChild;
+      for (var i = 0; i < newChildren.length; i++) {
+        var nextExisting = existing && existing.sibling;
+        prev = createSubsequentChild(
+          returnFiber,
+          existing,
+          prev,
+          newChildren[i],
+          priority,
+        );
+        if (prev && existing) {
+          // TODO: This is not correct because there could've been more
+          // than one sibling consumed but I don't want to return a tuple.
+          existing = nextExisting;
+        }
+      }
+      return prev;
+    } else {
+      // TODO: Throw for unknown children.
+      return previousSibling;
+    }
+  }
+
+  function createFirstChild(returnFiber, existingChild, newChildren, priority) {
+    if (typeof newChildren !== 'object' || newChildren === null) {
+      return null;
+    }
+
+    switch (newChildren.$$typeof) {
+      case REACT_ELEMENT_TYPE: {
+        /* $FlowFixMe(>=0.31.0): This is an unsafe cast. Consider adding a type
+         *                       annotation to the `newChildren` param of this
+         *                       function.
+         */
+        const element = (newChildren: ReactElement<any>);
+        if (
+          existingChild &&
+          element.type === existingChild.type &&
+          element.key === existingChild.key
+        ) {
+          // Get the clone of the existing fiber.
+          const clone = shouldClone
+            ? cloneFiber(existingChild, priority)
+            : existingChild;
+          if (!shouldClone) {
+            // TODO: This might be lowering the priority of nested unfinished work.
+            clone.pendingWorkPriority = priority;
+          }
+          clone.pendingProps = element.props;
+          clone.sibling = null;
+          clone.return = returnFiber;
+          return clone;
+        }
+        const child = createFiberFromElement(element, priority);
+        child.return = returnFiber;
+        return child;
+      }
+
+      case REACT_COROUTINE_TYPE: {
+        /* $FlowFixMe(>=0.31.0): No 'handler' property found in object type
+         */
+        const coroutine = (newChildren: ReactCoroutine);
+        const child = createFiberFromCoroutine(coroutine, priority);
+        child.return = returnFiber;
+        return child;
+      }
+
+      case REACT_YIELD_TYPE: {
+        // A yield results in a fragment fiber whose output is the continuation.
+        // TODO: When there is only a single child, we can optimize this to avoid
+        // the fragment.
+        /* $FlowFixMe(>=0.31.0): No 'continuation' property found in object
+         * type
+         */
+        const yieldNode = (newChildren: ReactYield);
+        const reifiedYield = createReifiedYield(yieldNode);
+        const child = createFiberFromYield(yieldNode, priority);
+        child.output = reifiedYield;
+        child.return = returnFiber;
+        return child;
+      }
+    }
+
+    if (isArray(newChildren)) {
+      var first: ?Fiber = null;
+      var prev: ?Fiber = null;
+      var existing: ?Fiber = existingChild;
+      /* $FlowIssue(>=0.31.0) #12747709
+       *
+       * `Array.isArray` is matched syntactically for now until predicate
+       * support is complete.
+       */
+      for (var i = 0; i < newChildren.length; i++) {
+        var nextExisting = existing && existing.sibling;
+        if (prev == null) {
+          prev = createFirstChild(
+            returnFiber,
+            existing,
+            newChildren[i],
+            priority,
+          );
+          first = prev;
+        } else {
+          prev = createSubsequentChild(
+            returnFiber,
+            existing,
+            prev,
+            newChildren[i],
+            priority,
+          );
+        }
+        if (prev && existing) {
+          // TODO: This is not correct because there could've been more
+          // than one sibling consumed but I don't want to return a tuple.
+          existing = nextExisting;
+        }
+      }
+      return first;
+    } else {
+      // TODO: Throw for unknown children.
+      return null;
+    }
+  }
+
+  // TODO: This API won't work because we'll need to transfer the side-effects of
+  // unmounting children to the returnFiber.
+  function reconcileChildFibers(
+    returnFiber: Fiber,
+    currentFirstChild: ?Fiber,
+    newChildren: ReactNodeList,
+    priority: PriorityLevel,
+  ): ?Fiber {
+    return createFirstChild(
+      returnFiber,
+      currentFirstChild,
+      newChildren,
+      priority,
+    );
+  }
+
+  return reconcileChildFibers;
+}
+
+exports.reconcileChildFibers = ChildReconciler(true);
+
+exports.reconcileChildFibersInPlace = ChildReconciler(false);
+
+function cloneSiblings(
+  current: Fiber,
+  workInProgress: Fiber,
+  returnFiber: Fiber,
+) {
+  workInProgress.return = returnFiber;
+  while (current.sibling) {
+    current = current.sibling;
+    workInProgress = workInProgress.sibling = cloneFiber(
+      current,
+      current.pendingWorkPriority,
+    );
+    workInProgress.return = returnFiber;
+  }
+  workInProgress.sibling = null;
+}
+
+exports.cloneChildFibers = function(current: ?Fiber, workInProgress: Fiber) {
+  if (!workInProgress.child) {
+    return;
+  }
+  if (current && workInProgress.child === current.child) {
+    // We use workInProgress.child since that lets Flow know that it can't be
+    // null since we validated that already. However, as the line above suggests
+    // they're actually the same thing.
+    const currentChild = workInProgress.child;
+    // TODO: This used to reset the pending priority. Not sure if that is needed.
+    // workInProgress.pendingWorkPriority = current.pendingWorkPriority;
+    // TODO: The below priority used to be set to NoWork which would've
+    // dropped work. This is currently unobservable but will become
+    // observable when the first sibling has lower priority work remaining
+    // than the next sibling. At that point we should add tests that catches
+    // this.
+    const newChild = cloneFiber(currentChild, currentChild.pendingWorkPriority);
+    workInProgress.child = newChild;
+    cloneSiblings(currentChild, newChild, workInProgress);
+  }
+
+  // If there is no alternate, then we don't need to clone the children.
+  // If the children of the alternate fiber is a different set, then we don't
+  // need to clone. We need to reset the return fiber though since we'll
+  // traverse down into them.
+  let child = workInProgress.child;
+  while (child) {
+    child.return = workInProgress;
+    child = child.sibling;
+  }
+};
diff --git a/src/renderers/shared/fiber/ReactFiber.js b/src/renderers/shared/fiber/ReactFiber.js
new file mode 100644
index 000000000..6bd8c0e9a
--- /dev/null
+++ b/src/renderers/shared/fiber/ReactFiber.js
@@ -0,0 +1,285 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactFiber
+ * @flow
+ */
+
+'use strict';
+
+import type {ReactCoroutine, ReactYield} from 'ReactCoroutine';
+import type {TypeOfWork} from 'ReactTypeOfWork';
+import type {PriorityLevel} from 'ReactPriorityLevel';
+import type {UpdateQueue} from 'ReactFiberUpdateQueue';
+
+var ReactTypeOfWork = require('ReactTypeOfWork');
+var {
+  IndeterminateComponent,
+  ClassComponent,
+  HostContainer,
+  HostComponent,
+  CoroutineComponent,
+  YieldComponent,
+} = ReactTypeOfWork;
+
+var {NoWork} = require('ReactPriorityLevel');
+
+// An Instance is shared between all versions of a component. We can easily
+// break this out into a separate object to avoid copying so much to the
+// alternate versions of the tree. We put this on a single object for now to
+// minimize the number of objects created during the initial render.
+type Instance = {
+  // Tag identifying the type of fiber.
+  tag: TypeOfWork,
+
+  // Unique identifier of this child.
+  key: null | string,
+
+  // The function/class/module associated with this fiber.
+  type: any,
+
+  // The local state associated with this fiber.
+  stateNode: any,
+
+  // Conceptual aliases
+  // parent : Instance -> return The parent happens to be the same as the
+  // return fiber since we've merged the fiber and instance.
+};
+
+// A Fiber is work on a Component that needs to be done or was done. There can
+// be more than one per component.
+export type Fiber = Instance & {
+  // The Fiber to return to after finishing processing this one.
+  // This is effectively the parent, but there can be multiple parents (two)
+  // so this is only the parent of the thing we're currently processing.
+  // It is conceptually the same as the return address of a stack frame.
+  return: ?Fiber,
+
+  // Singly Linked List Tree Structure.
+  child: ?Fiber,
+  sibling: ?Fiber,
+
+  // The ref last used to attach this node.
+  // I'll avoid adding an owner field for prod and model that as functions.
+  ref: null | ((handle: ?Object) => void),
+
+  // Input is the data coming into process this fiber. Arguments. Props.
+  pendingProps: any, // This type will be more specific once we overload the tag.
+  // TODO: I think that there is a way to merge pendingProps and memoizedProps.
+  memoizedProps: any, // The props used to create the output.
+  // A queue of local state updates.
+  updateQueue: ?UpdateQueue,
+  // The state used to create the output. This is a full state object.
+  memoizedState: any,
+  // Linked list of callbacks to call after updates are committed.
+  callbackList: ?UpdateQueue,
+  // Output is the return value of this fiber, or a linked list of return values
+  // if this returns multiple values. Such as a fragment.
+  output: any, // This type will be more specific once we overload the tag.
+
+  // Singly linked list fast path to the next fiber with side-effects.
+  nextEffect: ?Fiber,
+
+  // The first and last fiber with side-effect within this subtree. This allows
+  // us to reuse a slice of the linked list when we reuse the work done within
+  // this fiber.
+  firstEffect: ?Fiber,
+  lastEffect: ?Fiber,
+
+  // This will be used to quickly determine if a subtree has no pending changes.
+  pendingWorkPriority: PriorityLevel,
+
+  // This value represents the priority level that was last used to process this
+  // component. This indicates whether it is better to continue from the
+  // progressed work or if it is better to continue from the current state.
+  progressedPriority: PriorityLevel,
+
+  // If work bails out on a Fiber that already had some work started at a lower
+  // priority, then we need to store the progressed work somewhere. This holds
+  // the started child set until we need to get back to working on it. It may
+  // or may not be the same as the "current" child.
+  progressedChild: ?Fiber,
+
+  // This is a pooled version of a Fiber. Every fiber that gets updated will
+  // eventually have a pair. There are cases when we can clean up pairs to save
+  // memory if we need to.
+  alternate: ?Fiber,
+
+  // Conceptual aliases
+  // workInProgress : Fiber ->  alternate The alternate used for reuse happens
+  // to be the same as work in progress.
+};
+
+// This is a constructor of a POJO instead of a constructor function for a few
+// reasons:
+// 1) Nobody should add any instance methods on this. Instance methods can be
+//    more difficult to predict when they get optimized and they are almost
+//    never inlined properly in static compilers.
+// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
+//    always know when it is a fiber.
+// 3) We can easily go from a createFiber call to calling a constructor if that
+//    is faster. The opposite is not true.
+// 4) We might want to experiment with using numeric keys since they are easier
+//    to optimize in a non-JIT environment.
+// 5) It should be easy to port this to a C struct and keep a C implementation
+//    compatible.
+var createFiber = function(tag: TypeOfWork, key: null | string): Fiber {
+  return {
+    // Instance
+
+    tag: tag,
+
+    key: key,
+
+    type: null,
+
+    stateNode: null,
+
+    // Fiber
+
+    return: null,
+
+    child: null,
+    sibling: null,
+
+    ref: null,
+
+    pendingProps: null,
+    memoizedProps: null,
+    updateQueue: null,
+    memoizedState: null,
+    callbackList: null,
+    output: null,
+
+    nextEffect: null,
+    firstEffect: null,
+    lastEffect: null,
+
+    pendingWorkPriority: NoWork,
+    progressedPriority: NoWork,
+    progressedChild: null,
+
+    alternate: null,
+  };
+};
+
+function shouldConstruct(Component) {
+  return !!(Component.prototype && Component.prototype.isReactComponent);
+}
+
+// This is used to create an alternate fiber to do work on.
+// TODO: Rename to createWorkInProgressFiber or something like that.
+exports.cloneFiber = function(
+  fiber: Fiber,
+  priorityLevel: PriorityLevel,
+): Fiber {
+  // We clone to get a work in progress. That means that this fiber is the
+  // current. To make it safe to reuse that fiber later on as work in progress
+  // we need to reset its work in progress flag now. We don't have an
+  // opportunity to do this earlier since we don't traverse the tree when
+  // the work in progress tree becomes the current tree.
+  // fiber.progressedPriority = NoWork;
+  // fiber.progressedChild = null;
+
+  // We use a double buffering pooling technique because we know that we'll only
+  // ever need at most two versions of a tree. We pool the "other" unused node
+  // that we're free to reuse. This is lazily created to avoid allocating extra
+  // objects for things that are never updated. It also allow us to reclaim the
+  // extra memory if needed.
+  let alt = fiber.alternate;
+  if (alt) {
+    // Whenever we clone, we do so to get a new work in progress.
+    // This ensures that we've reset these in the new tree.
+    alt.nextEffect = null;
+    alt.firstEffect = null;
+    alt.lastEffect = null;
+  } else {
+    // This should not have an alternate already
+    alt = createFiber(fiber.tag, fiber.key);
+    alt.type = fiber.type;
+
+    alt.progressedChild = fiber.progressedChild;
+    alt.progressedPriority = fiber.progressedPriority;
+
+    alt.alternate = fiber;
+    fiber.alternate = alt;
+  }
+
+  alt.stateNode = fiber.stateNode;
+  alt.child = fiber.child;
+  alt.sibling = fiber.sibling; // This should always be overridden. TODO: null
+  alt.ref = fiber.ref;
+  // pendingProps is here for symmetry but is unnecessary in practice for now.
+  // TODO: Pass in the new pendingProps as an argument maybe?
+  alt.pendingProps = fiber.pendingProps;
+  alt.updateQueue = fiber.updateQueue;
+  alt.callbackList = fiber.callbackList;
+  alt.pendingWorkPriority = priorityLevel;
+
+  alt.memoizedProps = fiber.memoizedProps;
+  alt.output = fiber.output;
+
+  return alt;
+};
+
+exports.createHostContainerFiber = function() {
+  const fiber = createFiber(HostContainer, null);
+  return fiber;
+};
+
+exports.createFiberFromElement = function(
+  element: ReactElement<*>,
+  priorityLevel: PriorityLevel,
+) {
+  // $FlowFixMe: ReactElement.key is currently defined as ?string but should be defined as null | string in Flow.
+  const fiber = createFiberFromElementType(element.type, element.key);
+  fiber.pendingProps = element.props;
+  fiber.pendingWorkPriority = priorityLevel;
+  return fiber;
+};
+
+function createFiberFromElementType(type: mixed, key: null | string) {
+  let fiber;
+  if (typeof type === 'function') {
+    fiber = shouldConstruct(type)
+      ? createFiber(ClassComponent, key)
+      : createFiber(IndeterminateComponent, key);
+    fiber.type = type;
+  } else if (typeof type === 'string') {
+    fiber = createFiber(HostComponent, key);
+    fiber.type = type;
+  } else if (typeof type === 'object' && type !== null) {
+    // Currently assumed to be a continuation and therefore is a fiber already.
+    fiber = ((type: any): Fiber);
+  } else {
+    throw new Error('Unknown component type: ' + typeof type);
+  }
+  return fiber;
+}
+
+exports.createFiberFromElementType = createFiberFromElementType;
+
+exports.createFiberFromCoroutine = function(
+  coroutine: ReactCoroutine,
+  priorityLevel: PriorityLevel,
+) {
+  const fiber = createFiber(CoroutineComponent, coroutine.key);
+  fiber.type = coroutine.handler;
+  fiber.pendingProps = coroutine;
+  fiber.pendingWorkPriority = priorityLevel;
+  return fiber;
+};
+
+exports.createFiberFromYield = function(
+  yieldNode: ReactYield,
+  priorityLevel: PriorityLevel,
+) {
+  const fiber = createFiber(YieldComponent, yieldNode.key);
+  fiber.pendingProps = {};
+  return fiber;
+};
diff --git a/src/renderers/shared/fiber/ReactFiberBeginWork.js b/src/renderers/shared/fiber/ReactFiberBeginWork.js
new file mode 100644
index 000000000..107c3fce7
--- /dev/null
+++ b/src/renderers/shared/fiber/ReactFiberBeginWork.js
@@ -0,0 +1,466 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactFiberBeginWork
+ * @flow
+ */
+
+'use strict';
+
+import type {ReactCoroutine} from 'ReactCoroutine';
+import type {Fiber} from 'ReactFiber';
+import type {FiberRoot} from 'ReactFiberRoot';
+import type {HostConfig} from 'ReactFiberReconciler';
+import type {Scheduler} from 'ReactFiberScheduler';
+import type {PriorityLevel} from 'ReactPriorityLevel';
+import type {UpdateQueue} from 'ReactFiberUpdateQueue';
+
+var {
+  reconcileChildFibers,
+  reconcileChildFibersInPlace,
+  cloneChildFibers,
+} = require('ReactChildFiber');
+var {LowPriority} = require('ReactPriorityLevel');
+var ReactTypeOfWork = require('ReactTypeOfWork');
+var {
+  IndeterminateComponent,
+  FunctionalComponent,
+  ClassComponent,
+  HostContainer,
+  HostComponent,
+  CoroutineComponent,
+  CoroutineHandlerPhase,
+  YieldComponent,
+} = ReactTypeOfWork;
+var {NoWork, OffscreenPriority} = require('ReactPriorityLevel');
+var {
+  createUpdateQueue,
+  addToQueue,
+  addCallbackToQueue,
+  mergeUpdateQueue,
+} = require('ReactFiberUpdateQueue');
+var ReactInstanceMap = require('ReactInstanceMap');
+
+module.exports = function<T, P, I, C>(
+  config: HostConfig<T, P, I, C>,
+  getScheduler: () => Scheduler,
+) {
+  function markChildAsProgressed(current, workInProgress, priorityLevel) {
+    // We now have clones. Let's store them as the currently progressed work.
+    workInProgress.progressedChild = workInProgress.child;
+    workInProgress.progressedPriority = priorityLevel;
+    if (current) {
+      // We also store it on the current. When the alternate swaps in we can
+      // continue from this point.
+      current.progressedChild = workInProgress.progressedChild;
+      current.progressedPriority = workInProgress.progressedPriority;
+    }
+  }
+
+  function reconcileChildren(current, workInProgress, nextChildren) {
+    const priorityLevel = workInProgress.pendingWorkPriority;
+    reconcileChildrenAtPriority(
+      current,
+      workInProgress,
+      nextChildren,
+      priorityLevel,
+    );
+  }
+
+  function reconcileChildrenAtPriority(
+    current,
+    workInProgress,
+    nextChildren,
+    priorityLevel,
+  ) {
+    // At this point any memoization is no longer valid since we'll have changed
+    // the children.
+    workInProgress.memoizedProps = null;
+    if (current && current.child === workInProgress.child) {
+      // If the current child is the same as the work in progress, it means that
+      // we haven't yet started any work on these children. Therefore, we use
+      // the clone algorithm to create a copy of all the current children.
+      workInProgress.child = reconcileChildFibers(
+        workInProgress,
+        workInProgress.child,
+        nextChildren,
+        priorityLevel,
+      );
+    } else {
+      // If, on the other hand, we don't have a current fiber or if it is
+      // already using a clone, that means we've already begun some work on this
+      // tree and we can continue where we left off by reconciling against the
+      // existing children.
+      workInProgress.child = reconcileChildFibersInPlace(
+        workInProgress,
+        workInProgress.child,
+        nextChildren,
+        priorityLevel,
+      );
+    }
+    markChildAsProgressed(current, workInProgress, priorityLevel);
+  }
+
+  function updateFunctionalComponent(current, workInProgress) {
+    var fn = workInProgress.type;
+    var props = workInProgress.pendingProps;
+
+    // TODO: Disable this before release, since it is not part of the public API
+    // I use this for testing to compare the relative overhead of classes.
+    if (typeof fn.shouldComponentUpdate === 'function') {
+      if (workInProgress.memoizedProps !== null) {
+        if (!fn.shouldComponentUpdate(workInProgress.memoizedProps, props)) {
+          return bailoutOnAlreadyFinishedWork(current, workInProgress);
+        }
+      }
+    }
+
+    var nextChildren = fn(props);
+    reconcileChildren(current, workInProgress, nextChildren);
+    return workInProgress.child;
+  }
+
+  function scheduleUpdate(
+    fiber: Fiber,
+    updateQueue: UpdateQueue,
+    priorityLevel: PriorityLevel,
+  ): void {
+    const {scheduleDeferredWork} = getScheduler();
+    fiber.updateQueue = updateQueue;
+    // Schedule update on the alternate as well, since we don't know which tree
+    // is current.
+    if (fiber.alternate) {
+      fiber.alternate.updateQueue = updateQueue;
+    }
+    while (true) {
+      if (
+        fiber.pendingWorkPriority === NoWork ||
+        fiber.pendingWorkPriority >= priorityLevel
+      ) {
+        fiber.pendingWorkPriority = priorityLevel;
+      }
+      if (fiber.alternate) {
+        if (
+          fiber.alternate.pendingWorkPriority === NoWork ||
+          fiber.alternate.pendingWorkPriority >= priorityLevel
+        ) {
+          fiber.alternate.pendingWorkPriority = priorityLevel;
+        }
+      }
+      // Duck type root
+      if (fiber.stateNode && fiber.stateNode.containerInfo) {
+        const root: FiberRoot = (fiber.stateNode: any);
+        scheduleDeferredWork(root, priorityLevel);
+        return;
+      }
+      if (!fiber.return) {
+        throw new Error('No root!');
+      }
+      fiber = fiber.return;
+    }
+  }
+
+  // Class component state updater
+  const updater = {
+    enqueueSetState(instance, partialState) {
+      const fiber = ReactInstanceMap.get(instance);
+      const updateQueue = fiber.updateQueue
+        ? addToQueue(fiber.updateQueue, partialState)
+        : createUpdateQueue(partialState);
+      scheduleUpdate(fiber, updateQueue, LowPriority);
+    },
+    enqueueReplaceState(instance, state) {
+      const fiber = ReactInstanceMap.get(instance);
+      const updateQueue = createUpdateQueue(state);
+      updateQueue.isReplace = true;
+      scheduleUpdate(fiber, updateQueue, LowPriority);
+    },
+    enqueueForceUpdate(instance) {
+      const fiber = ReactInstanceMap.get(instance);
+      const updateQueue = fiber.updateQueue || createUpdateQueue(null);
+      updateQueue.isForced = true;
+      scheduleUpdate(fiber, updateQueue, LowPriority);
+    },
+    enqueueCallback(instance, callback) {
+      const fiber = ReactInstanceMap.get(instance);
+      let updateQueue = fiber.updateQueue
+        ? fiber.updateQueue
+        : createUpdateQueue(null);
+      addCallbackToQueue(updateQueue, callback);
+      fiber.updateQueue = updateQueue;
+      if (fiber.alternate) {
+        fiber.alternate.updateQueue = updateQueue;
+      }
+    },
+  };
+
+  function updateClassComponent(current: ?Fiber, workInProgress: Fiber) {
+    // A class component update is the result of either new props or new state.
+    // Account for the possibly of missing pending props by falling back to the
+    // memoized props.
+    var props = workInProgress.pendingProps;
+    if (!props && current) {
+      props = current.memoizedProps;
+    }
+    // Compute the state using the memoized state and the update queue.
+    var updateQueue = workInProgress.updateQueue;
+    var previousState = current ? current.memoizedState : null;
+    var state = updateQueue
+      ? mergeUpdateQueue(updateQueue, previousState, props)
+      : previousState;
+
+    var instance = workInProgress.stateNode;
+    if (!instance) {
+      var ctor = workInProgress.type;
+      workInProgress.stateNode = instance = new ctor(props);
+      state = instance.state || null;
+      // The initial state must be added to the update queue in case
+      // setState is called before the initial render.
+      if (state !== null) {
+        workInProgress.updateQueue = createUpdateQueue(state);
+      }
+      // The instance needs access to the fiber so that it can schedule updates
+      ReactInstanceMap.set(instance, workInProgress);
+      instance.updater = updater;
+    } else if (
+      typeof instance.shouldComponentUpdate === 'function' &&
+      !(updateQueue && updateQueue.isForced)
+    ) {
+      if (workInProgress.memoizedProps !== null) {
+        // Reset the props, in case this is a ping-pong case rather than a
+        // completed update case. For the completed update case, the instance
+        // props will already be the memoizedProps.
+        instance.props = workInProgress.memoizedProps;
+        instance.state = workInProgress.memoizedState;
+        if (!instance.shouldComponentUpdate(props, state)) {
+          return bailoutOnAlreadyFinishedWork(current, workInProgress);
+        }
+      }
+    }
+
+    instance.props = props;
+    instance.state = state;
+    var nextChildren = instance.render();
+    reconcileChildren(current, workInProgress, nextChildren);
+
+    return workInProgress.child;
+  }
+
+  function updateHostComponent(current, workInProgress) {
+    const nextChildren = workInProgress.pendingProps.children;
+    if (
+      workInProgress.pendingProps.hidden &&
+      workInProgress.pendingWorkPriority !== OffscreenPriority
+    ) {
+      // If this host component is hidden, we can bail out on the children.
+      // We'll rerender the children later at the lower priority.
+
+      // It is unfortunate that we have to do the reconciliation of these
+      // children already since that will add them to the tree even though
+      // they are not actually done yet. If this is a large set it is also
+      // confusing that this takes time to do right now instead of later.
+
+      if (workInProgress.progressedPriority === OffscreenPriority) {
+        // If we already made some progress on the offscreen priority before,
+        // then we should continue from where we left off.
+        workInProgress.child = workInProgress.progressedChild;
+      }
+
+      // Reconcile the children and stash them for later work.
+      reconcileChildrenAtPriority(
+        current,
+        workInProgress,
+        nextChildren,
+        OffscreenPriority,
+      );
+      workInProgress.child = current ? current.child : null;
+      // Abort and don't process children yet.
+      return null;
+    } else {
+      reconcileChildren(current, workInProgress, nextChildren);
+      return workInProgress.child;
+    }
+  }
+
+  function mountIndeterminateComponent(current, workInProgress) {
+    var fn = workInProgress.type;
+    var props = workInProgress.pendingProps;
+    var value = fn(props);
+    if (
+      typeof value === 'object' &&
+      value &&
+      typeof value.render === 'function'
+    ) {
+      // Proceed under the assumption that this is a class instance
+      workInProgress.tag = ClassComponent;
+      if (current) {
+        current.tag = ClassComponent;
+      }
+      value = value.render();
+    } else {
+      // Proceed under the assumption that this is a functional component
+      workInProgress.tag = FunctionalComponent;
+      if (current) {
+        current.tag = FunctionalComponent;
+      }
+    }
+    reconcileChildren(current, workInProgress, value);
+    return workInProgress.child;
+  }
+
+  function updateCoroutineComponent(current, workInProgress) {
+    var coroutine = (workInProgress.pendingProps: ?ReactCoroutine);
+    if (!coroutine) {
+      throw new Error('Should be resolved by now');
+    }
+    reconcileChildren(current, workInProgress, coroutine.children);
+  }
+
+  /*
+  function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {
+    let child = firstChild;
+    do {
+      // Ensure that the first and last effect of the parent corresponds
+      // to the children's first and last effect.
+      if (!returnFiber.firstEffect) {
+        returnFiber.firstEffect = child.firstEffect;
+      }
+      if (child.lastEffect) {
+        if (returnFiber.lastEffect) {
+          returnFiber.lastEffect.nextEffect = child.firstEffect;
+        }
+        returnFiber.lastEffect = child.lastEffect;
+      }
+    } while (child = child.sibling);
+  }
+  */
+
+  function bailoutOnAlreadyFinishedWork(
+    current,
+    workInProgress: Fiber,
+  ): ?Fiber {
+    const priorityLevel = workInProgress.pendingWorkPriority;
+
+    // TODO: We should ideally be able to bail out early if the children have no
+    // more work to do. However, since we don't have a separation of this
+    // Fiber's priority and its children yet - we don't know without doing lots
+    // of the same work we do anyway. Once we have that separation we can just
+    // bail out here if the children has no more work at this priority level.
+    // if (workInProgress.priorityOfChildren <= priorityLevel) {
+    //   // If there are side-effects in these children that have not yet been
+    //   // committed we need to ensure that they get properly transferred up.
+    //   if (current && current.child !== workInProgress.child) {
+    //     reuseChildrenEffects(workInProgress, child);
+    //   }
+    //   return null;
+    // }
+
+    cloneChildFibers(current, workInProgress);
+    markChildAsProgressed(current, workInProgress, priorityLevel);
+    return workInProgress.child;
+  }
+
+  function bailoutOnLowPriority(current, workInProgress) {
+    if (current) {
+      workInProgress.child = current.child;
+      workInProgress.memoizedProps = current.memoizedProps;
+      workInProgress.output = current.output;
+    }
+    return null;
+  }
+
+  function beginWork(
+    current: ?Fiber,
+    workInProgress: Fiber,
+    priorityLevel: PriorityLevel,
+  ): ?Fiber {
+    if (
+      workInProgress.pendingWorkPriority === NoWork ||
+      workInProgress.pendingWorkPriority > priorityLevel
+    ) {
+      return bailoutOnLowPriority(current, workInProgress);
+    }
+
+    if (workInProgress.progressedPriority === priorityLevel) {
+      // If we have progressed work on this priority level already, we can
+      // proceed this that as the child.
+      workInProgress.child = workInProgress.progressedChild;
+    }
+
+    if (
+      (workInProgress.pendingProps === null ||
+        (workInProgress.memoizedProps !== null &&
+          workInProgress.pendingProps === workInProgress.memoizedProps)) &&
+      workInProgress.updateQueue === null
+    ) {
+      return bailoutOnAlreadyFinishedWork(current, workInProgress);
+    }
+
+    switch (workInProgress.tag) {
+      case IndeterminateComponent:
+        return mountIndeterminateComponent(current, workInProgress);
+      case FunctionalComponent:
+        return updateFunctionalComponent(current, workInProgress);
+      case ClassComponent:
+        return updateClassComponent(current, workInProgress);
+      case HostContainer:
+        reconcileChildren(current, workInProgress, workInProgress.pendingProps);
+        // A yield component is just a placeholder, we can just run through the
+        // next one immediately.
+        if (workInProgress.child) {
+          return beginWork(
+            workInProgress.child.alternate,
+            workInProgress.child,
+            priorityLevel,
+          );
+        }
+        return null;
+      case HostComponent:
+        if (
+          workInProgress.stateNode &&
+          typeof config.beginUpdate === 'function'
+        ) {
+          config.beginUpdate(workInProgress.stateNode);
+        }
+        return updateHostComponent(current, workInProgress);
+      case CoroutineHandlerPhase:
+        // This is a restart. Reset the tag to the initial phase.
+        workInProgress.tag = CoroutineComponent;
+      // Intentionally fall through since this is now the same.
+      case CoroutineComponent:
+        updateCoroutineComponent(current, workInProgress);
+        // This doesn't take arbitrary time so we could synchronously just begin
+        // eagerly do the work of workInProgress.child as an optimization.
+        if (workInProgress.child) {
+          return beginWork(
+            workInProgress.child.alternate,
+            workInProgress.child,
+            priorityLevel,
+          );
+        }
+        return workInProgress.child;
+      case YieldComponent:
+        // A yield component is just a placeholder, we can just run through the
+        // next one immediately.
+        if (workInProgress.sibling) {
+          return beginWork(
+            workInProgress.sibling.alternate,
+            workInProgress.sibling,
+            priorityLevel,
+          );
+        }
+        return null;
+      default:
+        throw new Error('Unknown unit of work tag');
+    }
+  }
+
+  return {
+    beginWork,
+  };
+};
diff --git a/src/renderers/shared/fiber/ReactFiberCommitWork.js b/src/renderers/shared/fiber/ReactFiberCommitWork.js
new file mode 100644
index 000000000..f1de612a4
--- /dev/null
+++ b/src/renderers/shared/fiber/ReactFiberCommitWork.js
@@ -0,0 +1,76 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactFiberCommitWork
+ * @flow
+ */
+
+'use strict';
+
+import type {Fiber} from 'ReactFiber';
+import type {FiberRoot} from 'ReactFiberRoot';
+import type {HostConfig} from 'ReactFiberReconciler';
+
+var ReactTypeOfWork = require('ReactTypeOfWork');
+var {ClassComponent, HostContainer, HostComponent} = ReactTypeOfWork;
+var {callCallbacks} = require('ReactFiberUpdateQueue');
+
+module.exports = function<T, P, I, C>(config: HostConfig<T, P, I, C>) {
+  const updateContainer = config.updateContainer;
+  const commitUpdate = config.commitUpdate;
+
+  function commitWork(current: ?Fiber, finishedWork: Fiber): void {
+    switch (finishedWork.tag) {
+      case ClassComponent: {
+        // Clear updates from current fiber. This must go before the callbacks
+        // are reset, in case an update is triggered from inside a callback. Is
+        // this safe? Relies on the assumption that work is only committed if
+        // the update queue is empty.
+        if (finishedWork.alternate) {
+          finishedWork.alternate.updateQueue = null;
+        }
+        if (finishedWork.callbackList) {
+          const {callbackList} = finishedWork;
+          finishedWork.callbackList = null;
+          callCallbacks(callbackList, finishedWork.stateNode);
+        }
+        // TODO: Fire componentDidMount/componentDidUpdate, update refs
+        return;
+      }
+      case HostContainer: {
+        // TODO: Attach children to root container.
+        const children = finishedWork.output;
+        const root: FiberRoot = finishedWork.stateNode;
+        const containerInfo: C = root.containerInfo;
+        updateContainer(containerInfo, children);
+        return;
+      }
+      case HostComponent: {
+        if (finishedWork.stateNode == null || !current) {
+          throw new Error('This should only be done during updates.');
+        }
+        // Commit the work prepared earlier.
+        const child = finishedWork.child;
+        const children = child && !child.sibling
+          ? (child.output: ?Fiber | I)
+          : child;
+        const newProps = finishedWork.memoizedProps;
+        const oldProps = current.memoizedProps;
+        const instance: I = finishedWork.stateNode;
+        commitUpdate(instance, oldProps, newProps, children);
+        return;
+      }
+      default:
+        throw new Error('This unit of work tag should not have side-effects.');
+    }
+  }
+
+  return {
+    commitWork,
+  };
+};
diff --git a/src/renderers/shared/fiber/ReactFiberCompleteWork.js b/src/renderers/shared/fiber/ReactFiberCompleteWork.js
new file mode 100644
index 000000000..572736e79
--- /dev/null
+++ b/src/renderers/shared/fiber/ReactFiberCompleteWork.js
@@ -0,0 +1,221 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactFiberCompleteWork
+ * @flow
+ */
+
+'use strict';
+
+import type {ReactCoroutine} from 'ReactCoroutine';
+import type {Fiber} from 'ReactFiber';
+import type {HostConfig} from 'ReactFiberReconciler';
+import type {ReifiedYield} from 'ReactReifiedYield';
+
+var {reconcileChildFibers} = require('ReactChildFiber');
+var ReactTypeOfWork = require('ReactTypeOfWork');
+var {
+  IndeterminateComponent,
+  FunctionalComponent,
+  ClassComponent,
+  HostContainer,
+  HostComponent,
+  CoroutineComponent,
+  CoroutineHandlerPhase,
+  YieldComponent,
+} = ReactTypeOfWork;
+
+module.exports = function<T, P, I, C>(config: HostConfig<T, P, I, C>) {
+  const createInstance = config.createInstance;
+  const prepareUpdate = config.prepareUpdate;
+
+  function markForPreEffect(workInProgress: Fiber) {
+    // Schedule a side-effect on this fiber, BEFORE the children's side-effects.
+    if (workInProgress.firstEffect) {
+      workInProgress.nextEffect = workInProgress.firstEffect;
+      workInProgress.firstEffect = workInProgress;
+    } else {
+      workInProgress.firstEffect = workInProgress;
+      workInProgress.lastEffect = workInProgress;
+    }
+  }
+
+  // TODO: It's possible this will create layout thrash issues because mutations
+  // of the DOM and life-cycles are interleaved. E.g. if a componentDidMount
+  // of a sibling reads, then the next sibling updates and reads etc.
+  function markForPostEffect(workInProgress: Fiber) {
+    // Schedule a side-effect on this fiber, AFTER the children's side-effects.
+    if (workInProgress.lastEffect) {
+      workInProgress.lastEffect.nextEffect = workInProgress;
+    } else {
+      workInProgress.firstEffect = workInProgress;
+    }
+    workInProgress.lastEffect = workInProgress;
+  }
+
+  function transferOutput(child: ?Fiber, returnFiber: Fiber) {
+    // If we have a single result, we just pass that through as the output to
+    // avoid unnecessary traversal. When we have multiple output, we just pass
+    // the linked list of fibers that has the individual output values.
+    returnFiber.output = child && !child.sibling ? child.output : child;
+    returnFiber.memoizedProps = returnFiber.pendingProps;
+  }
+
+  function recursivelyFillYields(yields, output: ?Fiber | ?ReifiedYield) {
+    if (!output) {
+      // Ignore nulls etc.
+    } else if (output.tag !== undefined) {
+      // TODO: Fix this fragile duck test.
+      // Detect if this is a fiber, if so it is a fragment result.
+      // $FlowFixMe: Refinement issue.
+      var item = (output: Fiber);
+      do {
+        recursivelyFillYields(yields, item.output);
+        item = item.sibling;
+      } while (item);
+    } else {
+      // $FlowFixMe: Refinement issue. If it is not a Fiber or null, it is a yield
+      yields.push(output);
+    }
+  }
+
+  function moveCoroutineToHandlerPhase(current: ?Fiber, workInProgress: Fiber) {
+    var coroutine = (workInProgress.pendingProps: ?ReactCoroutine);
+    if (!coroutine) {
+      throw new Error('Should be resolved by now');
+    }
+
+    // First step of the coroutine has completed. Now we need to do the second.
+    // TODO: It would be nice to have a multi stage coroutine represented by a
+    // single component, or at least tail call optimize nested ones. Currently
+    // that requires additional fields that we don't want to add to the fiber.
+    // So this requires nested handlers.
+    // Note: This doesn't mutate the alternate node. I don't think it needs to
+    // since this stage is reset for every pass.
+    workInProgress.tag = CoroutineHandlerPhase;
+
+    // Build up the yields.
+    // TODO: Compare this to a generator or opaque helpers like Children.
+    var yields: Array<ReifiedYield> = [];
+    var child = workInProgress.child;
+    while (child) {
+      recursivelyFillYields(yields, child.output);
+      child = child.sibling;
+    }
+    var fn = coroutine.handler;
+    var props = coroutine.props;
+    var nextChildren = fn(props, yields);
+
+    var currentFirstChild = current ? current.stateNode : null;
+    // Inherit the priority of the returnFiber.
+    const priority = workInProgress.pendingWorkPriority;
+    workInProgress.stateNode = reconcileChildFibers(
+      workInProgress,
+      currentFirstChild,
+      nextChildren,
+      priority,
+    );
+    return workInProgress.stateNode;
+  }
+
+  function completeWork(current: ?Fiber, workInProgress: Fiber): ?Fiber {
+    switch (workInProgress.tag) {
+      case FunctionalComponent:
+        transferOutput(workInProgress.child, workInProgress);
+        return null;
+      case ClassComponent:
+        transferOutput(workInProgress.child, workInProgress);
+        // Don't use the state queue to compute the memoized state. We already
+        // merged it and assigned it to the instance. Transfer it from there.
+        // Also need to transfer the props, because pendingProps will be null
+        // in the case of an update
+        const {state, props} = workInProgress.stateNode;
+        workInProgress.memoizedState = state;
+        workInProgress.memoizedProps = props;
+        // Transfer update queue to callbackList field so callbacks can be
+        // called during commit phase.
+        workInProgress.callbackList = workInProgress.updateQueue;
+        markForPostEffect(workInProgress);
+        return null;
+      case HostContainer:
+        transferOutput(workInProgress.child, workInProgress);
+        // We don't know if a container has updated any children so we always
+        // need to update it right now. We schedule this side-effect before
+        // all the other side-effects in the subtree. We need to schedule it
+        // before so that the entire tree is up-to-date before the life-cycles
+        // are invoked.
+        markForPreEffect(workInProgress);
+        return null;
+      case HostComponent:
+        let newProps = workInProgress.pendingProps;
+        const child = workInProgress.child;
+        const children = child && !child.sibling
+          ? (child.output: ?Fiber | I)
+          : child;
+        if (current && workInProgress.stateNode != null) {
+          // If we have an alternate, that means this is an update and we need to
+          // schedule a side-effect to do the updates.
+          const oldProps = current.memoizedProps;
+          // If we get updated because one of our children updated, we don't
+          // have newProps so we'll have to reuse them.
+          // TODO: Split the update API as separate for the props vs. children.
+          // Even better would be if children weren't special cased at all tho.
+          if (!newProps) {
+            newProps = oldProps;
+          }
+          const instance: I = workInProgress.stateNode;
+          if (prepareUpdate(instance, oldProps, newProps, children)) {
+            // This returns true if there was something to update.
+            markForPreEffect(workInProgress);
+          }
+          // TODO: Is this actually ever going to change? Why set it every time?
+          workInProgress.output = instance;
+        } else {
+          if (!newProps) {
+            if (workInProgress.stateNode === null) {
+              throw new Error('We must have new props for new mounts.');
+            } else {
+              // This can happen when we abort work.
+              return null;
+            }
+          }
+          const instance = createInstance(
+            workInProgress.type,
+            newProps,
+            children,
+          );
+          // TODO: This seems like unnecessary duplication.
+          workInProgress.stateNode = instance;
+          workInProgress.output = instance;
+        }
+        workInProgress.memoizedProps = newProps;
+        return null;
+      case CoroutineComponent:
+        return moveCoroutineToHandlerPhase(current, workInProgress);
+      case CoroutineHandlerPhase:
+        transferOutput(workInProgress.stateNode, workInProgress);
+        // Reset the tag to now be a first phase coroutine.
+        workInProgress.tag = CoroutineComponent;
+        return null;
+      case YieldComponent:
+        // Does nothing.
+        return null;
+      // Error cases
+      case IndeterminateComponent:
+        throw new Error(
+          'An indeterminate component should have become determinate before completing.',
+        );
+      default:
+        throw new Error('Unknown unit of work tag');
+    }
+  }
+
+  return {
+    completeWork,
+  };
+};
diff --git a/src/renderers/shared/fiber/ReactFiberReconciler.js b/src/renderers/shared/fiber/ReactFiberReconciler.js
new file mode 100644
index 000000000..1034d1d5c
--- /dev/null
+++ b/src/renderers/shared/fiber/ReactFiberReconciler.js
@@ -0,0 +1,119 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactFiberReconciler
+ * @flow
+ */
+
+'use strict';
+
+import type {Fiber} from 'ReactFiber';
+import type {FiberRoot} from 'ReactFiberRoot';
+import type {TypeOfWork} from 'ReactTypeOfWork';
+import type {PriorityLevel} from 'ReactPriorityLevel';
+
+var {createFiberRoot} = require('ReactFiberRoot');
+var ReactFiberScheduler = require('ReactFiberScheduler');
+
+type Deadline = {
+  timeRemaining: () => number,
+};
+
+type HostChildNode<I> = {
+  tag: TypeOfWork,
+  output: HostChildren<I>,
+  sibling: any,
+};
+
+export type HostChildren<I> = null | void | I | HostChildNode<I>;
+
+export type HostConfig<T, P, I, C> = {
+  // TODO: We don't currently have a quick way to detect that children didn't
+  // reorder so we host will always need to check the set. We should make a flag
+  // or something so that it can bailout easily.
+
+  updateContainer(containerInfo: C, children: HostChildren<I>): void,
+
+  createInstance(type: T, props: P, children: HostChildren<I>): I,
+  prepareUpdate(
+    instance: I,
+    oldProps: P,
+    newProps: P,
+    children: HostChildren<I>,
+  ): boolean,
+  commitUpdate(
+    instance: I,
+    oldProps: P,
+    newProps: P,
+    children: HostChildren<I>,
+  ): void,
+  deleteInstance(instance: I): void,
+
+  scheduleAnimationCallback(callback: () => void): void,
+  scheduleDeferredCallback(callback: (deadline: Deadline) => void): void,
+};
+
+type OpaqueNode = Fiber;
+
+export type Reconciler<C> = {
+  mountContainer(element: ReactElement<any>, containerInfo: C): OpaqueNode,
+  updateContainer(element: ReactElement<any>, container: OpaqueNode): void,
+  unmountContainer(container: OpaqueNode): void,
+  performWithPriority(priorityLevel: PriorityLevel, fn: Function): void,
+
+  // Used to extract the return value from the initial render. Legacy API.
+  getPublicRootInstance(container: OpaqueNode): C | null,
+};
+
+module.exports = function<T, P, I, C>(
+  config: HostConfig<T, P, I, C>,
+): Reconciler<C> {
+  var {scheduleWork, performWithPriority} = ReactFiberScheduler(config);
+
+  return {
+    mountContainer(element: ReactElement<any>, containerInfo: C): OpaqueNode {
+      const root = createFiberRoot(containerInfo);
+      const container = root.current;
+      // TODO: Use pending work/state instead of props.
+      // TODO: This should not override the pendingWorkPriority if there is
+      // higher priority work in the subtree.
+      container.pendingProps = element;
+
+      scheduleWork(root);
+
+      // It may seem strange that we don't return the root here, but that will
+      // allow us to have containers that are in the middle of the tree instead
+      // of being roots.
+      return container;
+    },
+
+    updateContainer(element: ReactElement<any>, container: OpaqueNode): void {
+      // TODO: If this is a nested container, this won't be the root.
+      const root: FiberRoot = (container.stateNode: any);
+      // TODO: Use pending work/state instead of props.
+      root.current.pendingProps = element;
+
+      scheduleWork(root);
+    },
+
+    unmountContainer(container: OpaqueNode): void {
+      // TODO: If this is a nested container, this won't be the root.
+      const root: FiberRoot = (container.stateNode: any);
+      // TODO: Use pending work/state instead of props.
+      root.current.pendingProps = [];
+
+      scheduleWork(root);
+    },
+
+    performWithPriority,
+
+    getPublicRootInstance(container: OpaqueNode): C | null {
+      return null;
+    },
+  };
+};
diff --git a/src/renderers/shared/fiber/ReactFiberRoot.js b/src/renderers/shared/fiber/ReactFiberRoot.js
new file mode 100644
index 000000000..c36382795
--- /dev/null
+++ b/src/renderers/shared/fiber/ReactFiberRoot.js
@@ -0,0 +1,42 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactFiberRoot
+ * @flow
+ */
+
+'use strict';
+
+import type {Fiber} from 'ReactFiber';
+
+const {createHostContainerFiber} = require('ReactFiber');
+
+export type FiberRoot = {
+  // Any additional information from the host associated with this root.
+  containerInfo: any,
+  // The currently active root fiber. This is the mutable root of the tree.
+  current: Fiber,
+  // Determines if this root has already been added to the schedule for work.
+  isScheduled: boolean,
+  // The work schedule is a linked list.
+  nextScheduledRoot: ?FiberRoot,
+};
+
+exports.createFiberRoot = function(containerInfo: any): FiberRoot {
+  // Cyclic construction. This cheats the type system right now because
+  // stateNode is any.
+  const uninitializedFiber = createHostContainerFiber();
+  const root = {
+    current: uninitializedFiber,
+    containerInfo: containerInfo,
+    isScheduled: false,
+    nextScheduledRoot: null,
+  };
+  uninitializedFiber.stateNode = root;
+  return root;
+};
diff --git a/src/renderers/shared/fiber/ReactFiberScheduler.js b/src/renderers/shared/fiber/ReactFiberScheduler.js
new file mode 100644
index 000000000..a8e1b77cc
--- /dev/null
+++ b/src/renderers/shared/fiber/ReactFiberScheduler.js
@@ -0,0 +1,357 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactFiberScheduler
+ * @flow
+ */
+
+'use strict';
+
+import type {Fiber} from 'ReactFiber';
+import type {FiberRoot} from 'ReactFiberRoot';
+import type {HostConfig} from 'ReactFiberReconciler';
+import type {PriorityLevel} from 'ReactPriorityLevel';
+
+var ReactFiberBeginWork = require('ReactFiberBeginWork');
+var ReactFiberCompleteWork = require('ReactFiberCompleteWork');
+var ReactFiberCommitWork = require('ReactFiberCommitWork');
+
+var {cloneFiber} = require('ReactFiber');
+
+var {
+  NoWork,
+  LowPriority,
+  AnimationPriority,
+  SynchronousPriority,
+} = require('ReactPriorityLevel');
+
+var timeHeuristicForUnitOfWork = 1;
+
+export type Scheduler = {
+  scheduleDeferredWork: (root: FiberRoot, priority: PriorityLevel) => void,
+};
+
+module.exports = function<T, P, I, C>(config: HostConfig<T, P, I, C>) {
+  // Use a closure to circumvent the circular dependency between the scheduler
+  // and ReactFiberBeginWork. Don't know if there's a better way to do this.
+  let scheduler;
+  function getScheduler(): Scheduler {
+    return scheduler;
+  }
+
+  const {beginWork} = ReactFiberBeginWork(config, getScheduler);
+  const {completeWork} = ReactFiberCompleteWork(config);
+  const {commitWork} = ReactFiberCommitWork(config);
+
+  const scheduleAnimationCallback = config.scheduleAnimationCallback;
+  const scheduleDeferredCallback = config.scheduleDeferredCallback;
+
+  // The default priority to use for updates.
+  let defaultPriority: PriorityLevel = LowPriority;
+
+  // The next work in progress fiber that we're currently working on.
+  let nextUnitOfWork: ?Fiber = null;
+  let nextPriorityLevel: PriorityLevel = NoWork;
+
+  // Linked list of roots with scheduled work on them.
+  let nextScheduledRoot: ?FiberRoot = null;
+  let lastScheduledRoot: ?FiberRoot = null;
+
+  function findNextUnitOfWork() {
+    // Clear out roots with no more work on them.
+    while (
+      nextScheduledRoot &&
+      nextScheduledRoot.current.pendingWorkPriority === NoWork
+    ) {
+      nextScheduledRoot.isScheduled = false;
+      if (nextScheduledRoot === lastScheduledRoot) {
+        nextScheduledRoot = null;
+        lastScheduledRoot = null;
+        nextPriorityLevel = NoWork;
+        return null;
+      }
+      nextScheduledRoot = nextScheduledRoot.nextScheduledRoot;
+    }
+    // TODO: This is scanning one root at a time. It should be scanning all
+    // roots for high priority work before moving on to lower priorities.
+    let root = nextScheduledRoot;
+    let highestPriorityRoot = null;
+    let highestPriorityLevel = NoWork;
+    while (root) {
+      if (
+        highestPriorityLevel === NoWork ||
+        highestPriorityLevel > root.current.pendingWorkPriority
+      ) {
+        highestPriorityLevel = root.current.pendingWorkPriority;
+        highestPriorityRoot = root;
+      }
+      // We didn't find anything to do in this root, so let's try the next one.
+      root = root.nextScheduledRoot;
+    }
+    if (highestPriorityRoot) {
+      nextPriorityLevel = highestPriorityLevel;
+      return cloneFiber(highestPriorityRoot.current, highestPriorityLevel);
+    }
+
+    nextPriorityLevel = NoWork;
+    return null;
+  }
+
+  function commitAllWork(finishedWork: Fiber) {
+    // Commit all the side-effects within a tree.
+    // TODO: Error handling.
+    let effectfulFiber = finishedWork.firstEffect;
+    while (effectfulFiber) {
+      const current = effectfulFiber.alternate;
+      commitWork(current, effectfulFiber);
+      const next = effectfulFiber.nextEffect;
+      // Ensure that we clean these up so that we don't accidentally keep them.
+      // I'm not actually sure this matters because we can't reset firstEffect
+      // and lastEffect since they're on every node, not just the effectful
+      // ones. So we have to clean everything as we reuse nodes anyway.
+      effectfulFiber.nextEffect = null;
+      effectfulFiber = next;
+    }
+  }
+
+  function resetWorkPriority(workInProgress: Fiber) {
+    let newPriority = NoWork;
+    // progressedChild is going to be the child set with the highest priority.
+    // Either it is the same as child, or it just bailed out because it choose
+    // not to do the work.
+    let child = workInProgress.progressedChild;
+    while (child) {
+      // Ensure that remaining work priority bubbles up.
+      if (
+        child.pendingWorkPriority !== NoWork &&
+        (newPriority === NoWork || newPriority > child.pendingWorkPriority)
+      ) {
+        newPriority = child.pendingWorkPriority;
+      }
+      child = child.sibling;
+    }
+    workInProgress.pendingWorkPriority = newPriority;
+  }
+
+  function completeUnitOfWork(workInProgress: Fiber): ?Fiber {
+    while (true) {
+      // The current, flushed, state of this fiber is the alternate.
+      // Ideally nothing should rely on this, but relying on it here
+      // means that we don't need an additional field on the work in
+      // progress.
+      const current = workInProgress.alternate;
+      const next = completeWork(current, workInProgress);
+
+      resetWorkPriority(workInProgress);
+
+      // The work is now done. We don't need this anymore. This flags
+      // to the system not to redo any work here.
+      workInProgress.pendingProps = null;
+      workInProgress.updateQueue = null;
+
+      const returnFiber = workInProgress.return;
+
+      if (returnFiber) {
+        // Ensure that the first and last effect of the parent corresponds
+        // to the children's first and last effect. This probably relies on
+        // children completing in order.
+        if (!returnFiber.firstEffect) {
+          returnFiber.firstEffect = workInProgress.firstEffect;
+        }
+        if (workInProgress.lastEffect) {
+          if (returnFiber.lastEffect) {
+            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
+          }
+          returnFiber.lastEffect = workInProgress.lastEffect;
+        }
+      }
+
+      if (next) {
+        // If completing this work spawned new work, do that next.
+        return next;
+      } else if (workInProgress.sibling) {
+        // If there is more work to do in this returnFiber, do that next.
+        return workInProgress.sibling;
+      } else if (returnFiber) {
+        // If there's no more work in this returnFiber. Complete the returnFiber.
+        workInProgress = returnFiber;
+        continue;
+      } else {
+        // If we're at the root, there's no more work to do. We can flush it.
+        const root: FiberRoot = (workInProgress.stateNode: any);
+        if (root.current === workInProgress) {
+          throw new Error(
+            'Cannot commit the same tree as before. This is probably a bug ' +
+              'related to the return field.',
+          );
+        }
+        root.current = workInProgress;
+        // TODO: We can be smarter here and only look for more work in the
+        // "next" scheduled work since we've already scanned passed. That
+        // also ensures that work scheduled during reconciliation gets deferred.
+        // const hasMoreWork = workInProgress.pendingWorkPriority !== NoWork;
+        commitAllWork(workInProgress);
+        const nextWork = findNextUnitOfWork();
+        // if (!nextWork && hasMoreWork) {
+        // TODO: This can happen when some deep work completes and we don't
+        // know if this was the last one. We should be able to keep track of
+        // the highest priority still in the tree for one pass. But if we
+        // terminate an update we don't know.
+        // throw new Error('FiberRoots should not have flagged more work if there is none.');
+        // }
+        return nextWork;
+      }
+    }
+  }
+
+  function performUnitOfWork(workInProgress: Fiber): ?Fiber {
+    // The current, flushed, state of this fiber is the alternate.
+    // Ideally nothing should rely on this, but relying on it here
+    // means that we don't need an additional field on the work in
+    // progress.
+    const current = workInProgress.alternate;
+    const next = beginWork(current, workInProgress, nextPriorityLevel);
+
+    if (next) {
+      // If this spawns new work, do that next.
+      return next;
+    } else {
+      // Otherwise, complete the current work.
+      return completeUnitOfWork(workInProgress);
+    }
+  }
+
+  function performDeferredWork(deadline) {
+    if (!nextUnitOfWork) {
+      nextUnitOfWork = findNextUnitOfWork();
+    }
+    while (nextUnitOfWork) {
+      if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {
+        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
+        if (!nextUnitOfWork) {
+          // Find more work. We might have time to complete some more.
+          nextUnitOfWork = findNextUnitOfWork();
+        }
+      } else {
+        scheduleDeferredCallback(performDeferredWork);
+        return;
+      }
+    }
+  }
+
+  function scheduleDeferredWork(root: FiberRoot, priority: PriorityLevel) {
+    // We must reset the current unit of work pointer so that we restart the
+    // search from the root during the next tick, in case there is now higher
+    // priority work somewhere earlier than before.
+    if (priority <= nextPriorityLevel) {
+      nextUnitOfWork = null;
+    }
+
+    // Set the priority on the root, without deprioritizing
+    if (
+      root.current.pendingWorkPriority === NoWork ||
+      priority <= root.current.pendingWorkPriority
+    ) {
+      root.current.pendingWorkPriority = priority;
+    }
+
+    if (root.isScheduled) {
+      // If we're already scheduled, we can bail out.
+      return;
+    }
+    root.isScheduled = true;
+    if (lastScheduledRoot) {
+      // Schedule ourselves to the end.
+      lastScheduledRoot.nextScheduledRoot = root;
+      lastScheduledRoot = root;
+    } else {
+      // We're the only work scheduled.
+      nextScheduledRoot = root;
+      lastScheduledRoot = root;
+      scheduleDeferredCallback(performDeferredWork);
+    }
+  }
+
+  function performAnimationWork() {
+    // Always start from the root
+    nextUnitOfWork = findNextUnitOfWork();
+    while (nextUnitOfWork && nextPriorityLevel !== NoWork) {
+      nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
+      if (!nextUnitOfWork) {
+        // Keep searching for animation work until there's no more left
+        nextUnitOfWork = findNextUnitOfWork();
+      }
+      // Stop if the next unit of work is low priority
+      if (nextPriorityLevel > AnimationPriority) {
+        scheduleDeferredCallback(performDeferredWork);
+        return;
+      }
+    }
+  }
+
+  function scheduleAnimationWork(
+    root: FiberRoot,
+    priorityLevel: PriorityLevel,
+  ) {
+    // Set the priority on the root, without deprioritizing
+    if (
+      root.current.pendingWorkPriority === NoWork ||
+      priorityLevel <= root.current.pendingWorkPriority
+    ) {
+      root.current.pendingWorkPriority = priorityLevel;
+    }
+
+    if (root.isScheduled) {
+      // If we're already scheduled, we can bail out.
+      return;
+    }
+    root.isScheduled = true;
+    if (lastScheduledRoot) {
+      // Schedule ourselves to the end.
+      lastScheduledRoot.nextScheduledRoot = root;
+      lastScheduledRoot = root;
+    } else {
+      // We're the only work scheduled.
+      nextScheduledRoot = root;
+      lastScheduledRoot = root;
+      scheduleAnimationCallback(performAnimationWork);
+    }
+  }
+
+  function scheduleWork(root: FiberRoot) {
+    if (defaultPriority === SynchronousPriority) {
+      throw new Error('Not implemented yet');
+    }
+
+    if (defaultPriority === NoWork) {
+      return;
+    }
+    if (defaultPriority > AnimationPriority) {
+      scheduleDeferredWork(root, defaultPriority);
+      return;
+    }
+    scheduleAnimationWork(root, defaultPriority);
+  }
+
+  function performWithPriority(priorityLevel: PriorityLevel, fn: Function) {
+    const previousDefaultPriority = defaultPriority;
+    defaultPriority = priorityLevel;
+    try {
+      fn();
+    } finally {
+      defaultPriority = previousDefaultPriority;
+    }
+  }
+
+  scheduler = {
+    scheduleWork: scheduleWork,
+    scheduleDeferredWork: scheduleDeferredWork,
+    performWithPriority: performWithPriority,
+  };
+  return scheduler;
+};
diff --git a/src/renderers/shared/fiber/ReactFiberUpdateQueue.js b/src/renderers/shared/fiber/ReactFiberUpdateQueue.js
new file mode 100644
index 000000000..65d8bb66d
--- /dev/null
+++ b/src/renderers/shared/fiber/ReactFiberUpdateQueue.js
@@ -0,0 +1,99 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactFiberUpdateQueue
+ * @flow
+ */
+
+'use strict';
+
+type UpdateQueueNode = {
+  partialState: any,
+  callback: ?Function,
+  callbackWasCalled: boolean,
+  next: ?UpdateQueueNode,
+};
+
+export type UpdateQueue = UpdateQueueNode & {
+  isReplace: boolean,
+  isForced: boolean,
+  tail: UpdateQueueNode,
+};
+
+exports.createUpdateQueue = function(partialState: mixed): UpdateQueue {
+  const queue = {
+    partialState,
+    callback: null,
+    callbackWasCalled: false,
+    next: null,
+    isReplace: false,
+    isForced: false,
+    tail: (null: any),
+  };
+  queue.tail = queue;
+  return queue;
+};
+
+exports.addToQueue = function(
+  queue: UpdateQueue,
+  partialState: mixed,
+): UpdateQueue {
+  const node = {
+    partialState,
+    callback: null,
+    callbackWasCalled: false,
+    next: null,
+  };
+  queue.tail.next = node;
+  queue.tail = node;
+  return queue;
+};
+
+exports.addCallbackToQueue = function(
+  queue: UpdateQueue,
+  callback: Function,
+): UpdateQueue {
+  if (queue.tail.callback) {
+    // If the tail already as a callback, add an empty node to queue
+    exports.addToQueue(queue, null);
+  }
+  queue.tail.callback = callback;
+  return queue;
+};
+
+exports.callCallbacks = function(queue: UpdateQueue, context: any) {
+  let node: ?UpdateQueueNode = queue;
+  while (node) {
+    if (node.callback && !node.callbackWasCalled) {
+      node.callbackWasCalled = true;
+      node.callback.call(context);
+    }
+    node = node.next;
+  }
+};
+
+exports.mergeUpdateQueue = function(
+  queue: UpdateQueue,
+  prevState: any,
+  props: any,
+): any {
+  let node: ?UpdateQueueNode = queue;
+  let state = queue.isReplace ? null : Object.assign({}, prevState);
+  while (node) {
+    let partialState;
+    if (typeof node.partialState === 'function') {
+      const updateFn = node.partialState;
+      partialState = updateFn(state, props);
+    } else {
+      partialState = node.partialState;
+    }
+    state = Object.assign(state || {}, partialState);
+    node = node.next;
+  }
+  return state;
+};
diff --git a/src/renderers/shared/fiber/ReactPriorityLevel.js b/src/renderers/shared/fiber/ReactPriorityLevel.js
new file mode 100644
index 000000000..b6930c290
--- /dev/null
+++ b/src/renderers/shared/fiber/ReactPriorityLevel.js
@@ -0,0 +1,24 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactPriorityLevel
+ * @flow
+ */
+
+'use strict';
+
+export type PriorityLevel = 0 | 1 | 2 | 3 | 4 | 5;
+
+module.exports = {
+  NoWork: 0, // No work is pending.
+  SynchronousPriority: 1, // For controlled text inputs. Synchronous side-effects.
+  AnimationPriority: 2, // Needs to complete before the next frame.
+  HighPriority: 3, // Interaction that needs to complete pretty soon to feel responsive.
+  LowPriority: 4, // Data fetching, or result from updating stores.
+  OffscreenPriority: 5, // Won't be visible but do the work in case it becomes visible.
+};
diff --git a/src/renderers/shared/fiber/ReactReifiedYield.js b/src/renderers/shared/fiber/ReactReifiedYield.js
new file mode 100644
index 000000000..c41676379
--- /dev/null
+++ b/src/renderers/shared/fiber/ReactReifiedYield.js
@@ -0,0 +1,38 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactReifiedYield
+ * @flow
+ */
+
+'use strict';
+
+import type {ReactYield} from 'ReactCoroutine';
+import type {Fiber} from 'ReactFiber';
+
+var {createFiberFromElementType} = require('ReactFiber');
+
+export type ReifiedYield = {continuation: Fiber, props: Object};
+
+exports.createReifiedYield = function(yieldNode: ReactYield): ReifiedYield {
+  var fiber = createFiberFromElementType(yieldNode.continuation, yieldNode.key);
+  return {
+    continuation: fiber,
+    props: yieldNode.props,
+  };
+};
+
+exports.createUpdatedReifiedYield = function(
+  previousYield: ReifiedYield,
+  yieldNode: ReactYield,
+): ReifiedYield {
+  return {
+    continuation: previousYield.continuation,
+    props: yieldNode.props,
+  };
+};
diff --git a/src/renderers/shared/fiber/ReactTypeOfWork.js b/src/renderers/shared/fiber/ReactTypeOfWork.js
new file mode 100644
index 000000000..b63813b1d
--- /dev/null
+++ b/src/renderers/shared/fiber/ReactTypeOfWork.js
@@ -0,0 +1,26 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactTypeOfWork
+ * @flow
+ */
+
+'use strict';
+
+export type TypeOfWork = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;
+
+module.exports = {
+  IndeterminateComponent: 0, // Before we know whether it is functional or class
+  FunctionalComponent: 1,
+  ClassComponent: 2,
+  HostContainer: 3, // Root of a host tree. Could be nested inside another node.
+  HostComponent: 4,
+  CoroutineComponent: 5,
+  CoroutineHandlerPhase: 6,
+  YieldComponent: 7,
+};
diff --git a/src/renderers/shared/fiber/__tests__/ReactCoroutine-test.js b/src/renderers/shared/fiber/__tests__/ReactCoroutine-test.js
new file mode 100644
index 000000000..af5632305
--- /dev/null
+++ b/src/renderers/shared/fiber/__tests__/ReactCoroutine-test.js
@@ -0,0 +1,89 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+var React;
+var ReactNoop;
+var ReactCoroutine;
+
+describe('ReactCoroutine', () => {
+  beforeEach(() => {
+    React = require('React');
+    ReactNoop = require('ReactNoop');
+    ReactCoroutine = require('ReactCoroutine');
+  });
+
+  xit('should render a coroutine', () => {
+    var ops = [];
+
+    function Continuation({isSame}) {
+      ops.push(['Continuation', isSame]);
+      return <span>{isSame ? 'foo==bar' : 'foo!=bar'}</span>;
+    }
+
+    // An alternative API could mark Continuation as something that needs
+    // yielding. E.g. Continuation.yieldType = 123;
+    function Child({bar}) {
+      ops.push(['Child', bar]);
+      return ReactCoroutine.createYield(
+        {
+          bar: bar,
+        },
+        Continuation,
+        null,
+      );
+    }
+
+    function Indirection() {
+      ops.push('Indirection');
+      return [<Child bar={true} />, <Child bar={false} />];
+    }
+
+    function HandleYields(props, yields) {
+      ops.push('HandleYields');
+      return yields.map(y =>
+        <y.continuation isSame={props.foo === y.props.bar} />,
+      );
+    }
+
+    // An alternative API could mark Parent as something that needs
+    // yielding. E.g. Parent.handler = HandleYields;
+    function Parent(props) {
+      ops.push('Parent');
+      return ReactCoroutine.createCoroutine(
+        props.children,
+        HandleYields,
+        props,
+      );
+    }
+
+    function App() {
+      return <div><Parent foo={true}><Indirection /></Parent></div>;
+    }
+
+    ReactNoop.render(<App />);
+    ReactNoop.flush();
+
+    expect(ops).toEqual([
+      'Parent',
+      'Indirection',
+      ['Child', true],
+      // Yield
+      ['Child', false],
+      // Yield
+      'HandleYields',
+      // Continue yields
+      ['Continuation', true],
+      ['Continuation', false],
+    ]);
+  });
+});
diff --git a/src/renderers/shared/fiber/__tests__/ReactIncremental-test.js b/src/renderers/shared/fiber/__tests__/ReactIncremental-test.js
new file mode 100644
index 000000000..520cbd476
--- /dev/null
+++ b/src/renderers/shared/fiber/__tests__/ReactIncremental-test.js
@@ -0,0 +1,797 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+var React;
+var ReactNoop;
+
+describe('ReactIncremental', () => {
+  beforeEach(() => {
+    React = require('React');
+    ReactNoop = require('ReactNoop');
+  });
+
+  it('should render a simple component', () => {
+    function Bar() {
+      return <div>Hello World</div>;
+    }
+
+    function Foo() {
+      return <Bar isBar={true} />;
+    }
+
+    ReactNoop.render(<Foo />);
+    ReactNoop.flush();
+  });
+
+  it('should render a simple component, in steps if needed', () => {
+    var barCalled = false;
+    function Bar() {
+      barCalled = true;
+      return <span><div>Hello World</div></span>;
+    }
+
+    var fooCalled = false;
+    function Foo() {
+      fooCalled = true;
+      return [<Bar isBar={true} />, <Bar isBar={true} />];
+    }
+
+    ReactNoop.render(<Foo />);
+    expect(fooCalled).toBe(false);
+    expect(barCalled).toBe(false);
+    // Do one step of work.
+    ReactNoop.flushDeferredPri(7);
+    expect(fooCalled).toBe(true);
+    expect(barCalled).toBe(false);
+    // Do the rest of the work.
+    ReactNoop.flushDeferredPri(50);
+    expect(fooCalled).toBe(true);
+    expect(barCalled).toBe(true);
+  });
+
+  it('updates a previous render', () => {
+    var ops = [];
+
+    function Header() {
+      ops.push('Header');
+      return <h1>Hi</h1>;
+    }
+
+    function Content(props) {
+      ops.push('Content');
+      return <div>{props.children}</div>;
+    }
+
+    function Footer() {
+      ops.push('Footer');
+      return <footer>Bye</footer>;
+    }
+
+    var header = <Header />;
+    var footer = <Footer />;
+
+    function Foo(props) {
+      ops.push('Foo');
+      return (
+        <div>
+          {header}
+          <Content>{props.text}</Content>
+          {footer}
+        </div>
+      );
+    }
+
+    ReactNoop.render(<Foo text="foo" />);
+    ReactNoop.flush();
+
+    expect(ops).toEqual(['Foo', 'Header', 'Content', 'Footer']);
+
+    ops = [];
+
+    ReactNoop.render(<Foo text="bar" />);
+    ReactNoop.flush();
+
+    // TODO: Test bail out of host components. This is currently unobservable.
+
+    // Since this is an update, it should bail out and reuse the work from
+    // Header and Content.
+    expect(ops).toEqual(['Foo', 'Content']);
+  });
+
+  it('can cancel partially rendered work and restart', () => {
+    var ops = [];
+
+    function Bar(props) {
+      ops.push('Bar');
+      return <div>{props.children}</div>;
+    }
+
+    function Foo(props) {
+      ops.push('Foo');
+      return (
+        <div>
+          <Bar>{props.text}</Bar>
+          <Bar>{props.text}</Bar>
+        </div>
+      );
+    }
+
+    // Init
+    ReactNoop.render(<Foo text="foo" />);
+    ReactNoop.flush();
+
+    ops = [];
+
+    ReactNoop.render(<Foo text="bar" />);
+    // Flush part of the work
+    ReactNoop.flushDeferredPri(20);
+
+    expect(ops).toEqual(['Foo', 'Bar']);
+
+    ops = [];
+
+    // This will abort the previous work and restart
+    ReactNoop.render(<Foo text="baz" />);
+
+    // Flush part of the new work
+    ReactNoop.flushDeferredPri(20);
+
+    expect(ops).toEqual(['Foo', 'Bar']);
+
+    // Flush the rest of the work which now includes the low priority
+    ReactNoop.flush(20);
+
+    expect(ops).toEqual(['Foo', 'Bar', 'Bar']);
+  });
+
+  it('can deprioritize unfinished work and resume it later', () => {
+    var ops = [];
+
+    function Bar(props) {
+      ops.push('Bar');
+      return <div>{props.children}</div>;
+    }
+
+    function Middle(props) {
+      ops.push('Middle');
+      return <span>{props.children}</span>;
+    }
+
+    function Foo(props) {
+      ops.push('Foo');
+      return (
+        <div>
+          <Bar>{props.text}</Bar>
+          <section hidden={true}>
+            <Middle>{props.text}</Middle>
+          </section>
+          <Bar>{props.text}</Bar>
+          <footer hidden={true}>
+            <Middle>Footer</Middle>
+          </footer>
+        </div>
+      );
+    }
+
+    // Init
+    ReactNoop.render(<Foo text="foo" />);
+    ReactNoop.flush();
+
+    expect(ops).toEqual(['Foo', 'Bar', 'Bar', 'Middle', 'Middle']);
+
+    ops = [];
+
+    // Render part of the work. This should be enough to flush everything except
+    // the middle which has lower priority.
+    ReactNoop.render(<Foo text="bar" />);
+    ReactNoop.flushDeferredPri(40);
+
+    expect(ops).toEqual(['Foo', 'Bar', 'Bar']);
+
+    ops = [];
+
+    // Flush only the remaining work
+    ReactNoop.flush();
+
+    expect(ops).toEqual(['Middle', 'Middle']);
+  });
+
+  it('can deprioritize a tree from without dropping work', () => {
+    var ops = [];
+
+    function Bar(props) {
+      ops.push('Bar');
+      return <div>{props.children}</div>;
+    }
+
+    function Middle(props) {
+      ops.push('Middle');
+      return <span>{props.children}</span>;
+    }
+
+    function Foo(props) {
+      ops.push('Foo');
+      return (
+        <div>
+          <Bar>{props.text}</Bar>
+          <section hidden={true}>
+            <Middle>{props.text}</Middle>
+          </section>
+          <Bar>{props.text}</Bar>
+          <footer hidden={true}>
+            <Middle>Footer</Middle>
+          </footer>
+        </div>
+      );
+    }
+
+    // Init
+    ReactNoop.performAnimationWork(() => {
+      ReactNoop.render(<Foo text="foo" />);
+    });
+    ReactNoop.flush();
+
+    expect(ops).toEqual(['Foo', 'Bar', 'Bar', 'Middle', 'Middle']);
+
+    ops = [];
+
+    // Render the high priority work (everying except the hidden trees).
+    ReactNoop.performAnimationWork(() => {
+      ReactNoop.render(<Foo text="foo" />);
+    });
+    ReactNoop.render(<Foo text="bar" />);
+    ReactNoop.flushAnimationPri();
+
+    expect(ops).toEqual(['Foo', 'Bar', 'Bar']);
+
+    ops = [];
+
+    // The hidden content was deprioritized from high to low priority. A low
+    // priority callback should have been scheduled. Flush it now.
+    ReactNoop.flushDeferredPri();
+
+    expect(ops).toEqual(['Middle', 'Middle']);
+  });
+
+  it('can resume work in a subtree even when a parent bails out', () => {
+    var ops = [];
+
+    function Bar(props) {
+      ops.push('Bar');
+      return <div>{props.children}</div>;
+    }
+
+    function Tester() {
+      // This component is just here to ensure that the bail out is
+      // in fact in effect in the expected place for this test.
+      ops.push('Tester');
+      return <div />;
+    }
+
+    function Middle(props) {
+      ops.push('Middle');
+      return <span>{props.children}</span>;
+    }
+
+    var middleContent = (
+      <aaa>
+        <Tester />
+        <bbb hidden={true}>
+          <ccc>
+            <Middle>Hi</Middle>
+          </ccc>
+        </bbb>
+      </aaa>
+    );
+
+    function Foo(props) {
+      ops.push('Foo');
+      return (
+        <div>
+          <Bar>{props.text}</Bar>
+          {middleContent}
+          <Bar>{props.text}</Bar>
+        </div>
+      );
+    }
+
+    // Init
+    ReactNoop.render(<Foo text="foo" />);
+    ReactNoop.flushDeferredPri(52);
+
+    expect(ops).toEqual(['Foo', 'Bar', 'Tester', 'Bar']);
+
+    ops = [];
+
+    // We're now rendering an update that will bail out on updating middle.
+    ReactNoop.render(<Foo text="bar" />);
+    ReactNoop.flushDeferredPri(45);
+
+    expect(ops).toEqual(['Foo', 'Bar', 'Bar']);
+
+    ops = [];
+
+    // Flush the rest to make sure that the bailout didn't block this work.
+    ReactNoop.flush();
+    expect(ops).toEqual(['Middle']);
+  });
+
+  it('can resume work in a bailed subtree within one pass', () => {
+    var ops = [];
+
+    function Bar(props) {
+      ops.push('Bar');
+      return <div>{props.children}</div>;
+    }
+
+    class Tester extends React.Component {
+      shouldComponentUpdate() {
+        return false;
+      }
+      render() {
+        // This component is just here to ensure that the bail out is
+        // in fact in effect in the expected place for this test.
+        ops.push('Tester');
+        return <div />;
+      }
+    }
+
+    function Middle(props) {
+      ops.push('Middle');
+      return <span>{props.children}</span>;
+    }
+
+    // Should content not just bail out on current, not workInProgress?
+
+    class Content extends React.Component {
+      shouldComponentUpdate() {
+        return false;
+      }
+      render() {
+        return [
+          <Tester unused={this.props.unused} />,
+          <bbb hidden={true}>
+            <ccc>
+              <Middle>Hi</Middle>
+            </ccc>
+          </bbb>,
+        ];
+      }
+    }
+
+    function Foo(props) {
+      ops.push('Foo');
+      return (
+        <div hidden={props.text === 'bar'}>
+          <Bar>{props.text}</Bar>
+          <Content unused={props.text} />
+          <Bar>{props.text}</Bar>
+        </div>
+      );
+    }
+
+    // Init
+    ReactNoop.render(<Foo text="foo" />);
+    ReactNoop.flushDeferredPri(52);
+
+    expect(ops).toEqual(['Foo', 'Bar', 'Tester', 'Bar']);
+
+    ops = [];
+
+    // Make a quick update which will create a low pri tree on top of the
+    // already low pri tree.
+    ReactNoop.render(<Foo text="bar" />);
+    ReactNoop.flushDeferredPri(15);
+
+    expect(ops).toEqual(['Foo']);
+
+    ops = [];
+
+    // At this point, middle will bail out but it has not yet fully rendered.
+    // Since that is the same priority as its parent tree. This should render
+    // as a single batch. Therefore, it is correct that Middle should be in the
+    // middle. If it occurs after the two "Bar" components then it was flushed
+    // after them which is not correct.
+    ReactNoop.flush();
+    expect(ops).toEqual(['Bar', 'Middle', 'Bar']);
+  });
+
+  it('can reuse work done after being preempted', () => {
+    var ops = [];
+
+    function Bar(props) {
+      ops.push('Bar');
+      return <div>{props.children}</div>;
+    }
+
+    function Middle(props) {
+      ops.push('Middle');
+      return <span>{props.children}</span>;
+    }
+
+    var middleContent = (
+      <div>
+        <Middle>Hello</Middle>
+        <Bar>-</Bar>
+        <Middle>World</Middle>
+      </div>
+    );
+
+    var step0 = (
+      <div>
+        <Middle>Hi</Middle>
+        <Bar>{'Foo'}</Bar>
+        <Middle>There</Middle>
+      </div>
+    );
+
+    function Foo(props) {
+      ops.push('Foo');
+      return (
+        <div>
+          <Bar>{props.text2}</Bar>
+          <div hidden={true}>
+            {props.step === 0 ? step0 : middleContent}
+          </div>
+        </div>
+      );
+    }
+
+    // Init
+    ReactNoop.render(<Foo text="foo" text2="foo" step={0} />);
+    ReactNoop.flushDeferredPri(55 + 25);
+
+    // We only finish the higher priority work. So the low pri content
+    // has not yet finished mounting.
+    expect(ops).toEqual(['Foo', 'Bar', 'Middle', 'Bar']);
+
+    ops = [];
+
+    // Interupt the rendering with a quick update. This should not touch the
+    // middle content.
+    ReactNoop.render(<Foo text="foo" text2="bar" step={0} />);
+    ReactNoop.flush();
+
+    // We've now rendered the entire tree but we didn't have to redo the work
+    // done by the first Middle and Bar already.
+    expect(ops).toEqual(['Foo', 'Bar', 'Middle']);
+
+    ops = [];
+
+    // Make a quick update which will schedule low priority work to
+    // update the middle content.
+    ReactNoop.render(<Foo text="bar" text2="bar" step={1} />);
+    ReactNoop.flushDeferredPri(30 + 25);
+
+    expect(ops).toEqual(['Foo', 'Bar']);
+
+    ops = [];
+
+    // The middle content is now pending rendering...
+    ReactNoop.flushDeferredPri(30);
+    expect(ops).toEqual(['Middle', 'Bar']);
+
+    ops = [];
+
+    // but we'll interupt it to render some higher priority work.
+    // The middle content will bailout so it remains untouched.
+    ReactNoop.render(<Foo text="foo" text2="bar" step={1} />);
+    ReactNoop.flushDeferredPri(30);
+
+    expect(ops).toEqual(['Foo', 'Bar']);
+
+    ops = [];
+
+    // Since we did nothing to the middle subtree during the interuption,
+    // we should be able to reuse the reconciliation work that we already did
+    // without restarting.
+    ReactNoop.flush();
+    expect(ops).toEqual(['Middle']);
+  });
+
+  it('can reuse work if shouldComponentUpdate is false, after being preempted', () => {
+    var ops = [];
+
+    function Bar(props) {
+      ops.push('Bar');
+      return <div>{props.children}</div>;
+    }
+
+    class Middle extends React.Component {
+      shouldComponentUpdate(nextProps) {
+        return this.props.children !== nextProps.children;
+      }
+      render() {
+        ops.push('Middle');
+        return <span>{this.props.children}</span>;
+      }
+    }
+
+    class Content extends React.Component {
+      shouldComponentUpdate(nextProps) {
+        return this.props.step !== nextProps.step;
+      }
+      render() {
+        ops.push('Content');
+        return (
+          <div>
+            <Middle>{this.props.step === 0 ? 'Hi' : 'Hello'}</Middle>
+            <Bar>{this.props.step === 0 ? this.props.text : '-'}</Bar>
+            <Middle>{this.props.step === 0 ? 'There' : 'World'}</Middle>
+          </div>
+        );
+      }
+    }
+
+    function Foo(props) {
+      ops.push('Foo');
+      return (
+        <div>
+          <Bar>{props.text}</Bar>
+          <div hidden={true}>
+            <Content step={props.step} text={props.text} />
+          </div>
+        </div>
+      );
+    }
+
+    // Init
+    ReactNoop.render(<Foo text="foo" step={0} />);
+    ReactNoop.flush();
+
+    expect(ops).toEqual(['Foo', 'Bar', 'Content', 'Middle', 'Bar', 'Middle']);
+
+    ops = [];
+
+    // Make a quick update which will schedule low priority work to
+    // update the middle content.
+    ReactNoop.render(<Foo text="bar" step={1} />);
+    ReactNoop.flushDeferredPri(30);
+
+    expect(ops).toEqual(['Foo', 'Bar']);
+
+    ops = [];
+
+    // The middle content is now pending rendering...
+    ReactNoop.flushDeferredPri(30 + 25);
+    expect(ops).toEqual(['Content', 'Middle', 'Bar']); // One more Middle left.
+
+    ops = [];
+
+    // but we'll interupt it to render some higher priority work.
+    // The middle content will bailout so it remains untouched.
+    ReactNoop.render(<Foo text="foo" step={1} />);
+    ReactNoop.flushDeferredPri(30);
+
+    expect(ops).toEqual(['Foo', 'Bar']);
+
+    ops = [];
+
+    // Since we did nothing to the middle subtree during the interuption,
+    // we should be able to reuse the reconciliation work that we already did
+    // without restarting.
+    ReactNoop.flush();
+    // TODO: Content never fully completed its render so can't completely bail
+    // out on the entire subtree. However, we could do a shallow bail out and
+    // not rerender Content, but keep going down the incomplete tree.
+    // Normally shouldComponentUpdate->false is not enough to determine that we
+    // can safely reuse the old props, but I think in this case it would be ok,
+    // since it is a resume of already started work.
+    // Because of the above we can also not reuse the work of Bar because the
+    // rerender of Content will generate a new element which will mean we don't
+    // auto-bail out from Bar.
+    expect(ops).toEqual(['Content', 'Bar', 'Middle']);
+  });
+
+  it('can update in the middle of a tree using setState', () => {
+    let instance;
+    class Bar extends React.Component {
+      constructor() {
+        super();
+        this.state = {a: 'a'};
+        instance = this;
+      }
+      render() {
+        return <div>{this.props.children}</div>;
+      }
+    }
+
+    function Foo() {
+      return (
+        <div>
+          <Bar />
+        </div>
+      );
+    }
+
+    ReactNoop.render(<Foo />);
+    ReactNoop.flush();
+    expect(instance.state).toEqual({a: 'a'});
+    instance.setState({b: 'b'});
+    ReactNoop.flush();
+    expect(instance.state).toEqual({a: 'a', b: 'b'});
+  });
+
+  it('can queue multiple state updates', () => {
+    let instance;
+    class Bar extends React.Component {
+      constructor() {
+        super();
+        this.state = {a: 'a'};
+        instance = this;
+      }
+      render() {
+        return <div>{this.props.children}</div>;
+      }
+    }
+
+    function Foo() {
+      return (
+        <div>
+          <Bar />
+        </div>
+      );
+    }
+
+    ReactNoop.render(<Foo />);
+    ReactNoop.flush();
+    // Call setState multiple times before flushing
+    instance.setState({b: 'b'});
+    instance.setState({c: 'c'});
+    instance.setState({d: 'd'});
+    ReactNoop.flush();
+    expect(instance.state).toEqual({a: 'a', b: 'b', c: 'c', d: 'd'});
+  });
+
+  it('can use updater form of setState', () => {
+    let instance;
+    class Bar extends React.Component {
+      constructor() {
+        super();
+        this.state = {num: 1};
+        instance = this;
+      }
+      render() {
+        return <div>{this.props.children}</div>;
+      }
+    }
+
+    function Foo({multiplier}) {
+      return (
+        <div>
+          <Bar multiplier={multiplier} />
+        </div>
+      );
+    }
+
+    function updater(state, props) {
+      return {num: state.num * props.multiplier};
+    }
+
+    ReactNoop.render(<Foo multiplier={2} />);
+    ReactNoop.flush();
+    expect(instance.state.num).toEqual(1);
+    instance.setState(updater);
+    ReactNoop.flush();
+    expect(instance.state.num).toEqual(2);
+    instance.setState(updater);
+    ReactNoop.render(<Foo multiplier={3} />);
+    ReactNoop.flush();
+    expect(instance.state.num).toEqual(6);
+  });
+
+  it('can call setState inside update callback', () => {
+    let instance;
+    class Bar extends React.Component {
+      constructor() {
+        super();
+        this.state = {num: 1};
+        instance = this;
+      }
+      render() {
+        return <div>{this.props.children}</div>;
+      }
+    }
+
+    function Foo({multiplier}) {
+      return (
+        <div>
+          <Bar multiplier={multiplier} />
+        </div>
+      );
+    }
+
+    function updater(state, props) {
+      return {num: state.num * props.multiplier};
+    }
+
+    function callback() {
+      this.setState({called: true});
+    }
+
+    ReactNoop.render(<Foo multiplier={2} />);
+    ReactNoop.flush();
+    instance.setState(updater);
+    instance.setState(updater, callback);
+    ReactNoop.flush();
+    expect(instance.state.num).toEqual(4);
+    expect(instance.state.called).toEqual(true);
+  });
+
+  it('can replaceState', () => {
+    let instance;
+    class Bar extends React.Component {
+      state = {a: 'a'};
+      render() {
+        instance = this;
+        return <div>{this.props.children}</div>;
+      }
+    }
+
+    function Foo() {
+      return (
+        <div>
+          <Bar />
+        </div>
+      );
+    }
+
+    ReactNoop.render(<Foo />);
+    ReactNoop.flush();
+    instance.setState({b: 'b'});
+    instance.setState({c: 'c'});
+    instance.updater.enqueueReplaceState(instance, {d: 'd'});
+    ReactNoop.flush();
+    expect(instance.state).toEqual({d: 'd'});
+  });
+
+  it('can forceUpdate', () => {
+    const ops = [];
+
+    function Baz() {
+      ops.push('Baz');
+      return <div />;
+    }
+
+    let instance;
+    class Bar extends React.Component {
+      constructor() {
+        super();
+        instance = this;
+      }
+      shouldComponentUpdate() {
+        return false;
+      }
+      render() {
+        ops.push('Bar');
+        return <Baz />;
+      }
+    }
+
+    function Foo() {
+      ops.push('Foo');
+      return (
+        <div>
+          <Bar />
+        </div>
+      );
+    }
+
+    ReactNoop.render(<Foo />);
+    ReactNoop.flush();
+    expect(ops).toEqual(['Foo', 'Bar', 'Baz']);
+    instance.forceUpdate();
+    ReactNoop.flush();
+    expect(ops).toEqual(['Foo', 'Bar', 'Baz', 'Bar', 'Baz']);
+  });
+});
diff --git a/src/renderers/shared/fiber/__tests__/ReactIncrementalSideEffects-test.js b/src/renderers/shared/fiber/__tests__/ReactIncrementalSideEffects-test.js
new file mode 100644
index 000000000..d874ac7bc
--- /dev/null
+++ b/src/renderers/shared/fiber/__tests__/ReactIncrementalSideEffects-test.js
@@ -0,0 +1,357 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+var React;
+var ReactNoop;
+
+describe('ReactIncrementalSideEffects', () => {
+  beforeEach(() => {
+    React = require('React');
+    ReactNoop = require('ReactNoop');
+  });
+
+  function div(...children) {
+    return {type: 'div', children, prop: undefined};
+  }
+
+  function span(prop) {
+    return {type: 'span', children: [], prop};
+  }
+
+  it('can update child nodes of a host instance', () => {
+    function Bar(props) {
+      return <span>{props.text}</span>;
+    }
+
+    function Foo(props) {
+      return (
+        <div>
+          <Bar text={props.text} />
+          {props.text === 'World' ? <Bar text={props.text} /> : null}
+        </div>
+      );
+    }
+
+    ReactNoop.render(<Foo text="Hello" />);
+    ReactNoop.flush();
+    expect(ReactNoop.root.children).toEqual([div(span())]);
+
+    ReactNoop.render(<Foo text="World" />);
+    ReactNoop.flush();
+    expect(ReactNoop.root.children).toEqual([div(span(), span())]);
+  });
+
+  it('does not update child nodes if a flush is aborted', () => {
+    function Bar(props) {
+      return <span prop={props.text} />;
+    }
+
+    function Foo(props) {
+      return (
+        <div>
+          <div>
+            <Bar text={props.text} />
+            {props.text === 'Hello' ? <Bar text={props.text} /> : null}
+          </div>
+          <Bar text="Yo" />
+        </div>
+      );
+    }
+
+    ReactNoop.render(<Foo text="Hello" />);
+    ReactNoop.flush();
+    expect(ReactNoop.root.children).toEqual([
+      div(div(span('Hello'), span('Hello')), span('Yo')),
+    ]);
+
+    ReactNoop.render(<Foo text="World" />);
+    ReactNoop.flushDeferredPri(35);
+    expect(ReactNoop.root.children).toEqual([
+      div(div(span('Hello'), span('Hello')), span('Yo')),
+    ]);
+  });
+
+  it('preserves a previously rendered node when deprioritized', () => {
+    function Middle(props) {
+      return <span prop={props.children} />;
+    }
+
+    function Foo(props) {
+      return (
+        <div>
+          <div hidden={true}>
+            <Middle>{props.text}</Middle>
+          </div>
+        </div>
+      );
+    }
+
+    ReactNoop.render(<Foo text="foo" />);
+    ReactNoop.flush();
+
+    expect(ReactNoop.root.children).toEqual([div(div(span('foo')))]);
+
+    ReactNoop.render(<Foo text="bar" />);
+    ReactNoop.flushDeferredPri(20);
+
+    expect(ReactNoop.root.children).toEqual([div(div(span('foo')))]);
+
+    ReactNoop.flush();
+
+    expect(ReactNoop.root.children).toEqual([div(div(span('bar')))]);
+  });
+
+  it('can reuse side-effects after being preempted', () => {
+    function Bar(props) {
+      return <span prop={props.children} />;
+    }
+
+    var middleContent = (
+      <div>
+        <Bar>Hello</Bar>
+        <Bar>World</Bar>
+      </div>
+    );
+
+    function Foo(props) {
+      return (
+        <div hidden={true}>
+          {props.step === 0
+            ? <div>
+                <Bar>Hi</Bar>
+                <Bar>{props.text}</Bar>
+              </div>
+            : middleContent}
+        </div>
+      );
+    }
+
+    // Init
+    ReactNoop.render(<Foo text="foo" step={0} />);
+    ReactNoop.flush();
+
+    expect(ReactNoop.root.children).toEqual([
+      div(div(span('Hi'), span('foo'))),
+    ]);
+
+    // Make a quick update which will schedule low priority work to
+    // update the middle content.
+    ReactNoop.render(<Foo text="bar" step={1} />);
+    ReactNoop.flushDeferredPri(30);
+
+    // The tree remains unchanged.
+    expect(ReactNoop.root.children).toEqual([
+      div(div(span('Hi'), span('foo'))),
+    ]);
+
+    // The first Bar has already completed its update but we'll interupt it to
+    // render some higher priority work. The middle content will bailout so
+    // it remains untouched which means that it should reuse it next time.
+    ReactNoop.render(<Foo text="foo" step={1} />);
+    ReactNoop.flush();
+
+    // Since we did nothing to the middle subtree during the interuption,
+    // we should be able to reuse the reconciliation work that we already did
+    // without restarting. The side-effects should still be replayed.
+
+    expect(ReactNoop.root.children).toEqual([
+      div(div(span('Hello'), span('World'))),
+    ]);
+  });
+
+  it('can reuse side-effects after being preempted, if shouldComponentUpdate is false', () => {
+    class Bar extends React.Component {
+      shouldComponentUpdate(nextProps) {
+        return this.props.children !== nextProps.children;
+      }
+      render() {
+        return <span prop={this.props.children} />;
+      }
+    }
+
+    class Content extends React.Component {
+      shouldComponentUpdate(nextProps) {
+        return this.props.step !== nextProps.step;
+      }
+      render() {
+        return (
+          <div>
+            <Bar>{this.props.step === 0 ? 'Hi' : 'Hello'}</Bar>
+            <Bar>{this.props.step === 0 ? this.props.text : 'World'}</Bar>
+          </div>
+        );
+      }
+    }
+
+    function Foo(props) {
+      return (
+        <div hidden={true}>
+          <Content step={props.step} text={props.text} />
+        </div>
+      );
+    }
+
+    // Init
+    ReactNoop.render(<Foo text="foo" step={0} />);
+    ReactNoop.flush();
+
+    expect(ReactNoop.root.children).toEqual([
+      div(div(span('Hi'), span('foo'))),
+    ]);
+
+    // Make a quick update which will schedule low priority work to
+    // update the middle content.
+    ReactNoop.render(<Foo text="bar" step={1} />);
+    ReactNoop.flushDeferredPri(35);
+
+    // The tree remains unchanged.
+    expect(ReactNoop.root.children).toEqual([
+      div(div(span('Hi'), span('foo'))),
+    ]);
+
+    // The first Bar has already completed its update but we'll interupt it to
+    // render some higher priority work. The middle content will bailout so
+    // it remains untouched which means that it should reuse it next time.
+    ReactNoop.render(<Foo text="foo" step={1} />);
+    ReactNoop.flush(30);
+
+    // Since we did nothing to the middle subtree during the interuption,
+    // we should be able to reuse the reconciliation work that we already did
+    // without restarting. The side-effects should still be replayed.
+
+    expect(ReactNoop.root.children).toEqual([
+      div(div(span('Hello'), span('World'))),
+    ]);
+  });
+
+  it('updates a child even though the old props is empty', () => {
+    function Foo(props) {
+      return (
+        <div hidden={true}>
+          <span prop={1} />
+        </div>
+      );
+    }
+
+    ReactNoop.render(<Foo />);
+    ReactNoop.flush();
+    expect(ReactNoop.root.children).toEqual([div(span(1))]);
+  });
+
+  it('can defer side-effects and resume them later on', function() {
+    class Bar extends React.Component {
+      shouldComponentUpdate(nextProps) {
+        return this.props.idx !== nextProps;
+      }
+      render() {
+        return <span prop={this.props.idx} />;
+      }
+    }
+    function Foo(props) {
+      return (
+        <div>
+          <span prop={props.tick} />
+          <div hidden={true}>
+            <Bar idx={props.idx} />
+            <Bar idx={props.idx + 1} />
+          </div>
+        </div>
+      );
+    }
+    ReactNoop.render(<Foo tick={0} idx={0} />);
+    ReactNoop.flushDeferredPri(40 + 25);
+    expect(ReactNoop.root.children).toEqual([
+      div(
+        span(0),
+        div(/*the spans are down-prioritized and not rendered yet*/),
+      ),
+    ]);
+    ReactNoop.render(<Foo tick={1} idx={0} />);
+    ReactNoop.flushDeferredPri(35 + 25);
+    expect(ReactNoop.root.children).toEqual([
+      div(span(1), div(/*still not rendered yet*/)),
+    ]);
+    ReactNoop.flushDeferredPri(30 + 25);
+    expect(ReactNoop.root.children).toEqual([
+      div(
+        span(1),
+        div(
+          // Now we had enough time to finish the spans.
+          span(0),
+          span(1),
+        ),
+      ),
+    ]);
+    var innerSpanA = ReactNoop.root.children[0].children[1].children[1];
+    ReactNoop.render(<Foo tick={2} idx={1} />);
+    ReactNoop.flushDeferredPri(30 + 25);
+    expect(ReactNoop.root.children).toEqual([
+      div(
+        span(2),
+        div(
+          // Still same old numbers.
+          span(0),
+          span(1),
+        ),
+      ),
+    ]);
+    ReactNoop.flushDeferredPri(30);
+    expect(ReactNoop.root.children).toEqual([
+      div(
+        span(2),
+        div(
+          // New numbers.
+          span(1),
+          span(2),
+        ),
+      ),
+    ]);
+
+    var innerSpanB = ReactNoop.root.children[0].children[1].children[1];
+    // This should have been an update to an existing instance, not recreation.
+    // We verify that by ensuring that the child instance was the same as
+    // before.
+    expect(innerSpanA).toBe(innerSpanB);
+  });
+
+  // TODO: Test that side-effects are not cut off when a work in progress node
+  // moves to "current" without flushing due to having lower priority. Does this
+  // even happen? Maybe a child doesn't get processed because it is lower prio?
+
+  it('calls callback after update is flushed', () => {
+    let instance;
+    class Foo extends React.Component {
+      constructor() {
+        super();
+        instance = this;
+        this.state = {text: 'foo'};
+      }
+      render() {
+        return <span prop={this.state.text} />;
+      }
+    }
+
+    ReactNoop.render(<Foo />);
+    ReactNoop.flush();
+    expect(ReactNoop.root.children).toEqual([span('foo')]);
+    let called = false;
+    instance.setState({text: 'bar'}, () => {
+      expect(ReactNoop.root.children).toEqual([span('bar')]);
+      called = true;
+    });
+    ReactNoop.flush();
+    expect(called).toBe(true);
+  });
+
+  // TODO: Test that callbacks are not lost if an update is preempted.
+});
diff --git a/src/renderers/shared/fiber/isomorphic/ReactCoroutine.js b/src/renderers/shared/fiber/isomorphic/ReactCoroutine.js
new file mode 100644
index 000000000..7f44eb8d0
--- /dev/null
+++ b/src/renderers/shared/fiber/isomorphic/ReactCoroutine.js
@@ -0,0 +1,126 @@
+/**
+ * Copyright 2014-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactCoroutine
+ * @flow
+ */
+
+'use strict';
+
+import type {ReactNodeList} from 'ReactTypes';
+
+// The Symbol used to tag the special React types. If there is no native Symbol
+// nor polyfill, then a plain number is used for performance.
+var REACT_COROUTINE_TYPE =
+  (typeof Symbol === 'function' &&
+    Symbol.for &&
+    Symbol.for('react.coroutine')) ||
+  0xeac8;
+
+var REACT_YIELD_TYPE =
+  (typeof Symbol === 'function' && Symbol.for && Symbol.for('react.yield')) ||
+  0xeac9;
+
+type ReifiedYield = {continuation: Object, props: Object};
+type CoroutineHandler<T> = (
+  props: T,
+  yields: Array<ReifiedYield>,
+) => ReactNodeList;
+
+export type ReactCoroutine = {
+  $$typeof: Symbol | number,
+  key: null | string,
+  children: any,
+  // This should be a more specific CoroutineHandler
+  handler: (props: any, yields: Array<ReifiedYield>) => ReactNodeList,
+  /* $FlowFixMe(>=0.31.0): Which is it? mixed? Or Object? Must match
+   * `ReactYield` type.
+   */
+  props: mixed,
+};
+export type ReactYield = {
+  $$typeof: Symbol | number,
+  key: null | string,
+  props: Object,
+  continuation: mixed,
+};
+
+exports.createCoroutine = function<T>(
+  children: mixed,
+  handler: CoroutineHandler<T>,
+  props: T,
+  key: ?string = null,
+): ReactCoroutine {
+  var coroutine = {
+    // This tag allow us to uniquely identify this as a React Coroutine
+    $$typeof: REACT_COROUTINE_TYPE,
+    key: key == null ? null : '' + key,
+    children: children,
+    handler: handler,
+    props: props,
+  };
+
+  if (__DEV__) {
+    // TODO: Add _store property for marking this as validated.
+    if (Object.freeze) {
+      Object.freeze(coroutine.props);
+      Object.freeze(coroutine);
+    }
+  }
+
+  return coroutine;
+};
+
+exports.createYield = function(
+  props: mixed,
+  continuation: mixed,
+  key: ?string = null,
+) {
+  var yieldNode = {
+    // This tag allow us to uniquely identify this as a React Yield
+    $$typeof: REACT_YIELD_TYPE,
+    key: key == null ? null : '' + key,
+    props: props,
+    continuation: continuation,
+  };
+
+  if (__DEV__) {
+    // TODO: Add _store property for marking this as validated.
+    if (Object.freeze) {
+      Object.freeze(yieldNode.props);
+      Object.freeze(yieldNode);
+    }
+  }
+
+  return yieldNode;
+};
+
+/**
+ * Verifies the object is a coroutine object.
+ */
+exports.isCoroutine = function(object: mixed): boolean {
+  return (
+    typeof object === 'object' &&
+    object !== null &&
+    object.$$typeof === REACT_COROUTINE_TYPE
+  );
+};
+
+/**
+ * Verifies the object is a yield object.
+ */
+exports.isYield = function(object: mixed): boolean {
+  return (
+    typeof object === 'object' &&
+    object !== null &&
+    object.$$typeof === REACT_YIELD_TYPE
+  );
+};
+
+exports.REACT_YIELD_TYPE = REACT_YIELD_TYPE;
+exports.REACT_COROUTINE_TYPE = REACT_COROUTINE_TYPE;
diff --git a/src/renderers/shared/fiber/isomorphic/ReactTypes.js b/src/renderers/shared/fiber/isomorphic/ReactTypes.js
new file mode 100644
index 000000000..2ba79535d
--- /dev/null
+++ b/src/renderers/shared/fiber/isomorphic/ReactTypes.js
@@ -0,0 +1,30 @@
+/**
+ * Copyright 2014-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactTypes
+ * @flow
+ */
+
+'use strict';
+
+import type {ReactCoroutine, ReactYield} from 'ReactCoroutine';
+
+export type ReactNode =
+  | ReactElement<any>
+  | ReactCoroutine
+  | ReactYield
+  | ReactText
+  | ReactFragment;
+
+export type ReactFragment = ReactEmpty | Iterable<ReactNode>;
+
+export type ReactNodeList = ReactEmpty | ReactNode;
+
+export type ReactText = string | number;
+
+export type ReactEmpty = null | void | boolean;
diff --git a/src/renderers/shared/hooks/ReactHostOperationHistoryHook.js b/src/renderers/shared/hooks/ReactHostOperationHistoryHook.js
new file mode 100644
index 000000000..bbe1aa890
--- /dev/null
+++ b/src/renderers/shared/hooks/ReactHostOperationHistoryHook.js
@@ -0,0 +1,49 @@
+/**
+ * Copyright 2016-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactHostOperationHistoryHook
+ * @flow
+ */
+
+'use strict';
+
+import type {DebugID} from 'ReactInstanceType';
+
+export type Operation = {instanceID: DebugID} & (
+  | {type: 'mount', payload: string}
+  | {type: 'insert child', payload: {toIndex: number, content: string}}
+  | {type: 'move child', payload: {fromIndex: number, toIndex: number}}
+  | {type: 'replace children', payload: string}
+  | {type: 'replace text', payload: string}
+  | {type: 'replace with', payload: string}
+  | {type: 'update styles', payload: mixed /* Style Object */}
+  | {type: 'update attribute', payload: {[name: string]: string}}
+  | {type: 'remove attribute', payload: string});
+
+var history: Array<Operation> = [];
+
+var ReactHostOperationHistoryHook = {
+  onHostOperation(operation: Operation) {
+    history.push(operation);
+  },
+
+  clearHistory(): void {
+    if (ReactHostOperationHistoryHook._preventClearing) {
+      // Should only be used for tests.
+      return;
+    }
+
+    history = [];
+  },
+
+  getHistory(): Array<Operation> {
+    return history;
+  },
+};
+
+module.exports = ReactHostOperationHistoryHook;
diff --git a/src/isomorphic/devtools/ReactInvalidSetStateWarningDevTool.js b/src/renderers/shared/hooks/ReactInvalidSetStateWarningHook.js
similarity index 72%
rename from src/isomorphic/devtools/ReactInvalidSetStateWarningDevTool.js
rename to src/renderers/shared/hooks/ReactInvalidSetStateWarningHook.js
index 74275187c..3c309ed0f 100644
--- a/src/isomorphic/devtools/ReactInvalidSetStateWarningDevTool.js
+++ b/src/renderers/shared/hooks/ReactInvalidSetStateWarningHook.js
@@ -8,3 +8,4 @@
  *
- * @providesModule ReactInvalidSetStateWarningDevTool
+ * @providesModule ReactInvalidSetStateWarningHook
+ * @flow
  */
@@ -21,3 +22,3 @@ if (__DEV__) {
       !processingChildContext,
-      'setState(...): Cannot call setState() inside getChildContext()'
+      'setState(...): Cannot call setState() inside getChildContext()',
     );
@@ -26,10 +27,10 @@ if (__DEV__) {
 
-var ReactInvalidSetStateWarningDevTool = {
-  onBeginProcessingChildContext() {
+var ReactInvalidSetStateWarningHook = {
+  onBeginProcessingChildContext(): void {
     processingChildContext = true;
   },
-  onEndProcessingChildContext() {
+  onEndProcessingChildContext(): void {
     processingChildContext = false;
   },
-  onSetState() {
+  onSetState(): void {
     warnInvalidSetState();
@@ -38,2 +39,2 @@ var ReactInvalidSetStateWarningDevTool = {
 
-module.exports = ReactInvalidSetStateWarningDevTool;
+module.exports = ReactInvalidSetStateWarningHook;
diff --git a/src/renderers/shared/hooks/__tests__/ReactComponentTreeHook-test.js b/src/renderers/shared/hooks/__tests__/ReactComponentTreeHook-test.js
new file mode 100644
index 000000000..974ed201b
--- /dev/null
+++ b/src/renderers/shared/hooks/__tests__/ReactComponentTreeHook-test.js
@@ -0,0 +1,2214 @@
+/**
+ * Copyright 2016-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+describe('ReactComponentTreeHook', () => {
+  var React;
+  var ReactDOM;
+  var ReactDOMServer;
+  var ReactInstanceMap;
+  var ReactComponentTreeHook;
+  var ReactComponentTreeTestUtils;
+
+  beforeEach(() => {
+    jest.resetModuleRegistry();
+
+    React = require('React');
+    ReactDOM = require('ReactDOM');
+    ReactDOMServer = require('ReactDOMServer');
+    ReactInstanceMap = require('ReactInstanceMap');
+    ReactComponentTreeHook = require('ReactComponentTreeHook');
+    ReactComponentTreeTestUtils = require('ReactComponentTreeTestUtils');
+  });
+
+  function assertTreeMatches(pairs) {
+    if (!Array.isArray(pairs[0])) {
+      pairs = [pairs];
+    }
+
+    var node = document.createElement('div');
+    var currentElement;
+    var rootInstance;
+
+    class Wrapper extends React.Component {
+      render() {
+        rootInstance = ReactInstanceMap.get(this);
+        return currentElement;
+      }
+    }
+
+    function expectWrapperTreeToEqual(expectedTree, andStayMounted) {
+      ReactComponentTreeTestUtils.expectTree(rootInstance._debugID, {
+        displayName: 'Wrapper',
+        children: expectedTree ? [expectedTree] : [],
+      });
+      var rootDisplayNames = ReactComponentTreeTestUtils.getRootDisplayNames();
+      var registeredDisplayNames = ReactComponentTreeTestUtils.getRegisteredDisplayNames();
+      if (!expectedTree) {
+        expect(rootDisplayNames).toEqual([]);
+        expect(registeredDisplayNames).toEqual([]);
+      } else if (andStayMounted) {
+        expect(rootDisplayNames).toContain('Wrapper');
+        expect(registeredDisplayNames).toContain('Wrapper');
+      }
+    }
+
+    // Mount once, render updates, then unmount.
+    // Ensure the tree is correct on every step.
+    pairs.forEach(([element, expectedTree]) => {
+      currentElement = element;
+
+      // Mount a new tree or update the existing tree.
+      ReactDOM.render(<Wrapper />, node);
+      expectWrapperTreeToEqual(expectedTree, true);
+
+      // Purging should have no effect
+      // on the tree we expect to see.
+      ReactComponentTreeHook.purgeUnmountedComponents();
+      expectWrapperTreeToEqual(expectedTree, true);
+    });
+
+    // Unmounting the root node should purge
+    // the whole subtree automatically.
+    ReactDOM.unmountComponentAtNode(node);
+    expectWrapperTreeToEqual(null);
+
+    // Server render every pair.
+    // Ensure the tree is correct on every step.
+    pairs.forEach(([element, expectedTree]) => {
+      currentElement = element;
+
+      // Rendering to string should not produce any entries
+      // because ReactDebugTool purges it when the flush ends.
+      ReactDOMServer.renderToString(<Wrapper />);
+      expectWrapperTreeToEqual(null);
+
+      // To test it, we tell the hook to ignore next purge
+      // so the cleanup request by ReactDebugTool is ignored.
+      // This lets us make assertions on the actual tree.
+      ReactComponentTreeHook._preventPurging = true;
+      ReactDOMServer.renderToString(<Wrapper />);
+      ReactComponentTreeHook._preventPurging = false;
+      expectWrapperTreeToEqual(expectedTree);
+
+      // Purge manually since we skipped the automatic purge.
+      ReactComponentTreeHook.purgeUnmountedComponents();
+      expectWrapperTreeToEqual(null);
+    });
+  }
+
+  describe('mount', () => {
+    it('uses displayName or Unknown for classic components', () => {
+      class Foo extends React.Component {
+        render() {
+          return null;
+        }
+      }
+
+      Foo.displayName = 'Bar';
+
+      class Baz extends React.Component {
+        render() {
+          return null;
+        }
+      }
+
+      class Qux extends React.Component {
+        render() {
+          return null;
+        }
+      }
+
+      delete Qux.displayName;
+
+      var element = <div><Foo /><Baz /><Qux /></div>;
+      var tree = {
+        displayName: 'div',
+        children: [
+          {
+            displayName: 'Bar',
+            children: [],
+          },
+          {
+            displayName: 'Baz',
+            children: [],
+          },
+          {
+            displayName: 'Unknown',
+            children: [],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('uses displayName, name, or ReactComponent for modern components', () => {
+      class Foo extends React.Component {
+        render() {
+          return null;
+        }
+      }
+      Foo.displayName = 'Bar';
+      class Baz extends React.Component {
+        render() {
+          return null;
+        }
+      }
+      class Qux extends React.Component {
+        render() {
+          return null;
+        }
+      }
+      delete Qux.name;
+
+      var element = <div><Foo /><Baz /><Qux /></div>;
+      var tree = {
+        displayName: 'div',
+        element,
+        children: [
+          {
+            displayName: 'Bar',
+            children: [],
+          },
+          {
+            displayName: 'Baz',
+            children: [],
+          },
+          {
+            // Note: Ideally fallback name should be consistent (e.g. "Unknown")
+            displayName: 'ReactComponent',
+            children: [],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('uses displayName, name, or Object for factory components', () => {
+      function Foo() {
+        return {
+          render() {
+            return null;
+          },
+        };
+      }
+      Foo.displayName = 'Bar';
+      function Baz() {
+        return {
+          render() {
+            return null;
+          },
+        };
+      }
+      function Qux() {
+        return {
+          render() {
+            return null;
+          },
+        };
+      }
+      delete Qux.name;
+
+      var element = <div><Foo /><Baz /><Qux /></div>;
+      var tree = {
+        displayName: 'div',
+        element,
+        children: [
+          {
+            displayName: 'Bar',
+            children: [],
+          },
+          {
+            displayName: 'Baz',
+            children: [],
+          },
+          {
+            displayName: 'Unknown',
+            children: [],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('uses displayName, name, or StatelessComponent for functional components', () => {
+      function Foo() {
+        return null;
+      }
+      Foo.displayName = 'Bar';
+      function Baz() {
+        return null;
+      }
+      function Qux() {
+        return null;
+      }
+      delete Qux.name;
+
+      var element = <div><Foo /><Baz /><Qux /></div>;
+      var tree = {
+        displayName: 'div',
+        element,
+        children: [
+          {
+            displayName: 'Bar',
+            children: [],
+          },
+          {
+            displayName: 'Baz',
+            children: [],
+          },
+          {
+            displayName: 'Unknown',
+            children: [],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('reports a host tree correctly', () => {
+      var element = (
+        <div>
+          <p>
+            <span>
+              Hi!
+            </span>
+            Wow.
+          </p>
+          <hr />
+        </div>
+      );
+      var tree = {
+        displayName: 'div',
+        children: [
+          {
+            displayName: 'p',
+            children: [
+              {
+                displayName: 'span',
+                children: [
+                  {
+                    displayName: '#text',
+                    text: 'Hi!',
+                  },
+                ],
+              },
+              {
+                displayName: '#text',
+                text: 'Wow.',
+              },
+            ],
+          },
+          {
+            displayName: 'hr',
+            element: <hr />,
+            children: [],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('reports a simple tree with composites correctly', () => {
+      class Foo extends React.Component {
+        render() {
+          return <div />;
+        }
+      }
+
+      var element = <Foo />;
+      var tree = {
+        displayName: 'Foo',
+        element,
+        children: [
+          {
+            displayName: 'div',
+            element: <div />,
+            children: [],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('reports a tree with composites correctly', () => {
+      class Qux extends React.Component {
+        render() {
+          return null;
+        }
+      }
+
+      function Foo() {
+        return {
+          render() {
+            return <Qux />;
+          },
+        };
+      }
+      function Bar({children}) {
+        return <h1>{children}</h1>;
+      }
+      class Baz extends React.Component {
+        render() {
+          return (
+            <div>
+              <Foo />
+              <Bar>
+                <span>Hi,</span>
+                Mom
+              </Bar>
+              <a href="#">Click me.</a>
+            </div>
+          );
+        }
+      }
+
+      var element = <Baz />;
+      var tree = {
+        displayName: 'Baz',
+        element,
+        children: [
+          {
+            displayName: 'div',
+            children: [
+              {
+                displayName: 'Foo',
+                element: <Foo />,
+                children: [
+                  {
+                    displayName: 'Qux',
+                    element: <Qux />,
+                    children: [],
+                  },
+                ],
+              },
+              {
+                displayName: 'Bar',
+                children: [
+                  {
+                    displayName: 'h1',
+                    children: [
+                      {
+                        displayName: 'span',
+                        children: [
+                          {
+                            displayName: '#text',
+                            element: 'Hi,',
+                            text: 'Hi,',
+                          },
+                        ],
+                      },
+                      {
+                        displayName: '#text',
+                        text: 'Mom',
+                        element: 'Mom',
+                      },
+                    ],
+                  },
+                ],
+              },
+              {
+                displayName: 'a',
+                children: [
+                  {
+                    displayName: '#text',
+                    text: 'Click me.',
+                    element: 'Click me.',
+                  },
+                ],
+              },
+            ],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('ignores null children', () => {
+      class Foo extends React.Component {
+        render() {
+          return null;
+        }
+      }
+      var element = <Foo />;
+      var tree = {
+        displayName: 'Foo',
+        children: [],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('ignores false children', () => {
+      class Foo extends React.Component {
+        render() {
+          return false;
+        }
+      }
+      var element = <Foo />;
+      var tree = {
+        displayName: 'Foo',
+        children: [],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('reports text nodes as children', () => {
+      var element = <div>{'1'}{2}</div>;
+      var tree = {
+        displayName: 'div',
+        element,
+        children: [
+          {
+            displayName: '#text',
+            text: '1',
+          },
+          {
+            displayName: '#text',
+            text: '2',
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('reports a single text node as a child', () => {
+      var element = <div>{'1'}</div>;
+      var tree = {
+        displayName: 'div',
+        element,
+        children: [
+          {
+            displayName: '#text',
+            text: '1',
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('reports a single number node as a child', () => {
+      var element = <div>{42}</div>;
+      var tree = {
+        displayName: 'div',
+        element,
+        children: [
+          {
+            displayName: '#text',
+            text: '42',
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('reports a zero as a child', () => {
+      var element = <div>{0}</div>;
+      var tree = {
+        displayName: 'div',
+        element,
+        children: [
+          {
+            displayName: '#text',
+            text: '0',
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('skips empty nodes for multiple children', () => {
+      function Foo() {
+        return <div />;
+      }
+      var element = (
+        <div>
+          {'hi'}
+          {false}
+          {42}
+          {null}
+          <Foo />
+        </div>
+      );
+      var tree = {
+        displayName: 'div',
+        element,
+        children: [
+          {
+            displayName: '#text',
+            text: 'hi',
+            element: 'hi',
+          },
+          {
+            displayName: '#text',
+            text: '42',
+            element: 42,
+          },
+          {
+            displayName: 'Foo',
+            element: <Foo />,
+            children: [
+              {
+                displayName: 'div',
+                element: <div />,
+                children: [],
+              },
+            ],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('reports html content as no children', () => {
+      var element = <div dangerouslySetInnerHTML={{__html: 'Bye.'}} />;
+      var tree = {
+        displayName: 'div',
+        children: [],
+      };
+      assertTreeMatches([element, tree]);
+    });
+  });
+
+  describe('update', () => {
+    describe('host component', () => {
+      it('updates text of a single text child', () => {
+        var elementBefore = <div>Hi.</div>;
+        var treeBefore = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: '#text',
+              text: 'Hi.',
+            },
+          ],
+        };
+
+        var elementAfter = <div>Bye.</div>;
+        var treeAfter = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: '#text',
+              text: 'Bye.',
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from no children to a single text child', () => {
+        var elementBefore = <div />;
+        var treeBefore = {
+          displayName: 'div',
+          children: [],
+        };
+
+        var elementAfter = <div>Hi.</div>;
+        var treeAfter = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: '#text',
+              text: 'Hi.',
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a single text child to no children', () => {
+        var elementBefore = <div>Hi.</div>;
+        var treeBefore = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: '#text',
+              text: 'Hi.',
+            },
+          ],
+        };
+
+        var elementAfter = <div />;
+        var treeAfter = {
+          displayName: 'div',
+          children: [],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from html content to a single text child', () => {
+        var elementBefore = <div dangerouslySetInnerHTML={{__html: 'Hi.'}} />;
+        var treeBefore = {
+          displayName: 'div',
+          children: [],
+        };
+
+        var elementAfter = <div>Hi.</div>;
+        var treeAfter = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: '#text',
+              text: 'Hi.',
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a single text child to html content', () => {
+        var elementBefore = <div>Hi.</div>;
+        var treeBefore = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: '#text',
+              text: 'Hi.',
+            },
+          ],
+        };
+
+        var elementAfter = <div dangerouslySetInnerHTML={{__html: 'Hi.'}} />;
+        var treeAfter = {
+          displayName: 'div',
+          children: [],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from no children to multiple text children', () => {
+        var elementBefore = <div />;
+        var treeBefore = {
+          displayName: 'div',
+          children: [],
+        };
+
+        var elementAfter = <div>{'Hi.'}{'Bye.'}</div>;
+        var treeAfter = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: '#text',
+              text: 'Hi.',
+            },
+            {
+              displayName: '#text',
+              text: 'Bye.',
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from multiple text children to no children', () => {
+        var elementBefore = <div>{'Hi.'}{'Bye.'}</div>;
+        var treeBefore = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: '#text',
+              text: 'Hi.',
+            },
+            {
+              displayName: '#text',
+              text: 'Bye.',
+            },
+          ],
+        };
+
+        var elementAfter = <div />;
+        var treeAfter = {
+          displayName: 'div',
+          children: [],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from html content to multiple text children', () => {
+        var elementBefore = <div dangerouslySetInnerHTML={{__html: 'Hi.'}} />;
+        var treeBefore = {
+          displayName: 'div',
+          children: [],
+        };
+
+        var elementAfter = <div>{'Hi.'}{'Bye.'}</div>;
+        var treeAfter = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: '#text',
+              text: 'Hi.',
+            },
+            {
+              displayName: '#text',
+              text: 'Bye.',
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from multiple text children to html content', () => {
+        var elementBefore = <div>{'Hi.'}{'Bye.'}</div>;
+        var treeBefore = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: '#text',
+              text: 'Hi.',
+            },
+            {
+              displayName: '#text',
+              text: 'Bye.',
+            },
+          ],
+        };
+
+        var elementAfter = <div dangerouslySetInnerHTML={{__html: 'Hi.'}} />;
+        var treeAfter = {
+          displayName: 'div',
+          children: [],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from html content to no children', () => {
+        var elementBefore = <div dangerouslySetInnerHTML={{__html: 'Hi.'}} />;
+        var treeBefore = {
+          displayName: 'div',
+          children: [],
+        };
+
+        var elementAfter = <div />;
+        var treeAfter = {
+          displayName: 'div',
+          children: [],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from no children to html content', () => {
+        var elementBefore = <div />;
+        var treeBefore = {
+          displayName: 'div',
+          children: [],
+        };
+
+        var elementAfter = <div dangerouslySetInnerHTML={{__html: 'Hi.'}} />;
+        var treeAfter = {
+          displayName: 'div',
+          children: [],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from one text child to multiple text children', () => {
+        var elementBefore = <div>Hi.</div>;
+        var treeBefore = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: '#text',
+              text: 'Hi.',
+            },
+          ],
+        };
+
+        var elementAfter = <div>{'Hi.'}{'Bye.'}</div>;
+        var treeAfter = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: '#text',
+              text: 'Hi.',
+            },
+            {
+              displayName: '#text',
+              text: 'Bye.',
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from multiple text children to one text child', () => {
+        var elementBefore = <div>{'Hi.'}{'Bye.'}</div>;
+        var treeBefore = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: '#text',
+              text: 'Hi.',
+            },
+            {
+              displayName: '#text',
+              text: 'Bye.',
+            },
+          ],
+        };
+
+        var elementAfter = <div>Hi.</div>;
+        var treeAfter = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: '#text',
+              text: 'Hi.',
+            },
+          ],
+        };
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates text nodes when reordering', () => {
+        var elementBefore = <div>{'Hi.'}{'Bye.'}</div>;
+        var treeBefore = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: '#text',
+              text: 'Hi.',
+            },
+            {
+              displayName: '#text',
+              text: 'Bye.',
+            },
+          ],
+        };
+
+        var elementAfter = <div>{'Bye.'}{'Hi.'}</div>;
+        var treeAfter = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: '#text',
+              text: 'Bye.',
+            },
+            {
+              displayName: '#text',
+              text: 'Hi.',
+            },
+          ],
+        };
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates host nodes when reordering with keys', () => {
+        var elementBefore = (
+          <div>
+            <div key="a">Hi.</div>
+            <div key="b">Bye.</div>
+          </div>
+        );
+        var treeBefore = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: 'div',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Hi.',
+                },
+              ],
+            },
+            {
+              displayName: 'div',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Bye.',
+                },
+              ],
+            },
+          ],
+        };
+
+        var elementAfter = (
+          <div>
+            <div key="b">Bye.</div>
+            <div key="a">Hi.</div>
+          </div>
+        );
+        var treeAfter = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: 'div',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Bye.',
+                },
+              ],
+            },
+            {
+              displayName: 'div',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Hi.',
+                },
+              ],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates host nodes when reordering without keys', () => {
+        var elementBefore = (
+          <div>
+            <div>Hi.</div>
+            <div>Bye.</div>
+          </div>
+        );
+        var treeBefore = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: 'div',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Hi.',
+                },
+              ],
+            },
+            {
+              displayName: 'div',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Bye.',
+                },
+              ],
+            },
+          ],
+        };
+
+        var elementAfter = (
+          <div>
+            <div>Bye.</div>
+            <div>Hi.</div>
+          </div>
+        );
+        var treeAfter = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: 'div',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Bye.',
+                },
+              ],
+            },
+            {
+              displayName: 'div',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Hi.',
+                },
+              ],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates a single composite child of a different type', () => {
+        function Foo() {
+          return null;
+        }
+
+        function Bar() {
+          return null;
+        }
+
+        var elementBefore = <div><Foo /></div>;
+        var treeBefore = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: 'Foo',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <div><Bar /></div>;
+        var treeAfter = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates a single composite child of the same type', () => {
+        function Foo({children}) {
+          return children;
+        }
+
+        var elementBefore = <div><Foo><div /></Foo></div>;
+        var treeBefore = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: 'Foo',
+              children: [
+                {
+                  displayName: 'div',
+                  children: [],
+                },
+              ],
+            },
+          ],
+        };
+
+        var elementAfter = <div><Foo><span /></Foo></div>;
+        var treeAfter = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: 'Foo',
+              children: [
+                {
+                  displayName: 'span',
+                  children: [],
+                },
+              ],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from no children to a single composite child', () => {
+        function Foo() {
+          return null;
+        }
+
+        var elementBefore = <div />;
+        var treeBefore = {
+          displayName: 'div',
+          children: [],
+        };
+
+        var elementAfter = <div><Foo /></div>;
+        var treeAfter = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: 'Foo',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a single composite child to no children', () => {
+        function Foo() {
+          return null;
+        }
+
+        var elementBefore = <div><Foo /></div>;
+        var treeBefore = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: 'Foo',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <div />;
+        var treeAfter = {
+          displayName: 'div',
+          children: [],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates mixed children', () => {
+        function Foo() {
+          return <div />;
+        }
+        var element1 = (
+          <div>
+            {'hi'}
+            {false}
+            {42}
+            {null}
+            <Foo />
+          </div>
+        );
+        var tree1 = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: '#text',
+              text: 'hi',
+            },
+            {
+              displayName: '#text',
+              text: '42',
+            },
+            {
+              displayName: 'Foo',
+              children: [
+                {
+                  displayName: 'div',
+                  children: [],
+                },
+              ],
+            },
+          ],
+        };
+
+        var element2 = (
+          <div>
+            <Foo />
+            {false}
+            {'hi'}
+            {null}
+          </div>
+        );
+        var tree2 = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: 'Foo',
+              children: [
+                {
+                  displayName: 'div',
+                  children: [],
+                },
+              ],
+            },
+            {
+              displayName: '#text',
+              text: 'hi',
+            },
+          ],
+        };
+
+        var element3 = (
+          <div>
+            <Foo />
+          </div>
+        );
+        var tree3 = {
+          displayName: 'div',
+          children: [
+            {
+              displayName: 'Foo',
+              children: [
+                {
+                  displayName: 'div',
+                  children: [],
+                },
+              ],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [element1, tree1],
+          [element2, tree2],
+          [element3, tree3],
+        ]);
+      });
+    });
+
+    describe('functional component', () => {
+      it('updates with a host child', () => {
+        function Foo({children}) {
+          return children;
+        }
+
+        var elementBefore = <Foo><div /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'div',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo><span /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'span',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from null to a host child', () => {
+        function Foo({children}) {
+          return children;
+        }
+
+        var elementBefore = <Foo>{null}</Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [],
+        };
+
+        var elementAfter = <Foo><div /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'div',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a host child to null', () => {
+        function Foo({children}) {
+          return children;
+        }
+
+        var elementBefore = <Foo><div /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'div',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo>{null}</Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a host child to a composite child', () => {
+        function Bar() {
+          return null;
+        }
+
+        function Foo({children}) {
+          return children;
+        }
+
+        var elementBefore = <Foo><div /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'div',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo><Bar /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a composite child to a host child', () => {
+        function Bar() {
+          return null;
+        }
+
+        function Foo({children}) {
+          return children;
+        }
+
+        var elementBefore = <Foo><Bar /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo><div /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'div',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from null to a composite child', () => {
+        function Bar() {
+          return null;
+        }
+
+        function Foo({children}) {
+          return children;
+        }
+
+        var elementBefore = <Foo>{null}</Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [],
+        };
+
+        var elementAfter = <Foo><Bar /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a composite child to null', () => {
+        function Bar() {
+          return null;
+        }
+
+        function Foo({children}) {
+          return children;
+        }
+
+        var elementBefore = <Foo><Bar /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo>{null}</Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+    });
+
+    describe('class component', () => {
+      it('updates with a host child', () => {
+        class Foo extends React.Component {
+          render() {
+            return this.props.children;
+          }
+        }
+
+        var elementBefore = <Foo><div /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'div',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo><span /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'span',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from null to a host child', () => {
+        class Foo extends React.Component {
+          render() {
+            return this.props.children;
+          }
+        }
+
+        var elementBefore = <Foo>{null}</Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [],
+        };
+
+        var elementAfter = <Foo><div /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'div',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a host child to null', () => {
+        class Foo extends React.Component {
+          render() {
+            return this.props.children;
+          }
+        }
+
+        var elementBefore = <Foo><div /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'div',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo>{null}</Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a host child to a composite child', () => {
+        class Bar extends React.Component {
+          render() {
+            return null;
+          }
+        }
+
+        class Foo extends React.Component {
+          render() {
+            return this.props.children;
+          }
+        }
+
+        var elementBefore = <Foo><div /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'div',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo><Bar /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a composite child to a host child', () => {
+        class Bar extends React.Component {
+          render() {
+            return null;
+          }
+        }
+
+        class Foo extends React.Component {
+          render() {
+            return this.props.children;
+          }
+        }
+
+        var elementBefore = <Foo><Bar /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo><div /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'div',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from null to a composite child', () => {
+        class Bar extends React.Component {
+          render() {
+            return null;
+          }
+        }
+
+        class Foo extends React.Component {
+          render() {
+            return this.props.children;
+          }
+        }
+
+        var elementBefore = <Foo>{null}</Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [],
+        };
+
+        var elementAfter = <Foo><Bar /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a composite child to null', () => {
+        class Bar extends React.Component {
+          render() {
+            return null;
+          }
+        }
+
+        class Foo extends React.Component {
+          render() {
+            return this.props.children;
+          }
+        }
+
+        var elementBefore = <Foo><Bar /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo>{null}</Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+    });
+  });
+
+  it('tracks owner correctly', () => {
+    class Foo extends React.Component {
+      render() {
+        return <Bar><h1>Hi.</h1></Bar>;
+      }
+    }
+    function Bar({children}) {
+      return <div>{children} Mom</div>;
+    }
+
+    // Note that owner is not calculated for text nodes
+    // because they are not created from real elements.
+    var element = <article><Foo /></article>;
+    var tree = {
+      displayName: 'article',
+      children: [
+        {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              ownerDisplayName: 'Foo',
+              children: [
+                {
+                  displayName: 'div',
+                  ownerDisplayName: 'Bar',
+                  children: [
+                    {
+                      displayName: 'h1',
+                      ownerDisplayName: 'Foo',
+                      children: [
+                        {
+                          displayName: '#text',
+                          text: 'Hi.',
+                        },
+                      ],
+                    },
+                    {
+                      displayName: '#text',
+                      text: ' Mom',
+                    },
+                  ],
+                },
+              ],
+            },
+          ],
+        },
+      ],
+    };
+    assertTreeMatches([element, tree]);
+  });
+
+  it('purges unmounted components automatically', () => {
+    var node = document.createElement('div');
+    var renderBar = true;
+    var fooInstance;
+    var barInstance;
+
+    class Foo extends React.Component {
+      render() {
+        fooInstance = ReactInstanceMap.get(this);
+        return renderBar ? <Bar /> : null;
+      }
+    }
+
+    class Bar extends React.Component {
+      render() {
+        barInstance = ReactInstanceMap.get(this);
+        return null;
+      }
+    }
+
+    ReactDOM.render(<Foo />, node);
+    ReactComponentTreeTestUtils.expectTree(
+      barInstance._debugID,
+      {
+        displayName: 'Bar',
+        parentDisplayName: 'Foo',
+        parentID: fooInstance._debugID,
+        children: [],
+      },
+      'Foo',
+    );
+
+    renderBar = false;
+    ReactDOM.render(<Foo />, node);
+    ReactDOM.render(<Foo />, node);
+    ReactComponentTreeTestUtils.expectTree(
+      barInstance._debugID,
+      {
+        displayName: 'Unknown',
+        children: [],
+        parentID: null,
+      },
+      'Foo',
+    );
+
+    ReactDOM.unmountComponentAtNode(node);
+    ReactComponentTreeTestUtils.expectTree(
+      barInstance._debugID,
+      {
+        displayName: 'Unknown',
+        children: [],
+        parentID: null,
+      },
+      'Foo',
+    );
+  });
+
+  it('reports update counts', () => {
+    var node = document.createElement('div');
+
+    ReactDOM.render(<div className="a" />, node);
+    var divID = ReactComponentTreeHook.getRootIDs()[0];
+    expect(ReactComponentTreeHook.getUpdateCount(divID)).toEqual(0);
+
+    ReactDOM.render(<span className="a" />, node);
+    var spanID = ReactComponentTreeHook.getRootIDs()[0];
+    expect(ReactComponentTreeHook.getUpdateCount(divID)).toEqual(0);
+    expect(ReactComponentTreeHook.getUpdateCount(spanID)).toEqual(0);
+
+    ReactDOM.render(<span className="b" />, node);
+    expect(ReactComponentTreeHook.getUpdateCount(divID)).toEqual(0);
+    expect(ReactComponentTreeHook.getUpdateCount(spanID)).toEqual(1);
+
+    ReactDOM.render(<span className="c" />, node);
+    expect(ReactComponentTreeHook.getUpdateCount(divID)).toEqual(0);
+    expect(ReactComponentTreeHook.getUpdateCount(spanID)).toEqual(2);
+
+    ReactDOM.unmountComponentAtNode(node);
+    expect(ReactComponentTreeHook.getUpdateCount(divID)).toEqual(0);
+    expect(ReactComponentTreeHook.getUpdateCount(spanID)).toEqual(0);
+  });
+
+  it('does not report top-level wrapper as a root', () => {
+    var node = document.createElement('div');
+
+    ReactDOM.render(<div className="a" />, node);
+    expect(ReactComponentTreeTestUtils.getRootDisplayNames()).toEqual(['div']);
+
+    ReactDOM.render(<div className="b" />, node);
+    expect(ReactComponentTreeTestUtils.getRootDisplayNames()).toEqual(['div']);
+
+    ReactDOM.unmountComponentAtNode(node);
+    expect(ReactComponentTreeTestUtils.getRootDisplayNames()).toEqual([]);
+    expect(ReactComponentTreeTestUtils.getRegisteredDisplayNames()).toEqual([]);
+  });
+
+  it('registers inlined text nodes', () => {
+    var node = document.createElement('div');
+
+    ReactDOM.render(<div>hi</div>, node);
+    expect(ReactComponentTreeTestUtils.getRegisteredDisplayNames()).toEqual([
+      'div',
+      '#text',
+    ]);
+
+    ReactDOM.unmountComponentAtNode(node);
+    expect(ReactComponentTreeTestUtils.getRegisteredDisplayNames()).toEqual([]);
+  });
+
+  describe('stack addenda', () => {
+    it('gets created', () => {
+      function getAddendum(element) {
+        var addendum = ReactComponentTreeHook.getCurrentStackAddendum(element);
+        return addendum.replace(/\(at .+?:\d+\)/g, '(at **)');
+      }
+
+      function Anon() {
+        return null;
+      }
+      Object.defineProperty(Anon, 'name', {
+        value: null,
+      });
+      function Orange() {
+        return null;
+      }
+
+      expect(getAddendum()).toBe('');
+      expect(getAddendum(<div />)).toBe('\n    in div (at **)');
+      expect(getAddendum(<Anon />)).toBe('\n    in Unknown (at **)');
+      expect(getAddendum(<Orange />)).toBe('\n    in Orange (at **)');
+      expect(getAddendum(React.createElement(Orange))).toBe('\n    in Orange');
+
+      var renders = 0;
+      var rOwnedByQ;
+
+      function Q() {
+        return (rOwnedByQ = React.createElement(R));
+      }
+      function R() {
+        return <div><S /></div>;
+      }
+      class S extends React.Component {
+        componentDidMount() {
+          // Check that the parent path is still fetched when only S itself is on
+          // the stack.
+          this.forceUpdate();
+        }
+        render() {
+          expect(getAddendum()).toBe(
+            '\n    in S (at **)' +
+              '\n    in div (at **)' +
+              '\n    in R (created by Q)' +
+              '\n    in Q (at **)',
+          );
+          expect(getAddendum(<span />)).toBe(
+            '\n    in span (at **)' +
+              '\n    in S (at **)' +
+              '\n    in div (at **)' +
+              '\n    in R (created by Q)' +
+              '\n    in Q (at **)',
+          );
+          expect(getAddendum(React.createElement('span'))).toBe(
+            '\n    in span (created by S)' +
+              '\n    in S (at **)' +
+              '\n    in div (at **)' +
+              '\n    in R (created by Q)' +
+              '\n    in Q (at **)',
+          );
+          renders++;
+          return null;
+        }
+      }
+      ReactDOM.render(<Q />, document.createElement('div'));
+      expect(renders).toBe(2);
+
+      // Make sure owner is fetched for the top element too.
+      expect(getAddendum(rOwnedByQ)).toBe('\n    in R (created by Q)');
+    });
+
+    it('can be retrieved by ID', () => {
+      function getAddendum(id) {
+        var addendum = ReactComponentTreeHook.getStackAddendumByID(id);
+        return addendum.replace(/\(at .+?:\d+\)/g, '(at **)');
+      }
+
+      class Q extends React.Component {
+        render() {
+          return null;
+        }
+      }
+
+      var q = ReactDOM.render(<Q />, document.createElement('div'));
+      expect(getAddendum(ReactInstanceMap.get(q)._debugID)).toBe(
+        '\n    in Q (at **)',
+      );
+
+      spyOn(console, 'error');
+      getAddendum(-17);
+      expect(console.error.calls.count()).toBe(1);
+      expect(console.error.calls.argsFor(0)[0]).toBe(
+        'Warning: ReactComponentTreeHook: Missing React element for ' +
+          'debugID -17 when building stack',
+      );
+    });
+
+    it('is created during mounting', () => {
+      // https://github.com/facebook/react/issues/7187
+      var el = document.createElement('div');
+      var portalEl = document.createElement('div');
+      class Foo extends React.Component {
+        componentWillMount() {
+          ReactDOM.render(<div />, portalEl);
+        }
+        render() {
+          return <div><div /></div>;
+        }
+      }
+      ReactDOM.render(<Foo />, el);
+    });
+
+    it('is created when calling renderToString during render', () => {
+      // https://github.com/facebook/react/issues/7190
+      var el = document.createElement('div');
+      class Foo extends React.Component {
+        render() {
+          return (
+            <div>
+              <div>
+                {ReactDOMServer.renderToString(<div />)}
+              </div>
+            </div>
+          );
+        }
+      }
+      ReactDOM.render(<Foo />, el);
+    });
+  });
+
+  describe('in environment without Map, Set and Array.from', () => {
+    var realMap;
+    var realSet;
+    var realArrayFrom;
+
+    beforeEach(() => {
+      realMap = global.Map;
+      realSet = global.Set;
+      realArrayFrom = Array.from;
+
+      global.Map = undefined;
+      global.Set = undefined;
+      Array.from = undefined;
+
+      jest.resetModuleRegistry();
+
+      React = require('React');
+      ReactDOM = require('ReactDOM');
+      ReactDOMServer = require('ReactDOMServer');
+      ReactInstanceMap = require('ReactInstanceMap');
+      ReactComponentTreeHook = require('ReactComponentTreeHook');
+      ReactComponentTreeTestUtils = require('ReactComponentTreeTestUtils');
+    });
+
+    afterEach(() => {
+      global.Map = realMap;
+      global.Set = realSet;
+      Array.from = realArrayFrom;
+    });
+
+    it('works', () => {
+      class Qux extends React.Component {
+        render() {
+          return null;
+        }
+      }
+
+      function Foo() {
+        return {
+          render() {
+            return <Qux />;
+          },
+        };
+      }
+      function Bar({children}) {
+        return <h1>{children}</h1>;
+      }
+      class Baz extends React.Component {
+        render() {
+          return (
+            <div>
+              <Foo />
+              <Bar>
+                <span>Hi,</span>
+                Mom
+              </Bar>
+              <a href="#">Click me.</a>
+            </div>
+          );
+        }
+      }
+
+      var element = <Baz />;
+      var tree = {
+        displayName: 'Baz',
+        element,
+        children: [
+          {
+            displayName: 'div',
+            children: [
+              {
+                displayName: 'Foo',
+                element: <Foo />,
+                children: [
+                  {
+                    displayName: 'Qux',
+                    element: <Qux />,
+                    children: [],
+                  },
+                ],
+              },
+              {
+                displayName: 'Bar',
+                children: [
+                  {
+                    displayName: 'h1',
+                    children: [
+                      {
+                        displayName: 'span',
+                        children: [
+                          {
+                            displayName: '#text',
+                            element: 'Hi,',
+                            text: 'Hi,',
+                          },
+                        ],
+                      },
+                      {
+                        displayName: '#text',
+                        text: 'Mom',
+                        element: 'Mom',
+                      },
+                    ],
+                  },
+                ],
+              },
+              {
+                displayName: 'a',
+                children: [
+                  {
+                    displayName: '#text',
+                    text: 'Click me.',
+                    element: 'Click me.',
+                  },
+                ],
+              },
+            ],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+  });
+});
diff --git a/src/renderers/shared/hooks/__tests__/ReactComponentTreeHook-test.native.js b/src/renderers/shared/hooks/__tests__/ReactComponentTreeHook-test.native.js
new file mode 100644
index 000000000..15cbde7b5
--- /dev/null
+++ b/src/renderers/shared/hooks/__tests__/ReactComponentTreeHook-test.native.js
@@ -0,0 +1,1985 @@
+/**
+ * Copyright 2016-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+describe('ReactComponentTreeHook', () => {
+  var PropTypes;
+  var React;
+  var ReactNative;
+  var ReactInstanceMap;
+  var ReactComponentTreeHook;
+  var ReactComponentTreeTestUtils;
+  var createReactNativeComponentClass;
+  var View;
+  var Image;
+  var Text;
+
+  beforeEach(() => {
+    jest.resetModuleRegistry();
+
+    PropTypes = require('prop-types');
+    React = require('React');
+    ReactNative = require('ReactNative');
+    ReactInstanceMap = require('ReactInstanceMap');
+    ReactComponentTreeHook = require('ReactComponentTreeHook');
+    ReactComponentTreeTestUtils = require('ReactComponentTreeTestUtils');
+    View = require('View');
+    createReactNativeComponentClass = require('createReactNativeComponentClass');
+    Image = createReactNativeComponentClass({
+      validAttributes: {},
+      uiViewClassName: 'Image',
+    });
+    var RCText = createReactNativeComponentClass({
+      validAttributes: {},
+      uiViewClassName: 'RCText',
+    });
+    Text = class extends React.Component {
+      static childContextTypes = {
+        isInAParentText: PropTypes.bool,
+      };
+
+      getChildContext() {
+        return {isInAParentText: true};
+      }
+
+      render() {
+        return <RCText {...this.props} />;
+      }
+    };
+  });
+
+  function assertTreeMatches(pairs, options) {
+    if (!Array.isArray(pairs[0])) {
+      pairs = [pairs];
+    }
+
+    var currentElement;
+    var rootInstance;
+
+    class Wrapper extends React.Component {
+      render() {
+        rootInstance = ReactInstanceMap.get(this);
+        return currentElement;
+      }
+    }
+
+    function expectWrapperTreeToEqual(expectedTree, andStayMounted) {
+      ReactComponentTreeTestUtils.expectTree(rootInstance._debugID, {
+        displayName: 'Wrapper',
+        children: expectedTree ? [expectedTree] : [],
+      });
+      var rootDisplayNames = ReactComponentTreeTestUtils.getRootDisplayNames();
+      var registeredDisplayNames = ReactComponentTreeTestUtils.getRegisteredDisplayNames();
+      if (!expectedTree) {
+        expect(rootDisplayNames).toEqual([]);
+        expect(registeredDisplayNames).toEqual([]);
+      } else if (andStayMounted) {
+        expect(rootDisplayNames).toContain('Wrapper');
+        expect(registeredDisplayNames).toContain('Wrapper');
+      }
+    }
+
+    // Mount once, render updates, then unmount.
+    // Ensure the tree is correct on every step.
+    pairs.forEach(([element, expectedTree]) => {
+      currentElement = element;
+
+      // Mount a new tree or update the existing tree.
+      ReactNative.render(<Wrapper />, 1);
+      expectWrapperTreeToEqual(expectedTree, true);
+
+      // Purging should have no effect
+      // on the tree we expect to see.
+      ReactComponentTreeHook.purgeUnmountedComponents();
+      expectWrapperTreeToEqual(expectedTree, true);
+    });
+
+    // Unmounting the root node should purge
+    // the whole subtree automatically.
+    ReactNative.unmountComponentAtNode(1);
+    expectWrapperTreeToEqual(null);
+
+    // Mount and unmount for every pair.
+    // Ensure the tree is correct on every step.
+    pairs.forEach(([element, expectedTree]) => {
+      currentElement = element;
+
+      // Mount a new tree.
+      ReactNative.render(<Wrapper />, 1);
+      expectWrapperTreeToEqual(expectedTree);
+
+      // Unmounting should clean it up.
+      ReactNative.unmountComponentAtNode(1);
+      expectWrapperTreeToEqual(null);
+    });
+  }
+
+  describe('mount', () => {
+    it('uses displayName or Unknown for classic components', () => {
+      class Foo extends React.Component {
+        render() {
+          return null;
+        }
+      }
+
+      Foo.displayName = 'Bar';
+
+      class Baz extends React.Component {
+        render() {
+          return null;
+        }
+      }
+
+      class Qux extends React.Component {
+        render() {
+          return null;
+        }
+      }
+
+      delete Qux.displayName;
+
+      var element = <View><Foo /><Baz /><Qux /></View>;
+      var tree = {
+        displayName: 'View',
+        element,
+        children: [
+          {
+            displayName: 'Bar',
+            children: [],
+          },
+          {
+            displayName: 'Baz',
+            children: [],
+          },
+          {
+            displayName: 'Unknown',
+            children: [],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('uses displayName, name, or ReactComponent for modern components', () => {
+      class Foo extends React.Component {
+        render() {
+          return null;
+        }
+      }
+      Foo.displayName = 'Bar';
+      class Baz extends React.Component {
+        render() {
+          return null;
+        }
+      }
+      class Qux extends React.Component {
+        render() {
+          return null;
+        }
+      }
+      delete Qux.name;
+
+      var element = <View><Foo /><Baz /><Qux /></View>;
+      var tree = {
+        displayName: 'View',
+        children: [
+          {
+            displayName: 'Bar',
+            children: [],
+          },
+          {
+            displayName: 'Baz',
+            children: [],
+          },
+          {
+            // Note: Ideally fallback name should be consistent (e.g. "Unknown")
+            displayName: 'ReactComponent',
+            children: [],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('uses displayName, name, or Object for factory components', () => {
+      function Foo() {
+        return {
+          render() {
+            return null;
+          },
+        };
+      }
+      Foo.displayName = 'Bar';
+      function Baz() {
+        return {
+          render() {
+            return null;
+          },
+        };
+      }
+      function Qux() {
+        return {
+          render() {
+            return null;
+          },
+        };
+      }
+      delete Qux.name;
+
+      var element = <View><Foo /><Baz /><Qux /></View>;
+      var tree = {
+        displayName: 'View',
+        children: [
+          {
+            displayName: 'Bar',
+            children: [],
+          },
+          {
+            displayName: 'Baz',
+            children: [],
+          },
+          {
+            displayName: 'Unknown',
+            children: [],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('uses displayName, name, or StatelessComponent for functional components', () => {
+      function Foo() {
+        return null;
+      }
+      Foo.displayName = 'Bar';
+      function Baz() {
+        return null;
+      }
+      function Qux() {
+        return null;
+      }
+      delete Qux.name;
+
+      var element = <View><Foo /><Baz /><Qux /></View>;
+      var tree = {
+        displayName: 'View',
+        children: [
+          {
+            displayName: 'Bar',
+            children: [],
+          },
+          {
+            displayName: 'Baz',
+            children: [],
+          },
+          {
+            displayName: 'Unknown',
+            children: [],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('reports a host tree correctly', () => {
+      var element = (
+        <View>
+          <View>
+            <Text>
+              Hi!
+            </Text>
+          </View>
+          <Image />
+        </View>
+      );
+      var tree = {
+        displayName: 'View',
+        element,
+        children: [
+          {
+            displayName: 'View',
+            children: [
+              {
+                displayName: 'Text',
+                children: [
+                  {
+                    displayName: 'RCText',
+                    children: [
+                      {
+                        displayName: '#text',
+                        element: 'Hi!',
+                        text: 'Hi!',
+                      },
+                    ],
+                  },
+                ],
+              },
+            ],
+          },
+          {
+            displayName: 'Image',
+            element: <Image />,
+            children: [],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('reports a simple tree with composites correctly', () => {
+      class Foo extends React.Component {
+        render() {
+          return <Image />;
+        }
+      }
+
+      var element = <Foo />;
+      var tree = {
+        displayName: 'Foo',
+        element,
+        children: [
+          {
+            displayName: 'Image',
+            element: <Image />,
+            children: [],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('reports a tree with composites correctly', () => {
+      class Qux extends React.Component {
+        render() {
+          return null;
+        }
+      }
+
+      function Foo() {
+        return {
+          render() {
+            return <Qux />;
+          },
+        };
+      }
+      function Bar({children}) {
+        return <View>{children}</View>;
+      }
+      class Baz extends React.Component {
+        render() {
+          return (
+            <View>
+              <Foo />
+              <Bar>
+                <Text>Hi,</Text>
+              </Bar>
+              <Image />
+            </View>
+          );
+        }
+      }
+
+      var element = <Baz />;
+      var tree = {
+        displayName: 'Baz',
+        element,
+        children: [
+          {
+            displayName: 'View',
+            children: [
+              {
+                displayName: 'Foo',
+                element: <Foo />,
+                children: [
+                  {
+                    displayName: 'Qux',
+                    element: <Qux />,
+                    children: [],
+                  },
+                ],
+              },
+              {
+                displayName: 'Bar',
+                children: [
+                  {
+                    displayName: 'View',
+                    children: [
+                      {
+                        displayName: 'Text',
+                        children: [
+                          {
+                            displayName: 'RCText',
+                            children: [
+                              {
+                                displayName: '#text',
+                                element: 'Hi,',
+                                text: 'Hi,',
+                              },
+                            ],
+                          },
+                        ],
+                      },
+                    ],
+                  },
+                ],
+              },
+              {
+                displayName: 'Image',
+                element: <Image />,
+                children: [],
+              },
+            ],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('ignores null children', () => {
+      class Foo extends React.Component {
+        render() {
+          return null;
+        }
+      }
+      var element = <Foo />;
+      var tree = {
+        displayName: 'Foo',
+        children: [],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('ignores false children', () => {
+      class Foo extends React.Component {
+        render() {
+          return false;
+        }
+      }
+      var element = <Foo />;
+      var tree = {
+        displayName: 'Foo',
+        children: [],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('reports text nodes as children', () => {
+      var element = <Text>{'1'}{2}</Text>;
+      var tree = {
+        displayName: 'Text',
+        children: [
+          {
+            displayName: 'RCText',
+            children: [
+              {
+                displayName: '#text',
+                text: '1',
+              },
+              {
+                displayName: '#text',
+                text: '2',
+              },
+            ],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('reports a single text node as a child', () => {
+      var element = <Text>{'1'}</Text>;
+      var tree = {
+        displayName: 'Text',
+        children: [
+          {
+            displayName: 'RCText',
+            children: [
+              {
+                displayName: '#text',
+                text: '1',
+              },
+            ],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('reports a single number node as a child', () => {
+      var element = <Text>{42}</Text>;
+      var tree = {
+        displayName: 'Text',
+        children: [
+          {
+            displayName: 'RCText',
+            children: [
+              {
+                displayName: '#text',
+                text: '42',
+              },
+            ],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('reports a zero as a child', () => {
+      var element = <Text>{0}</Text>;
+      var tree = {
+        displayName: 'Text',
+        children: [
+          {
+            displayName: 'RCText',
+            children: [
+              {
+                displayName: '#text',
+                text: '0',
+              },
+            ],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+
+    it('skips empty nodes for multiple children', () => {
+      function Foo() {
+        return <Image />;
+      }
+      var element = (
+        <View>
+          {false}
+          <Foo />
+          {null}
+          <Foo />
+        </View>
+      );
+      var tree = {
+        displayName: 'View',
+        element,
+        children: [
+          {
+            displayName: 'Foo',
+            element: <Foo />,
+            children: [
+              {
+                displayName: 'Image',
+                element: <Image />,
+                children: [],
+              },
+            ],
+          },
+          {
+            displayName: 'Foo',
+            element: <Foo />,
+            children: [
+              {
+                displayName: 'Image',
+                element: <Image />,
+                children: [],
+              },
+            ],
+          },
+        ],
+      };
+      assertTreeMatches([element, tree]);
+    });
+  });
+
+  describe('update', () => {
+    describe('host component', () => {
+      it('updates text of a single text child', () => {
+        var elementBefore = <Text>Hi.</Text>;
+        var treeBefore = {
+          displayName: 'Text',
+          children: [
+            {
+              displayName: 'RCText',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Hi.',
+                },
+              ],
+            },
+          ],
+        };
+
+        var elementAfter = <Text>Bye.</Text>;
+        var treeAfter = {
+          displayName: 'Text',
+          children: [
+            {
+              displayName: 'RCText',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Bye.',
+                },
+              ],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from no children to a single text child', () => {
+        var elementBefore = <Text />;
+        var treeBefore = {
+          displayName: 'Text',
+          children: [
+            {
+              displayName: 'RCText',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Text>Hi.</Text>;
+        var treeAfter = {
+          displayName: 'Text',
+          children: [
+            {
+              displayName: 'RCText',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Hi.',
+                },
+              ],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a single text child to no children', () => {
+        var elementBefore = <Text>Hi.</Text>;
+        var treeBefore = {
+          displayName: 'Text',
+          children: [
+            {
+              displayName: 'RCText',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Hi.',
+                },
+              ],
+            },
+          ],
+        };
+
+        var elementAfter = <Text />;
+        var treeAfter = {
+          displayName: 'Text',
+          children: [
+            {
+              displayName: 'RCText',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from no children to multiple text children', () => {
+        var elementBefore = <Text />;
+        var treeBefore = {
+          displayName: 'Text',
+          children: [
+            {
+              displayName: 'RCText',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Text>{'Hi.'}{'Bye.'}</Text>;
+        var treeAfter = {
+          displayName: 'Text',
+          children: [
+            {
+              displayName: 'RCText',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Hi.',
+                },
+                {
+                  displayName: '#text',
+                  text: 'Bye.',
+                },
+              ],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from multiple text children to no children', () => {
+        var elementBefore = <Text>{'Hi.'}{'Bye.'}</Text>;
+        var treeBefore = {
+          displayName: 'Text',
+          children: [
+            {
+              displayName: 'RCText',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Hi.',
+                },
+                {
+                  displayName: '#text',
+                  text: 'Bye.',
+                },
+              ],
+            },
+          ],
+        };
+
+        var elementAfter = <Text />;
+        var treeAfter = {
+          displayName: 'Text',
+          children: [
+            {
+              displayName: 'RCText',
+              children: [],
+            },
+          ],
+        };
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from one text child to multiple text children', () => {
+        var elementBefore = <Text>Hi.</Text>;
+        var treeBefore = {
+          displayName: 'Text',
+          children: [
+            {
+              displayName: 'RCText',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Hi.',
+                },
+              ],
+            },
+          ],
+        };
+
+        var elementAfter = <Text>{'Hi.'}{'Bye.'}</Text>;
+        var treeAfter = {
+          displayName: 'Text',
+          children: [
+            {
+              displayName: 'RCText',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Hi.',
+                },
+                {
+                  displayName: '#text',
+                  text: 'Bye.',
+                },
+              ],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from multiple text children to one text child', () => {
+        var elementBefore = <Text>{'Hi.'}{'Bye.'}</Text>;
+        var treeBefore = {
+          displayName: 'Text',
+          children: [
+            {
+              displayName: 'RCText',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Hi.',
+                },
+                {
+                  displayName: '#text',
+                  text: 'Bye.',
+                },
+              ],
+            },
+          ],
+        };
+
+        var elementAfter = <Text>Hi.</Text>;
+        var treeAfter = {
+          displayName: 'Text',
+          children: [
+            {
+              displayName: 'RCText',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Hi.',
+                },
+              ],
+            },
+          ],
+        };
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates text nodes when reordering', () => {
+        var elementBefore = <Text>{'Hi.'}{'Bye.'}</Text>;
+        var treeBefore = {
+          displayName: 'Text',
+          children: [
+            {
+              displayName: 'RCText',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Hi.',
+                },
+                {
+                  displayName: '#text',
+                  text: 'Bye.',
+                },
+              ],
+            },
+          ],
+        };
+
+        var elementAfter = <Text>{'Bye.'}{'Hi.'}</Text>;
+        var treeAfter = {
+          displayName: 'Text',
+          children: [
+            {
+              displayName: 'RCText',
+              children: [
+                {
+                  displayName: '#text',
+                  text: 'Bye.',
+                },
+                {
+                  displayName: '#text',
+                  text: 'Hi.',
+                },
+              ],
+            },
+          ],
+        };
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates host nodes when reordering with keys', () => {
+        var elementBefore = (
+          <View>
+            <Text key="a">Hi.</Text>
+            <Text key="b">Bye.</Text>
+          </View>
+        );
+        var treeBefore = {
+          displayName: 'View',
+          children: [
+            {
+              displayName: 'Text',
+              children: [
+                {
+                  displayName: 'RCText',
+                  children: [
+                    {
+                      displayName: '#text',
+                      text: 'Hi.',
+                    },
+                  ],
+                },
+              ],
+            },
+            {
+              displayName: 'Text',
+              children: [
+                {
+                  displayName: 'RCText',
+                  children: [
+                    {
+                      displayName: '#text',
+                      text: 'Bye.',
+                    },
+                  ],
+                },
+              ],
+            },
+          ],
+        };
+
+        var elementAfter = (
+          <View>
+            <Text key="b">Bye.</Text>
+            <Text key="a">Hi.</Text>
+          </View>
+        );
+        var treeAfter = {
+          displayName: 'View',
+          children: [
+            {
+              displayName: 'Text',
+              children: [
+                {
+                  displayName: 'RCText',
+                  children: [
+                    {
+                      displayName: '#text',
+                      text: 'Bye.',
+                    },
+                  ],
+                },
+              ],
+            },
+            {
+              displayName: 'Text',
+              children: [
+                {
+                  displayName: 'RCText',
+                  children: [
+                    {
+                      displayName: '#text',
+                      text: 'Hi.',
+                    },
+                  ],
+                },
+              ],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates host nodes when reordering with keys', () => {
+        var elementBefore = (
+          <View>
+            <Text>Hi.</Text>
+            <Text>Bye.</Text>
+          </View>
+        );
+        var treeBefore = {
+          displayName: 'View',
+          children: [
+            {
+              displayName: 'Text',
+              children: [
+                {
+                  displayName: 'RCText',
+                  children: [
+                    {
+                      displayName: '#text',
+                      text: 'Hi.',
+                    },
+                  ],
+                },
+              ],
+            },
+            {
+              displayName: 'Text',
+              children: [
+                {
+                  displayName: 'RCText',
+                  children: [
+                    {
+                      displayName: '#text',
+                      text: 'Bye.',
+                    },
+                  ],
+                },
+              ],
+            },
+          ],
+        };
+
+        var elementAfter = (
+          <View>
+            <Text>Bye.</Text>
+            <Text>Hi.</Text>
+          </View>
+        );
+        var treeAfter = {
+          displayName: 'View',
+          children: [
+            {
+              displayName: 'Text',
+              children: [
+                {
+                  displayName: 'RCText',
+                  children: [
+                    {
+                      displayName: '#text',
+                      text: 'Bye.',
+                    },
+                  ],
+                },
+              ],
+            },
+            {
+              displayName: 'Text',
+              children: [
+                {
+                  displayName: 'RCText',
+                  children: [
+                    {
+                      displayName: '#text',
+                      text: 'Hi.',
+                    },
+                  ],
+                },
+              ],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates a single composite child of a different type', () => {
+        function Foo() {
+          return null;
+        }
+
+        function Bar() {
+          return null;
+        }
+
+        var elementBefore = <View><Foo /></View>;
+        var treeBefore = {
+          displayName: 'View',
+          children: [
+            {
+              displayName: 'Foo',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <View><Bar /></View>;
+        var treeAfter = {
+          displayName: 'View',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates a single composite child of the same type', () => {
+        function Foo({children}) {
+          return children;
+        }
+
+        var elementBefore = <View><Foo><View /></Foo></View>;
+        var treeBefore = {
+          displayName: 'View',
+          children: [
+            {
+              displayName: 'Foo',
+              children: [
+                {
+                  displayName: 'View',
+                  children: [],
+                },
+              ],
+            },
+          ],
+        };
+
+        var elementAfter = <View><Foo><Image /></Foo></View>;
+        var treeAfter = {
+          displayName: 'View',
+          children: [
+            {
+              displayName: 'Foo',
+              children: [
+                {
+                  displayName: 'Image',
+                  children: [],
+                },
+              ],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from no children to a single composite child', () => {
+        function Foo() {
+          return null;
+        }
+
+        var elementBefore = <View />;
+        var treeBefore = {
+          displayName: 'View',
+          children: [],
+        };
+
+        var elementAfter = <View><Foo /></View>;
+        var treeAfter = {
+          displayName: 'View',
+          children: [
+            {
+              displayName: 'Foo',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a single composite child to no children', () => {
+        function Foo() {
+          return null;
+        }
+
+        var elementBefore = <View><Foo /></View>;
+        var treeBefore = {
+          displayName: 'View',
+          children: [
+            {
+              displayName: 'Foo',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <View />;
+        var treeAfter = {
+          displayName: 'View',
+          children: [],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates mixed children', () => {
+        function Foo() {
+          return <View />;
+        }
+        var element1 = (
+          <View>
+            <Text>hi</Text>
+            {false}
+            <Text>{42}</Text>
+            {null}
+            <Foo />
+          </View>
+        );
+        var tree1 = {
+          displayName: 'View',
+          children: [
+            {
+              displayName: 'Text',
+              children: [
+                {
+                  displayName: 'RCText',
+                  children: [
+                    {
+                      displayName: '#text',
+                      text: 'hi',
+                    },
+                  ],
+                },
+              ],
+            },
+            {
+              displayName: 'Text',
+              children: [
+                {
+                  displayName: 'RCText',
+                  children: [
+                    {
+                      displayName: '#text',
+                      text: '42',
+                    },
+                  ],
+                },
+              ],
+            },
+            {
+              displayName: 'Foo',
+              children: [
+                {
+                  displayName: 'View',
+                  children: [],
+                },
+              ],
+            },
+          ],
+        };
+
+        var element2 = (
+          <View>
+            <Foo />
+            {false}
+            <Text>hi</Text>
+            {null}
+          </View>
+        );
+        var tree2 = {
+          displayName: 'View',
+          children: [
+            {
+              displayName: 'Foo',
+              children: [
+                {
+                  displayName: 'View',
+                  children: [],
+                },
+              ],
+            },
+            {
+              displayName: 'Text',
+              children: [
+                {
+                  displayName: 'RCText',
+                  children: [
+                    {
+                      displayName: '#text',
+                      text: 'hi',
+                    },
+                  ],
+                },
+              ],
+            },
+          ],
+        };
+
+        var element3 = (
+          <View>
+            <Foo />
+          </View>
+        );
+        var tree3 = {
+          displayName: 'View',
+          children: [
+            {
+              displayName: 'Foo',
+              children: [
+                {
+                  displayName: 'View',
+                  children: [],
+                },
+              ],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [element1, tree1],
+          [element2, tree2],
+          [element3, tree3],
+        ]);
+      });
+    });
+
+    describe('functional component', () => {
+      it('updates with a host child', () => {
+        function Foo({children}) {
+          return children;
+        }
+
+        var elementBefore = <Foo><View /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'View',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo><Image /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Image',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from null to a host child', () => {
+        function Foo({children}) {
+          return children;
+        }
+
+        var elementBefore = <Foo>{null}</Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [],
+        };
+
+        var elementAfter = <Foo><View /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'View',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a host child to null', () => {
+        function Foo({children}) {
+          return children;
+        }
+
+        var elementBefore = <Foo><View /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'View',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo>{null}</Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a host child to a composite child', () => {
+        function Bar() {
+          return null;
+        }
+
+        function Foo({children}) {
+          return children;
+        }
+
+        var elementBefore = <Foo><View /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'View',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo><Bar /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a composite child to a host child', () => {
+        function Bar() {
+          return null;
+        }
+
+        function Foo({children}) {
+          return children;
+        }
+
+        var elementBefore = <Foo><Bar /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo><View /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'View',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from null to a composite child', () => {
+        function Bar() {
+          return null;
+        }
+
+        function Foo({children}) {
+          return children;
+        }
+
+        var elementBefore = <Foo>{null}</Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [],
+        };
+
+        var elementAfter = <Foo><Bar /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a composite child to null', () => {
+        function Bar() {
+          return null;
+        }
+
+        function Foo({children}) {
+          return children;
+        }
+
+        var elementBefore = <Foo><Bar /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo>{null}</Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+    });
+
+    describe('class component', () => {
+      it('updates with a host child', () => {
+        class Foo extends React.Component {
+          render() {
+            return this.props.children;
+          }
+        }
+
+        var elementBefore = <Foo><View /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'View',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo><Image /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Image',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from null to a host child', () => {
+        class Foo extends React.Component {
+          render() {
+            return this.props.children;
+          }
+        }
+
+        var elementBefore = <Foo>{null}</Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [],
+        };
+
+        var elementAfter = <Foo><View /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'View',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a host child to null', () => {
+        class Foo extends React.Component {
+          render() {
+            return this.props.children;
+          }
+        }
+
+        var elementBefore = <Foo><View /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'View',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo>{null}</Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a host child to a composite child', () => {
+        class Bar extends React.Component {
+          render() {
+            return null;
+          }
+        }
+
+        class Foo extends React.Component {
+          render() {
+            return this.props.children;
+          }
+        }
+
+        var elementBefore = <Foo><View /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'View',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo><Bar /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a composite child to a host child', () => {
+        class Bar extends React.Component {
+          render() {
+            return null;
+          }
+        }
+
+        class Foo extends React.Component {
+          render() {
+            return this.props.children;
+          }
+        }
+
+        var elementBefore = <Foo><Bar /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo><View /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'View',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from null to a composite child', () => {
+        class Bar extends React.Component {
+          render() {
+            return null;
+          }
+        }
+
+        class Foo extends React.Component {
+          render() {
+            return this.props.children;
+          }
+        }
+
+        var elementBefore = <Foo>{null}</Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [],
+        };
+
+        var elementAfter = <Foo><Bar /></Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+
+      it('updates from a composite child to null', () => {
+        class Bar extends React.Component {
+          render() {
+            return null;
+          }
+        }
+
+        class Foo extends React.Component {
+          render() {
+            return this.props.children;
+          }
+        }
+
+        var elementBefore = <Foo><Bar /></Foo>;
+        var treeBefore = {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              children: [],
+            },
+          ],
+        };
+
+        var elementAfter = <Foo>{null}</Foo>;
+        var treeAfter = {
+          displayName: 'Foo',
+          children: [],
+        };
+
+        assertTreeMatches([
+          [elementBefore, treeBefore],
+          [elementAfter, treeAfter],
+        ]);
+      });
+    });
+  });
+
+  it('tracks owner correctly', () => {
+    class Foo extends React.Component {
+      render() {
+        return <Bar><Text>Hi.</Text></Bar>;
+      }
+    }
+    function Bar({children}) {
+      return <View>{children}<Text>Mom</Text></View>;
+    }
+
+    // Note that owner is not calculated for text nodes
+    // because they are not created from real elements.
+    var element = <View><Foo /></View>;
+    var tree = {
+      displayName: 'View',
+      children: [
+        {
+          displayName: 'Foo',
+          children: [
+            {
+              displayName: 'Bar',
+              ownerDisplayName: 'Foo',
+              children: [
+                {
+                  displayName: 'View',
+                  ownerDisplayName: 'Bar',
+                  children: [
+                    {
+                      displayName: 'Text',
+                      ownerDisplayName: 'Foo',
+                      children: [
+                        {
+                          displayName: 'RCText',
+                          ownerDisplayName: 'Text',
+                          children: [
+                            {
+                              displayName: '#text',
+                              text: 'Hi.',
+                            },
+                          ],
+                        },
+                      ],
+                    },
+                    {
+                      displayName: 'Text',
+                      ownerDisplayName: 'Bar',
+                      children: [
+                        {
+                          displayName: 'RCText',
+                          ownerDisplayName: 'Text',
+                          children: [
+                            {
+                              displayName: '#text',
+                              text: 'Mom',
+                            },
+                          ],
+                        },
+                      ],
+                    },
+                  ],
+                },
+              ],
+            },
+          ],
+        },
+      ],
+    };
+    assertTreeMatches([element, tree], {includeOwnerDisplayName: true});
+  });
+
+  it('purges unmounted components automatically', () => {
+    var renderBar = true;
+    var fooInstance;
+    var barInstance;
+
+    class Foo extends React.Component {
+      render() {
+        fooInstance = ReactInstanceMap.get(this);
+        return renderBar ? <Bar /> : null;
+      }
+    }
+
+    class Bar extends React.Component {
+      render() {
+        barInstance = ReactInstanceMap.get(this);
+        return null;
+      }
+    }
+
+    ReactNative.render(<Foo />, 1);
+    ReactComponentTreeTestUtils.expectTree(
+      barInstance._debugID,
+      {
+        displayName: 'Bar',
+        parentDisplayName: 'Foo',
+        parentID: fooInstance._debugID,
+        children: [],
+      },
+      'Foo',
+    );
+
+    renderBar = false;
+    ReactNative.render(<Foo />, 1);
+    ReactComponentTreeTestUtils.expectTree(
+      barInstance._debugID,
+      {
+        displayName: 'Unknown',
+        children: [],
+        parentID: null,
+      },
+      'Foo',
+    );
+
+    ReactNative.unmountComponentAtNode(1);
+    ReactComponentTreeTestUtils.expectTree(
+      barInstance._debugID,
+      {
+        displayName: 'Unknown',
+        children: [],
+        parentID: null,
+      },
+      'Foo',
+    );
+  });
+
+  it('reports update counts', () => {
+    ReactNative.render(<View />, 1);
+    var viewID = ReactComponentTreeHook.getRootIDs()[0];
+    expect(ReactComponentTreeHook.getUpdateCount(viewID)).toEqual(0);
+
+    ReactNative.render(<Image />, 1);
+    var imageID = ReactComponentTreeHook.getRootIDs()[0];
+    expect(ReactComponentTreeHook.getUpdateCount(viewID)).toEqual(0);
+    expect(ReactComponentTreeHook.getUpdateCount(imageID)).toEqual(0);
+
+    ReactNative.render(<Image />, 1);
+    expect(ReactComponentTreeHook.getUpdateCount(viewID)).toEqual(0);
+    expect(ReactComponentTreeHook.getUpdateCount(imageID)).toEqual(1);
+
+    ReactNative.render(<Image />, 1);
+    expect(ReactComponentTreeHook.getUpdateCount(viewID)).toEqual(0);
+    expect(ReactComponentTreeHook.getUpdateCount(imageID)).toEqual(2);
+
+    ReactNative.unmountComponentAtNode(1);
+    expect(ReactComponentTreeHook.getUpdateCount(viewID)).toEqual(0);
+    expect(ReactComponentTreeHook.getUpdateCount(imageID)).toEqual(0);
+  });
+
+  it('does not report top-level wrapper as a root', () => {
+    ReactNative.render(<View><Image /></View>, 1);
+    expect(ReactComponentTreeTestUtils.getRootDisplayNames()).toEqual(['View']);
+
+    ReactNative.render(<View><Text /></View>, 1);
+    expect(ReactComponentTreeTestUtils.getRootDisplayNames()).toEqual(['View']);
+
+    ReactNative.unmountComponentAtNode(1);
+    expect(ReactComponentTreeTestUtils.getRootDisplayNames()).toEqual([]);
+    expect(ReactComponentTreeTestUtils.getRegisteredDisplayNames()).toEqual([]);
+  });
+});
diff --git a/src/renderers/shared/hooks/__tests__/ReactHostOperationHistoryHook-test.js b/src/renderers/shared/hooks/__tests__/ReactHostOperationHistoryHook-test.js
new file mode 100644
index 000000000..87877916a
--- /dev/null
+++ b/src/renderers/shared/hooks/__tests__/ReactHostOperationHistoryHook-test.js
@@ -0,0 +1,831 @@
+/**
+ * Copyright 2016-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+describe('ReactHostOperationHistoryHook', () => {
+  var React;
+  var ReactPerf;
+  var ReactDOM;
+  var ReactDOMComponentTree;
+  var ReactDOMFeatureFlags;
+  var ReactHostOperationHistoryHook;
+
+  beforeEach(() => {
+    jest.resetModuleRegistry();
+
+    React = require('React');
+    ReactPerf = require('ReactPerf');
+    ReactDOM = require('ReactDOM');
+    ReactDOMComponentTree = require('ReactDOMComponentTree');
+    ReactDOMFeatureFlags = require('ReactDOMFeatureFlags');
+    ReactHostOperationHistoryHook = require('ReactHostOperationHistoryHook');
+
+    ReactPerf.start();
+  });
+
+  afterEach(() => {
+    ReactPerf.stop();
+  });
+
+  function assertHistoryMatches(expectedHistory) {
+    var actualHistory = ReactHostOperationHistoryHook.getHistory();
+    expect(actualHistory).toEqual(expectedHistory);
+  }
+
+  describe('mount', () => {
+    it('gets recorded for host roots', () => {
+      var node = document.createElement('div');
+      ReactHostOperationHistoryHook._preventClearing = true;
+      ReactDOM.render(<div><p>Hi.</p></div>, node);
+
+      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+      assertHistoryMatches([
+        {
+          instanceID: inst._debugID,
+          type: 'mount',
+          payload: ReactDOMFeatureFlags.useCreateElement
+            ? 'DIV'
+            : '<div data-reactroot="" data-reactid="1"><p data-reactid="2">Hi.</p></div>',
+        },
+      ]);
+    });
+
+    it('gets recorded for composite roots', () => {
+      function Foo() {
+        return <div><p>Hi.</p></div>;
+      }
+      var node = document.createElement('div');
+
+      ReactHostOperationHistoryHook._preventClearing = true;
+      ReactDOM.render(<Foo />, node);
+
+      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+      assertHistoryMatches([
+        {
+          instanceID: inst._debugID,
+          type: 'mount',
+          payload: ReactDOMFeatureFlags.useCreateElement
+            ? 'DIV'
+            : '<div data-reactroot="" data-reactid="1">' +
+                '<p data-reactid="2">Hi.</p></div>',
+        },
+      ]);
+    });
+
+    it('gets ignored for composite roots that return null', () => {
+      function Foo() {
+        return null;
+      }
+      var node = document.createElement('div');
+
+      ReactHostOperationHistoryHook._preventClearing = true;
+      ReactDOM.render(<Foo />, node);
+
+      // Empty DOM components should be invisible to hooks.
+      assertHistoryMatches([]);
+    });
+
+    it('gets recorded when a native is mounted deeply instead of null', () => {
+      var element;
+      function Foo() {
+        return element;
+      }
+
+      ReactHostOperationHistoryHook._preventClearing = true;
+
+      var node = document.createElement('div');
+      element = null;
+      ReactDOM.render(<Foo />, node);
+
+      element = <span />;
+      ReactDOM.render(<Foo />, node);
+      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+
+      // Since empty components should be invisible to hooks,
+      // we record a "mount" event rather than a "replace with".
+      assertHistoryMatches([
+        {
+          instanceID: inst._debugID,
+          type: 'mount',
+          payload: 'SPAN',
+        },
+      ]);
+    });
+  });
+
+  describe('update styles', () => {
+    it('gets recorded during mount', () => {
+      var node = document.createElement('div');
+
+      ReactHostOperationHistoryHook._preventClearing = true;
+      ReactDOM.render(
+        <div
+          style={{
+            color: 'red',
+            backgroundColor: 'yellow',
+          }}
+        />,
+        node,
+      );
+
+      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+      if (ReactDOMFeatureFlags.useCreateElement) {
+        assertHistoryMatches([
+          {
+            instanceID: inst._debugID,
+            type: 'update styles',
+            payload: {
+              color: 'red',
+              backgroundColor: 'yellow',
+            },
+          },
+          {
+            instanceID: inst._debugID,
+            type: 'mount',
+            payload: 'DIV',
+          },
+        ]);
+      } else {
+        assertHistoryMatches([
+          {
+            instanceID: inst._debugID,
+            type: 'mount',
+            payload:
+              '<div style="color:red;background-color:yellow;" ' +
+                'data-reactroot="" data-reactid="1"></div>',
+          },
+        ]);
+      }
+    });
+
+    it('gets recorded during an update', () => {
+      var node = document.createElement('div');
+      ReactDOM.render(<div />, node);
+      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+
+      ReactHostOperationHistoryHook._preventClearing = true;
+      ReactDOM.render(<div style={{color: 'red'}} />, node);
+      ReactDOM.render(
+        <div
+          style={{
+            color: 'blue',
+            backgroundColor: 'yellow',
+          }}
+        />,
+        node,
+      );
+      ReactDOM.render(<div style={{backgroundColor: 'green'}} />, node);
+      ReactDOM.render(<div />, node);
+
+      assertHistoryMatches([
+        {
+          instanceID: inst._debugID,
+          type: 'update styles',
+          payload: {color: 'red'},
+        },
+        {
+          instanceID: inst._debugID,
+          type: 'update styles',
+          payload: {color: 'blue', backgroundColor: 'yellow'},
+        },
+        {
+          instanceID: inst._debugID,
+          type: 'update styles',
+          payload: {color: '', backgroundColor: 'green'},
+        },
+        {
+          instanceID: inst._debugID,
+          type: 'update styles',
+          payload: {backgroundColor: ''},
+        },
+      ]);
+    });
+
+    it('gets ignored if the styles are shallowly equal', () => {
+      var node = document.createElement('div');
+      ReactDOM.render(<div />, node);
+      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+
+      ReactHostOperationHistoryHook._preventClearing = true;
+      ReactDOM.render(
+        <div
+          style={{
+            color: 'red',
+            backgroundColor: 'yellow',
+          }}
+        />,
+        node,
+      );
+      ReactDOM.render(
+        <div
+          style={{
+            color: 'red',
+            backgroundColor: 'yellow',
+          }}
+        />,
+        node,
+      );
+
+      assertHistoryMatches([
+        {
+          instanceID: inst._debugID,
+          type: 'update styles',
+          payload: {
+            color: 'red',
+            backgroundColor: 'yellow',
+          },
+        },
+      ]);
+    });
+  });
+
+  describe('update attribute', () => {
+    describe('simple attribute', () => {
+      it('gets recorded during mount', () => {
+        var node = document.createElement('div');
+
+        ReactHostOperationHistoryHook._preventClearing = true;
+        ReactDOM.render(<div className="rad" tabIndex={42} />, node);
+
+        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+        if (ReactDOMFeatureFlags.useCreateElement) {
+          assertHistoryMatches([
+            {
+              instanceID: inst._debugID,
+              type: 'update attribute',
+              payload: {className: 'rad'},
+            },
+            {
+              instanceID: inst._debugID,
+              type: 'update attribute',
+              payload: {tabIndex: 42},
+            },
+            {
+              instanceID: inst._debugID,
+              type: 'mount',
+              payload: 'DIV',
+            },
+          ]);
+        } else {
+          assertHistoryMatches([
+            {
+              instanceID: inst._debugID,
+              type: 'mount',
+              payload:
+                '<div class="rad" tabindex="42" data-reactroot="" ' +
+                  'data-reactid="1"></div>',
+            },
+          ]);
+        }
+      });
+
+      it('gets recorded during an update', () => {
+        var node = document.createElement('div');
+        ReactDOM.render(<div />, node);
+        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+
+        ReactHostOperationHistoryHook._preventClearing = true;
+        ReactDOM.render(<div className="rad" />, node);
+        ReactDOM.render(<div className="mad" tabIndex={42} />, node);
+        ReactDOM.render(<div tabIndex={43} />, node);
+
+        assertHistoryMatches([
+          {
+            instanceID: inst._debugID,
+            type: 'update attribute',
+            payload: {className: 'rad'},
+          },
+          {
+            instanceID: inst._debugID,
+            type: 'update attribute',
+            payload: {className: 'mad'},
+          },
+          {
+            instanceID: inst._debugID,
+            type: 'update attribute',
+            payload: {tabIndex: 42},
+          },
+          {
+            instanceID: inst._debugID,
+            type: 'remove attribute',
+            payload: 'className',
+          },
+          {
+            instanceID: inst._debugID,
+            type: 'update attribute',
+            payload: {tabIndex: 43},
+          },
+        ]);
+      });
+    });
+
+    describe('attribute that gets removed with certain values', () => {
+      it('gets recorded as a removal during an update', () => {
+        var node = document.createElement('div');
+        ReactDOM.render(<div />, node);
+        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+
+        ReactHostOperationHistoryHook._preventClearing = true;
+        ReactDOM.render(<div disabled={true} />, node);
+        ReactDOM.render(<div disabled={false} />, node);
+
+        assertHistoryMatches([
+          {
+            instanceID: inst._debugID,
+            type: 'update attribute',
+            payload: {disabled: true},
+          },
+          {
+            instanceID: inst._debugID,
+            type: 'remove attribute',
+            payload: 'disabled',
+          },
+        ]);
+      });
+    });
+
+    describe('custom attribute', () => {
+      it('gets recorded during mount', () => {
+        var node = document.createElement('div');
+
+        ReactHostOperationHistoryHook._preventClearing = true;
+        ReactDOM.render(<div data-x="rad" data-y={42} />, node);
+
+        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+        if (ReactDOMFeatureFlags.useCreateElement) {
+          assertHistoryMatches([
+            {
+              instanceID: inst._debugID,
+              type: 'update attribute',
+              payload: {'data-x': 'rad'},
+            },
+            {
+              instanceID: inst._debugID,
+              type: 'update attribute',
+              payload: {'data-y': 42},
+            },
+            {
+              instanceID: inst._debugID,
+              type: 'mount',
+              payload: 'DIV',
+            },
+          ]);
+        } else {
+          assertHistoryMatches([
+            {
+              instanceID: inst._debugID,
+              type: 'mount',
+              payload:
+                '<div data-x="rad" data-y="42" data-reactroot="" ' +
+                  'data-reactid="1"></div>',
+            },
+          ]);
+        }
+      });
+
+      it('gets recorded during an update', () => {
+        var node = document.createElement('div');
+        ReactDOM.render(<div />, node);
+        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+
+        ReactHostOperationHistoryHook._preventClearing = true;
+        ReactDOM.render(<div data-x="rad" />, node);
+        ReactDOM.render(<div data-x="mad" data-y={42} />, node);
+        ReactDOM.render(<div data-y={43} />, node);
+
+        assertHistoryMatches([
+          {
+            instanceID: inst._debugID,
+            type: 'update attribute',
+            payload: {'data-x': 'rad'},
+          },
+          {
+            instanceID: inst._debugID,
+            type: 'update attribute',
+            payload: {'data-x': 'mad'},
+          },
+          {
+            instanceID: inst._debugID,
+            type: 'update attribute',
+            payload: {'data-y': 42},
+          },
+          {
+            instanceID: inst._debugID,
+            type: 'remove attribute',
+            payload: 'data-x',
+          },
+          {
+            instanceID: inst._debugID,
+            type: 'update attribute',
+            payload: {'data-y': 43},
+          },
+        ]);
+      });
+    });
+
+    describe('attribute on a web component', () => {
+      it('gets recorded during mount', () => {
+        var node = document.createElement('div');
+
+        ReactHostOperationHistoryHook._preventClearing = true;
+        ReactDOM.render(<my-component className="rad" tabIndex={42} />, node);
+
+        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+        if (ReactDOMFeatureFlags.useCreateElement) {
+          assertHistoryMatches([
+            {
+              instanceID: inst._debugID,
+              type: 'update attribute',
+              payload: {className: 'rad'},
+            },
+            {
+              instanceID: inst._debugID,
+              type: 'update attribute',
+              payload: {tabIndex: 42},
+            },
+            {
+              instanceID: inst._debugID,
+              type: 'mount',
+              payload: 'MY-COMPONENT',
+            },
+          ]);
+        } else {
+          assertHistoryMatches([
+            {
+              instanceID: inst._debugID,
+              type: 'mount',
+              payload:
+                '<my-component className="rad" tabIndex="42" ' +
+                  'data-reactroot="" data-reactid="1"></my-component>',
+            },
+          ]);
+        }
+      });
+
+      it('gets recorded during an update', () => {
+        var node = document.createElement('div');
+        ReactDOM.render(<my-component />, node);
+        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+
+        ReactHostOperationHistoryHook._preventClearing = true;
+        ReactDOM.render(<my-component className="rad" />, node);
+        ReactDOM.render(<my-component className="mad" tabIndex={42} />, node);
+        ReactDOM.render(<my-component tabIndex={43} />, node);
+
+        assertHistoryMatches([
+          {
+            instanceID: inst._debugID,
+            type: 'update attribute',
+            payload: {className: 'rad'},
+          },
+          {
+            instanceID: inst._debugID,
+            type: 'update attribute',
+            payload: {className: 'mad'},
+          },
+          {
+            instanceID: inst._debugID,
+            type: 'update attribute',
+            payload: {tabIndex: 42},
+          },
+          {
+            instanceID: inst._debugID,
+            type: 'remove attribute',
+            payload: 'className',
+          },
+          {
+            instanceID: inst._debugID,
+            type: 'update attribute',
+            payload: {tabIndex: 43},
+          },
+        ]);
+      });
+    });
+  });
+
+  describe('replace text', () => {
+    describe('text content', () => {
+      it('gets recorded during an update from text content', () => {
+        var node = document.createElement('div');
+        ReactDOM.render(<div>Hi.</div>, node);
+        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+
+        ReactHostOperationHistoryHook._preventClearing = true;
+        ReactDOM.render(<div>Bye.</div>, node);
+
+        assertHistoryMatches([
+          {
+            instanceID: inst._debugID,
+            type: 'replace text',
+            payload: 'Bye.',
+          },
+        ]);
+      });
+
+      it('gets recorded during an update from html', () => {
+        var node = document.createElement('div');
+        ReactDOM.render(
+          <div dangerouslySetInnerHTML={{__html: 'Hi.'}} />,
+          node,
+        );
+        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+
+        ReactHostOperationHistoryHook._preventClearing = true;
+        ReactDOM.render(<div>Bye.</div>, node);
+
+        assertHistoryMatches([
+          {
+            instanceID: inst._debugID,
+            type: 'replace text',
+            payload: 'Bye.',
+          },
+        ]);
+      });
+
+      it('gets recorded during an update from children', () => {
+        var node = document.createElement('div');
+        ReactDOM.render(<div><span /><p /></div>, node);
+        var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+
+        ReactHostOperationHistoryHook._preventClearing = true;
+        ReactDOM.render(<div>Bye.</div>, node);
+
+        assertHistoryMatches([
+          {
+            instanceID: inst._debugID,
+            type: 'remove child',
+            payload: {fromIndex: 0},
+          },
+          {
+            instanceID: inst._debugID,
+            type: 'remove child',
+            payload: {fromIndex: 1},
+          },
+          {
+            instanceID: inst._debugID,
+            type: 'replace text',
+            payload: 'Bye.',
+          },
+        ]);
+      });
+
+      it('gets ignored if new text is equal', () => {
+        var node = document.createElement('div');
+        ReactDOM.render(<div>Hi.</div>, node);
+
+        ReactHostOperationHistoryHook._preventClearing = true;
+        ReactDOM.render(<div>Hi.</div>, node);
+
+        assertHistoryMatches([]);
+      });
+    });
+
+    describe('text node', () => {
+      it('gets recorded during an update', () => {
+        var node = document.createElement('div');
+        ReactDOM.render(<div>{'Hi.'}{42}</div>, node);
+        var inst1 = ReactDOMComponentTree.getInstanceFromNode(
+          node.firstChild.childNodes[0],
+        );
+        var inst2 = ReactDOMComponentTree.getInstanceFromNode(
+          node.firstChild.childNodes[3],
+        );
+
+        ReactHostOperationHistoryHook._preventClearing = true;
+        ReactDOM.render(<div>{'Bye.'}{43}</div>, node);
+
+        assertHistoryMatches([
+          {
+            instanceID: inst1._debugID,
+            type: 'replace text',
+            payload: 'Bye.',
+          },
+          {
+            instanceID: inst2._debugID,
+            type: 'replace text',
+            payload: '43',
+          },
+        ]);
+      });
+
+      it('gets ignored if new text is equal', () => {
+        var node = document.createElement('div');
+        ReactDOM.render(<div>{'Hi.'}{42}</div>, node);
+
+        ReactHostOperationHistoryHook._preventClearing = true;
+        ReactDOM.render(<div>{'Hi.'}{42}</div>, node);
+
+        assertHistoryMatches([]);
+      });
+    });
+  });
+
+  describe('replace with', () => {
+    it('gets recorded when composite renders to a different type', () => {
+      var element;
+      function Foo() {
+        return element;
+      }
+
+      var node = document.createElement('div');
+      element = <div />;
+      ReactDOM.render(<Foo />, node);
+      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+
+      element = <span />;
+
+      ReactHostOperationHistoryHook._preventClearing = true;
+      ReactDOM.render(<Foo />, node);
+
+      assertHistoryMatches([
+        {
+          instanceID: inst._debugID,
+          type: 'replace with',
+          payload: 'SPAN',
+        },
+      ]);
+    });
+
+    it('gets recorded when composite renders to null after a native', () => {
+      var element;
+      function Foo() {
+        return element;
+      }
+
+      var node = document.createElement('div');
+      element = <span />;
+      ReactDOM.render(<Foo />, node);
+
+      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+      element = null;
+
+      ReactHostOperationHistoryHook._preventClearing = true;
+      ReactDOM.render(<Foo />, node);
+
+      assertHistoryMatches([
+        {
+          instanceID: inst._debugID,
+          type: 'replace with',
+          payload: '#comment',
+        },
+      ]);
+    });
+
+    it('gets ignored if the type has not changed', () => {
+      var element;
+      function Foo() {
+        return element;
+      }
+
+      var node = document.createElement('div');
+      element = <div />;
+      ReactDOM.render(<Foo />, node);
+
+      element = <div />;
+
+      ReactHostOperationHistoryHook._preventClearing = true;
+      ReactDOM.render(<Foo />, node);
+
+      assertHistoryMatches([]);
+    });
+  });
+
+  describe('replace children', () => {
+    it('gets recorded during an update from text content', () => {
+      var node = document.createElement('div');
+      ReactDOM.render(<div>Hi.</div>, node);
+      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+
+      ReactHostOperationHistoryHook._preventClearing = true;
+      ReactDOM.render(<div dangerouslySetInnerHTML={{__html: 'Bye.'}} />, node);
+
+      assertHistoryMatches([
+        {
+          instanceID: inst._debugID,
+          type: 'replace children',
+          payload: 'Bye.',
+        },
+      ]);
+    });
+
+    it('gets recorded during an update from html', () => {
+      var node = document.createElement('div');
+      ReactDOM.render(<div dangerouslySetInnerHTML={{__html: 'Hi.'}} />, node);
+      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+
+      ReactHostOperationHistoryHook._preventClearing = true;
+      ReactDOM.render(<div dangerouslySetInnerHTML={{__html: 'Bye.'}} />, node);
+
+      assertHistoryMatches([
+        {
+          instanceID: inst._debugID,
+          type: 'replace children',
+          payload: 'Bye.',
+        },
+      ]);
+    });
+
+    it('gets recorded during an update from children', () => {
+      var node = document.createElement('div');
+      ReactDOM.render(<div><span /><p /></div>, node);
+      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+
+      ReactHostOperationHistoryHook._preventClearing = true;
+      ReactDOM.render(<div dangerouslySetInnerHTML={{__html: 'Hi.'}} />, node);
+
+      assertHistoryMatches([
+        {
+          instanceID: inst._debugID,
+          type: 'remove child',
+          payload: {fromIndex: 0},
+        },
+        {
+          instanceID: inst._debugID,
+          type: 'remove child',
+          payload: {fromIndex: 1},
+        },
+        {
+          instanceID: inst._debugID,
+          type: 'replace children',
+          payload: 'Hi.',
+        },
+      ]);
+    });
+
+    it('gets ignored if new html is equal', () => {
+      var node = document.createElement('div');
+      ReactDOM.render(<div dangerouslySetInnerHTML={{__html: 'Hi.'}} />, node);
+
+      ReactHostOperationHistoryHook._preventClearing = true;
+      ReactDOM.render(<div dangerouslySetInnerHTML={{__html: 'Hi.'}} />, node);
+
+      assertHistoryMatches([]);
+    });
+  });
+
+  describe('insert child', () => {
+    it('gets reported when a child is inserted', () => {
+      var node = document.createElement('div');
+      ReactDOM.render(<div><span /></div>, node);
+      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+
+      ReactHostOperationHistoryHook._preventClearing = true;
+      ReactDOM.render(<div><span /><p /></div>, node);
+
+      assertHistoryMatches([
+        {
+          instanceID: inst._debugID,
+          type: 'insert child',
+          payload: {toIndex: 1, content: 'P'},
+        },
+      ]);
+    });
+  });
+
+  describe('move child', () => {
+    it('gets reported when a child is inserted', () => {
+      var node = document.createElement('div');
+      ReactDOM.render(<div><span key="a" /><p key="b" /></div>, node);
+      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+
+      ReactHostOperationHistoryHook._preventClearing = true;
+      ReactDOM.render(<div><p key="b" /><span key="a" /></div>, node);
+
+      assertHistoryMatches([
+        {
+          instanceID: inst._debugID,
+          type: 'move child',
+          payload: {fromIndex: 0, toIndex: 1},
+        },
+      ]);
+    });
+  });
+
+  describe('remove child', () => {
+    it('gets reported when a child is removed', () => {
+      var node = document.createElement('div');
+      ReactDOM.render(<div><span key="a" /><p key="b" /></div>, node);
+      var inst = ReactDOMComponentTree.getInstanceFromNode(node.firstChild);
+
+      ReactHostOperationHistoryHook._preventClearing = true;
+      ReactDOM.render(<div><span key="a" /></div>, node);
+
+      assertHistoryMatches([
+        {
+          instanceID: inst._debugID,
+          type: 'remove child',
+          payload: {fromIndex: 1},
+        },
+      ]);
+    });
+  });
+});
diff --git a/src/renderers/shared/reconciler/ReactInstanceHandles.js b/src/renderers/shared/reconciler/ReactInstanceHandles.js
deleted file mode 100644
index 11d4a3eea..000000000
--- a/src/renderers/shared/reconciler/ReactInstanceHandles.js
+++ /dev/null
@@ -1,337 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @providesModule ReactInstanceHandles
- */
-
-'use strict';
-
-var invariant = require('invariant');
-
-var SEPARATOR = '.';
-var SEPARATOR_LENGTH = SEPARATOR.length;
-
-/**
- * Maximum depth of traversals before we consider the possibility of a bad ID.
- */
-var MAX_TREE_DEPTH = 10000;
-
-/**
- * Creates a DOM ID prefix to use when mounting React components.
- *
- * @param {number} index A unique integer
- * @return {string} React root ID.
- * @internal
- */
-function getReactRootIDString(index) {
-  return SEPARATOR + index.toString(36);
-}
-
-/**
- * Checks if a character in the supplied ID is a separator or the end.
- *
- * @param {string} id A React DOM ID.
- * @param {number} index Index of the character to check.
- * @return {boolean} True if the character is a separator or end of the ID.
- * @private
- */
-function isBoundary(id, index) {
-  return id.charAt(index) === SEPARATOR || index === id.length;
-}
-
-/**
- * Checks if the supplied string is a valid React DOM ID.
- *
- * @param {string} id A React DOM ID, maybe.
- * @return {boolean} True if the string is a valid React DOM ID.
- * @private
- */
-function isValidID(id) {
-  return id === '' || (
-    id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR
-  );
-}
-
-/**
- * Checks if the first ID is an ancestor of or equal to the second ID.
- *
- * @param {string} ancestorID
- * @param {string} descendantID
- * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
- * @internal
- */
-function isAncestorIDOf(ancestorID, descendantID) {
-  return (
-    descendantID.indexOf(ancestorID) === 0 &&
-    isBoundary(descendantID, ancestorID.length)
-  );
-}
-
-/**
- * Gets the parent ID of the supplied React DOM ID, `id`.
- *
- * @param {string} id ID of a component.
- * @return {string} ID of the parent, or an empty string.
- * @private
- */
-function getParentID(id) {
-  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
-}
-
-/**
- * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
- * supplied `destinationID`. If they are equal, the ID is returned.
- *
- * @param {string} ancestorID ID of an ancestor node of `destinationID`.
- * @param {string} destinationID ID of the destination node.
- * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
- * @private
- */
-function getNextDescendantID(ancestorID, destinationID) {
-  invariant(
-    isValidID(ancestorID) && isValidID(destinationID),
-    'getNextDescendantID(%s, %s): Received an invalid React DOM ID.',
-    ancestorID,
-    destinationID
-  );
-  invariant(
-    isAncestorIDOf(ancestorID, destinationID),
-    'getNextDescendantID(...): React has made an invalid assumption about ' +
-    'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.',
-    ancestorID,
-    destinationID
-  );
-  if (ancestorID === destinationID) {
-    return ancestorID;
-  }
-  // Skip over the ancestor and the immediate separator. Traverse until we hit
-  // another separator or we reach the end of `destinationID`.
-  var start = ancestorID.length + SEPARATOR_LENGTH;
-  var i;
-  for (i = start; i < destinationID.length; i++) {
-    if (isBoundary(destinationID, i)) {
-      break;
-    }
-  }
-  return destinationID.substr(0, i);
-}
-
-/**
- * Gets the nearest common ancestor ID of two IDs.
- *
- * Using this ID scheme, the nearest common ancestor ID is the longest common
- * prefix of the two IDs that immediately preceded a "marker" in both strings.
- *
- * @param {string} oneID
- * @param {string} twoID
- * @return {string} Nearest common ancestor ID, or the empty string if none.
- * @private
- */
-function getFirstCommonAncestorID(oneID, twoID) {
-  var minLength = Math.min(oneID.length, twoID.length);
-  if (minLength === 0) {
-    return '';
-  }
-  var lastCommonMarkerIndex = 0;
-  // Use `<=` to traverse until the "EOL" of the shorter string.
-  for (var i = 0; i <= minLength; i++) {
-    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
-      lastCommonMarkerIndex = i;
-    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
-      break;
-    }
-  }
-  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
-  invariant(
-    isValidID(longestCommonID),
-    'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s',
-    oneID,
-    twoID,
-    longestCommonID
-  );
-  return longestCommonID;
-}
-
-/**
- * Traverses the parent path between two IDs (either up or down). The IDs must
- * not be the same, and there must exist a parent path between them. If the
- * callback returns `false`, traversal is stopped.
- *
- * @param {?string} start ID at which to start traversal.
- * @param {?string} stop ID at which to end traversal.
- * @param {function} cb Callback to invoke each ID with.
- * @param {*} arg Argument to invoke the callback with.
- * @param {?boolean} skipFirst Whether or not to skip the first node.
- * @param {?boolean} skipLast Whether or not to skip the last node.
- * @private
- */
-function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
-  start = start || '';
-  stop = stop || '';
-  invariant(
-    start !== stop,
-    'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.',
-    start
-  );
-  var traverseUp = isAncestorIDOf(stop, start);
-  invariant(
-    traverseUp || isAncestorIDOf(start, stop),
-    'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' +
-    'not have a parent path.',
-    start,
-    stop
-  );
-  // Traverse from `start` to `stop` one depth at a time.
-  var depth = 0;
-  var traverse = traverseUp ? getParentID : getNextDescendantID;
-  for (var id = start; /* until break */; id = traverse(id, stop)) {
-    var ret;
-    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
-      ret = cb(id, traverseUp, arg);
-    }
-    if (ret === false || id === stop) {
-      // Only break //after// visiting `stop`.
-      break;
-    }
-    invariant(
-      depth++ < MAX_TREE_DEPTH,
-      'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' +
-      'traversing the React DOM ID tree. This may be due to malformed IDs: %s',
-      start, stop, id
-    );
-  }
-}
-
-/**
- * Manages the IDs assigned to DOM representations of React components. This
- * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
- * order to simulate events).
- *
- * @internal
- */
-var ReactInstanceHandles = {
-
-  /**
-   * Constructs a React root ID
-   * @param {number} index A unique integer
-   * @return {string} A React root ID.
-   */
-  createReactRootID: function(index) {
-    return getReactRootIDString(index);
-  },
-
-  /**
-   * Constructs a React ID by joining a root ID with a name.
-   *
-   * @param {string} rootID Root ID of a parent component.
-   * @param {string} name A component's name (as flattened children).
-   * @return {string} A React ID.
-   * @internal
-   */
-  createReactID: function(rootID, name) {
-    return rootID + name;
-  },
-
-  /**
-   * Gets the DOM ID of the React component that is the root of the tree that
-   * contains the React component with the supplied DOM ID.
-   *
-   * @param {string} id DOM ID of a React component.
-   * @return {?string} DOM ID of the React component that is the root.
-   * @internal
-   */
-  getReactRootIDFromNodeID: function(id) {
-    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
-      var index = id.indexOf(SEPARATOR, 1);
-      return index > -1 ? id.substr(0, index) : id;
-    }
-    return null;
-  },
-
-  /**
-   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
-   * should would receive a `mouseEnter` or `mouseLeave` event.
-   *
-   * NOTE: Does not invoke the callback on the nearest common ancestor because
-   * nothing "entered" or "left" that element.
-   *
-   * @param {string} leaveID ID being left.
-   * @param {string} enterID ID being entered.
-   * @param {function} cb Callback to invoke on each entered/left ID.
-   * @param {*} upArg Argument to invoke the callback with on left IDs.
-   * @param {*} downArg Argument to invoke the callback with on entered IDs.
-   * @internal
-   */
-  traverseEnterLeave: function(leaveID, enterID, cb, upArg, downArg) {
-    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
-    if (ancestorID !== leaveID) {
-      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
-    }
-    if (ancestorID !== enterID) {
-      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
-    }
-  },
-
-  /**
-   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
-   *
-   * NOTE: This traversal happens on IDs without touching the DOM.
-   *
-   * @param {string} targetID ID of the target node.
-   * @param {function} cb Callback to invoke.
-   * @param {*} arg Argument to invoke the callback with.
-   * @internal
-   */
-  traverseTwoPhase: function(targetID, cb, arg) {
-    if (targetID) {
-      traverseParentPath('', targetID, cb, arg, true, false);
-      traverseParentPath(targetID, '', cb, arg, false, true);
-    }
-  },
-
-  /**
-   * Same as `traverseTwoPhase` but skips the `targetID`.
-   */
-  traverseTwoPhaseSkipTarget: function(targetID, cb, arg) {
-    if (targetID) {
-      traverseParentPath('', targetID, cb, arg, true, true);
-      traverseParentPath(targetID, '', cb, arg, true, true);
-    }
-  },
-
-  /**
-   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
-   * example, passing `.0.$row-0.1` would result in `cb` getting called
-   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
-   *
-   * NOTE: This traversal happens on IDs without touching the DOM.
-   *
-   * @param {string} targetID ID of the target node.
-   * @param {function} cb Callback to invoke.
-   * @param {*} arg Argument to invoke the callback with.
-   * @internal
-   */
-  traverseAncestors: function(targetID, cb, arg) {
-    traverseParentPath('', targetID, cb, arg, true, false);
-  },
-
-  getFirstCommonAncestorID: getFirstCommonAncestorID,
-
-  /**
-   * Exposed for unit testing.
-   * @private
-   */
-  _getNextDescendantID: getNextDescendantID,
-
-  isAncestorIDOf: isAncestorIDOf,
-
-  SEPARATOR: SEPARATOR,
-
-};
-
-module.exports = ReactInstanceHandles;
diff --git a/src/renderers/shared/reconciler/__tests__/ReactComponent-test.js b/src/renderers/shared/reconciler/__tests__/ReactComponent-test.js
deleted file mode 100644
index 444bedddb..000000000
--- a/src/renderers/shared/reconciler/__tests__/ReactComponent-test.js
+++ /dev/null
@@ -1,293 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
- */
-
-'use strict';
-
-var React;
-var ReactDOM;
-var ReactTestUtils;
-
-describe('ReactComponent', function() {
-  beforeEach(function() {
-    React = require('React');
-    ReactDOM = require('ReactDOM');
-    ReactTestUtils = require('ReactTestUtils');
-  });
-
-  it('should throw on invalid render targets', function() {
-    var container = document.createElement('div');
-    // jQuery objects are basically arrays; people often pass them in by mistake
-    expect(function() {
-      ReactDOM.render(<div></div>, [container]);
-    }).toThrow(
-      '_registerComponent(...): Target container is not a DOM element.'
-    );
-
-    expect(function() {
-      ReactDOM.render(<div></div>, null);
-    }).toThrow(
-      '_registerComponent(...): Target container is not a DOM element.'
-    );
-  });
-
-  it('should throw when supplying a ref outside of render method', function() {
-    var instance = <div ref="badDiv" />;
-    expect(function() {
-      instance = ReactTestUtils.renderIntoDocument(instance);
-    }).toThrow();
-  });
-
-  it('should support refs on owned components', function() {
-    var innerObj = {};
-    var outerObj = {};
-
-    var Wrapper = React.createClass({
-
-      getObject: function() {
-        return this.props.object;
-      },
-
-      render: function() {
-        return <div>{this.props.children}</div>;
-      },
-
-    });
-
-    var Component = React.createClass({
-      render: function() {
-        var inner = <Wrapper object={innerObj} ref="inner" />;
-        var outer = <Wrapper object={outerObj} ref="outer">{inner}</Wrapper>;
-        return outer;
-      },
-      componentDidMount: function() {
-        expect(this.refs.inner.getObject()).toEqual(innerObj);
-        expect(this.refs.outer.getObject()).toEqual(outerObj);
-      },
-    });
-
-    var instance = <Component />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-  });
-
-  it('should not have refs on unmounted components', function() {
-    var Parent = React.createClass({
-      render: function() {
-        return <Child><div ref="test" /></Child>;
-      },
-      componentDidMount: function() {
-        expect(this.refs && this.refs.test).toEqual(undefined);
-      },
-    });
-    var Child = React.createClass({
-      render: function() {
-        return <div />;
-      },
-    });
-
-    var instance = <Parent child={<span />} />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-  });
-
-  it('should support new-style refs', function() {
-    var innerObj = {};
-    var outerObj = {};
-
-    var Wrapper = React.createClass({
-      getObject: function() {
-        return this.props.object;
-      },
-      render: function() {
-        return <div>{this.props.children}</div>;
-      },
-    });
-
-    var mounted = false;
-    var Component = React.createClass({
-      render: function() {
-        var inner = <Wrapper object={innerObj} ref={(c) => this.innerRef = c} />;
-        var outer = (
-          <Wrapper object={outerObj} ref={(c) => this.outerRef = c}>
-            {inner}
-          </Wrapper>
-        );
-        return outer;
-      },
-      componentDidMount: function() {
-        expect(this.innerRef.getObject()).toEqual(innerObj);
-        expect(this.outerRef.getObject()).toEqual(outerObj);
-        mounted = true;
-      },
-    });
-
-    var instance = <Component />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-    expect(mounted).toBe(true);
-  });
-
-  it('should support new-style refs with mixed-up owners', function() {
-    var Wrapper = React.createClass({
-      getTitle: function() {
-        return this.props.title;
-      },
-      render: function() {
-        return this.props.getContent();
-      },
-    });
-
-    var mounted = false;
-    var Component = React.createClass({
-      getInner: function() {
-        // (With old-style refs, it's impossible to get a ref to this div
-        // because Wrapper is the current owner when this function is called.)
-        return <div title="inner" ref={(c) => this.innerRef = c} />;
-      },
-      render: function() {
-        return (
-          <Wrapper
-            title="wrapper"
-            ref={(c) => this.wrapperRef = c}
-            getContent={this.getInner}
-            />
-        );
-      },
-      componentDidMount: function() {
-        // Check .props.title to make sure we got the right elements back
-        expect(this.wrapperRef.getTitle()).toBe('wrapper');
-        expect(ReactDOM.findDOMNode(this.innerRef).title).toBe('inner');
-        mounted = true;
-      },
-    });
-
-    var instance = <Component />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-    expect(mounted).toBe(true);
-  });
-
-  it('should call refs at the correct time', function() {
-    var log = [];
-
-    var Inner = React.createClass({
-      render: function() {
-        log.push(`inner ${this.props.id} render`);
-        return <div />;
-      },
-      componentDidMount: function() {
-        log.push(`inner ${this.props.id} componentDidMount`);
-      },
-      componentDidUpdate: function() {
-        log.push(`inner ${this.props.id} componentDidUpdate`);
-      },
-      componentWillUnmount: function() {
-        log.push(`inner ${this.props.id} componentWillUnmount`);
-      },
-    });
-
-    var Outer = React.createClass({
-      render: function() {
-        return (
-          <div>
-            <Inner id={1} ref={(c) => {
-              log.push(`ref 1 got ${c ? `instance ${c.props.id}` : 'null'}`);
-            }}/>
-            <Inner id={2} ref={(c) => {
-              log.push(`ref 2 got ${c ? `instance ${c.props.id}` : 'null'}`);
-            }}/>
-          </div>
-        );
-      },
-      componentDidMount: function() {
-        log.push('outer componentDidMount');
-      },
-      componentDidUpdate: function() {
-        log.push('outer componentDidUpdate');
-      },
-      componentWillUnmount: function() {
-        log.push('outer componentWillUnmount');
-      },
-    });
-
-    // mount, update, unmount
-    var el = document.createElement('div');
-    log.push('start mount');
-    ReactDOM.render(<Outer />, el);
-    log.push('start update');
-    ReactDOM.render(<Outer />, el);
-    log.push('start unmount');
-    ReactDOM.unmountComponentAtNode(el);
-
-    /* eslint-disable indent */
-    expect(log).toEqual([
-      'start mount',
-        'inner 1 render',
-        'inner 2 render',
-        'inner 1 componentDidMount',
-        'ref 1 got instance 1',
-        'inner 2 componentDidMount',
-        'ref 2 got instance 2',
-        'outer componentDidMount',
-      'start update',
-        // Previous (equivalent) refs get cleared
-        'ref 1 got null',
-        'inner 1 render',
-        'ref 2 got null',
-        'inner 2 render',
-        'inner 1 componentDidUpdate',
-        'ref 1 got instance 1',
-        'inner 2 componentDidUpdate',
-        'ref 2 got instance 2',
-        'outer componentDidUpdate',
-      'start unmount',
-        'outer componentWillUnmount',
-        'ref 1 got null',
-        'inner 1 componentWillUnmount',
-        'ref 2 got null',
-        'inner 2 componentWillUnmount',
-    ]);
-    /* eslint-enable indent */
-  });
-
-  it('fires the callback after a component is rendered', function() {
-    var callback = jest.genMockFn();
-    var container = document.createElement('div');
-    ReactDOM.render(<div />, container, callback);
-    expect(callback.mock.calls.length).toBe(1);
-    ReactDOM.render(<div className="foo" />, container, callback);
-    expect(callback.mock.calls.length).toBe(2);
-    ReactDOM.render(<span />, container, callback);
-    expect(callback.mock.calls.length).toBe(3);
-  });
-
-  it('throws usefully when rendering badly-typed elements', function() {
-    spyOn(console, 'error');
-
-    var X = undefined;
-    expect(() => ReactTestUtils.renderIntoDocument(<X />)).toThrow(
-      'Element type is invalid: expected a string (for built-in components) ' +
-      'or a class/function (for composite components) but got: undefined.'
-    );
-
-    var Y = null;
-    expect(() => ReactTestUtils.renderIntoDocument(<Y />)).toThrow(
-      'Element type is invalid: expected a string (for built-in components) ' +
-      'or a class/function (for composite components) but got: null.'
-    );
-
-    var Z = {};
-    expect(() => ReactTestUtils.renderIntoDocument(<Z />)).toThrow(
-      'Element type is invalid: expected a string (for built-in components) ' +
-      'or a class/function (for composite components) but got: object.'
-    );
-
-    // One warning for each element creation
-    expect(console.error.calls.length).toBe(3);
-  });
-
-});
diff --git a/src/renderers/shared/reconciler/__tests__/ReactCompositeComponentState-test.js b/src/renderers/shared/reconciler/__tests__/ReactCompositeComponentState-test.js
deleted file mode 100644
index 49045338d..000000000
--- a/src/renderers/shared/reconciler/__tests__/ReactCompositeComponentState-test.js
+++ /dev/null
@@ -1,246 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
- */
-
-'use strict';
-
-var React;
-var ReactDOM;
-
-var TestComponent;
-
-describe('ReactCompositeComponent-state', function() {
-
-  beforeEach(function() {
-    React = require('React');
-
-    ReactDOM = require('ReactDOM');
-
-    TestComponent = React.createClass({
-      peekAtState: function(from, state) {
-        state = state || this.state;
-        this.props.stateListener(from, state && state.color);
-      },
-
-      peekAtCallback: function(from) {
-        return () => this.peekAtState(from);
-      },
-
-      setFavoriteColor: function(nextColor) {
-        this.setState(
-          {color: nextColor},
-          this.peekAtCallback('setFavoriteColor')
-        );
-      },
-
-      getInitialState: function() {
-        this.peekAtState('getInitialState');
-        return {color: 'red'};
-      },
-
-      render: function() {
-        this.peekAtState('render');
-        return <div>{this.state.color}</div>;
-      },
-
-      componentWillMount: function() {
-        this.peekAtState('componentWillMount-start');
-        this.setState(function(state) {
-          this.peekAtState('before-setState-sunrise', state);
-        });
-        this.setState(
-          {color: 'sunrise'},
-          this.peekAtCallback('setState-sunrise')
-        );
-        this.setState(function(state) {
-          this.peekAtState('after-setState-sunrise', state);
-        });
-        this.peekAtState('componentWillMount-after-sunrise');
-        this.setState(
-          {color: 'orange'},
-          this.peekAtCallback('setState-orange')
-        );
-        this.setState(function(state) {
-          this.peekAtState('after-setState-orange', state);
-        });
-        this.peekAtState('componentWillMount-end');
-      },
-
-      componentDidMount: function() {
-        this.peekAtState('componentDidMount-start');
-        this.setState(
-          {color: 'yellow'},
-          this.peekAtCallback('setState-yellow')
-        );
-        this.peekAtState('componentDidMount-end');
-      },
-
-      componentWillReceiveProps: function(newProps) {
-        this.peekAtState('componentWillReceiveProps-start');
-        if (newProps.nextColor) {
-          this.setState(function(state) {
-            this.peekAtState('before-setState-receiveProps', state);
-            return {color: newProps.nextColor};
-          });
-          this.replaceState({color: undefined});
-          this.setState(
-            function(state) {
-              this.peekAtState('before-setState-again-receiveProps', state);
-              return {color: newProps.nextColor};
-            },
-            this.peekAtCallback('setState-receiveProps')
-          );
-          this.setState(function(state) {
-            this.peekAtState('after-setState-receiveProps', state);
-          });
-        }
-        this.peekAtState('componentWillReceiveProps-end');
-      },
-
-      shouldComponentUpdate: function(nextProps, nextState) {
-        this.peekAtState('shouldComponentUpdate-currentState');
-        this.peekAtState('shouldComponentUpdate-nextState', nextState);
-        return true;
-      },
-
-      componentWillUpdate: function(nextProps, nextState) {
-        this.peekAtState('componentWillUpdate-currentState');
-        this.peekAtState('componentWillUpdate-nextState', nextState);
-      },
-
-      componentDidUpdate: function(prevProps, prevState) {
-        this.peekAtState('componentDidUpdate-currentState');
-        this.peekAtState('componentDidUpdate-prevState', prevState);
-      },
-
-      componentWillUnmount: function() {
-        this.peekAtState('componentWillUnmount');
-      },
-    });
-  });
-
-  it('should support setting state', function() {
-    var container = document.createElement('div');
-    document.body.appendChild(container);
-
-    var stateListener = jest.genMockFn();
-    var instance = ReactDOM.render(
-      <TestComponent stateListener={stateListener} />,
-      container,
-      function peekAtInitialCallback() {
-        this.peekAtState('initial-callback');
-      }
-    );
-    ReactDOM.render(
-      <TestComponent stateListener={stateListener} nextColor="green" />,
-      container,
-      instance.peekAtCallback('setProps')
-    );
-    instance.setFavoriteColor('blue');
-    instance.forceUpdate(instance.peekAtCallback('forceUpdate'));
-
-    ReactDOM.unmountComponentAtNode(container);
-
-    expect(stateListener.mock.calls.join('\n')).toEqual([
-      // there is no state when getInitialState() is called
-      ['getInitialState', null],
-      ['componentWillMount-start', 'red'],
-      // setState()'s only enqueue pending states.
-      ['componentWillMount-after-sunrise', 'red'],
-      ['componentWillMount-end', 'red'],
-      // pending state queue is processed
-      ['before-setState-sunrise', 'red'],
-      ['after-setState-sunrise', 'sunrise'],
-      ['after-setState-orange', 'orange'],
-      // pending state has been applied
-      ['render', 'orange'],
-      ['componentDidMount-start', 'orange'],
-      // setState-sunrise and setState-orange should be called here,
-      // after the bug in #1740
-      // componentDidMount() called setState({color:'yellow'}), which is async.
-      // The update doesn't happen until the next flush.
-      ['componentDidMount-end', 'orange'],
-      ['shouldComponentUpdate-currentState', 'orange'],
-      ['shouldComponentUpdate-nextState', 'yellow'],
-      ['componentWillUpdate-currentState', 'orange'],
-      ['componentWillUpdate-nextState', 'yellow'],
-      ['render', 'yellow'],
-      ['componentDidUpdate-currentState', 'yellow'],
-      ['componentDidUpdate-prevState', 'orange'],
-      ['setState-sunrise', 'yellow'],
-      ['setState-orange', 'yellow'],
-      ['setState-yellow', 'yellow'],
-      ['initial-callback', 'yellow'],
-      ['componentWillReceiveProps-start', 'yellow'],
-      // setState({color:'green'}) only enqueues a pending state.
-      ['componentWillReceiveProps-end', 'yellow'],
-      // pending state queue is processed
-      // before-setState-receiveProps never called, due to replaceState.
-      ['before-setState-again-receiveProps', undefined],
-      ['after-setState-receiveProps', 'green'],
-      ['shouldComponentUpdate-currentState', 'yellow'],
-      ['shouldComponentUpdate-nextState', 'green'],
-      ['componentWillUpdate-currentState', 'yellow'],
-      ['componentWillUpdate-nextState', 'green'],
-      ['render', 'green'],
-      ['componentDidUpdate-currentState', 'green'],
-      ['componentDidUpdate-prevState', 'yellow'],
-      ['setState-receiveProps', 'green'],
-      ['setProps', 'green'],
-      // setFavoriteColor('blue')
-      ['shouldComponentUpdate-currentState', 'green'],
-      ['shouldComponentUpdate-nextState', 'blue'],
-      ['componentWillUpdate-currentState', 'green'],
-      ['componentWillUpdate-nextState', 'blue'],
-      ['render', 'blue'],
-      ['componentDidUpdate-currentState', 'blue'],
-      ['componentDidUpdate-prevState', 'green'],
-      ['setFavoriteColor', 'blue'],
-      // forceUpdate()
-      ['componentWillUpdate-currentState', 'blue'],
-      ['componentWillUpdate-nextState', 'blue'],
-      ['render', 'blue'],
-      ['componentDidUpdate-currentState', 'blue'],
-      ['componentDidUpdate-prevState', 'blue'],
-      ['forceUpdate', 'blue'],
-      // unmountComponent()
-      // state is available within `componentWillUnmount()`
-      ['componentWillUnmount', 'blue'],
-    ].join('\n'));
-  });
-
-  it('should batch unmounts', function() {
-    var outer;
-    var Inner = React.createClass({
-      render: function() {
-        return <div />;
-      },
-      componentWillUnmount: function() {
-        // This should get silently ignored (maybe with a warning), but it
-        // shouldn't break React.
-        outer.setState({showInner: false});
-      },
-    });
-    var Outer = React.createClass({
-      getInitialState: function() {
-        return {showInner: true};
-      },
-      render: function() {
-        return <div>{this.state.showInner && <Inner />}</div>;
-      },
-    });
-
-    var container = document.createElement('div');
-    outer = ReactDOM.render(<Outer />, container);
-    expect(() => {
-      ReactDOM.unmountComponentAtNode(container);
-    }).not.toThrow();
-  });
-});
diff --git a/src/renderers/shared/reconciler/__tests__/ReactStateSetters-test.js b/src/renderers/shared/reconciler/__tests__/ReactStateSetters-test.js
deleted file mode 100644
index 23b0e5d86..000000000
--- a/src/renderers/shared/reconciler/__tests__/ReactStateSetters-test.js
+++ /dev/null
@@ -1,154 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
- */
-
-'use strict';
-
-var React = require('React');
-var ReactStateSetters = require('ReactStateSetters');
-var ReactTestUtils = require('ReactTestUtils');
-
-var TestComponent;
-var TestComponentWithMixin;
-
-describe('ReactStateSetters', function() {
-  beforeEach(function() {
-    jest.resetModuleRegistry();
-
-    TestComponent = React.createClass({
-      getInitialState: function() {
-        return {foo: 'foo'};
-      },
-
-      render: function() {
-        return <div />;
-      },
-    });
-
-    TestComponentWithMixin = React.createClass({
-      mixins: [ReactStateSetters.Mixin],
-
-      getInitialState: function() {
-        return {foo: 'foo'};
-      },
-
-      render: function() {
-        return <div />;
-      },
-    });
-  });
-
-  it('createStateSetter should update state', function() {
-    var instance = <TestComponent />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-    expect(instance.state).toEqual({foo: 'foo'});
-
-    var setter = ReactStateSetters.createStateSetter(
-      instance,
-      function(a, b, c) {
-        return {
-          foo: a + b + c,
-          bar: a * b * c,
-        };
-      }
-    );
-    expect(instance.state).toEqual({foo: 'foo'});
-
-    setter(1, 2, 3);
-    expect(instance.state).toEqual({foo: 6, bar: 6});
-
-    setter(10, 11, 12);
-    expect(instance.state).toEqual({foo: 33, bar: 1320});
-  });
-
-  it('createStateKeySetter should update state', function() {
-    var instance = <TestComponent />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-    expect(instance.state).toEqual({foo: 'foo'});
-
-    var setter = ReactStateSetters.createStateKeySetter(instance, 'foo');
-
-    expect(instance.state).toEqual({foo: 'foo'});
-
-    setter('bar');
-    expect(instance.state).toEqual({foo: 'bar'});
-
-    setter('baz');
-    expect(instance.state).toEqual({foo: 'baz'});
-  });
-
-  it('createStateKeySetter is memoized', function() {
-    var instance = <TestComponent />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-    expect(instance.state).toEqual({foo: 'foo'});
-
-    var foo1 = ReactStateSetters.createStateKeySetter(instance, 'foo');
-    var bar1 = ReactStateSetters.createStateKeySetter(instance, 'bar');
-
-    var foo2 = ReactStateSetters.createStateKeySetter(instance, 'foo');
-    var bar2 = ReactStateSetters.createStateKeySetter(instance, 'bar');
-
-    expect(foo2).toBe(foo1);
-    expect(bar2).toBe(bar1);
-  });
-
-  it('createStateSetter should update state from mixin', function() {
-    var instance = <TestComponentWithMixin />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-    expect(instance.state).toEqual({foo: 'foo'});
-
-    var setter = instance.createStateSetter(
-      function(a, b, c) {
-        return {
-          foo: a + b + c,
-          bar: a * b * c,
-        };
-      }
-    );
-    expect(instance.state).toEqual({foo: 'foo'});
-
-    setter(1, 2, 3);
-    expect(instance.state).toEqual({foo: 6, bar: 6});
-
-    setter(10, 11, 12);
-    expect(instance.state).toEqual({foo: 33, bar: 1320});
-  });
-
-  it('createStateKeySetter should update state with mixin', function() {
-    var instance = <TestComponentWithMixin />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-    expect(instance.state).toEqual({foo: 'foo'});
-
-    var setter = instance.createStateKeySetter('foo');
-
-    expect(instance.state).toEqual({foo: 'foo'});
-
-    setter('bar');
-    expect(instance.state).toEqual({foo: 'bar'});
-
-    setter('baz');
-    expect(instance.state).toEqual({foo: 'baz'});
-  });
-
-  it('createStateKeySetter is memoized with mixin', function() {
-    var instance = <TestComponentWithMixin />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
-    expect(instance.state).toEqual({foo: 'foo'});
-
-    var foo1 = instance.createStateKeySetter('foo');
-    var bar1 = instance.createStateKeySetter('bar');
-
-    var foo2 = instance.createStateKeySetter('foo');
-    var bar2 = instance.createStateKeySetter('bar');
-
-    expect(foo2).toBe(foo1);
-    expect(bar2).toBe(bar1);
-  });
-});
diff --git a/src/renderers/shared/reconciler/ReactInstanceMap.js b/src/renderers/shared/shared/ReactInstanceMap.js
similarity index 99%
rename from src/renderers/shared/reconciler/ReactInstanceMap.js
rename to src/renderers/shared/shared/ReactInstanceMap.js
index 24eeb2d74..495c82c31 100644
--- a/src/renderers/shared/reconciler/ReactInstanceMap.js
+++ b/src/renderers/shared/shared/ReactInstanceMap.js
@@ -22,3 +22,2 @@
 var ReactInstanceMap = {
-
   /**
@@ -43,3 +42,2 @@ var ReactInstanceMap = {
   },
-
 };
diff --git a/src/renderers/shared/reconciler/shouldUpdateReactComponent.js b/src/renderers/shared/shared/shouldUpdateReactComponent.js
similarity index 95%
rename from src/renderers/shared/reconciler/shouldUpdateReactComponent.js
rename to src/renderers/shared/shared/shouldUpdateReactComponent.js
index 2c4a15542..097eab1c5 100644
--- a/src/renderers/shared/reconciler/shouldUpdateReactComponent.js
+++ b/src/renderers/shared/shared/shouldUpdateReactComponent.js
@@ -34,3 +34,3 @@ function shouldUpdateReactComponent(prevElement, nextElement) {
   if (prevType === 'string' || prevType === 'number') {
-    return (nextType === 'string' || nextType === 'number');
+    return nextType === 'string' || nextType === 'number';
   } else {
diff --git a/src/renderers/shared/event/EventConstants.js b/src/renderers/shared/stack/event/EventConstants.js
similarity index 90%
rename from src/renderers/shared/event/EventConstants.js
rename to src/renderers/shared/stack/event/EventConstants.js
index 84a9e9d48..385f35338 100644
--- a/src/renderers/shared/event/EventConstants.js
+++ b/src/renderers/shared/stack/event/EventConstants.js
@@ -13,5 +13,3 @@
 
-var keyMirror = require('keyMirror');
-
-var PropagationPhases = keyMirror({bubbled: null, captured: null});
+export type PropagationPhases = 'bubbled' | 'captured';
 
@@ -20,3 +18,3 @@ var PropagationPhases = keyMirror({bubbled: null, captured: null});
  */
-var topLevelTypes = keyMirror({
+var topLevelTypes = {
   topAbort: null,
@@ -89,7 +87,8 @@ var topLevelTypes = keyMirror({
   topWheel: null,
-});
+};
+
+export type TopLevelTypes = $Enum<typeof topLevelTypes>;
 
 var EventConstants = {
-  topLevelTypes: topLevelTypes,
-  PropagationPhases: PropagationPhases,
+  topLevelTypes,
 };
diff --git a/src/renderers/shared/event/EventPluginHub.js b/src/renderers/shared/stack/event/EventPluginHub.js
similarity index 78%
rename from src/renderers/shared/event/EventPluginHub.js
rename to src/renderers/shared/stack/event/EventPluginHub.js
index 270d1665d..8eb3fc8f2 100644
--- a/src/renderers/shared/event/EventPluginHub.js
+++ b/src/renderers/shared/stack/event/EventPluginHub.js
@@ -55,2 +55,35 @@ var executeDispatchesAndReleaseTopLevel = function(e) {
 
+var getDictionaryKey = function(inst) {
+  // Prevents V8 performance issue:
+  // https://github.com/facebook/react/pull/7232
+  return '.' + inst._rootNodeID;
+};
+
+function isInteractive(tag) {
+  return (
+    tag === 'button' ||
+    tag === 'input' ||
+    tag === 'select' ||
+    tag === 'textarea'
+  );
+}
+
+function shouldPreventMouseEvent(name, type, props) {
+  switch (name) {
+    case 'onClick':
+    case 'onClickCapture':
+    case 'onDoubleClick':
+    case 'onDoubleClickCapture':
+    case 'onMouseDown':
+    case 'onMouseDownCapture':
+    case 'onMouseMove':
+    case 'onMouseMoveCapture':
+    case 'onMouseUp':
+    case 'onMouseUpCapture':
+      return !!(props.disabled && isInteractive(type));
+    default:
+      return false;
+  }
+}
+
 /**
@@ -78,3 +111,2 @@ var executeDispatchesAndReleaseTopLevel = function(e) {
 var EventPluginHub = {
-
   /**
@@ -83,3 +115,2 @@ var EventPluginHub = {
   injection: {
-
     /**
@@ -94,3 +125,2 @@ var EventPluginHub = {
     injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName,
-
   },
@@ -98,3 +128,3 @@ var EventPluginHub = {
   /**
-   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
+   * Stores `listener` at `listenerBank[registrationName][key]`. Is idempotent.
    *
@@ -108,8 +138,10 @@ var EventPluginHub = {
       'Expected %s listener to be a function, instead got type %s',
-      registrationName, typeof listener
+      registrationName,
+      typeof listener,
     );
 
+    var key = getDictionaryKey(inst);
     var bankForRegistrationName =
       listenerBank[registrationName] || (listenerBank[registrationName] = {});
-    bankForRegistrationName[inst._rootNodeID] = listener;
+    bankForRegistrationName[key] = listener;
 
@@ -128,4 +160,16 @@ var EventPluginHub = {
   getListener: function(inst, registrationName) {
+    // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
+    // live here; needs to be moved to a better place soon
     var bankForRegistrationName = listenerBank[registrationName];
-    return bankForRegistrationName && bankForRegistrationName[inst._rootNodeID];
+    if (
+      shouldPreventMouseEvent(
+        registrationName,
+        inst._currentElement.type,
+        inst._currentElement.props,
+      )
+    ) {
+      return null;
+    }
+    var key = getDictionaryKey(inst);
+    return bankForRegistrationName && bankForRegistrationName[key];
   },
@@ -148,3 +192,4 @@ var EventPluginHub = {
     if (bankForRegistrationName) {
-      delete bankForRegistrationName[inst._rootNodeID];
+      var key = getDictionaryKey(inst);
+      delete bankForRegistrationName[key];
     }
@@ -158,4 +203,9 @@ var EventPluginHub = {
   deleteAllListeners: function(inst) {
+    var key = getDictionaryKey(inst);
     for (var registrationName in listenerBank) {
-      if (!listenerBank[registrationName][inst._rootNodeID]) {
+      if (!listenerBank.hasOwnProperty(registrationName)) {
+        continue;
+      }
+
+      if (!listenerBank[registrationName][key]) {
         continue;
@@ -169,3 +219,3 @@ var EventPluginHub = {
 
-      delete listenerBank[registrationName][inst._rootNodeID];
+      delete listenerBank[registrationName][key];
     }
@@ -181,6 +231,7 @@ var EventPluginHub = {
   extractEvents: function(
-      topLevelType,
-      targetInst,
-      nativeEvent,
-      nativeEventTarget) {
+    topLevelType,
+    targetInst,
+    nativeEvent,
+    nativeEventTarget,
+  ) {
     var events;
@@ -195,3 +246,3 @@ var EventPluginHub = {
           nativeEvent,
-          nativeEventTarget
+          nativeEventTarget,
         );
@@ -231,3 +282,3 @@ var EventPluginHub = {
         processingEventQueue,
-        executeDispatchesAndReleaseSimulated
+        executeDispatchesAndReleaseSimulated,
       );
@@ -236,3 +287,3 @@ var EventPluginHub = {
         processingEventQueue,
-        executeDispatchesAndReleaseTopLevel
+        executeDispatchesAndReleaseTopLevel,
       );
@@ -242,3 +293,3 @@ var EventPluginHub = {
       'processEventQueue(): Additional events were enqueued while processing ' +
-      'an event queue. Support for this has not yet been implemented.'
+        'an event queue. Support for this has not yet been implemented.',
     );
@@ -258,3 +309,2 @@ var EventPluginHub = {
   },
-
 };
diff --git a/src/renderers/shared/event/EventPluginRegistry.js b/src/renderers/shared/stack/event/EventPluginRegistry.js
similarity index 66%
rename from src/renderers/shared/event/EventPluginRegistry.js
rename to src/renderers/shared/stack/event/EventPluginRegistry.js
index f6830e588..be2159edf 100644
--- a/src/renderers/shared/event/EventPluginRegistry.js
+++ b/src/renderers/shared/stack/event/EventPluginRegistry.js
@@ -9,2 +9,3 @@
  * @providesModule EventPluginRegistry
+ * @flow
  */
@@ -13,2 +14,13 @@
 
+import type {
+  DispatchConfig,
+  ReactSyntheticEvent,
+} from 'ReactSyntheticEventType';
+
+import type {AnyNativeEvent, PluginName, PluginModule} from 'PluginModuleType';
+
+type NamesToPlugins = {[key: PluginName]: PluginModule<AnyNativeEvent>};
+
+type EventPluginOrder = null | Array<PluginName>;
+
 var invariant = require('invariant');
@@ -18,3 +30,3 @@ var invariant = require('invariant');
  */
-var EventPluginOrder = null;
+var eventPluginOrder: EventPluginOrder = null;
 
@@ -23,3 +35,3 @@ var EventPluginOrder = null;
  */
-var namesToPlugins = {};
+var namesToPlugins: NamesToPlugins = {};
 
@@ -30,5 +42,5 @@ var namesToPlugins = {};
  */
-function recomputePluginOrdering() {
-  if (!EventPluginOrder) {
-    // Wait until an `EventPluginOrder` is injected.
+function recomputePluginOrdering(): void {
+  if (!eventPluginOrder) {
+    // Wait until an `eventPluginOrder` is injected.
     return;
@@ -36,4 +48,4 @@ function recomputePluginOrdering() {
   for (var pluginName in namesToPlugins) {
-    var PluginModule = namesToPlugins[pluginName];
-    var pluginIndex = EventPluginOrder.indexOf(pluginName);
+    var pluginModule = namesToPlugins[pluginName];
+    var pluginIndex = eventPluginOrder.indexOf(pluginName);
     invariant(
@@ -41,4 +53,4 @@ function recomputePluginOrdering() {
       'EventPluginRegistry: Cannot inject event plugins that do not exist in ' +
-      'the plugin ordering, `%s`.',
-      pluginName
+        'the plugin ordering, `%s`.',
+      pluginName,
     );
@@ -48,9 +60,9 @@ function recomputePluginOrdering() {
     invariant(
-      PluginModule.extractEvents,
+      pluginModule.extractEvents,
       'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
-      'method, but `%s` does not.',
-      pluginName
+        'method, but `%s` does not.',
+      pluginName,
     );
-    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
-    var publishedEvents = PluginModule.eventTypes;
+    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
+    var publishedEvents = pluginModule.eventTypes;
     for (var eventName in publishedEvents) {
@@ -59,4 +71,4 @@ function recomputePluginOrdering() {
           publishedEvents[eventName],
-          PluginModule,
-          eventName
+          pluginModule,
+          eventName,
         ),
@@ -64,3 +76,3 @@ function recomputePluginOrdering() {
         eventName,
-        pluginName
+        pluginName,
       );
@@ -78,3 +90,7 @@ function recomputePluginOrdering() {
  */
-function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
+function publishEventForPlugin(
+  dispatchConfig: DispatchConfig,
+  pluginModule: PluginModule<AnyNativeEvent>,
+  eventName: string,
+): boolean {
   invariant(
@@ -82,4 +98,4 @@ function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
     'EventPluginHub: More than one plugin attempted to publish the same ' +
-    'event name, `%s`.',
-    eventName
+      'event name, `%s`.',
+    eventName,
   );
@@ -94,4 +110,4 @@ function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
           phasedRegistrationName,
-          PluginModule,
-          eventName
+          pluginModule,
+          eventName,
         );
@@ -103,4 +119,4 @@ function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
       dispatchConfig.registrationName,
-      PluginModule,
-      eventName
+      pluginModule,
+      eventName,
     );
@@ -119,3 +135,7 @@ function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
  */
-function publishRegistrationName(registrationName, PluginModule, eventName) {
+function publishRegistrationName(
+  registrationName: string,
+  pluginModule: PluginModule<AnyNativeEvent>,
+  eventName: string,
+): void {
   invariant(
@@ -123,8 +143,8 @@ function publishRegistrationName(registrationName, PluginModule, eventName) {
     'EventPluginHub: More than one plugin attempted to publish the same ' +
-    'registration name, `%s`.',
-    registrationName
+      'registration name, `%s`.',
+    registrationName,
   );
-  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
+  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
   EventPluginRegistry.registrationNameDependencies[registrationName] =
-    PluginModule.eventTypes[eventName].dependencies;
+    pluginModule.eventTypes[eventName].dependencies;
 
@@ -132,4 +152,9 @@ function publishRegistrationName(registrationName, PluginModule, eventName) {
     var lowerCasedName = registrationName.toLowerCase();
-    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] =
-      registrationName;
+    EventPluginRegistry.possibleRegistrationNames[
+      lowerCasedName
+    ] = registrationName;
+
+    if (registrationName === 'onDoubleClick') {
+      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
+    }
   }
@@ -143,3 +168,2 @@ function publishRegistrationName(registrationName, PluginModule, eventName) {
 var EventPluginRegistry = {
-
   /**
@@ -170,3 +194,4 @@ var EventPluginRegistry = {
    */
-  possibleRegistrationNames: __DEV__ ? {} : null,
+  possibleRegistrationNames: __DEV__ ? {} : (null: any),
+  // Trust the developer to only use possibleRegistrationNames in __DEV__
 
@@ -181,10 +206,12 @@ var EventPluginRegistry = {
    */
-  injectEventPluginOrder: function(InjectedEventPluginOrder) {
+  injectEventPluginOrder: function(
+    injectedEventPluginOrder: EventPluginOrder,
+  ): void {
     invariant(
-      !EventPluginOrder,
+      !eventPluginOrder,
       'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
-      'once. You are likely trying to load more than one copy of React.'
+        'once. You are likely trying to load more than one copy of React.',
     );
     // Clone the ordering so it cannot be dynamically mutated.
-    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
+    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
     recomputePluginOrdering();
@@ -202,3 +229,5 @@ var EventPluginRegistry = {
    */
-  injectEventPluginsByName: function(injectedNamesToPlugins) {
+  injectEventPluginsByName: function(
+    injectedNamesToPlugins: NamesToPlugins,
+  ): void {
     var isOrderingDirty = false;
@@ -208,5 +237,7 @@ var EventPluginRegistry = {
       }
-      var PluginModule = injectedNamesToPlugins[pluginName];
-      if (!namesToPlugins.hasOwnProperty(pluginName) ||
-          namesToPlugins[pluginName] !== PluginModule) {
+      var pluginModule = injectedNamesToPlugins[pluginName];
+      if (
+        !namesToPlugins.hasOwnProperty(pluginName) ||
+        namesToPlugins[pluginName] !== pluginModule
+      ) {
         invariant(
@@ -214,6 +245,6 @@ var EventPluginRegistry = {
           'EventPluginRegistry: Cannot inject two different event plugins ' +
-          'using the same name, `%s`.',
-          pluginName
+            'using the same name, `%s`.',
+          pluginName,
         );
-        namesToPlugins[pluginName] = PluginModule;
+        namesToPlugins[pluginName] = pluginModule;
         isOrderingDirty = true;
@@ -233,18 +264,28 @@ var EventPluginRegistry = {
    */
-  getPluginModuleForEvent: function(event) {
+  getPluginModuleForEvent: function(
+    event: ReactSyntheticEvent,
+  ): null | PluginModule<AnyNativeEvent> {
     var dispatchConfig = event.dispatchConfig;
     if (dispatchConfig.registrationName) {
-      return EventPluginRegistry.registrationNameModules[
-        dispatchConfig.registrationName
-      ] || null;
+      return (
+        EventPluginRegistry.registrationNameModules[
+          dispatchConfig.registrationName
+        ] || null
+      );
     }
-    for (var phase in dispatchConfig.phasedRegistrationNames) {
-      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
-        continue;
-      }
-      var PluginModule = EventPluginRegistry.registrationNameModules[
-        dispatchConfig.phasedRegistrationNames[phase]
-      ];
-      if (PluginModule) {
-        return PluginModule;
+    if (dispatchConfig.phasedRegistrationNames !== undefined) {
+      // pulling phasedRegistrationNames out of dispatchConfig helps Flow see
+      // that it is not undefined.
+      var {phasedRegistrationNames} = dispatchConfig;
+      for (var phase in phasedRegistrationNames) {
+        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
+          continue;
+        }
+        var pluginModule =
+          EventPluginRegistry.registrationNameModules[
+            phasedRegistrationNames[phase]
+          ];
+        if (pluginModule) {
+          return pluginModule;
+        }
       }
@@ -258,4 +299,4 @@ var EventPluginRegistry = {
    */
-  _resetEventPlugins: function() {
-    EventPluginOrder = null;
+  _resetEventPlugins: function(): void {
+    eventPluginOrder = null;
     for (var pluginName in namesToPlugins) {
@@ -291,3 +332,2 @@ var EventPluginRegistry = {
   },
-
 };
diff --git a/src/renderers/shared/event/EventPluginUtils.js b/src/renderers/shared/stack/event/EventPluginUtils.js
similarity index 84%
rename from src/renderers/shared/event/EventPluginUtils.js
rename to src/renderers/shared/stack/event/EventPluginUtils.js
index f7e8efe12..cd4531e40 100644
--- a/src/renderers/shared/event/EventPluginUtils.js
+++ b/src/renderers/shared/stack/event/EventPluginUtils.js
@@ -13,3 +13,2 @@
 
-var EventConstants = require('EventConstants');
 var ReactErrorUtils = require('ReactErrorUtils');
@@ -35,6 +34,6 @@ var injection = {
         Injected &&
-        Injected.getNodeFromInstance &&
-        Injected.getInstanceFromNode,
+          Injected.getNodeFromInstance &&
+          Injected.getInstanceFromNode,
         'EventPluginUtils.injection.injectComponentTree(...): Injected ' +
-        'module is missing getNodeFromInstance or getInstanceFromNode.'
+          'module is missing getNodeFromInstance or getInstanceFromNode.',
       );
@@ -48,3 +47,3 @@ var injection = {
         'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' +
-        'module is missing isAncestor or getLowestCommonAncestor.'
+          'module is missing isAncestor or getLowestCommonAncestor.',
       );
@@ -54,8 +53,8 @@ var injection = {
 
-var topLevelTypes = EventConstants.topLevelTypes;
-
 function isEndish(topLevelType) {
-  return topLevelType === topLevelTypes.topMouseUp ||
-         topLevelType === topLevelTypes.topTouchEnd ||
-         topLevelType === topLevelTypes.topTouchCancel;
+  return (
+    topLevelType === 'topMouseUp' ||
+    topLevelType === 'topTouchEnd' ||
+    topLevelType === 'topTouchCancel'
+  );
 }
@@ -63,11 +62,8 @@ function isEndish(topLevelType) {
 function isMoveish(topLevelType) {
-  return topLevelType === topLevelTypes.topMouseMove ||
-         topLevelType === topLevelTypes.topTouchMove;
+  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
 }
 function isStartish(topLevelType) {
-  return topLevelType === topLevelTypes.topMouseDown ||
-         topLevelType === topLevelTypes.topTouchStart;
+  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
 }
 
-
 var validateEventDispatches;
@@ -79,10 +75,10 @@ if (__DEV__) {
     var listenersIsArr = Array.isArray(dispatchListeners);
-    var listenersLen = listenersIsArr ?
-      dispatchListeners.length :
-      dispatchListeners ? 1 : 0;
+    var listenersLen = listenersIsArr
+      ? dispatchListeners.length
+      : dispatchListeners ? 1 : 0;
 
     var instancesIsArr = Array.isArray(dispatchInstances);
-    var instancesLen = instancesIsArr ?
-      dispatchInstances.length :
-      dispatchInstances ? 1 : 0;
+    var instancesLen = instancesIsArr
+      ? dispatchInstances.length
+      : dispatchInstances ? 1 : 0;
 
@@ -90,3 +86,3 @@ if (__DEV__) {
       instancesIsArr === listenersIsArr && instancesLen === listenersLen,
-      'EventPluginUtils: Invalid `event`.'
+      'EventPluginUtils: Invalid `event`.',
     );
@@ -106,7 +102,3 @@ function executeDispatch(event, simulated, listener, inst) {
   if (simulated) {
-    ReactErrorUtils.invokeGuardedCallbackWithCatch(
-      type,
-      listener,
-      event
-    );
+    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
   } else {
@@ -136,3 +128,3 @@ function executeDispatchesInOrder(event, simulated) {
         dispatchListeners[i],
-        dispatchInstances[i]
+        dispatchInstances[i],
       );
@@ -204,5 +196,7 @@ function executeDirectDispatch(event) {
     !Array.isArray(dispatchListener),
-    'executeDirectDispatch(...): Invalid `event`.'
+    'executeDirectDispatch(...): Invalid `event`.',
   );
-  event.currentTarget = EventPluginUtils.getNodeFromInstance(dispatchInstance);
+  event.currentTarget = dispatchListener
+    ? EventPluginUtils.getNodeFromInstance(dispatchInstance)
+    : null;
   var res = dispatchListener ? dispatchListener(event) : null;
diff --git a/src/renderers/shared/event/EventPropagators.js b/src/renderers/shared/stack/event/EventPropagators.js
similarity index 87%
rename from src/renderers/shared/event/EventPropagators.js
rename to src/renderers/shared/stack/event/EventPropagators.js
index 95cc18826..ec0766729 100644
--- a/src/renderers/shared/event/EventPropagators.js
+++ b/src/renderers/shared/stack/event/EventPropagators.js
@@ -13,3 +13,2 @@
 
-var EventConstants = require('EventConstants');
 var EventPluginHub = require('EventPluginHub');
@@ -21,3 +20,4 @@ var warning = require('warning');
 
-var PropagationPhases = EventConstants.PropagationPhases;
+import type {PropagationPhases} from 'EventConstants';
+
 var getListener = EventPluginHub.getListener;
@@ -28,3 +28,3 @@ var getListener = EventPluginHub.getListener;
  */
-function listenerAtPhase(inst, event, propagationPhase) {
+function listenerAtPhase(inst, event, propagationPhase: PropagationPhases) {
   var registrationName =
@@ -40,14 +40,12 @@ function listenerAtPhase(inst, event, propagationPhase) {
  */
-function accumulateDirectionalDispatches(inst, upwards, event) {
+function accumulateDirectionalDispatches(inst, phase, event) {
   if (__DEV__) {
-    warning(
-      inst,
-      'Dispatching inst must not be null'
-    );
+    warning(inst, 'Dispatching inst must not be null');
   }
-  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
   var listener = listenerAtPhase(inst, event, phase);
   if (listener) {
-    event._dispatchListeners =
-      accumulateInto(event._dispatchListeners, listener);
+    event._dispatchListeners = accumulateInto(
+      event._dispatchListeners,
+      listener,
+    );
     event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
@@ -68,3 +66,3 @@ function accumulateTwoPhaseDispatchesSingle(event) {
       accumulateDirectionalDispatches,
-      event
+      event,
     );
@@ -79,4 +77,5 @@ function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
     var targetInst = event._targetInst;
-    var parentInst =
-      targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
+    var parentInst = targetInst
+      ? EventPluginUtils.getParentInstance(targetInst)
+      : null;
     EventPluginUtils.traverseTwoPhase(
@@ -84,3 +83,3 @@ function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
       accumulateDirectionalDispatches,
-      event
+      event,
     );
@@ -89,3 +88,2 @@ function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
 
-
 /**
@@ -100,4 +98,6 @@ function accumulateDispatches(inst, ignoredDirection, event) {
     if (listener) {
-      event._dispatchListeners =
-        accumulateInto(event._dispatchListeners, listener);
+      event._dispatchListeners = accumulateInto(
+        event._dispatchListeners,
+        listener,
+      );
       event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
@@ -132,3 +132,3 @@ function accumulateEnterLeaveDispatches(leave, enter, from, to) {
     leave,
-    enter
+    enter,
   );
@@ -136,3 +136,2 @@ function accumulateEnterLeaveDispatches(leave, enter, from, to) {
 
-
 function accumulateDirectDispatches(events) {
@@ -141,4 +140,2 @@ function accumulateDirectDispatches(events) {
 
-
-
 /**
diff --git a/src/renderers/shared/stack/event/PluginModuleType.js b/src/renderers/shared/stack/event/PluginModuleType.js
new file mode 100644
index 000000000..bfcdbb0c1
--- /dev/null
+++ b/src/renderers/shared/stack/event/PluginModuleType.js
@@ -0,0 +1,42 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule PluginModuleType
+ * @flow
+ */
+
+'use strict';
+
+import type {ReactInstance} from 'ReactInstanceType';
+import type {
+  DispatchConfig,
+  ReactSyntheticEvent,
+} from 'ReactSyntheticEventType';
+
+export type EventTypes = {[key: string]: DispatchConfig};
+
+export type AnyNativeEvent = Event | KeyboardEvent | MouseEvent | Touch;
+
+export type PluginName = string;
+
+export type PluginModule<NativeEvent> = {
+  eventTypes: EventTypes,
+  extractEvents: (
+    topLevelType: string,
+    targetInst: ReactInstance,
+    nativeTarget: NativeEvent,
+    nativeEventTarget: EventTarget,
+  ) => null | ReactSyntheticEvent,
+  didPutListener?: (
+    inst: ReactInstance,
+    registrationName: string,
+    listener: () => void,
+  ) => void,
+  willDeleteListener?: (inst: ReactInstance, registrationName: string) => void,
+  tapMoveThreshold?: number,
+};
diff --git a/src/renderers/shared/stack/event/ReactSyntheticEventType.js b/src/renderers/shared/stack/event/ReactSyntheticEventType.js
new file mode 100644
index 000000000..79dd3229e
--- /dev/null
+++ b/src/renderers/shared/stack/event/ReactSyntheticEventType.js
@@ -0,0 +1,36 @@
+/*
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * Flow type for SyntheticEvent class that includes private properties
+ *
+ * @providesModule ReactSyntheticEventType
+ * @flow
+ */
+
+'use strict';
+
+import type {ReactInstance} from 'ReactInstanceType';
+
+export type DispatchConfig = {
+  dependencies: Array<string>,
+  phasedRegistrationNames?: {
+    bubbled: string,
+    captured: string,
+  },
+  registrationName?: string,
+};
+
+export type ReactSyntheticEvent = {
+  dispatchConfig: DispatchConfig,
+  getPooled: (
+    dispatchConfig: DispatchConfig,
+    targetInst: ReactInstance,
+    nativeTarget: Event,
+    nativeEventTarget: EventTarget,
+  ) => ReactSyntheticEvent,
+} & SyntheticEvent;
diff --git a/src/renderers/dom/client/syntheticEvents/SyntheticEvent.js b/src/renderers/shared/stack/event/SyntheticEvent.js
similarity index 75%
rename from src/renderers/dom/client/syntheticEvents/SyntheticEvent.js
rename to src/renderers/shared/stack/event/SyntheticEvent.js
index d3cdf3c39..8325c734e 100644
--- a/src/renderers/dom/client/syntheticEvents/SyntheticEvent.js
+++ b/src/renderers/shared/stack/event/SyntheticEvent.js
@@ -68,3 +68,8 @@ var EventInterface = {
  */
-function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
+function SyntheticEvent(
+  dispatchConfig,
+  targetInst,
+  nativeEvent,
+  nativeEventTarget,
+) {
   if (__DEV__) {
@@ -100,5 +105,5 @@ function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarg
 
-  var defaultPrevented = nativeEvent.defaultPrevented != null ?
-    nativeEvent.defaultPrevented :
-    nativeEvent.returnValue === false;
+  var defaultPrevented = nativeEvent.defaultPrevented != null
+    ? nativeEvent.defaultPrevented
+    : nativeEvent.returnValue === false;
   if (defaultPrevented) {
@@ -113,3 +118,2 @@ function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarg
 Object.assign(SyntheticEvent.prototype, {
-
   preventDefault: function() {
@@ -123,3 +127,4 @@ Object.assign(SyntheticEvent.prototype, {
       event.preventDefault();
-    } else {
+      // eslint-disable-next-line valid-typeof
+    } else if (typeof event.returnValue !== 'unknown') {
       event.returnValue = false;
@@ -137,5 +142,12 @@ Object.assign(SyntheticEvent.prototype, {
       event.stopPropagation();
-    } else {
+      // eslint-disable-next-line valid-typeof
+    } else if (typeof event.cancelBubble !== 'unknown') {
+      // The ChangeEventPlugin registers a "propertychange" event for
+      // IE. This event does not support bubbling or cancelling, and
+      // any references to cancelBubble throw "Member not found".  A
+      // typeof check of "unknown" circumvents this issue (and is also
+      // IE specific).
       event.cancelBubble = true;
     }
+
     this.isPropagationStopped = emptyFunction.thatReturnsTrue;
@@ -166,3 +178,7 @@ Object.assign(SyntheticEvent.prototype, {
       if (__DEV__) {
-        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
+        Object.defineProperty(
+          this,
+          propName,
+          getPooledWarningPropertyDefinition(propName, Interface[propName]),
+        );
       } else {
@@ -175,9 +191,19 @@ Object.assign(SyntheticEvent.prototype, {
     if (__DEV__) {
-      var noop = require('emptyFunction');
-      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
-      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', noop));
-      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', noop));
+      Object.defineProperty(
+        this,
+        'nativeEvent',
+        getPooledWarningPropertyDefinition('nativeEvent', null),
+      );
+      Object.defineProperty(
+        this,
+        'preventDefault',
+        getPooledWarningPropertyDefinition('preventDefault', emptyFunction),
+      );
+      Object.defineProperty(
+        this,
+        'stopPropagation',
+        getPooledWarningPropertyDefinition('stopPropagation', emptyFunction),
+      );
     }
   },
-
 });
@@ -196,11 +222,13 @@ if (__DEV__) {
           set: function(target, prop, value) {
-            if (prop !== 'isPersistent' &&
-                !target.constructor.Interface.hasOwnProperty(prop) &&
-                shouldBeReleasedProperties.indexOf(prop) === -1) {
+            if (
+              prop !== 'isPersistent' &&
+              !target.constructor.Interface.hasOwnProperty(prop) &&
+              shouldBeReleasedProperties.indexOf(prop) === -1
+            ) {
               warning(
                 didWarnForAddedNewProperty || target.isPersistent(),
-                'This synthetic event is reused for performance reasons. If you\'re ' +
-                'seeing this, you\'re adding a new property in the synthetic event object. ' +
-                'The property is never released. See ' +
-                'https://fb.me/react-event-pooling for more information.'
+                "This synthetic event is reused for performance reasons. If you're " +
+                  "seeing this, you're adding a new property in the synthetic event object. " +
+                  'The property is never released. See ' +
+                  'https://fb.me/react-event-pooling for more information.',
               );
@@ -267,3 +295,5 @@ function getPooledWarningPropertyDefinition(propName, getVal) {
     var action = isFunction ? 'accessing the method' : 'accessing the property';
-    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
+    var result = isFunction
+      ? 'This is a no-op function'
+      : 'This is set to null';
     warn(action, result);
@@ -276,9 +306,9 @@ function getPooledWarningPropertyDefinition(propName, getVal) {
       warningCondition,
-      'This synthetic event is reused for performance reasons. If you\'re seeing this, ' +
-      'you\'re %s `%s` on a released/nullified synthetic event. %s. ' +
-      'If you must keep the original synthetic event around, use event.persist(). ' +
-      'See https://fb.me/react-event-pooling for more information.',
+      "This synthetic event is reused for performance reasons. If you're seeing this, " +
+        "you're %s `%s` on a released/nullified synthetic event. %s. " +
+        'If you must keep the original synthetic event around, use event.persist(). ' +
+        'See https://fb.me/react-event-pooling for more information.',
       action,
       propName,
-      result
+      result,
     );
diff --git a/src/renderers/shared/event/__tests__/EventPluginHub-test.js b/src/renderers/shared/stack/event/__tests__/EventPluginHub-test.js
similarity index 77%
rename from src/renderers/shared/event/__tests__/EventPluginHub-test.js
rename to src/renderers/shared/stack/event/__tests__/EventPluginHub-test.js
index 5dc566c74..7f9598f2b 100644
--- a/src/renderers/shared/event/__tests__/EventPluginHub-test.js
+++ b/src/renderers/shared/stack/event/__tests__/EventPluginHub-test.js
@@ -13,7 +13,5 @@
 
-jest
-  .dontMock('EventPluginHub')
-  .mock('isEventSupported');
+jest.mock('isEventSupported');
 
-describe('EventPluginHub', function() {
+describe('EventPluginHub', () => {
   var EventPluginHub;
@@ -21,3 +19,3 @@ describe('EventPluginHub', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -28,7 +26,7 @@ describe('EventPluginHub', function() {
 
-  it('should prevent non-function listeners', function() {
+  it('should prevent non-function listeners', () => {
     expect(function() {
       EventPluginHub.putListener(1, 'onClick', 'not a function');
-    }).toThrow(
-      'Expected onClick listener to be a function, instead got type string'
+    }).toThrowError(
+      'Expected onClick listener to be a function, instead got type string',
     );
diff --git a/src/renderers/shared/event/__tests__/EventPluginRegistry-test.js b/src/renderers/shared/stack/event/__tests__/EventPluginRegistry-test.js
similarity index 81%
rename from src/renderers/shared/event/__tests__/EventPluginRegistry-test.js
rename to src/renderers/shared/stack/event/__tests__/EventPluginRegistry-test.js
index 7f06e58c1..7e068e214 100644
--- a/src/renderers/shared/event/__tests__/EventPluginRegistry-test.js
+++ b/src/renderers/shared/stack/event/__tests__/EventPluginRegistry-test.js
@@ -13,4 +13,3 @@
 
-
-describe('EventPluginRegistry', function() {
+describe('EventPluginRegistry', () => {
   var EventPluginRegistry;
@@ -18,3 +17,3 @@ describe('EventPluginRegistry', function() {
 
-  beforeEach(function() {
+  beforeEach(() => {
     EventPluginRegistry = require('EventPluginRegistry');
@@ -27,3 +26,3 @@ describe('EventPluginRegistry', function() {
 
-  it('should be able to inject ordering before plugins', function() {
+  it('should be able to inject ordering before plugins', () => {
     var OnePlugin = createPlugin();
@@ -47,3 +46,3 @@ describe('EventPluginRegistry', function() {
 
-  it('should be able to inject plugins before and after ordering', function() {
+  it('should be able to inject plugins before and after ordering', () => {
     var OnePlugin = createPlugin();
@@ -67,3 +66,3 @@ describe('EventPluginRegistry', function() {
 
-  it('should be able to inject repeated plugins and out-of-order', function() {
+  it('should be able to inject repeated plugins and out-of-order', () => {
     var OnePlugin = createPlugin();
@@ -88,3 +87,3 @@ describe('EventPluginRegistry', function() {
 
-  it('should throw if plugin does not implement `extractEvents`', function() {
+  it('should throw if plugin does not implement `extractEvents`', () => {
     var BadPlugin = {};
@@ -97,5 +96,5 @@ describe('EventPluginRegistry', function() {
       });
-    }).toThrow(
+    }).toThrowError(
       'EventPluginRegistry: Event plugins must implement an `extractEvents` ' +
-      'method, but `bad` does not.'
+        'method, but `bad` does not.',
     );
@@ -103,3 +102,3 @@ describe('EventPluginRegistry', function() {
 
-  it('should throw if plugin does not exist in ordering', function() {
+  it('should throw if plugin does not exist in ordering', () => {
     var OnePlugin = createPlugin();
@@ -114,5 +113,5 @@ describe('EventPluginRegistry', function() {
       });
-    }).toThrow(
+    }).toThrowError(
       'EventPluginRegistry: Cannot inject event plugins that do not exist ' +
-      'in the plugin ordering, `random`.'
+        'in the plugin ordering, `random`.',
     );
@@ -120,3 +119,3 @@ describe('EventPluginRegistry', function() {
 
-  it('should throw if ordering is injected more than once', function() {
+  it('should throw if ordering is injected more than once', () => {
     var pluginOrdering = [];
@@ -127,5 +126,5 @@ describe('EventPluginRegistry', function() {
       EventPluginRegistry.injectEventPluginOrder(pluginOrdering);
-    }).toThrow(
+    }).toThrowError(
       'EventPluginRegistry: Cannot inject event plugin ordering more than ' +
-      'once. You are likely trying to load more than one copy of React.'
+        'once. You are likely trying to load more than one copy of React.',
     );
@@ -133,3 +132,3 @@ describe('EventPluginRegistry', function() {
 
-  it('should throw if different plugins injected using same name', function() {
+  it('should throw if different plugins injected using same name', () => {
     var OnePlugin = createPlugin();
@@ -141,5 +140,5 @@ describe('EventPluginRegistry', function() {
       EventPluginRegistry.injectEventPluginsByName({same: TwoPlugin});
-    }).toThrow(
+    }).toThrowError(
       'EventPluginRegistry: Cannot inject two different event plugins using ' +
-      'the same name, `same`.'
+        'the same name, `same`.',
     );
@@ -147,3 +146,3 @@ describe('EventPluginRegistry', function() {
 
-  it('should publish registration names of injected plugins', function() {
+  it('should publish registration names of injected plugins', () => {
     var OnePlugin = createPlugin({
@@ -168,3 +167,5 @@ describe('EventPluginRegistry', function() {
 
-    expect(Object.keys(EventPluginRegistry.registrationNameModules).length).toBe(2);
+    expect(
+      Object.keys(EventPluginRegistry.registrationNameModules).length,
+    ).toBe(2);
     expect(EventPluginRegistry.registrationNameModules.onClick).toBe(OnePlugin);
@@ -174,10 +175,14 @@ describe('EventPluginRegistry', function() {
 
-    expect(Object.keys(EventPluginRegistry.registrationNameModules).length).toBe(4);
-    expect(EventPluginRegistry.registrationNameModules.onMagicBubble).toBe(TwoPlugin);
     expect(
-      EventPluginRegistry.registrationNameModules.onMagicCapture
-    ).toBe(TwoPlugin);
+      Object.keys(EventPluginRegistry.registrationNameModules).length,
+    ).toBe(4);
+    expect(EventPluginRegistry.registrationNameModules.onMagicBubble).toBe(
+      TwoPlugin,
+    );
+    expect(EventPluginRegistry.registrationNameModules.onMagicCapture).toBe(
+      TwoPlugin,
+    );
   });
 
-  it('should throw if multiple registration names collide', function() {
+  it('should throw if multiple registration names collide', () => {
     var OnePlugin = createPlugin({
@@ -205,5 +210,5 @@ describe('EventPluginRegistry', function() {
       EventPluginRegistry.injectEventPluginOrder(['one', 'two']);
-    }).toThrow(
+    }).toThrowError(
       'EventPluginHub: More than one plugin attempted to publish the same ' +
-      'registration name, `onPhotoCapture`.'
+        'registration name, `onPhotoCapture`.',
     );
@@ -211,6 +216,8 @@ describe('EventPluginRegistry', function() {
 
-  it('should throw if an invalid event is published', function() {
+  it('should throw if an invalid event is published', () => {
     var OnePlugin = createPlugin({
       eventTypes: {
-        badEvent: {/* missing configuration */},
+        badEvent: {
+          /* missing configuration */
+        },
       },
@@ -222,5 +229,5 @@ describe('EventPluginRegistry', function() {
       EventPluginRegistry.injectEventPluginOrder(['one']);
-    }).toThrow(
+    }).toThrowError(
       'EventPluginRegistry: Failed to publish event `badEvent` for plugin ' +
-      '`one`.'
+        '`one`.',
     );
@@ -228,3 +235,3 @@ describe('EventPluginRegistry', function() {
 
-  it('should be able to get the plugin from synthetic events', function() {
+  it('should be able to get the plugin from synthetic events', () => {
     var clickDispatchConfig = {
@@ -255,10 +262,9 @@ describe('EventPluginRegistry', function() {
 
-    expect(
-      EventPluginRegistry.getPluginModuleForEvent(clickEvent)
-    ).toBe(OnePlugin);
-    expect(
-      EventPluginRegistry.getPluginModuleForEvent(magicEvent)
-    ).toBe(OnePlugin);
+    expect(EventPluginRegistry.getPluginModuleForEvent(clickEvent)).toBe(
+      OnePlugin,
+    );
+    expect(EventPluginRegistry.getPluginModuleForEvent(magicEvent)).toBe(
+      OnePlugin,
+    );
   });
-
 });
diff --git a/src/renderers/shared/event/eventPlugins/ResponderEventPlugin.js b/src/renderers/shared/stack/event/eventPlugins/ResponderEventPlugin.js
similarity index 85%
rename from src/renderers/shared/event/eventPlugins/ResponderEventPlugin.js
rename to src/renderers/shared/stack/event/eventPlugins/ResponderEventPlugin.js
index d673b8add..15601903b 100644
--- a/src/renderers/shared/event/eventPlugins/ResponderEventPlugin.js
+++ b/src/renderers/shared/stack/event/eventPlugins/ResponderEventPlugin.js
@@ -13,3 +13,2 @@
 
-var EventConstants = require('EventConstants');
 var EventPluginUtils = require('EventPluginUtils');
@@ -20,4 +19,2 @@ var ResponderTouchHistoryStore = require('ResponderTouchHistoryStore');
 var accumulate = require('accumulate');
-var invariant = require('invariant');
-var keyOf = require('keyOf');
 
@@ -48,3 +45,3 @@ var previousActiveTouches = 0;
 
-var changeResponder = function(nextResponderInst, blockNativeResponder) {
+var changeResponder = function(nextResponderInst, blockHostResponder) {
   var oldResponderInst = responderInst;
@@ -55,3 +52,3 @@ var changeResponder = function(nextResponderInst, blockNativeResponder) {
       nextResponderInst,
-      blockNativeResponder
+      blockHostResponder,
     );
@@ -67,4 +64,4 @@ var eventTypes = {
     phasedRegistrationNames: {
-      bubbled: keyOf({onStartShouldSetResponder: null}),
-      captured: keyOf({onStartShouldSetResponderCapture: null}),
+      bubbled: 'onStartShouldSetResponder',
+      captured: 'onStartShouldSetResponderCapture',
     },
@@ -83,4 +80,4 @@ var eventTypes = {
     phasedRegistrationNames: {
-      bubbled: keyOf({onScrollShouldSetResponder: null}),
-      captured: keyOf({onScrollShouldSetResponderCapture: null}),
+      bubbled: 'onScrollShouldSetResponder',
+      captured: 'onScrollShouldSetResponderCapture',
     },
@@ -97,4 +94,4 @@ var eventTypes = {
     phasedRegistrationNames: {
-      bubbled: keyOf({onSelectionChangeShouldSetResponder: null}),
-      captured: keyOf({onSelectionChangeShouldSetResponderCapture: null}),
+      bubbled: 'onSelectionChangeShouldSetResponder',
+      captured: 'onSelectionChangeShouldSetResponderCapture',
     },
@@ -108,4 +105,4 @@ var eventTypes = {
     phasedRegistrationNames: {
-      bubbled: keyOf({onMoveShouldSetResponder: null}),
-      captured: keyOf({onMoveShouldSetResponderCapture: null}),
+      bubbled: 'onMoveShouldSetResponder',
+      captured: 'onMoveShouldSetResponderCapture',
     },
@@ -116,12 +113,12 @@ var eventTypes = {
    */
-  responderStart: {registrationName: keyOf({onResponderStart: null})},
-  responderMove: {registrationName: keyOf({onResponderMove: null})},
-  responderEnd: {registrationName: keyOf({onResponderEnd: null})},
-  responderRelease: {registrationName: keyOf({onResponderRelease: null})},
+  responderStart: {registrationName: 'onResponderStart'},
+  responderMove: {registrationName: 'onResponderMove'},
+  responderEnd: {registrationName: 'onResponderEnd'},
+  responderRelease: {registrationName: 'onResponderRelease'},
   responderTerminationRequest: {
-    registrationName: keyOf({onResponderTerminationRequest: null}),
+    registrationName: 'onResponderTerminationRequest',
   },
-  responderGrant: {registrationName: keyOf({onResponderGrant: null})},
-  responderReject: {registrationName: keyOf({onResponderReject: null})},
-  responderTerminate: {registrationName: keyOf({onResponderTerminate: null})},
+  responderGrant: {registrationName: 'onResponderGrant'},
+  responderReject: {registrationName: 'onResponderReject'},
+  responderTerminate: {registrationName: 'onResponderTerminate'},
 };
@@ -258,4 +255,2 @@ to return true:wantsResponderID|                            |
 
-
-
 /**
@@ -324,15 +319,16 @@ function setResponderAndExtractTransfer(
   nativeEvent,
-  nativeEventTarget
+  nativeEventTarget,
 ) {
-  var shouldSetEventType =
-    isStartish(topLevelType) ? eventTypes.startShouldSetResponder :
-    isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder :
-    topLevelType === EventConstants.topLevelTypes.topSelectionChange ?
-      eventTypes.selectionChangeShouldSetResponder :
-    eventTypes.scrollShouldSetResponder;
+  var shouldSetEventType = isStartish(topLevelType)
+    ? eventTypes.startShouldSetResponder
+    : isMoveish(topLevelType)
+      ? eventTypes.moveShouldSetResponder
+      : topLevelType === 'topSelectionChange'
+        ? eventTypes.selectionChangeShouldSetResponder
+        : eventTypes.scrollShouldSetResponder;
 
   // TODO: stop one short of the current responder.
-  var bubbleShouldSetFrom = !responderInst ?
-    targetInst :
-    EventPluginUtils.getLowestCommonAncestor(responderInst, targetInst);
+  var bubbleShouldSetFrom = !responderInst
+    ? targetInst
+    : EventPluginUtils.getLowestCommonAncestor(responderInst, targetInst);
 
@@ -347,3 +343,3 @@ function setResponderAndExtractTransfer(
     nativeEvent,
-    nativeEventTarget
+    nativeEventTarget,
   );
@@ -368,3 +364,3 @@ function setResponderAndExtractTransfer(
     nativeEvent,
-    nativeEventTarget
+    nativeEventTarget,
   );
@@ -373,5 +369,4 @@ function setResponderAndExtractTransfer(
   EventPropagators.accumulateDirectDispatches(grantEvent);
-  var blockNativeResponder = executeDirectDispatch(grantEvent) === true;
+  var blockHostResponder = executeDirectDispatch(grantEvent) === true;
   if (responderInst) {
-
     var terminationRequestEvent = ResponderSyntheticEvent.getPooled(
@@ -380,7 +375,9 @@ function setResponderAndExtractTransfer(
       nativeEvent,
-      nativeEventTarget
+      nativeEventTarget,
     );
-    terminationRequestEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
+    terminationRequestEvent.touchHistory =
+      ResponderTouchHistoryStore.touchHistory;
     EventPropagators.accumulateDirectDispatches(terminationRequestEvent);
-    var shouldSwitch = !hasDispatches(terminationRequestEvent) ||
+    var shouldSwitch =
+      !hasDispatches(terminationRequestEvent) ||
       executeDirectDispatch(terminationRequestEvent);
@@ -395,3 +392,3 @@ function setResponderAndExtractTransfer(
         nativeEvent,
-        nativeEventTarget
+        nativeEventTarget,
       );
@@ -400,3 +397,3 @@ function setResponderAndExtractTransfer(
       extracted = accumulate(extracted, [grantEvent, terminateEvent]);
-      changeResponder(wantsResponderInst, blockNativeResponder);
+      changeResponder(wantsResponderInst, blockHostResponder);
     } else {
@@ -406,3 +403,3 @@ function setResponderAndExtractTransfer(
         nativeEvent,
-        nativeEventTarget
+        nativeEventTarget,
       );
@@ -414,3 +411,3 @@ function setResponderAndExtractTransfer(
     extracted = accumulate(extracted, grantEvent);
-    changeResponder(wantsResponderInst, blockNativeResponder);
+    changeResponder(wantsResponderInst, blockHostResponder);
   }
@@ -428,3 +425,4 @@ function setResponderAndExtractTransfer(
 function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
-  return topLevelInst && (
+  return (
+    topLevelInst &&
     // responderIgnoreScroll: We are trying to migrate away from specifically
@@ -432,8 +430,6 @@ function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
     // will send topTouchCancel to handle canceling touch events instead
-    (topLevelType === EventConstants.topLevelTypes.topScroll &&
-      !nativeEvent.responderIgnoreScroll) ||
-    (trackedTouchCount > 0 &&
-      topLevelType === EventConstants.topLevelTypes.topSelectionChange) ||
-    isStartish(topLevelType) ||
-    isMoveish(topLevelType)
+    ((topLevelType === 'topScroll' && !nativeEvent.responderIgnoreScroll) ||
+      (trackedTouchCount > 0 && topLevelType === 'topSelectionChange') ||
+      isStartish(topLevelType) ||
+      isMoveish(topLevelType))
   );
@@ -467,5 +463,3 @@ function noResponderTouches(nativeEvent) {
 
-
 var ResponderEventPlugin = {
-
   /* For unit testing only */
@@ -486,3 +480,3 @@ var ResponderEventPlugin = {
     nativeEvent,
-    nativeEventTarget
+    nativeEventTarget,
   ) {
@@ -491,18 +485,22 @@ var ResponderEventPlugin = {
     } else if (isEndish(topLevelType)) {
-      trackedTouchCount -= 1;
-      invariant(
-        trackedTouchCount >= 0,
-        'Ended a touch event which was not counted in trackedTouchCount.'
-      );
+      if (trackedTouchCount >= 0) {
+        trackedTouchCount -= 1;
+      } else {
+        console.error(
+          'Ended a touch event which was not counted in `trackedTouchCount`.',
+        );
+        return null;
+      }
     }
 
-    ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent, nativeEventTarget);
+    ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);
 
-    var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ?
-      setResponderAndExtractTransfer(
-        topLevelType,
-        targetInst,
-        nativeEvent,
-        nativeEventTarget) :
-      null;
+    var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent)
+      ? setResponderAndExtractTransfer(
+          topLevelType,
+          targetInst,
+          nativeEvent,
+          nativeEventTarget,
+        )
+      : null;
     // Responder may or may not have transferred on a new touch start/move.
@@ -520,16 +518,15 @@ var ResponderEventPlugin = {
     var isResponderTouchEnd = responderInst && isEndish(topLevelType);
-    var incrementalTouch =
-      isResponderTouchStart ? eventTypes.responderStart :
-      isResponderTouchMove ? eventTypes.responderMove :
-      isResponderTouchEnd ? eventTypes.responderEnd :
-      null;
+    var incrementalTouch = isResponderTouchStart
+      ? eventTypes.responderStart
+      : isResponderTouchMove
+        ? eventTypes.responderMove
+        : isResponderTouchEnd ? eventTypes.responderEnd : null;
 
     if (incrementalTouch) {
-      var gesture =
-        ResponderSyntheticEvent.getPooled(
-          incrementalTouch,
-          responderInst,
-          nativeEvent,
-          nativeEventTarget
-        );
+      var gesture = ResponderSyntheticEvent.getPooled(
+        incrementalTouch,
+        responderInst,
+        nativeEvent,
+        nativeEventTarget,
+      );
       gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;
@@ -540,4 +537,3 @@ var ResponderEventPlugin = {
     var isResponderTerminate =
-      responderInst &&
-      topLevelType === EventConstants.topLevelTypes.topTouchCancel;
+      responderInst && topLevelType === 'topTouchCancel';
     var isResponderRelease =
@@ -547,9 +543,11 @@ var ResponderEventPlugin = {
       noResponderTouches(nativeEvent);
-    var finalTouch =
-      isResponderTerminate ? eventTypes.responderTerminate :
-      isResponderRelease ? eventTypes.responderRelease :
-      null;
+    var finalTouch = isResponderTerminate
+      ? eventTypes.responderTerminate
+      : isResponderRelease ? eventTypes.responderRelease : null;
     if (finalTouch) {
       var finalEvent = ResponderSyntheticEvent.getPooled(
-        finalTouch, responderInst, nativeEvent, nativeEventTarget
+        finalTouch,
+        responderInst,
+        nativeEvent,
+        nativeEventTarget,
       );
@@ -563,6 +561,8 @@ var ResponderEventPlugin = {
       ResponderTouchHistoryStore.touchHistory.numberActiveTouches;
-    if (ResponderEventPlugin.GlobalInteractionHandler &&
-      numberActiveTouches !== previousActiveTouches) {
+    if (
+      ResponderEventPlugin.GlobalInteractionHandler &&
+      numberActiveTouches !== previousActiveTouches
+    ) {
       ResponderEventPlugin.GlobalInteractionHandler.onChange(
-        numberActiveTouches
+        numberActiveTouches,
       );
diff --git a/src/renderers/shared/event/eventPlugins/ResponderSyntheticEvent.js b/src/renderers/shared/stack/event/eventPlugins/ResponderSyntheticEvent.js
similarity index 82%
rename from src/renderers/shared/event/eventPlugins/ResponderSyntheticEvent.js
rename to src/renderers/shared/stack/event/eventPlugins/ResponderSyntheticEvent.js
index f1cf77fea..f8e2132d5 100644
--- a/src/renderers/shared/event/eventPlugins/ResponderSyntheticEvent.js
+++ b/src/renderers/shared/stack/event/eventPlugins/ResponderSyntheticEvent.js
@@ -32,4 +32,15 @@ var ResponderEventInterface = {
  */
-function ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
-  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
+function ResponderSyntheticEvent(
+  dispatchConfig,
+  dispatchMarker,
+  nativeEvent,
+  nativeEventTarget,
+) {
+  return SyntheticEvent.call(
+    this,
+    dispatchConfig,
+    dispatchMarker,
+    nativeEvent,
+    nativeEventTarget,
+  );
 }
diff --git a/src/renderers/shared/stack/event/eventPlugins/ResponderTouchHistoryStore.js b/src/renderers/shared/stack/event/eventPlugins/ResponderTouchHistoryStore.js
new file mode 100644
index 000000000..5bebd29d1
--- /dev/null
+++ b/src/renderers/shared/stack/event/eventPlugins/ResponderTouchHistoryStore.js
@@ -0,0 +1,220 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ResponderTouchHistoryStore
+ * @flow
+ */
+
+'use strict';
+
+const EventPluginUtils = require('EventPluginUtils');
+
+const invariant = require('invariant');
+const warning = require('warning');
+
+const {isEndish, isMoveish, isStartish} = EventPluginUtils;
+
+/**
+ * Tracks the position and time of each active touch by `touch.identifier`. We
+ * should typically only see IDs in the range of 1-20 because IDs get recycled
+ * when touches end and start again.
+ */
+type TouchRecord = {
+  touchActive: boolean,
+  startPageX: number,
+  startPageY: number,
+  startTimeStamp: number,
+  currentPageX: number,
+  currentPageY: number,
+  currentTimeStamp: number,
+  previousPageX: number,
+  previousPageY: number,
+  previousTimeStamp: number,
+};
+
+const MAX_TOUCH_BANK = 20;
+const touchBank: Array<TouchRecord> = [];
+const touchHistory = {
+  touchBank,
+  numberActiveTouches: 0,
+  // If there is only one active touch, we remember its location. This prevents
+  // us having to loop through all of the touches all the time in the most
+  // common case.
+  indexOfSingleActiveTouch: -1,
+  mostRecentTimeStamp: 0,
+};
+
+type Touch = {
+  identifier: ?number,
+  pageX: number,
+  pageY: number,
+  timestamp: number,
+};
+type TouchEvent = {
+  changedTouches: Array<Touch>,
+  touches: Array<Touch>,
+};
+
+function timestampForTouch(touch: Touch): number {
+  // The legacy internal implementation provides "timeStamp", which has been
+  // renamed to "timestamp". Let both work for now while we iron it out
+  // TODO (evv): rename timeStamp to timestamp in internal code
+  return (touch: any).timeStamp || touch.timestamp;
+}
+
+/**
+ * TODO: Instead of making gestures recompute filtered velocity, we could
+ * include a built in velocity computation that can be reused globally.
+ */
+function createTouchRecord(touch: Touch): TouchRecord {
+  return {
+    touchActive: true,
+    startPageX: touch.pageX,
+    startPageY: touch.pageY,
+    startTimeStamp: timestampForTouch(touch),
+    currentPageX: touch.pageX,
+    currentPageY: touch.pageY,
+    currentTimeStamp: timestampForTouch(touch),
+    previousPageX: touch.pageX,
+    previousPageY: touch.pageY,
+    previousTimeStamp: timestampForTouch(touch),
+  };
+}
+
+function resetTouchRecord(touchRecord: TouchRecord, touch: Touch): void {
+  touchRecord.touchActive = true;
+  touchRecord.startPageX = touch.pageX;
+  touchRecord.startPageY = touch.pageY;
+  touchRecord.startTimeStamp = timestampForTouch(touch);
+  touchRecord.currentPageX = touch.pageX;
+  touchRecord.currentPageY = touch.pageY;
+  touchRecord.currentTimeStamp = timestampForTouch(touch);
+  touchRecord.previousPageX = touch.pageX;
+  touchRecord.previousPageY = touch.pageY;
+  touchRecord.previousTimeStamp = timestampForTouch(touch);
+}
+
+function getTouchIdentifier({identifier}: Touch): number {
+  invariant(identifier != null, 'Touch object is missing identifier.');
+  warning(
+    identifier <= MAX_TOUCH_BANK,
+    'Touch identifier %s is greater than maximum supported %s which causes ' +
+      'performance issues backfilling array locations for all of the indices.',
+    identifier,
+    MAX_TOUCH_BANK,
+  );
+  return identifier;
+}
+
+function recordTouchStart(touch: Touch): void {
+  const identifier = getTouchIdentifier(touch);
+  const touchRecord = touchBank[identifier];
+  if (touchRecord) {
+    resetTouchRecord(touchRecord, touch);
+  } else {
+    touchBank[identifier] = createTouchRecord(touch);
+  }
+  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
+}
+
+function recordTouchMove(touch: Touch): void {
+  const touchRecord = touchBank[getTouchIdentifier(touch)];
+  if (touchRecord) {
+    touchRecord.touchActive = true;
+    touchRecord.previousPageX = touchRecord.currentPageX;
+    touchRecord.previousPageY = touchRecord.currentPageY;
+    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
+    touchRecord.currentPageX = touch.pageX;
+    touchRecord.currentPageY = touch.pageY;
+    touchRecord.currentTimeStamp = timestampForTouch(touch);
+    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
+  } else {
+    console.error(
+      'Cannot record touch move without a touch start.\n' + 'Touch Move: %s\n',
+      'Touch Bank: %s',
+      printTouch(touch),
+      printTouchBank(),
+    );
+  }
+}
+
+function recordTouchEnd(touch: Touch): void {
+  const touchRecord = touchBank[getTouchIdentifier(touch)];
+  if (touchRecord) {
+    touchRecord.touchActive = false;
+    touchRecord.previousPageX = touchRecord.currentPageX;
+    touchRecord.previousPageY = touchRecord.currentPageY;
+    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
+    touchRecord.currentPageX = touch.pageX;
+    touchRecord.currentPageY = touch.pageY;
+    touchRecord.currentTimeStamp = timestampForTouch(touch);
+    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
+  } else {
+    console.error(
+      'Cannot record touch end without a touch start.\n' + 'Touch End: %s\n',
+      'Touch Bank: %s',
+      printTouch(touch),
+      printTouchBank(),
+    );
+  }
+}
+
+function printTouch(touch: Touch): string {
+  return JSON.stringify({
+    identifier: touch.identifier,
+    pageX: touch.pageX,
+    pageY: touch.pageY,
+    timestamp: timestampForTouch(touch),
+  });
+}
+
+function printTouchBank(): string {
+  let printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));
+  if (touchBank.length > MAX_TOUCH_BANK) {
+    printed += ' (original size: ' + touchBank.length + ')';
+  }
+  return printed;
+}
+
+const ResponderTouchHistoryStore = {
+  recordTouchTrack(topLevelType: string, nativeEvent: TouchEvent): void {
+    if (isMoveish(topLevelType)) {
+      nativeEvent.changedTouches.forEach(recordTouchMove);
+    } else if (isStartish(topLevelType)) {
+      nativeEvent.changedTouches.forEach(recordTouchStart);
+      touchHistory.numberActiveTouches = nativeEvent.touches.length;
+      if (touchHistory.numberActiveTouches === 1) {
+        touchHistory.indexOfSingleActiveTouch =
+          nativeEvent.touches[0].identifier;
+      }
+    } else if (isEndish(topLevelType)) {
+      nativeEvent.changedTouches.forEach(recordTouchEnd);
+      touchHistory.numberActiveTouches = nativeEvent.touches.length;
+      if (touchHistory.numberActiveTouches === 1) {
+        for (let i = 0; i < touchBank.length; i++) {
+          const touchTrackToCheck = touchBank[i];
+          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
+            touchHistory.indexOfSingleActiveTouch = i;
+            break;
+          }
+        }
+        if (__DEV__) {
+          const activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];
+          warning(
+            activeRecord != null && activeRecord.touchActive,
+            'Cannot find single active touch.',
+          );
+        }
+      }
+    }
+  },
+
+  touchHistory,
+};
+
+module.exports = ResponderTouchHistoryStore;
diff --git a/src/renderers/shared/stack/event/eventPlugins/TouchHistoryMath.js b/src/renderers/shared/stack/event/eventPlugins/TouchHistoryMath.js
new file mode 100644
index 000000000..a841e00af
--- /dev/null
+++ b/src/renderers/shared/stack/event/eventPlugins/TouchHistoryMath.js
@@ -0,0 +1,148 @@
+/**
+ * @providesModule TouchHistoryMath
+ */
+
+'use strict';
+
+var TouchHistoryMath = {
+  /**
+   * This code is optimized and not intended to look beautiful. This allows
+   * computing of touch centroids that have moved after `touchesChangedAfter`
+   * timeStamp. You can compute the current centroid involving all touches
+   * moves after `touchesChangedAfter`, or you can compute the previous
+   * centroid of all touches that were moved after `touchesChangedAfter`.
+   *
+   * @param {TouchHistoryMath} touchHistory Standard Responder touch track
+   * data.
+   * @param {number} touchesChangedAfter timeStamp after which moved touches
+   * are considered "actively moving" - not just "active".
+   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.
+   * @param {boolean} ofCurrent Compute current centroid for actively moving
+   * touches vs. previous centroid of now actively moving touches.
+   * @return {number} value of centroid in specified dimension.
+   */
+  centroidDimension: function(
+    touchHistory,
+    touchesChangedAfter,
+    isXAxis,
+    ofCurrent,
+  ) {
+    var touchBank = touchHistory.touchBank;
+    var total = 0;
+    var count = 0;
+
+    var oneTouchData = touchHistory.numberActiveTouches === 1
+      ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch]
+      : null;
+
+    if (oneTouchData !== null) {
+      if (
+        oneTouchData.touchActive &&
+        oneTouchData.currentTimeStamp > touchesChangedAfter
+      ) {
+        total += ofCurrent && isXAxis
+          ? oneTouchData.currentPageX
+          : ofCurrent && !isXAxis
+            ? oneTouchData.currentPageY
+            : !ofCurrent && isXAxis
+              ? oneTouchData.previousPageX
+              : oneTouchData.previousPageY;
+        count = 1;
+      }
+    } else {
+      for (var i = 0; i < touchBank.length; i++) {
+        var touchTrack = touchBank[i];
+        if (
+          touchTrack !== null &&
+          touchTrack !== undefined &&
+          touchTrack.touchActive &&
+          touchTrack.currentTimeStamp >= touchesChangedAfter
+        ) {
+          var toAdd; // Yuck, program temporarily in invalid state.
+          if (ofCurrent && isXAxis) {
+            toAdd = touchTrack.currentPageX;
+          } else if (ofCurrent && !isXAxis) {
+            toAdd = touchTrack.currentPageY;
+          } else if (!ofCurrent && isXAxis) {
+            toAdd = touchTrack.previousPageX;
+          } else {
+            toAdd = touchTrack.previousPageY;
+          }
+          total += toAdd;
+          count++;
+        }
+      }
+    }
+    return count > 0 ? total / count : TouchHistoryMath.noCentroid;
+  },
+
+  currentCentroidXOfTouchesChangedAfter: function(
+    touchHistory,
+    touchesChangedAfter,
+  ) {
+    return TouchHistoryMath.centroidDimension(
+      touchHistory,
+      touchesChangedAfter,
+      true, // isXAxis
+      true, // ofCurrent
+    );
+  },
+
+  currentCentroidYOfTouchesChangedAfter: function(
+    touchHistory,
+    touchesChangedAfter,
+  ) {
+    return TouchHistoryMath.centroidDimension(
+      touchHistory,
+      touchesChangedAfter,
+      false, // isXAxis
+      true, // ofCurrent
+    );
+  },
+
+  previousCentroidXOfTouchesChangedAfter: function(
+    touchHistory,
+    touchesChangedAfter,
+  ) {
+    return TouchHistoryMath.centroidDimension(
+      touchHistory,
+      touchesChangedAfter,
+      true, // isXAxis
+      false, // ofCurrent
+    );
+  },
+
+  previousCentroidYOfTouchesChangedAfter: function(
+    touchHistory,
+    touchesChangedAfter,
+  ) {
+    return TouchHistoryMath.centroidDimension(
+      touchHistory,
+      touchesChangedAfter,
+      false, // isXAxis
+      false, // ofCurrent
+    );
+  },
+
+  currentCentroidX: function(touchHistory) {
+    return TouchHistoryMath.centroidDimension(
+      touchHistory,
+      0, // touchesChangedAfter
+      true, // isXAxis
+      true, // ofCurrent
+    );
+  },
+
+  currentCentroidY: function(touchHistory) {
+    return TouchHistoryMath.centroidDimension(
+      touchHistory,
+      0, // touchesChangedAfter
+      false, // isXAxis
+      true, // ofCurrent
+    );
+  },
+
+  noCentroid: -1,
+};
+
+module.exports = TouchHistoryMath;
diff --git a/src/renderers/shared/event/eventPlugins/__tests__/ResponderEventPlugin-test.js b/src/renderers/shared/stack/event/eventPlugins/__tests__/ResponderEventPlugin-test.js
similarity index 67%
rename from src/renderers/shared/event/eventPlugins/__tests__/ResponderEventPlugin-test.js
rename to src/renderers/shared/stack/event/eventPlugins/__tests__/ResponderEventPlugin-test.js
index 35e797d2f..e6689decd 100644
--- a/src/renderers/shared/event/eventPlugins/__tests__/ResponderEventPlugin-test.js
+++ b/src/renderers/shared/stack/event/eventPlugins/__tests__/ResponderEventPlugin-test.js
@@ -14,4 +14,2 @@
 var EventPluginHub;
-var EventConstants;
-var ReactInstanceHandles;
 var ResponderEventPlugin;
@@ -19,4 +17,2 @@ var EventPluginUtils;
 
-var topLevelTypes;
-
 var touch = function(nodeHandle, i) {
@@ -68,3 +64,3 @@ var _touchConfig = function(
   changedIndices,
-  eventTarget
+  eventTarget,
 ) {
@@ -72,8 +68,11 @@ var _touchConfig = function(
   var changedTouchObjects = subsequence(allTouchObjects, changedIndices);
-  var activeTouchObjects =
-    topType === 'topTouchStart' ? allTouchObjects :
-    topType === 'topTouchMove' ? allTouchObjects :
-    topType === 'topTouchEnd' ? antiSubsequence(allTouchObjects, changedIndices) :
-    topType === 'topTouchCancel' ? antiSubsequence(allTouchObjects, changedIndices) :
-    null;
+  var activeTouchObjects = topType === 'topTouchStart'
+    ? allTouchObjects
+    : topType === 'topTouchMove'
+      ? allTouchObjects
+      : topType === 'topTouchEnd'
+        ? antiSubsequence(allTouchObjects, changedIndices)
+        : topType === 'topTouchCancel'
+          ? antiSubsequence(allTouchObjects, changedIndices)
+          : null;
 
@@ -83,3 +82,3 @@ var _touchConfig = function(
       activeTouchObjects,
-      changedTouchObjects
+      changedTouchObjects,
     ),
@@ -110,3 +109,3 @@ var startConfig = function(nodeHandle, allTouchHandles, changedIndices) {
   return _touchConfig(
-    topLevelTypes.topTouchStart,
+    'topTouchStart',
     nodeHandle,
@@ -114,3 +113,3 @@ var startConfig = function(nodeHandle, allTouchHandles, changedIndices) {
     changedIndices,
-    nodeHandle
+    nodeHandle,
   );
@@ -123,3 +122,3 @@ var moveConfig = function(nodeHandle, allTouchHandles, changedIndices) {
   return _touchConfig(
-    topLevelTypes.topTouchMove,
+    'topTouchMove',
     nodeHandle,
@@ -127,3 +126,3 @@ var moveConfig = function(nodeHandle, allTouchHandles, changedIndices) {
     changedIndices,
-    nodeHandle
+    nodeHandle,
   );
@@ -136,3 +135,3 @@ var endConfig = function(nodeHandle, allTouchHandles, changedIndices) {
   return _touchConfig(
-    topLevelTypes.topTouchEnd,
+    'topTouchEnd',
     nodeHandle,
@@ -140,3 +139,3 @@ var endConfig = function(nodeHandle, allTouchHandles, changedIndices) {
     changedIndices,
-    nodeHandle
+    nodeHandle,
   );
@@ -175,5 +174,5 @@ var oneEventLoopTestConfig = function(readableIDToID) {
     // Negotiation
-    scrollShouldSetResponder: {bubbled:  {}, captured: {}},
-    startShouldSetResponder: {bubbled:  {}, captured: {}},
-    moveShouldSetResponder: {bubbled:  {}, captured: {}},
+    scrollShouldSetResponder: {bubbled: {}, captured: {}},
+    startShouldSetResponder: {bubbled: {}, captured: {}},
+    moveShouldSetResponder: {bubbled: {}, captured: {}},
     responderTerminationRequest: {},
@@ -181,9 +180,9 @@ var oneEventLoopTestConfig = function(readableIDToID) {
     // Non-negotiation
-    responderReject:    {}, // These do not bubble capture.
-    responderGrant:     {},
-    responderStart:     {},
-    responderMove:      {},
+    responderReject: {}, // These do not bubble capture.
+    responderGrant: {},
+    responderStart: {},
+    responderMove: {},
     responderTerminate: {},
-    responderEnd:       {},
-    responderRelease:   {},
+    responderEnd: {},
+    responderRelease: {},
   };
@@ -193,9 +192,18 @@ var oneEventLoopTestConfig = function(readableIDToID) {
         // Two phase
-        ret[eventName].bubbled[readableNodeName] =
-          {order: NA, assertEvent: null, returnVal: undefined};
-        ret[eventName].captured[readableNodeName] =
-          {order: NA, assertEvent: null, returnVal: undefined};
+        ret[eventName].bubbled[readableNodeName] = {
+          order: NA,
+          assertEvent: null,
+          returnVal: undefined,
+        };
+        ret[eventName].captured[readableNodeName] = {
+          order: NA,
+          assertEvent: null,
+          returnVal: undefined,
+        };
       } else {
-        ret[eventName][readableNodeName] =
-          {order: NA, assertEvent: null, returnVal: undefined};
+        ret[eventName][readableNodeName] = {
+          order: NA,
+          assertEvent: null,
+          returnVal: undefined,
+        };
       }
@@ -215,5 +223,9 @@ var registerTestHandlers = function(eventTestConfig, readableIDToID) {
     expect('').toBe(
-      'Event type: ' + registrationName +
-      '\nShould never occur on:' + readableID +
-      '\nFor event test config:\n' + JSON.stringify(eventTestConfig) + '\n'
+      'Event type: ' +
+        registrationName +
+        '\nShould never occur on:' +
+        readableID +
+        '\nFor event test config:\n' +
+        JSON.stringify(eventTestConfig) +
+        '\n',
     );
@@ -225,16 +237,15 @@ var registerTestHandlers = function(eventTestConfig, readableIDToID) {
       var id = readableIDToID[readableID];
-      var handler = nodeConfig.order === NA ? neverFire.bind(null, readableID, registrationName) :
-        // We partially apply readableID and nodeConfig, as they change in the
-        // parent closure across iterations.
-        function(rID, config, e) {
-          expect(
-            rID + '->' + registrationName + ' index:' + runs.dispatchCount++
-          ).toBe(
-            rID + '->' + registrationName + ' index:' + config.order
-          );
-          if (config.assertEvent) {
-            config.assertEvent(e);
-          }
-          return config.returnVal;
-        }.bind(null, readableID, nodeConfig);
+      var handler = nodeConfig.order === NA
+        ? neverFire.bind(null, readableID, registrationName)
+        : // We partially apply readableID and nodeConfig, as they change in the
+          // parent closure across iterations.
+          function(rID, config, e) {
+            expect(
+              rID + '->' + registrationName + ' index:' + runs.dispatchCount++,
+            ).toBe(rID + '->' + registrationName + ' index:' + config.order);
+            if (config.assertEvent) {
+              config.assertEvent(e);
+            }
+            return config.returnVal;
+          }.bind(null, readableID, nodeConfig);
       EventPluginHub.putListener(idToInstance[id], registrationName, handler);
@@ -247,8 +258,10 @@ var registerTestHandlers = function(eventTestConfig, readableIDToID) {
       registerOneEventType(
-        ResponderEventPlugin.eventTypes[eventName].phasedRegistrationNames.bubbled,
-        oneEventTypeTestConfig.bubbled
+        ResponderEventPlugin.eventTypes[eventName].phasedRegistrationNames
+          .bubbled,
+        oneEventTypeTestConfig.bubbled,
       );
       registerOneEventType(
-        ResponderEventPlugin.eventTypes[eventName].phasedRegistrationNames.captured,
-        oneEventTypeTestConfig.captured
+        ResponderEventPlugin.eventTypes[eventName].phasedRegistrationNames
+          .captured,
+        oneEventTypeTestConfig.captured,
       );
@@ -257,3 +270,3 @@ var registerTestHandlers = function(eventTestConfig, readableIDToID) {
         ResponderEventPlugin.eventTypes[eventName].registrationName,
-        oneEventTypeTestConfig
+        oneEventTypeTestConfig,
       );
@@ -264,5 +277,2 @@ var registerTestHandlers = function(eventTestConfig, readableIDToID) {
 
-
-
-
 var run = function(config, hierarchyConfig, nativeEventConfig) {
@@ -293,3 +303,3 @@ var run = function(config, hierarchyConfig, nativeEventConfig) {
     nativeEventConfig.nativeEvent,
-    nativeEventConfig.target
+    nativeEventConfig.target,
   );
@@ -303,6 +313,4 @@ var run = function(config, hierarchyConfig, nativeEventConfig) {
   // Ensure that every event that declared an `order`, was actually dispatched.
-  expect(
-    'number of events dispatched:' + runData.dispatchCount
-  ).toBe(
-    'number of events dispatched:' + (max + 1)
+  expect('number of events dispatched:' + runData.dispatchCount).toBe(
+    'number of events dispatched:' + (max + 1),
   ); // +1 for extra ++
@@ -317,3 +325,3 @@ var idToInstance = {};
 [GRANDPARENT_ID, PARENT_ID, CHILD_ID, CHILD_ID2].forEach(function(id) {
-  idToInstance[id] = {_rootNodeID: id};
+  idToInstance[id] = {_rootNodeID: id, _currentElement: {}};
 });
@@ -332,10 +340,85 @@ var siblings = {
 
-describe('ResponderEventPlugin', function() {
-  beforeEach(function() {
+describe('ResponderEventPlugin', () => {
+  // This test is written against React IDs such as 'root.a.b[10]' but we
+  // removed those. In order to make those tests still pass with minimum
+  // surgery, we are inlining the implementation of those IDs here as it
+  // is the only remaining call site.
+
+  var SEPARATOR = '.';
+
+  function isBoundary(id, index) {
+    return id.charAt(index) === SEPARATOR || index === id.length;
+  }
+
+  function isAncestorIDOf(ancestorID, descendantID) {
+    return (
+      descendantID.indexOf(ancestorID) === 0 &&
+      isBoundary(descendantID, ancestorID.length)
+    );
+  }
+
+  function getParentID(id) {
+    return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
+  }
+
+  function getNextDescendantID(ancestorID, destinationID) {
+    if (ancestorID === destinationID) {
+      return ancestorID;
+    }
+    // Skip over the ancestor and the immediate separator. Traverse until we hit
+    // another separator or we reach the end of `destinationID`.
+    var start = ancestorID.length + SEPARATOR.length;
+    var i;
+    for (i = start; i < destinationID.length; i++) {
+      if (isBoundary(destinationID, i)) {
+        break;
+      }
+    }
+    return destinationID.substr(0, i);
+  }
+
+  function getFirstCommonAncestorID(oneID, twoID) {
+    var minLength = Math.min(oneID.length, twoID.length);
+    if (minLength === 0) {
+      return '';
+    }
+    var lastCommonMarkerIndex = 0;
+    // Use `<=` to traverse until the "EOL" of the shorter string.
+    for (var i = 0; i <= minLength; i++) {
+      if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
+        lastCommonMarkerIndex = i;
+      } else if (oneID.charAt(i) !== twoID.charAt(i)) {
+        break;
+      }
+    }
+    return oneID.substr(0, lastCommonMarkerIndex);
+  }
+
+  function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
+    var traverseUp = isAncestorIDOf(stop, start);
+    var traverse = traverseUp ? getParentID : getNextDescendantID;
+    for (var id = start /* until break */; ; id = traverse(id, stop)) {
+      var ret;
+      if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
+        ret = cb(id, traverseUp ? 'bubbled' : 'captured', arg);
+      }
+      if (ret === false || id === stop) {
+        // Only break //after// visiting `stop`.
+        break;
+      }
+    }
+  }
+
+  function traverseTwoPhase(targetID, cb, arg) {
+    traverseParentPath('', targetID, cb, arg, true, false);
+    traverseParentPath(targetID, '', cb, arg, false, true);
+  }
+
+  // -- end of the React ID implementation
+
+  beforeEach(() => {
     jest.resetModuleRegistry();
 
-    EventConstants = require('EventConstants');
     EventPluginHub = require('EventPluginHub');
     EventPluginUtils = require('EventPluginUtils');
-    ReactInstanceHandles = require('ReactInstanceHandles');
     ResponderEventPlugin = require('ResponderEventPlugin');
@@ -353,15 +436,6 @@ describe('ResponderEventPlugin', function() {
       isAncestor: function(a, b) {
-        return ReactInstanceHandles.isAncestorIDOf(
-          a._rootNodeID,
-          b._rootNodeID
-        );
+        return isAncestorIDOf(a._rootNodeID, b._rootNodeID);
       },
       getLowestCommonAncestor: function(a, b) {
-        if (!a || !b) {
-          return null;
-        }
-        var commonID = ReactInstanceHandles.getFirstCommonAncestorID(
-          a._rootNodeID,
-          b._rootNodeID
-        );
+        var commonID = getFirstCommonAncestorID(a._rootNodeID, b._rootNodeID);
         return idToInstance[commonID] || null;
@@ -370,3 +444,3 @@ describe('ResponderEventPlugin', function() {
         var id = inst._rootNodeID;
-        var parentID = id.substr(0, id.lastIndexOf('.'));
+        var parentID = id.substr(0, id.lastIndexOf(SEPARATOR));
         return idToInstance[parentID] || null;
@@ -374,22 +448,32 @@ describe('ResponderEventPlugin', function() {
       traverseTwoPhase: function(target, fn, arg) {
-        ReactInstanceHandles.traverseTwoPhase(
-          target._rootNodeID,
-          function(id, upwards) {
-            fn(idToInstance[id], upwards, arg);
-          }
-        );
+        traverseTwoPhase(target._rootNodeID, function(id, phase) {
+          fn(idToInstance[id], phase, arg);
+        });
       },
     });
-
-    topLevelTypes = EventConstants.topLevelTypes;
   });
 
-  it('should do nothing when no one wants to respond', function() {
+  it('should do nothing when no one wants to respond', () => {
     var config = oneEventLoopTestConfig(three);
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.startShouldSetResponder.captured.parent = {order: 1, returnVal: false};
-    config.startShouldSetResponder.captured.child = {order: 2, returnVal: false};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.child = {
+      order: 2,
+      returnVal: false,
+    };
     config.startShouldSetResponder.bubbled.child = {order: 3, returnVal: false};
-    config.startShouldSetResponder.bubbled.parent = {order: 4, returnVal: false};
-    config.startShouldSetResponder.bubbled.grandParent = {order: 5, returnVal: false};
+    config.startShouldSetResponder.bubbled.parent = {
+      order: 4,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.bubbled.grandParent = {
+      order: 5,
+      returnVal: false,
+    };
     run(config, three, startConfig(three.child, [three.child], [0]));
@@ -403,3 +487,2 @@ describe('ResponderEventPlugin', function() {
 
-
   /**
@@ -409,6 +492,8 @@ describe('ResponderEventPlugin', function() {
 
-
   it('should grant responder grandParent while capturing', () => {
     var config = oneEventLoopTestConfig(three);
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: true};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: true,
+    };
     config.responderGrant.grandParent = {order: 1};
@@ -427,4 +512,10 @@ describe('ResponderEventPlugin', function() {
     var config = oneEventLoopTestConfig(three);
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.startShouldSetResponder.captured.parent = {order: 1, returnVal: true};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: true,
+    };
     config.responderGrant.parent = {order: 2};
@@ -443,4 +534,10 @@ describe('ResponderEventPlugin', function() {
     var config = oneEventLoopTestConfig(three);
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.startShouldSetResponder.captured.parent = {order: 1, returnVal: false};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
     config.startShouldSetResponder.captured.child = {order: 2, returnVal: true};
@@ -460,5 +557,14 @@ describe('ResponderEventPlugin', function() {
     var config = oneEventLoopTestConfig(three);
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.startShouldSetResponder.captured.parent = {order: 1, returnVal: false};
-    config.startShouldSetResponder.captured.child = {order: 2, returnVal: false};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.child = {
+      order: 2,
+      returnVal: false,
+    };
     config.startShouldSetResponder.bubbled.child = {order: 3, returnVal: true};
@@ -478,5 +584,14 @@ describe('ResponderEventPlugin', function() {
     var config = oneEventLoopTestConfig(three);
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.startShouldSetResponder.captured.parent = {order: 1, returnVal: false};
-    config.startShouldSetResponder.captured.child = {order: 2, returnVal: false};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.child = {
+      order: 2,
+      returnVal: false,
+    };
     config.startShouldSetResponder.bubbled.child = {order: 3, returnVal: false};
@@ -497,8 +612,23 @@ describe('ResponderEventPlugin', function() {
     var config = oneEventLoopTestConfig(three);
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.startShouldSetResponder.captured.parent = {order: 1, returnVal: false};
-    config.startShouldSetResponder.captured.child = {order: 2, returnVal: false};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.child = {
+      order: 2,
+      returnVal: false,
+    };
     config.startShouldSetResponder.bubbled.child = {order: 3, returnVal: false};
-    config.startShouldSetResponder.bubbled.parent = {order: 4, returnVal: false};
-    config.startShouldSetResponder.bubbled.grandParent = {order: 5, returnVal: true};
+    config.startShouldSetResponder.bubbled.parent = {
+      order: 4,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.bubbled.grandParent = {
+      order: 5,
+      returnVal: true,
+    };
     config.responderGrant.grandParent = {order: 6};
@@ -515,4 +645,2 @@ describe('ResponderEventPlugin', function() {
 
-
-
   /**
@@ -534,3 +662,6 @@ describe('ResponderEventPlugin', function() {
     config = oneEventLoopTestConfig(three);
-    config.moveShouldSetResponder.captured.grandParent = {order: 0, returnVal: true};
+    config.moveShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: true,
+    };
     config.responderGrant.grandParent = {order: 1};
@@ -559,3 +690,6 @@ describe('ResponderEventPlugin', function() {
     config = oneEventLoopTestConfig(three);
-    config.moveShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
+    config.moveShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
     config.moveShouldSetResponder.captured.parent = {order: 1, returnVal: true};
@@ -585,4 +719,10 @@ describe('ResponderEventPlugin', function() {
     config = oneEventLoopTestConfig(three);
-    config.moveShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.moveShouldSetResponder.captured.parent = {order: 1, returnVal: false};
+    config.moveShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.moveShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
     config.moveShouldSetResponder.captured.child = {order: 2, returnVal: true};
@@ -612,4 +752,10 @@ describe('ResponderEventPlugin', function() {
     config = oneEventLoopTestConfig(three);
-    config.moveShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.moveShouldSetResponder.captured.parent = {order: 1, returnVal: false};
+    config.moveShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.moveShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
     config.moveShouldSetResponder.captured.child = {order: 2, returnVal: false};
@@ -640,4 +786,10 @@ describe('ResponderEventPlugin', function() {
     config = oneEventLoopTestConfig(three);
-    config.moveShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.moveShouldSetResponder.captured.parent = {order: 1, returnVal: false};
+    config.moveShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.moveShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
     config.moveShouldSetResponder.captured.child = {order: 2, returnVal: false};
@@ -669,4 +821,10 @@ describe('ResponderEventPlugin', function() {
     config = oneEventLoopTestConfig(three);
-    config.moveShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.moveShouldSetResponder.captured.parent = {order: 1, returnVal: false};
+    config.moveShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.moveShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
     config.moveShouldSetResponder.captured.child = {order: 2, returnVal: false};
@@ -674,3 +832,6 @@ describe('ResponderEventPlugin', function() {
     config.moveShouldSetResponder.bubbled.parent = {order: 4, returnVal: false};
-    config.moveShouldSetResponder.bubbled.grandParent = {order: 5, returnVal: true};
+    config.moveShouldSetResponder.bubbled.grandParent = {
+      order: 5,
+      returnVal: true,
+    };
     config.responderGrant.grandParent = {order: 6};
@@ -687,3 +848,2 @@ describe('ResponderEventPlugin', function() {
 
-
   /**
@@ -695,4 +855,10 @@ describe('ResponderEventPlugin', function() {
     var config = oneEventLoopTestConfig(three);
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.startShouldSetResponder.captured.parent = {order: 1, returnVal: true};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: true,
+    };
     config.responderGrant.parent = {order: 2};
@@ -705,5 +871,11 @@ describe('ResponderEventPlugin', function() {
     config = oneEventLoopTestConfig(three);
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-
-    config.startShouldSetResponder.bubbled.grandParent = {order: 1, returnVal: false};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+
+    config.startShouldSetResponder.bubbled.grandParent = {
+      order: 1,
+      returnVal: false,
+    };
     config.responderStart.parent = {order: 2};
@@ -721,4 +893,10 @@ describe('ResponderEventPlugin', function() {
     var config = oneEventLoopTestConfig(three);
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.startShouldSetResponder.captured.parent = {order: 1, returnVal: true};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: true,
+    };
     config.responderGrant.parent = {order: 2};
@@ -731,3 +909,6 @@ describe('ResponderEventPlugin', function() {
     // Parent is responder, and responder is transferred by a second touch start
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: true};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: true,
+    };
     config.responderGrant.grandParent = {order: 1};
@@ -736,3 +917,7 @@ describe('ResponderEventPlugin', function() {
     config.responderStart.grandParent = {order: 4};
-    run(config, three, startConfig(three.child, [three.child, three.child], [1]));
+    run(
+      config,
+      three,
+      startConfig(three.child, [three.child, three.child], [1]),
+    );
     expect(ResponderEventPlugin._getResponderID()).toBe(three.grandParent);
@@ -741,3 +926,3 @@ describe('ResponderEventPlugin', function() {
     config.responderEnd.grandParent = {order: 0};
-                                      // one remains\ /one ended \
+    // one remains\ /one ended \
     run(config, three, endConfig(three.child, [three.child, three.child], [1]));
@@ -759,6 +944,18 @@ describe('ResponderEventPlugin', function() {
     var config = oneEventLoopTestConfig(three);
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.startShouldSetResponder.captured.parent = {order: 1, returnVal: false};
-    config.startShouldSetResponder.bubbled.parent = {order: 2, returnVal: false};
-    config.startShouldSetResponder.bubbled.grandParent = {order: 3, returnVal: false};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.bubbled.parent = {
+      order: 2,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.bubbled.grandParent = {
+      order: 3,
+      returnVal: false,
+    };
 
@@ -773,5 +970,14 @@ describe('ResponderEventPlugin', function() {
     // (Even if this is the second active touch).
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.startShouldSetResponder.captured.parent = {order: 1, returnVal: false};
-    config.startShouldSetResponder.captured.child = {order: 2, returnVal: false};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.child = {
+      order: 2,
+      returnVal: false,
+    };
     config.startShouldSetResponder.bubbled.child = {order: 3, returnVal: true};
@@ -780,6 +986,9 @@ describe('ResponderEventPlugin', function() {
     //                                     /  Two active touches  \  /one of them new\
-    run(config, three, startConfig(three.child, [three.parent, three.child], [1]));
+    run(
+      config,
+      three,
+      startConfig(three.child, [three.parent, three.child], [1]),
+    );
     expect(ResponderEventPlugin._getResponderID()).toBe(three.child);
 
-
     // Now we remove the original first touch, keeping the second touch that
@@ -790,3 +999,7 @@ describe('ResponderEventPlugin', function() {
     //                                      / one ended\  /one remains \
-    run(config, three, endConfig(three.child, [three.parent, three.child], [0]));
+    run(
+      config,
+      three,
+      endConfig(three.child, [three.parent, three.child], [0]),
+    );
     expect(ResponderEventPlugin._getResponderID()).toBe(three.child);
@@ -798,6 +1011,18 @@ describe('ResponderEventPlugin', function() {
     config = oneEventLoopTestConfig(three);
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.startShouldSetResponder.captured.parent = {order: 1, returnVal: false};
-    config.startShouldSetResponder.bubbled.parent = {order: 2, returnVal: false};
-    config.startShouldSetResponder.bubbled.grandParent = {order: 3, returnVal: false};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.bubbled.parent = {
+      order: 2,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.bubbled.grandParent = {
+      order: 3,
+      returnVal: false,
+    };
     // Interesting: child still gets moves even though touch target is parent!
@@ -806,6 +1031,9 @@ describe('ResponderEventPlugin', function() {
     //                                           /  Two active touches  \  /one of them new\
-    run(config, three, startConfig(three.parent, [three.child, three.parent], [1]));
+    run(
+      config,
+      three,
+      startConfig(three.parent, [three.child, three.parent], [1]),
+    );
     expect(ResponderEventPlugin._getResponderID()).toBe(three.child);
 
-
     // Now, move that new touch that had no effect, and did not start within
@@ -813,6 +1041,15 @@ describe('ResponderEventPlugin', function() {
     config = oneEventLoopTestConfig(three);
-    config.moveShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.moveShouldSetResponder.captured.parent = {order: 1, returnVal: false};
+    config.moveShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.moveShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
     config.moveShouldSetResponder.bubbled.parent = {order: 2, returnVal: false};
-    config.moveShouldSetResponder.bubbled.grandParent = {order: 3, returnVal: false};
+    config.moveShouldSetResponder.bubbled.grandParent = {
+      order: 3,
+      returnVal: false,
+    };
     // Interesting: child still gets moves even though touch target is parent!
@@ -821,6 +1058,9 @@ describe('ResponderEventPlugin', function() {
     //                                     /  Two active touches  \  /one of them moved\
-    run(config, three, moveConfig(three.parent, [three.child, three.parent], [1]));
+    run(
+      config,
+      three,
+      moveConfig(three.parent, [three.child, three.parent], [1]),
+    );
     expect(ResponderEventPlugin._getResponderID()).toBe(three.child);
 
-
     config = oneEventLoopTestConfig(three);
@@ -829,3 +1069,7 @@ describe('ResponderEventPlugin', function() {
     //                                        /child end \ /parent remain\
-    run(config, three, endConfig(three.child, [three.child, three.parent], [0]));
+    run(
+      config,
+      three,
+      endConfig(three.child, [three.child, three.parent], [0]),
+    );
     expect(ResponderEventPlugin._getResponderID()).toBe(null);
@@ -833,3 +1077,2 @@ describe('ResponderEventPlugin', function() {
 
-
   /**
@@ -841,5 +1084,14 @@ describe('ResponderEventPlugin', function() {
     var config = oneEventLoopTestConfig(siblings);
-    config.startShouldSetResponder.captured.parent = {order: 0, returnVal: false};
-    config.startShouldSetResponder.captured.childOne = {order: 1, returnVal: false};
-    config.startShouldSetResponder.bubbled.childOne = {order: 2, returnVal: true};
+    config.startShouldSetResponder.captured.parent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.childOne = {
+      order: 1,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.bubbled.childOne = {
+      order: 2,
+      returnVal: true,
+    };
     config.responderGrant.childOne = {order: 3};
@@ -847,3 +1099,7 @@ describe('ResponderEventPlugin', function() {
 
-    run(config, siblings, startConfig(siblings.childOne, [siblings.childOne], [0]));
+    run(
+      config,
+      siblings,
+      startConfig(siblings.childOne, [siblings.childOne], [0]),
+    );
     expect(ResponderEventPlugin._getResponderID()).toBe(siblings.childOne);
@@ -854,8 +1110,17 @@ describe('ResponderEventPlugin', function() {
     config = oneEventLoopTestConfig(siblings);
-    config.startShouldSetResponder.captured.parent = {order: 0, returnVal: false};
-    config.startShouldSetResponder.bubbled.parent = {order: 1, returnVal: false};
+    config.startShouldSetResponder.captured.parent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.bubbled.parent = {
+      order: 1,
+      returnVal: false,
+    };
     config.responderStart.childOne = {order: 2};
 
-    var touchConfig =
-      startConfig(siblings.childTwo, [siblings.childOne, siblings.childTwo], [1]);
+    var touchConfig = startConfig(
+      siblings.childTwo,
+      [siblings.childOne, siblings.childTwo],
+      [1],
+    );
     run(config, siblings, touchConfig);
@@ -863,9 +1128,19 @@ describe('ResponderEventPlugin', function() {
 
-
     // move childOne
     config = oneEventLoopTestConfig(siblings);
-    config.moveShouldSetResponder.captured.parent = {order: 0, returnVal: false};
+    config.moveShouldSetResponder.captured.parent = {
+      order: 0,
+      returnVal: false,
+    };
     config.moveShouldSetResponder.bubbled.parent = {order: 1, returnVal: false};
     config.responderMove.childOne = {order: 2};
-    run(config, siblings, moveConfig(siblings.childOne, [siblings.childOne, siblings.childTwo], [0]));
+    run(
+      config,
+      siblings,
+      moveConfig(
+        siblings.childOne,
+        [siblings.childOne, siblings.childTwo],
+        [0],
+      ),
+    );
     expect(ResponderEventPlugin._getResponderID()).toBe(siblings.childOne);
@@ -874,11 +1149,20 @@ describe('ResponderEventPlugin', function() {
     config = oneEventLoopTestConfig(siblings);
-    config.moveShouldSetResponder.captured.parent = {order: 0, returnVal: false};
+    config.moveShouldSetResponder.captured.parent = {
+      order: 0,
+      returnVal: false,
+    };
     config.moveShouldSetResponder.bubbled.parent = {order: 1, returnVal: false};
     config.responderMove.childOne = {order: 2};
-    run(config, siblings, moveConfig(siblings.childTwo, [siblings.childOne, siblings.childTwo], [1]));
+    run(
+      config,
+      siblings,
+      moveConfig(
+        siblings.childTwo,
+        [siblings.childOne, siblings.childTwo],
+        [1],
+      ),
+    );
     expect(ResponderEventPlugin._getResponderID()).toBe(siblings.childOne);
-
   });
 
-
   it('should notify of being rejected. responderStart/Move happens on current responder', () => {
@@ -886,5 +1170,14 @@ describe('ResponderEventPlugin', function() {
     var config = oneEventLoopTestConfig(three);
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.startShouldSetResponder.captured.parent = {order: 1, returnVal: false};
-    config.startShouldSetResponder.captured.child = {order: 2, returnVal: false};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.child = {
+      order: 2,
+      returnVal: false,
+    };
     config.startShouldSetResponder.bubbled.child = {order: 3, returnVal: true};
@@ -898,4 +1191,10 @@ describe('ResponderEventPlugin', function() {
     config = oneEventLoopTestConfig(three);
-    config.moveShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.moveShouldSetResponder.captured.parent = {order: 1, returnVal: false};
+    config.moveShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.moveShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
     config.moveShouldSetResponder.bubbled.parent = {order: 2, returnVal: true};
@@ -907,4 +1206,3 @@ describe('ResponderEventPlugin', function() {
 
-    var touchConfig =
-      moveConfig(three.child, [three.child], [0]);
+    var touchConfig = moveConfig(three.child, [three.child], [0]);
     run(config, three, touchConfig);
@@ -913,4 +1211,10 @@ describe('ResponderEventPlugin', function() {
     config = oneEventLoopTestConfig(three);
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.startShouldSetResponder.captured.parent = {order: 1, returnVal: false};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
     config.startShouldSetResponder.bubbled.parent = {order: 2, returnVal: true};
@@ -922,10 +1226,7 @@ describe('ResponderEventPlugin', function() {
 
-    touchConfig =
-      startConfig(three.child, [three.child, three.child], [1]);
+    touchConfig = startConfig(three.child, [three.child, three.child], [1]);
     run(config, three, touchConfig);
     expect(ResponderEventPlugin._getResponderID()).toBe(three.child);
-
   });
 
-
   it('should negotiate scroll', () => {
@@ -933,5 +1234,14 @@ describe('ResponderEventPlugin', function() {
     var config = oneEventLoopTestConfig(three);
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.startShouldSetResponder.captured.parent = {order: 1, returnVal: false};
-    config.startShouldSetResponder.captured.child = {order: 2, returnVal: false};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.child = {
+      order: 2,
+      returnVal: false,
+    };
     config.startShouldSetResponder.bubbled.child = {order: 3, returnVal: true};
@@ -947,5 +1257,14 @@ describe('ResponderEventPlugin', function() {
     config = oneEventLoopTestConfig(three);
-    config.scrollShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.scrollShouldSetResponder.captured.parent = {order: 1, returnVal: false};
-    config.scrollShouldSetResponder.bubbled.parent = {order: 2, returnVal: true};
+    config.scrollShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.scrollShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
+    config.scrollShouldSetResponder.bubbled.parent = {
+      order: 2,
+      returnVal: true,
+    };
     config.responderGrant.parent = {order: 3};
@@ -955,3 +1274,3 @@ describe('ResponderEventPlugin', function() {
     run(config, three, {
-      topLevelType: topLevelTypes.topScroll,
+      topLevelType: 'topScroll',
       targetInst: idToInstance[three.parent],
@@ -961,8 +1280,16 @@ describe('ResponderEventPlugin', function() {
 
-
     // Now lets let the scroll take control this time.
     config = oneEventLoopTestConfig(three);
-    config.scrollShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.scrollShouldSetResponder.captured.parent = {order: 1, returnVal: false};
-    config.scrollShouldSetResponder.bubbled.parent = {order: 2, returnVal: true};
+    config.scrollShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.scrollShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
+    config.scrollShouldSetResponder.bubbled.parent = {
+      order: 2,
+      returnVal: true,
+    };
     config.responderGrant.parent = {order: 3};
@@ -972,3 +1299,3 @@ describe('ResponderEventPlugin', function() {
     run(config, three, {
-      topLevelType: topLevelTypes.topScroll,
+      topLevelType: 'topScroll',
       targetInst: idToInstance[three.parent],
@@ -977,4 +1304,2 @@ describe('ResponderEventPlugin', function() {
     expect(ResponderEventPlugin._getResponderID()).toBe(three.parent);
-
-
   });
@@ -984,5 +1309,14 @@ describe('ResponderEventPlugin', function() {
     var config = oneEventLoopTestConfig(three);
-    config.startShouldSetResponder.captured.grandParent = {order: 0, returnVal: false};
-    config.startShouldSetResponder.captured.parent = {order: 1, returnVal: false};
-    config.startShouldSetResponder.captured.child = {order: 2, returnVal: false};
+    config.startShouldSetResponder.captured.grandParent = {
+      order: 0,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.parent = {
+      order: 1,
+      returnVal: false,
+    };
+    config.startShouldSetResponder.captured.child = {
+      order: 2,
+      returnVal: false,
+    };
     config.startShouldSetResponder.bubbled.child = {order: 3, returnVal: true};
@@ -999,6 +1333,6 @@ describe('ResponderEventPlugin', function() {
     var nativeEvent = _touchConfig(
-      topLevelTypes.topTouchCancel,
+      'topTouchCancel',
       three.child,
       [three.child],
-      [0]
+      [0],
     );
diff --git a/src/renderers/shared/reconciler/ReactChildReconciler.js b/src/renderers/shared/stack/reconciler/ReactChildReconciler.js
similarity index 58%
rename from src/renderers/shared/reconciler/ReactChildReconciler.js
rename to src/renderers/shared/stack/reconciler/ReactChildReconciler.js
index 634b3444c..1a1aa9a61 100644
--- a/src/renderers/shared/reconciler/ReactChildReconciler.js
+++ b/src/renderers/shared/stack/reconciler/ReactChildReconciler.js
@@ -16,2 +16,3 @@ var ReactReconciler = require('ReactReconciler');
 var instantiateReactComponent = require('instantiateReactComponent');
+var KeyEscapeUtils = require('KeyEscapeUtils');
 var shouldUpdateReactComponent = require('shouldUpdateReactComponent');
@@ -20,16 +21,37 @@ var warning = require('warning');
 
-function instantiateChild(childInstances, child, name) {
+var ReactComponentTreeHook;
+
+if (
+  typeof process !== 'undefined' &&
+  process.env &&
+  process.env.NODE_ENV === 'test'
+) {
+  // Temporary hack.
+  // Inline requires don't work well with Jest:
+  // https://github.com/facebook/react/issues/7240
+  // Remove the inline requires when we don't need them anymore:
+  // https://github.com/facebook/react/pull/7178
+  ReactComponentTreeHook = require('ReactComponentTreeHook');
+}
+
+function instantiateChild(childInstances, child, name, selfDebugID) {
   // We found a component instance.
-  var keyUnique = (childInstances[name] === undefined);
+  var keyUnique = childInstances[name] === undefined;
   if (__DEV__) {
-    warning(
-      keyUnique,
-      'flattenChildren(...): Encountered two children with the same key, ' +
-      '`%s`. Child keys must be unique; when two children share a key, only ' +
-      'the first child will be used.',
-      name
-    );
+    if (!ReactComponentTreeHook) {
+      ReactComponentTreeHook = require('ReactComponentTreeHook');
+    }
+    if (!keyUnique) {
+      warning(
+        false,
+        'flattenChildren(...): Encountered two children with the same key, ' +
+          '`%s`. Child keys must be unique; when two children share a key, only ' +
+          'the first child will be used.%s',
+        KeyEscapeUtils.unescape(name),
+        ReactComponentTreeHook.getStackAddendumByID(selfDebugID),
+      );
+    }
   }
   if (child != null && keyUnique) {
-    childInstances[name] = instantiateReactComponent(child);
+    childInstances[name] = instantiateReactComponent(child, true);
   }
@@ -51,3 +73,8 @@ var ReactChildReconciler = {
    */
-  instantiateChildren: function(nestedChildNodes, transaction, context) {
+  instantiateChildren: function(
+    nestedChildNodes,
+    transaction,
+    context,
+    selfDebugID, // 0 in production and for roots
+  ) {
     if (nestedChildNodes == null) {
@@ -56,3 +83,13 @@ var ReactChildReconciler = {
     var childInstances = {};
-    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
+
+    if (__DEV__) {
+      traverseAllChildren(
+        nestedChildNodes,
+        (childInsts, child, name) =>
+          instantiateChild(childInsts, child, name, selfDebugID),
+        childInstances,
+      );
+    } else {
+      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
+    }
     return childInstances;
@@ -73,5 +110,10 @@ var ReactChildReconciler = {
     nextChildren,
+    mountImages,
     removedNodes,
     transaction,
-    context) {
+    hostParent,
+    hostContainerInfo,
+    context,
+    selfDebugID, // 0 in production and for roots
+  ) {
     // We currently don't have a way to track moves here but if we use iterators
@@ -93,6 +135,11 @@ var ReactChildReconciler = {
       var nextElement = nextChildren[name];
-      if (prevChild != null &&
-          shouldUpdateReactComponent(prevElement, nextElement)) {
+      if (
+        prevChild != null &&
+        shouldUpdateReactComponent(prevElement, nextElement)
+      ) {
         ReactReconciler.receiveComponent(
-          prevChild, nextElement, transaction, context
+          prevChild,
+          nextElement,
+          transaction,
+          context,
         );
@@ -101,3 +148,3 @@ var ReactChildReconciler = {
         if (prevChild) {
-          removedNodes[name] = ReactReconciler.getNativeNode(prevChild);
+          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
           ReactReconciler.unmountComponent(prevChild, false);
@@ -105,4 +152,15 @@ var ReactChildReconciler = {
         // The child must be instantiated before it's mounted.
-        var nextChildInstance = instantiateReactComponent(nextElement);
+        var nextChildInstance = instantiateReactComponent(nextElement, true);
         nextChildren[name] = nextChildInstance;
+        // Creating mount image now ensures refs are resolved in right order
+        // (see https://github.com/facebook/react/pull/7101 for explanation).
+        var nextChildMountImage = ReactReconciler.mountComponent(
+          nextChildInstance,
+          transaction,
+          hostParent,
+          hostContainerInfo,
+          context,
+          selfDebugID,
+        );
+        mountImages.push(nextChildMountImage);
       }
@@ -111,6 +169,8 @@ var ReactChildReconciler = {
     for (name in prevChildren) {
-      if (prevChildren.hasOwnProperty(name) &&
-          !(nextChildren && nextChildren.hasOwnProperty(name))) {
+      if (
+        prevChildren.hasOwnProperty(name) &&
+        !(nextChildren && nextChildren.hasOwnProperty(name))
+      ) {
         prevChild = prevChildren[name];
-        removedNodes[name] = ReactReconciler.getNativeNode(prevChild);
+        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
         ReactReconciler.unmountComponent(prevChild, false);
@@ -135,3 +195,2 @@ var ReactChildReconciler = {
   },
-
 };
diff --git a/src/renderers/shared/reconciler/ReactComponentEnvironment.js b/src/renderers/shared/stack/reconciler/ReactComponentEnvironment.js
similarity index 68%
rename from src/renderers/shared/reconciler/ReactComponentEnvironment.js
rename to src/renderers/shared/stack/reconciler/ReactComponentEnvironment.js
index 6dd870e0e..cbba0c55c 100644
--- a/src/renderers/shared/reconciler/ReactComponentEnvironment.js
+++ b/src/renderers/shared/stack/reconciler/ReactComponentEnvironment.js
@@ -9,2 +9,3 @@
  * @providesModule ReactComponentEnvironment
+ * @flow
  */
@@ -15,13 +16,13 @@ var invariant = require('invariant');
 
-var injected = false;
+type ReplaceNodeWithMarkup = (node: HTMLElement, markup: string) => void;
+type ProcessChildrenUpdates = (instance: mixed, updates: mixed) => void;
 
-var ReactComponentEnvironment = {
+type Environment = {
+  replaceNodeWithMarkup: ReplaceNodeWithMarkup,
+  processChildrenUpdates: ProcessChildrenUpdates,
+};
 
-  /**
-   * Optionally injectable environment dependent cleanup hook. (server vs.
-   * browser etc). Example: A browser system caches DOM nodes based on component
-   * ID and must remove that cache entry when this instance is unmounted.
-   */
-  unmountIDFromEnvironment: null,
+var injected = false;
 
+var ReactComponentEnvironment = {
   /**
@@ -30,3 +31,3 @@ var ReactComponentEnvironment = {
    */
-  replaceNodeWithMarkup: null,
+  replaceNodeWithMarkup: (null: ?ReplaceNodeWithMarkup),
 
@@ -36,12 +37,10 @@ var ReactComponentEnvironment = {
    */
-  processChildrenUpdates: null,
+  processChildrenUpdates: (null: ?ReplaceNodeWithMarkup),
 
   injection: {
-    injectEnvironment: function(environment) {
+    injectEnvironment: function(environment: Environment) {
       invariant(
         !injected,
-        'ReactCompositeComponent: injectEnvironment() can only be called once.'
+        'ReactCompositeComponent: injectEnvironment() can only be called once.',
       );
-      ReactComponentEnvironment.unmountIDFromEnvironment =
-        environment.unmountIDFromEnvironment;
       ReactComponentEnvironment.replaceNodeWithMarkup =
@@ -53,3 +52,2 @@ var ReactComponentEnvironment = {
   },
-
 };
diff --git a/src/renderers/shared/reconciler/ReactCompositeComponent.js b/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js
similarity index 57%
rename from src/renderers/shared/reconciler/ReactCompositeComponent.js
rename to src/renderers/shared/stack/reconciler/ReactCompositeComponent.js
index 0472e1fa8..ec90a2106 100644
--- a/src/renderers/shared/reconciler/ReactCompositeComponent.js
+++ b/src/renderers/shared/stack/reconciler/ReactCompositeComponent.js
@@ -13,5 +13,5 @@
 
+var React = require('React');
 var ReactComponentEnvironment = require('ReactComponentEnvironment');
 var ReactCurrentOwner = require('ReactCurrentOwner');
-var ReactElement = require('ReactElement');
 var ReactErrorUtils = require('ReactErrorUtils');
@@ -20,7 +20,7 @@ var ReactInstrumentation = require('ReactInstrumentation');
 var ReactNodeTypes = require('ReactNodeTypes');
-var ReactPerf = require('ReactPerf');
-var ReactPropTypeLocations = require('ReactPropTypeLocations');
-var ReactPropTypeLocationNames = require('ReactPropTypeLocationNames');
 var ReactReconciler = require('ReactReconciler');
-var ReactUpdateQueue = require('ReactUpdateQueue');
+
+if (__DEV__) {
+  var checkReactTypeSpec = require('checkReactTypeSpec');
+}
 
@@ -28,2 +28,3 @@ var emptyObject = require('emptyObject');
 var invariant = require('invariant');
+var shallowEqual = require('shallowEqual');
 var shouldUpdateReactComponent = require('shouldUpdateReactComponent');
@@ -31,15 +32,11 @@ var warning = require('warning');
 
-function getDeclarationErrorAddendum(component) {
-  var owner = component._currentElement._owner || null;
-  if (owner) {
-    var name = owner.getName();
-    if (name) {
-      return ' Check the render method of `' + name + '`.';
-    }
-  }
-  return '';
-}
+import type {ReactPropTypeLocations} from 'ReactPropTypeLocations';
 
-function StatelessComponent(Component) {
-}
+var CompositeTypes = {
+  ImpureClass: 0,
+  PureClass: 1,
+  StatelessFunctional: 2,
+};
+
+function StatelessComponent(Component) {}
 StatelessComponent.prototype.render = function() {
@@ -54,6 +51,11 @@ function warnIfInvalidElement(Component, element) {
     warning(
-      element === null || element === false || ReactElement.isValidElement(element),
+      element === null || element === false || React.isValidElement(element),
       '%s(...): A valid React element (or null) must be returned. You may have ' +
-      'returned undefined, an array or some other invalid object.',
-      Component.displayName || Component.name || 'Component'
+        'returned undefined, an array or some other invalid object.',
+      Component.displayName || Component.name || 'Component',
+    );
+    warning(
+      !Component.childContextTypes,
+      '%s(...): childContextTypes cannot be defined on a functional component.',
+      Component.displayName || Component.name || 'Component',
     );
@@ -62,2 +64,27 @@ function warnIfInvalidElement(Component, element) {
 
+function shouldConstruct(Component) {
+  return !!(Component.prototype && Component.prototype.isReactComponent);
+}
+
+function isPureComponent(Component) {
+  return !!(Component.prototype && Component.prototype.isPureReactComponent);
+}
+
+// Separated into a function to contain deoptimizations caused by try/finally.
+function measureLifeCyclePerf(fn, debugID, timerType) {
+  if (debugID === 0) {
+    // Top-level wrappers (see ReactMount) and empty components (see
+    // ReactDOMEmptyComponent) are invisible to hooks and devtools.
+    // Both are implementation details that should go away in the future.
+    return fn();
+  }
+
+  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
+  try {
+    return fn();
+  } finally {
+    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
+  }
+}
+
 /**
@@ -100,4 +127,3 @@ var nextMountID = 1;
  */
-var ReactCompositeComponentMixin = {
-
+var ReactCompositeComponent = {
   /**
@@ -111,8 +137,10 @@ var ReactCompositeComponentMixin = {
     this._currentElement = element;
-    this._rootNodeID = null;
+    this._rootNodeID = 0;
+    this._compositeType = null;
     this._instance = null;
-    this._nativeParent = null;
-    this._nativeContainerInfo = null;
+    this._hostParent = null;
+    this._hostContainerInfo = null;
 
     // See ReactUpdateQueue
+    this._updateBatchNumber = null;
     this._pendingElement = null;
@@ -130,2 +158,9 @@ var ReactCompositeComponentMixin = {
     this._pendingCallbacks = null;
+
+    // ComponentWillUnmount shall only be called once
+    this._calledComponentWillUnmount = false;
+
+    if (__DEV__) {
+      this._warnedAboutRefsInRender = false;
+    }
   },
@@ -136,4 +171,4 @@ var ReactCompositeComponentMixin = {
    * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
-   * @param {?object} nativeParent
-   * @param {?object} nativeContainerInfo
+   * @param {?object} hostParent
+   * @param {?object} hostContainerInfo
    * @param {?object} context
@@ -145,5 +180,5 @@ var ReactCompositeComponentMixin = {
     transaction,
-    nativeParent,
-    nativeContainerInfo,
-    context
+    hostParent,
+    hostContainerInfo,
+    context,
   ) {
@@ -151,6 +186,6 @@ var ReactCompositeComponentMixin = {
     this._mountOrder = nextMountID++;
-    this._nativeParent = nativeParent;
-    this._nativeContainerInfo = nativeContainerInfo;
+    this._hostParent = hostParent;
+    this._hostContainerInfo = hostContainerInfo;
 
-    var publicProps = this._processProps(this._currentElement.props);
+    var publicProps = this._currentElement.props;
     var publicContext = this._processContext(context);
@@ -159,40 +194,31 @@ var ReactCompositeComponentMixin = {
 
+    var updateQueue = transaction.getUpdateQueue();
+
     // Initialize the public class
-    var inst;
+    var doConstruct = shouldConstruct(Component);
+    var inst = this._constructComponent(
+      doConstruct,
+      publicProps,
+      publicContext,
+      updateQueue,
+    );
     var renderedElement;
 
-    if (Component.prototype && Component.prototype.isReactComponent) {
-      if (__DEV__) {
-        ReactCurrentOwner.current = this;
-        try {
-          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
-        } finally {
-          ReactCurrentOwner.current = null;
-        }
-      } else {
-        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
-      }
+    // Support functional components
+    if (!doConstruct && (inst == null || inst.render == null)) {
+      renderedElement = inst;
+      warnIfInvalidElement(Component, renderedElement);
+      invariant(
+        inst === null || inst === false || React.isValidElement(inst),
+        '%s(...): A valid React element (or null) must be returned. You may have ' +
+          'returned undefined, an array or some other invalid object.',
+        Component.displayName || Component.name || 'Component',
+      );
+      inst = new StatelessComponent(Component);
+      this._compositeType = CompositeTypes.StatelessFunctional;
     } else {
-      if (__DEV__) {
-        ReactCurrentOwner.current = this;
-        try {
-          inst = Component(publicProps, publicContext, ReactUpdateQueue);
-        } finally {
-          ReactCurrentOwner.current = null;
-        }
+      if (isPureComponent(Component)) {
+        this._compositeType = CompositeTypes.PureClass;
       } else {
-        inst = Component(publicProps, publicContext, ReactUpdateQueue);
-      }
-      if (inst == null || inst.render == null) {
-        renderedElement = inst;
-        warnIfInvalidElement(Component, renderedElement);
-        invariant(
-          inst === null ||
-          inst === false ||
-          ReactElement.isValidElement(inst),
-          '%s(...): A valid React element (or null) must be returned. You may have ' +
-          'returned undefined, an array or some other invalid object.',
-          Component.displayName || Component.name || 'Component'
-        );
-        inst = new StatelessComponent(Component);
+        this._compositeType = CompositeTypes.ImpureClass;
       }
@@ -207,4 +233,4 @@ var ReactCompositeComponentMixin = {
           '%s(...): No `render` method found on the returned component ' +
-          'instance: you may have forgotten to define `render`.',
-          Component.displayName || Component.name || 'Component'
+            'instance: you may have forgotten to define `render`.',
+          Component.displayName || Component.name || 'Component',
         );
@@ -219,4 +245,5 @@ var ReactCompositeComponentMixin = {
         '%s(...): When calling super() in `%s`, make sure to pass ' +
-        'up the same props that your component\'s constructor was passed.',
-        componentName, componentName
+          "up the same props that your component's constructor was passed.",
+        componentName,
+        componentName,
       );
@@ -229,3 +256,3 @@ var ReactCompositeComponentMixin = {
     inst.refs = emptyObject;
-    inst.updater = ReactUpdateQueue;
+    inst.updater = updateQueue;
 
@@ -242,15 +269,15 @@ var ReactCompositeComponentMixin = {
         !inst.getInitialState ||
-        inst.getInitialState.isReactClassApproved,
+          inst.getInitialState.isReactClassApproved ||
+          inst.state,
         'getInitialState was defined on %s, a plain JavaScript class. ' +
-        'This is only supported for classes created using React.createClass. ' +
-        'Did you mean to define a state property instead?',
-        this.getName() || 'a component'
+          'This is only supported for classes created using React.createClass. ' +
+          'Did you mean to define a state property instead?',
+        this.getName() || 'a component',
       );
       warning(
-        !inst.getDefaultProps ||
-        inst.getDefaultProps.isReactClassApproved,
+        !inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved,
         'getDefaultProps was defined on %s, a plain JavaScript class. ' +
-        'This is only supported for classes created using React.createClass. ' +
-        'Use a static property to define defaultProps instead.',
-        this.getName() || 'a component'
+          'This is only supported for classes created using React.createClass. ' +
+          'Use a static property to define defaultProps instead.',
+        this.getName() || 'a component',
       );
@@ -259,4 +286,4 @@ var ReactCompositeComponentMixin = {
         'propTypes was defined as an instance property on %s. Use a static ' +
-        'property to define propTypes instead.',
-        this.getName() || 'a component'
+          'property to define propTypes instead.',
+        this.getName() || 'a component',
       );
@@ -265,4 +292,4 @@ var ReactCompositeComponentMixin = {
         'contextTypes was defined as an instance property on %s. Use a ' +
-        'static property to define contextTypes instead.',
-        this.getName() || 'a component'
+          'static property to define contextTypes instead.',
+        this.getName() || 'a component',
       );
@@ -271,6 +298,6 @@ var ReactCompositeComponentMixin = {
         '%s has a method called ' +
-        'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
-        'The name is phrased as a question because the function is ' +
-        'expected to return a value.',
-        (this.getName() || 'A component')
+          'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
+          'The name is phrased as a question because the function is ' +
+          'expected to return a value.',
+        this.getName() || 'A component',
       );
@@ -279,5 +306,5 @@ var ReactCompositeComponentMixin = {
         '%s has a method called ' +
-        'componentDidUnmount(). But there is no such lifecycle method. ' +
-        'Did you mean componentWillUnmount()?',
-        this.getName() || 'A component'
+          'componentDidUnmount(). But there is no such lifecycle method. ' +
+          'Did you mean componentWillUnmount()?',
+        this.getName() || 'A component',
       );
@@ -286,4 +313,4 @@ var ReactCompositeComponentMixin = {
         '%s has a method called ' +
-        'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
-        (this.getName() || 'A component')
+          'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
+        this.getName() || 'A component',
       );
@@ -298,3 +325,3 @@ var ReactCompositeComponentMixin = {
       '%s.state: must be set to an object or null',
-      this.getName() || 'ReactCompositeComponent'
+      this.getName() || 'ReactCompositeComponent',
     );
@@ -309,9 +336,15 @@ var ReactCompositeComponentMixin = {
         renderedElement,
-        nativeParent,
-        nativeContainerInfo,
+        hostParent,
+        hostContainerInfo,
         transaction,
-        context
+        context,
       );
     } else {
-      markup = this.performInitialMount(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
+      markup = this.performInitialMount(
+        renderedElement,
+        hostParent,
+        hostContainerInfo,
+        transaction,
+        context,
+      );
     }
@@ -319,3 +352,13 @@ var ReactCompositeComponentMixin = {
     if (inst.componentDidMount) {
-      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
+      if (__DEV__) {
+        transaction.getReactMountReady().enqueue(() => {
+          measureLifeCyclePerf(
+            () => inst.componentDidMount(),
+            this._debugID,
+            'componentDidMount',
+          );
+        });
+      } else {
+        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
+      }
     }
@@ -325,8 +368,69 @@ var ReactCompositeComponentMixin = {
 
+  _constructComponent: function(
+    doConstruct,
+    publicProps,
+    publicContext,
+    updateQueue,
+  ) {
+    if (__DEV__) {
+      ReactCurrentOwner.current = this;
+      try {
+        return this._constructComponentWithoutOwner(
+          doConstruct,
+          publicProps,
+          publicContext,
+          updateQueue,
+        );
+      } finally {
+        ReactCurrentOwner.current = null;
+      }
+    } else {
+      return this._constructComponentWithoutOwner(
+        doConstruct,
+        publicProps,
+        publicContext,
+        updateQueue,
+      );
+    }
+  },
+
+  _constructComponentWithoutOwner: function(
+    doConstruct,
+    publicProps,
+    publicContext,
+    updateQueue,
+  ) {
+    var Component = this._currentElement.type;
+
+    if (doConstruct) {
+      if (__DEV__) {
+        return measureLifeCyclePerf(
+          () => new Component(publicProps, publicContext, updateQueue),
+          this._debugID,
+          'ctor',
+        );
+      } else {
+        return new Component(publicProps, publicContext, updateQueue);
+      }
+    }
+
+    // This can still be an instance in case of factory components
+    // but we'll count this as time spent rendering as the more common case.
+    if (__DEV__) {
+      return measureLifeCyclePerf(
+        () => Component(publicProps, publicContext, updateQueue),
+        this._debugID,
+        'render',
+      );
+    } else {
+      return Component(publicProps, publicContext, updateQueue);
+    }
+  },
+
   performInitialMountWithErrorHandling: function(
     renderedElement,
-    nativeParent,
-    nativeContainerInfo,
+    hostParent,
+    hostContainerInfo,
     transaction,
-    context
+    context,
   ) {
@@ -335,3 +439,9 @@ var ReactCompositeComponentMixin = {
     try {
-      markup = this.performInitialMount(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
+      markup = this.performInitialMount(
+        renderedElement,
+        hostParent,
+        hostContainerInfo,
+        transaction,
+        context,
+      );
     } catch (e) {
@@ -341,3 +451,6 @@ var ReactCompositeComponentMixin = {
       if (this._pendingStateQueue) {
-        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
+        this._instance.state = this._processPendingState(
+          this._instance.props,
+          this._instance.context,
+        );
       }
@@ -350,3 +463,9 @@ var ReactCompositeComponentMixin = {
       // If this throws again, the error will bubble up (and can be caught by a higher error boundary).
-      markup = this.performInitialMount(renderedElement, nativeParent, nativeContainerInfo, transaction, context);
+      markup = this.performInitialMount(
+        renderedElement,
+        hostParent,
+        hostContainerInfo,
+        transaction,
+        context,
+      );
     }
@@ -355,6 +474,26 @@ var ReactCompositeComponentMixin = {
 
-  performInitialMount: function(renderedElement, nativeParent, nativeContainerInfo, transaction, context) {
+  performInitialMount: function(
+    renderedElement,
+    hostParent,
+    hostContainerInfo,
+    transaction,
+    context,
+  ) {
     var inst = this._instance;
+
+    var debugID = 0;
+    if (__DEV__) {
+      debugID = this._debugID;
+    }
+
     if (inst.componentWillMount) {
-      inst.componentWillMount();
+      if (__DEV__) {
+        measureLifeCyclePerf(
+          () => inst.componentWillMount(),
+          debugID,
+          'componentWillMount',
+        );
+      } else {
+        inst.componentWillMount();
+      }
       // When mounting, calls to `setState` by `componentWillMount` will set
@@ -371,15 +510,26 @@ var ReactCompositeComponentMixin = {
 
-    this._renderedNodeType = ReactNodeTypes.getType(renderedElement);
-    this._renderedComponent = this._instantiateReactComponent(
-      renderedElement
+    var nodeType = ReactNodeTypes.getType(renderedElement);
+    this._renderedNodeType = nodeType;
+    var child = this._instantiateReactComponent(
+      renderedElement,
+      nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */,
     );
+    this._renderedComponent = child;
 
     var markup = ReactReconciler.mountComponent(
-      this._renderedComponent,
+      child,
       transaction,
-      nativeParent,
-      nativeContainerInfo,
-      this._processChildContext(context)
+      hostParent,
+      hostContainerInfo,
+      this._processChildContext(context),
+      debugID,
     );
 
+    if (__DEV__) {
+      if (debugID !== 0) {
+        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
+        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
+      }
+    }
+
     return markup;
@@ -387,4 +537,4 @@ var ReactCompositeComponentMixin = {
 
-  getNativeNode: function() {
-    return ReactReconciler.getNativeNode(this._renderedComponent);
+  getHostNode: function() {
+    return ReactReconciler.getHostNode(this._renderedComponent);
   },
@@ -401,10 +551,24 @@ var ReactCompositeComponentMixin = {
     }
+
     var inst = this._instance;
 
-    if (inst.componentWillUnmount) {
+    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
+      inst._calledComponentWillUnmount = true;
+
       if (safely) {
         var name = this.getName() + '.componentWillUnmount()';
-        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
+        ReactErrorUtils.invokeGuardedCallback(
+          name,
+          inst.componentWillUnmount.bind(inst),
+        );
       } else {
-        inst.componentWillUnmount();
+        if (__DEV__) {
+          measureLifeCyclePerf(
+            () => inst.componentWillUnmount(),
+            this._debugID,
+            'componentWillUnmount',
+          );
+        } else {
+          inst.componentWillUnmount();
+        }
       }
@@ -431,3 +595,3 @@ var ReactCompositeComponentMixin = {
     this._context = null;
-    this._rootNodeID = null;
+    this._rootNodeID = 0;
     this._topLevelWrapper = null;
@@ -480,6 +644,6 @@ var ReactCompositeComponentMixin = {
       if (Component.contextTypes) {
-        this._checkPropTypes(
+        this._checkContextTypes(
           Component.contextTypes,
           maskedContext,
-          ReactPropTypeLocations.context
+          'context',
         );
@@ -498,9 +662,17 @@ var ReactCompositeComponentMixin = {
     var inst = this._instance;
-    if (__DEV__) {
-      ReactInstrumentation.debugTool.onBeginProcessingChildContext();
-    }
-    var childContext = inst.getChildContext && inst.getChildContext();
-    if (__DEV__) {
-      ReactInstrumentation.debugTool.onEndProcessingChildContext();
+    var childContext;
+
+    if (inst.getChildContext) {
+      if (__DEV__) {
+        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
+        try {
+          childContext = inst.getChildContext();
+        } finally {
+          ReactInstrumentation.debugTool.onEndProcessingChildContext();
+        }
+      } else {
+        childContext = inst.getChildContext();
+      }
     }
+
     if (childContext) {
@@ -509,10 +681,10 @@ var ReactCompositeComponentMixin = {
         '%s.getChildContext(): childContextTypes must be defined in order to ' +
-        'use getChildContext().',
-        this.getName() || 'ReactCompositeComponent'
+          'use getChildContext().',
+        this.getName() || 'ReactCompositeComponent',
       );
       if (__DEV__) {
-        this._checkPropTypes(
+        this._checkContextTypes(
           Component.childContextTypes,
           childContext,
-          ReactPropTypeLocations.childContext
+          'child context',
         );
@@ -524,3 +696,3 @@ var ReactCompositeComponentMixin = {
           this.getName() || 'ReactCompositeComponent',
-          name
+          name,
         );
@@ -533,29 +705,6 @@ var ReactCompositeComponentMixin = {
   /**
-   * Processes props by setting default values for unspecified props and
-   * asserting that the props are valid. Does not mutate its argument; returns
-   * a new props object with defaults merged in.
+   * Assert that the context types are valid
    *
-   * @param {object} newProps
-   * @return {object}
-   * @private
-   */
-  _processProps: function(newProps) {
-    if (__DEV__) {
-      var Component = this._currentElement.type;
-      if (Component.propTypes) {
-        this._checkPropTypes(
-          Component.propTypes,
-          newProps,
-          ReactPropTypeLocations.prop
-        );
-      }
-    }
-    return newProps;
-  },
-
-  /**
-   * Assert that the props are valid
-   *
-   * @param {object} propTypes Map of prop name to a ReactPropType
-   * @param {object} props
+   * @param {object} typeSpecs Map of context field to a ReactPropType
+   * @param {object} values Runtime values that need to be type-checked
    * @param {string} location e.g. "prop", "context", "child context"
@@ -563,48 +712,16 @@ var ReactCompositeComponentMixin = {
    */
-  _checkPropTypes: function(propTypes, props, location) {
-    // TODO: Stop validating prop types here and only use the element
-    // validation.
-    var componentName = this.getName();
-    for (var propName in propTypes) {
-      if (propTypes.hasOwnProperty(propName)) {
-        var error;
-        try {
-          // This is intentionally an invariant that gets caught. It's the same
-          // behavior as without this statement except with a better message.
-          invariant(
-            typeof propTypes[propName] === 'function',
-            '%s: %s type `%s` is invalid; it must be a function, usually ' +
-            'from React.PropTypes.',
-            componentName || 'React class',
-            ReactPropTypeLocationNames[location],
-            propName
-          );
-          error = propTypes[propName](props, propName, componentName, location);
-        } catch (ex) {
-          error = ex;
-        }
-        if (error instanceof Error) {
-          // We may want to extend this logic for similar errors in
-          // top-level render calls, so I'm abstracting it away into
-          // a function to minimize refactoring in the future
-          var addendum = getDeclarationErrorAddendum(this);
-
-          if (location === ReactPropTypeLocations.prop) {
-            // Preface gives us something to blacklist in warning module
-            warning(
-              false,
-              'Failed Composite propType: %s%s',
-              error.message,
-              addendum
-            );
-          } else {
-            warning(
-              false,
-              'Failed Context Types: %s%s',
-              error.message,
-              addendum
-            );
-          }
-        }
-      }
+  _checkContextTypes: function(
+    typeSpecs,
+    values,
+    location: ReactPropTypeLocations,
+  ) {
+    if (__DEV__) {
+      checkReactTypeSpec(
+        typeSpecs,
+        values,
+        location,
+        this.getName(),
+        null,
+        this._debugID,
+      );
     }
@@ -623,3 +740,3 @@ var ReactCompositeComponentMixin = {
       prevContext,
-      nextContext
+      nextContext,
     );
@@ -640,7 +757,5 @@ var ReactCompositeComponentMixin = {
         transaction,
-        this._context
+        this._context,
       );
-    }
-
-    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
+    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
       this.updateComponent(
@@ -650,4 +765,6 @@ var ReactCompositeComponentMixin = {
         this._context,
-        this._context
+        this._context,
       );
+    } else {
+      this._updateBatchNumber = null;
     }
@@ -675,8 +792,14 @@ var ReactCompositeComponentMixin = {
     prevUnmaskedContext,
-    nextUnmaskedContext
+    nextUnmaskedContext,
   ) {
     var inst = this._instance;
+    invariant(
+      inst != null,
+      'Attempted to update component `%s` that has already been unmounted ' +
+        '(or failed to mount).',
+      this.getName() || 'ReactCompositeComponent',
+    );
+
     var willReceive = false;
     var nextContext;
-    var nextProps;
 
@@ -690,9 +813,7 @@ var ReactCompositeComponentMixin = {
 
-    // Distinguish between a props update versus a simple state update
-    if (prevParentElement === nextParentElement) {
-      // Skip checking prop types again -- we don't read inst.props to avoid
-      // warning for DOM component props in this upgrade
-      nextProps = nextParentElement.props;
-    } else {
-      nextProps = this._processProps(nextParentElement.props);
+    var prevProps = prevParentElement.props;
+    var nextProps = nextParentElement.props;
+
+    // Not a simple state update but a props update
+    if (prevParentElement !== nextParentElement) {
       willReceive = true;
@@ -704,3 +825,11 @@ var ReactCompositeComponentMixin = {
     if (willReceive && inst.componentWillReceiveProps) {
-      inst.componentWillReceiveProps(nextProps, nextContext);
+      if (__DEV__) {
+        measureLifeCyclePerf(
+          () => inst.componentWillReceiveProps(nextProps, nextContext),
+          this._debugID,
+          'componentWillReceiveProps',
+        );
+      } else {
+        inst.componentWillReceiveProps(nextProps, nextContext);
+      }
     }
@@ -708,7 +837,27 @@ var ReactCompositeComponentMixin = {
     var nextState = this._processPendingState(nextProps, nextContext);
-
-    var shouldUpdate =
-      this._pendingForceUpdate ||
-      !inst.shouldComponentUpdate ||
-      inst.shouldComponentUpdate(nextProps, nextState, nextContext);
+    var shouldUpdate = true;
+
+    if (!this._pendingForceUpdate) {
+      if (inst.shouldComponentUpdate) {
+        if (__DEV__) {
+          shouldUpdate = measureLifeCyclePerf(
+            () => inst.shouldComponentUpdate(nextProps, nextState, nextContext),
+            this._debugID,
+            'shouldComponentUpdate',
+          );
+        } else {
+          shouldUpdate = inst.shouldComponentUpdate(
+            nextProps,
+            nextState,
+            nextContext,
+          );
+        }
+      } else {
+        if (this._compositeType === CompositeTypes.PureClass) {
+          shouldUpdate =
+            !shallowEqual(prevProps, nextProps) ||
+            !shallowEqual(inst.state, nextState);
+        }
+      }
+    }
 
@@ -718,4 +867,4 @@ var ReactCompositeComponentMixin = {
         '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
-        'boolean value. Make sure to return true or false.',
-        this.getName() || 'ReactCompositeComponent'
+          'boolean value. Make sure to return true or false.',
+        this.getName() || 'ReactCompositeComponent',
       );
@@ -723,2 +872,3 @@ var ReactCompositeComponentMixin = {
 
+    this._updateBatchNumber = null;
     if (shouldUpdate) {
@@ -732,3 +882,3 @@ var ReactCompositeComponentMixin = {
         transaction,
-        nextUnmaskedContext
+        nextUnmaskedContext,
       );
@@ -765,5 +915,5 @@ var ReactCompositeComponentMixin = {
         nextState,
-        typeof partial === 'function' ?
-          partial.call(inst, nextState, props, context) :
-          partial
+        typeof partial === 'function'
+          ? partial.call(inst, nextState, props, context)
+          : partial,
       );
@@ -792,3 +942,3 @@ var ReactCompositeComponentMixin = {
     transaction,
-    unmaskedContext
+    unmaskedContext,
   ) {
@@ -807,3 +957,11 @@ var ReactCompositeComponentMixin = {
     if (inst.componentWillUpdate) {
-      inst.componentWillUpdate(nextProps, nextState, nextContext);
+      if (__DEV__) {
+        measureLifeCyclePerf(
+          () => inst.componentWillUpdate(nextProps, nextState, nextContext),
+          this._debugID,
+          'componentWillUpdate',
+        );
+      } else {
+        inst.componentWillUpdate(nextProps, nextState, nextContext);
+      }
     }
@@ -819,6 +977,28 @@ var ReactCompositeComponentMixin = {
     if (hasComponentDidUpdate) {
-      transaction.getReactMountReady().enqueue(
-        inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext),
-        inst
-      );
+      if (__DEV__) {
+        transaction.getReactMountReady().enqueue(() => {
+          measureLifeCyclePerf(
+            inst.componentDidUpdate.bind(
+              inst,
+              prevProps,
+              prevState,
+              prevContext,
+            ),
+            this._debugID,
+            'componentDidUpdate',
+          );
+        });
+      } else {
+        transaction
+          .getReactMountReady()
+          .enqueue(
+            inst.componentDidUpdate.bind(
+              inst,
+              prevProps,
+              prevState,
+              prevContext,
+            ),
+            inst,
+          );
+      }
     }
@@ -836,2 +1016,8 @@ var ReactCompositeComponentMixin = {
     var nextRenderedElement = this._renderValidatedComponent();
+
+    var debugID = 0;
+    if (__DEV__) {
+      debugID = this._debugID;
+    }
+
     if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
@@ -841,20 +1027,37 @@ var ReactCompositeComponentMixin = {
         transaction,
-        this._processChildContext(context)
+        this._processChildContext(context),
       );
     } else {
-      var oldNativeNode = ReactReconciler.getNativeNode(prevComponentInstance);
+      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
       ReactReconciler.unmountComponent(prevComponentInstance, false);
 
-      this._renderedNodeType = ReactNodeTypes.getType(nextRenderedElement);
-      this._renderedComponent = this._instantiateReactComponent(
-        nextRenderedElement
+      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
+      this._renderedNodeType = nodeType;
+      var child = this._instantiateReactComponent(
+        nextRenderedElement,
+        nodeType !== ReactNodeTypes.EMPTY /* shouldHaveDebugID */,
       );
+      this._renderedComponent = child;
+
       var nextMarkup = ReactReconciler.mountComponent(
-        this._renderedComponent,
+        child,
         transaction,
-        this._nativeParent,
-        this._nativeContainerInfo,
-        this._processChildContext(context)
+        this._hostParent,
+        this._hostContainerInfo,
+        this._processChildContext(context),
+        debugID,
+      );
+
+      if (__DEV__) {
+        if (debugID !== 0) {
+          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
+          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
+        }
+      }
+
+      this._replaceNodeWithMarkup(
+        oldHostNode,
+        nextMarkup,
+        prevComponentInstance,
       );
-      this._replaceNodeWithMarkup(oldNativeNode, nextMarkup);
     }
@@ -867,6 +1070,7 @@ var ReactCompositeComponentMixin = {
    */
-  _replaceNodeWithMarkup: function(oldNativeNode, nextMarkup) {
+  _replaceNodeWithMarkup: function(oldHostNode, nextMarkup, prevInstance) {
     ReactComponentEnvironment.replaceNodeWithMarkup(
-      oldNativeNode,
-      nextMarkup
+      oldHostNode,
+      nextMarkup,
+      prevInstance,
     );
@@ -879,10 +1083,20 @@ var ReactCompositeComponentMixin = {
     var inst = this._instance;
-    var renderedComponent = inst.render();
+    var renderedElement;
+
+    if (__DEV__) {
+      renderedElement = measureLifeCyclePerf(
+        () => inst.render(),
+        this._debugID,
+        'render',
+      );
+    } else {
+      renderedElement = inst.render();
+    }
+
     if (__DEV__) {
       // We allow auto-mocks to proceed as if they're returning null.
-      if (renderedComponent === undefined &&
-          inst.render._isMockFunction) {
+      if (renderedElement === undefined && inst.render._isMockFunction) {
         // This is probably bad practice. Consider warning here and
         // deprecating this convenience.
-        renderedComponent = null;
+        renderedElement = null;
       }
@@ -890,3 +1104,3 @@ var ReactCompositeComponentMixin = {
 
-    return renderedComponent;
+    return renderedElement;
   },
@@ -897,9 +1111,12 @@ var ReactCompositeComponentMixin = {
   _renderValidatedComponent: function() {
-    var renderedComponent;
-    ReactCurrentOwner.current = this;
-    try {
-      renderedComponent =
-        this._renderValidatedComponentWithoutOwnerOrContext();
-    } finally {
-      ReactCurrentOwner.current = null;
+    var renderedElement;
+    if (__DEV__ || this._compositeType !== CompositeTypes.StatelessFunctional) {
+      ReactCurrentOwner.current = this;
+      try {
+        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
+      } finally {
+        ReactCurrentOwner.current = null;
+      }
+    } else {
+      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
     }
@@ -907,9 +1124,11 @@ var ReactCompositeComponentMixin = {
       // TODO: An `isValidNode` function would probably be more appropriate
-      renderedComponent === null || renderedComponent === false ||
-      ReactElement.isValidElement(renderedComponent),
+      renderedElement === null ||
+        renderedElement === false ||
+        React.isValidElement(renderedElement),
       '%s.render(): A valid React element (or null) must be returned. You may have ' +
         'returned undefined, an array or some other invalid object.',
-      this.getName() || 'ReactCompositeComponent'
+      this.getName() || 'ReactCompositeComponent',
     );
-    return renderedComponent;
+
+    return renderedElement;
   },
@@ -929,11 +1148,14 @@ var ReactCompositeComponentMixin = {
     if (__DEV__) {
-      var componentName = component && component.getName ?
-        component.getName() : 'a component';
-      warning(publicComponentInstance != null,
+      var componentName = component && component.getName
+        ? component.getName()
+        : 'a component';
+      warning(
+        publicComponentInstance != null ||
+          component._compositeType !== CompositeTypes.StatelessFunctional,
         'Stateless function components cannot be given refs ' +
-        '(See ref "%s" in %s created by %s). ' +
-        'Attempts to access this ref will fail.',
+          '(See ref "%s" in %s created by %s). ' +
+          'Attempts to access this ref will fail.',
         ref,
         componentName,
-        this.getName()
+        this.getName(),
       );
@@ -966,4 +1188,6 @@ var ReactCompositeComponentMixin = {
     return (
-      type.displayName || (constructor && constructor.displayName) ||
-      type.name || (constructor && constructor.name) ||
+      type.displayName ||
+      (constructor && constructor.displayName) ||
+      type.name ||
+      (constructor && constructor.name) ||
       null
@@ -982,3 +1206,3 @@ var ReactCompositeComponentMixin = {
     var inst = this._instance;
-    if (inst instanceof StatelessComponent) {
+    if (this._compositeType === CompositeTypes.StatelessFunctional) {
       return null;
@@ -990,19 +1214,2 @@ var ReactCompositeComponentMixin = {
   _instantiateReactComponent: null,
-
-};
-
-ReactPerf.measureMethods(
-  ReactCompositeComponentMixin,
-  'ReactCompositeComponent',
-  {
-    mountComponent: 'mountComponent',
-    updateComponent: 'updateComponent',
-    _renderValidatedComponent: '_renderValidatedComponent',
-  }
-);
-
-var ReactCompositeComponent = {
-
-  Mixin: ReactCompositeComponentMixin,
-
 };
diff --git a/src/renderers/shared/reconciler/ReactDefaultBatchingStrategy.js b/src/renderers/shared/stack/reconciler/ReactDefaultBatchingStrategy.js
similarity index 85%
rename from src/renderers/shared/reconciler/ReactDefaultBatchingStrategy.js
rename to src/renderers/shared/stack/reconciler/ReactDefaultBatchingStrategy.js
index 904dc1f80..b23847d72 100644
--- a/src/renderers/shared/reconciler/ReactDefaultBatchingStrategy.js
+++ b/src/renderers/shared/stack/reconciler/ReactDefaultBatchingStrategy.js
@@ -36,11 +36,7 @@ function ReactDefaultBatchingStrategyTransaction() {
 
-Object.assign(
-  ReactDefaultBatchingStrategyTransaction.prototype,
-  Transaction.Mixin,
-  {
-    getTransactionWrappers: function() {
-      return TRANSACTION_WRAPPERS;
-    },
-  }
-);
+Object.assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
+  getTransactionWrappers: function() {
+    return TRANSACTION_WRAPPERS;
+  },
+});
 
@@ -62,5 +58,5 @@ var ReactDefaultBatchingStrategy = {
     if (alreadyBatchingUpdates) {
-      callback(a, b, c, d, e);
+      return callback(a, b, c, d, e);
     } else {
-      transaction.perform(callback, null, a, b, c, d, e);
+      return transaction.perform(callback, null, a, b, c, d, e);
     }
diff --git a/src/renderers/shared/reconciler/ReactEmptyComponent.js b/src/renderers/shared/stack/reconciler/ReactEmptyComponent.js
similarity index 100%
rename from src/renderers/shared/reconciler/ReactEmptyComponent.js
rename to src/renderers/shared/stack/reconciler/ReactEmptyComponent.js
diff --git a/src/renderers/shared/reconciler/ReactEventEmitterMixin.js b/src/renderers/shared/stack/reconciler/ReactEventEmitterMixin.js
similarity index 89%
rename from src/renderers/shared/reconciler/ReactEventEmitterMixin.js
rename to src/renderers/shared/stack/reconciler/ReactEventEmitterMixin.js
index 94461f880..63134a57e 100644
--- a/src/renderers/shared/reconciler/ReactEventEmitterMixin.js
+++ b/src/renderers/shared/stack/reconciler/ReactEventEmitterMixin.js
@@ -21,3 +21,2 @@ function runEventQueueInBatch(events) {
 var ReactEventEmitterMixin = {
-
   /**
@@ -27,6 +26,7 @@ var ReactEventEmitterMixin = {
   handleTopLevel: function(
-      topLevelType,
-      targetInst,
-      nativeEvent,
-      nativeEventTarget) {
+    topLevelType,
+    targetInst,
+    nativeEvent,
+    nativeEventTarget,
+  ) {
     var events = EventPluginHub.extractEvents(
@@ -35,3 +35,3 @@ var ReactEventEmitterMixin = {
       nativeEvent,
-      nativeEventTarget
+      nativeEventTarget,
     );
diff --git a/src/renderers/shared/reconciler/ReactNativeComponent.js b/src/renderers/shared/stack/reconciler/ReactHostComponent.js
similarity index 55%
rename from src/renderers/shared/reconciler/ReactNativeComponent.js
rename to src/renderers/shared/stack/reconciler/ReactHostComponent.js
index 7f2803495..c6c06b8b7 100644
--- a/src/renderers/shared/reconciler/ReactNativeComponent.js
+++ b/src/renderers/shared/stack/reconciler/ReactHostComponent.js
@@ -8,3 +8,3 @@
  *
- * @providesModule ReactNativeComponent
+ * @providesModule ReactHostComponent
  */
@@ -15,9 +15,6 @@ var invariant = require('invariant');
 
-var autoGenerateWrapperClass = null;
 var genericComponentClass = null;
-// This registry keeps track of wrapper classes around native tags.
-var tagToComponentClass = {};
 var textComponentClass = null;
 
-var ReactNativeComponentInjection = {
+var ReactHostComponentInjection = {
   // This accepts a class that receives the tag string. This is a catch all
@@ -32,7 +29,2 @@ var ReactNativeComponentInjection = {
   },
-  // This accepts a keyed object with classes as values. Each key represents a
-  // tag. That particular tag will use this class instead of the generic one.
-  injectComponentClasses: function(componentClasses) {
-    Object.assign(tagToComponentClass, componentClasses);
-  },
 };
@@ -40,21 +32,3 @@ var ReactNativeComponentInjection = {
 /**
- * Get a composite component wrapper class for a specific tag.
- *
- * @param {ReactElement} element The tag for which to get the class.
- * @return {function} The React class constructor function.
- */
-function getComponentClassForElement(element) {
-  if (typeof element.type === 'function') {
-    return element.type;
-  }
-  var tag = element.type;
-  var componentClass = tagToComponentClass[tag];
-  if (componentClass == null) {
-    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
-  }
-  return componentClass;
-}
-
-/**
- * Get a native internal component class for a specific tag.
+ * Get a host internal component class for a specific tag.
  *
@@ -67,3 +41,3 @@ function createInternalComponent(element) {
     'There is no registered component for the tag %s',
-    element.type
+    element.type,
   );
@@ -88,4 +62,3 @@ function isTextComponent(component) {
 
-var ReactNativeComponent = {
-  getComponentClassForElement: getComponentClassForElement,
+var ReactHostComponent = {
   createInternalComponent: createInternalComponent,
@@ -93,5 +66,5 @@ var ReactNativeComponent = {
   isTextComponent: isTextComponent,
-  injection: ReactNativeComponentInjection,
+  injection: ReactHostComponentInjection,
 };
 
-module.exports = ReactNativeComponent;
+module.exports = ReactHostComponent;
diff --git a/src/renderers/shared/stack/reconciler/ReactInstanceType.js b/src/renderers/shared/stack/reconciler/ReactInstanceType.js
new file mode 100644
index 000000000..bb213281b
--- /dev/null
+++ b/src/renderers/shared/stack/reconciler/ReactInstanceType.js
@@ -0,0 +1,42 @@
+/**
+ * Copyright 2016-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactInstanceType
+ * @flow
+ */
+
+'use strict';
+
+export type DebugID = number;
+
+export type ReactInstance = {
+  // ReactCompositeComponent
+  mountComponent: any,
+  performInitialMountWithErrorHandling: any,
+  performInitialMount: any,
+  getHostNode: any,
+  unmountComponent: any,
+  receiveComponent: any,
+  performUpdateIfNecessary: any,
+  updateComponent: any,
+  attachRef: (ref: string, component: ReactInstance) => void,
+  detachRef: (ref: string) => void,
+  getName: () => string,
+  getPublicInstance: any,
+  _rootNodeID: number,
+
+  // ReactDOMComponent
+  _tag: string,
+
+  // instantiateReactComponent
+  _mountIndex: number,
+  _mountImage: any,
+  // __DEV__
+  _debugID: DebugID,
+  _warnedAboutRefsInRender: boolean,
+};
diff --git a/src/renderers/shared/reconciler/ReactMultiChild.js b/src/renderers/shared/stack/reconciler/ReactMultiChild.js
similarity index 79%
rename from src/renderers/shared/reconciler/ReactMultiChild.js
rename to src/renderers/shared/stack/reconciler/ReactMultiChild.js
index 66f386132..d1821eade 100644
--- a/src/renderers/shared/reconciler/ReactMultiChild.js
+++ b/src/renderers/shared/stack/reconciler/ReactMultiChild.js
@@ -14,3 +14,4 @@
 var ReactComponentEnvironment = require('ReactComponentEnvironment');
-var ReactMultiChildUpdateTypes = require('ReactMultiChildUpdateTypes');
+var ReactInstanceMap = require('ReactInstanceMap');
+var ReactInstrumentation = require('ReactInstrumentation');
 
@@ -20,2 +21,3 @@ var ReactChildReconciler = require('ReactChildReconciler');
 
+var emptyFunction = require('emptyFunction');
 var flattenChildren = require('flattenChildren');
@@ -33,3 +35,3 @@ function makeInsertMarkup(markup, afterNode, toIndex) {
   return {
-    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
+    type: 'INSERT_MARKUP',
     content: markup,
@@ -52,6 +54,6 @@ function makeMove(child, afterNode, toIndex) {
   return {
-    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
+    type: 'MOVE_EXISTING',
     content: null,
     fromIndex: child._mountIndex,
-    fromNode: ReactReconciler.getNativeNode(child),
+    fromNode: ReactReconciler.getHostNode(child),
     toIndex: toIndex,
@@ -70,3 +72,3 @@ function makeRemove(child, node) {
   return {
-    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
+    type: 'REMOVE_NODE',
     content: null,
@@ -88,3 +90,3 @@ function makeSetMarkup(markup) {
   return {
-    type: ReactMultiChildUpdateTypes.SET_MARKUP,
+    type: 'SET_MARKUP',
     content: markup,
@@ -106,3 +108,3 @@ function makeTextContent(textContent) {
   return {
-    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
+    type: 'TEXT_CONTENT',
     content: textContent,
@@ -133,6 +135,30 @@ function enqueue(queue, update) {
 function processQueue(inst, updateQueue) {
-  ReactComponentEnvironment.processChildrenUpdates(
-    inst,
-    updateQueue,
-  );
+  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
+}
+
+var setChildrenForInstrumentation = emptyFunction;
+if (__DEV__) {
+  var getDebugID = function(inst) {
+    if (!inst._debugID) {
+      // Check for ART-like instances. TODO: This is silly/gross.
+      var internal;
+      if ((internal = ReactInstanceMap.get(inst))) {
+        inst = internal;
+      }
+    }
+    return inst._debugID;
+  };
+  setChildrenForInstrumentation = function(children) {
+    var debugID = getDebugID(this);
+    // TODO: React Native empty components are also multichild.
+    // This means they still get into this method but don't have _debugID.
+    if (debugID !== 0) {
+      ReactInstrumentation.debugTool.onSetChildren(
+        debugID,
+        children
+          ? Object.keys(children).map(key => children[key]._debugID)
+          : [],
+      );
+    }
+  };
 }
@@ -146,3 +172,2 @@ function processQueue(inst, updateQueue) {
 var ReactMultiChild = {
-
   /**
@@ -155,5 +180,9 @@ var ReactMultiChild = {
   Mixin: {
-
-    _reconcilerInstantiateChildren: function(nestedChildren, transaction, context) {
+    _reconcilerInstantiateChildren: function(
+      nestedChildren,
+      transaction,
+      context,
+    ) {
       if (__DEV__) {
+        var selfDebugID = getDebugID(this);
         if (this._currentElement) {
@@ -162,3 +191,6 @@ var ReactMultiChild = {
             return ReactChildReconciler.instantiateChildren(
-              nestedChildren, transaction, context
+              nestedChildren,
+              transaction,
+              context,
+              selfDebugID,
             );
@@ -170,3 +202,5 @@ var ReactMultiChild = {
       return ReactChildReconciler.instantiateChildren(
-        nestedChildren, transaction, context
+        nestedChildren,
+        transaction,
+        context,
       );
@@ -177,8 +211,11 @@ var ReactMultiChild = {
       nextNestedChildrenElements,
+      mountImages,
       removedNodes,
       transaction,
-      context
+      context,
     ) {
       var nextChildren;
+      var selfDebugID = 0;
       if (__DEV__) {
+        selfDebugID = getDebugID(this);
         if (this._currentElement) {
@@ -186,3 +223,6 @@ var ReactMultiChild = {
             ReactCurrentOwner.current = this._currentElement._owner;
-            nextChildren = flattenChildren(nextNestedChildrenElements);
+            nextChildren = flattenChildren(
+              nextNestedChildrenElements,
+              selfDebugID,
+            );
           } finally {
@@ -191,3 +231,11 @@ var ReactMultiChild = {
           ReactChildReconciler.updateChildren(
-            prevChildren, nextChildren, removedNodes, transaction, context
+            prevChildren,
+            nextChildren,
+            mountImages,
+            removedNodes,
+            transaction,
+            this,
+            this._hostContainerInfo,
+            context,
+            selfDebugID,
           );
@@ -196,5 +244,13 @@ var ReactMultiChild = {
       }
-      nextChildren = flattenChildren(nextNestedChildrenElements);
+      nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
       ReactChildReconciler.updateChildren(
-        prevChildren, nextChildren, removedNodes, transaction, context
+        prevChildren,
+        nextChildren,
+        mountImages,
+        removedNodes,
+        transaction,
+        this,
+        this._hostContainerInfo,
+        context,
+        selfDebugID,
       );
@@ -213,5 +269,8 @@ var ReactMultiChild = {
       var children = this._reconcilerInstantiateChildren(
-        nestedChildren, transaction, context
+        nestedChildren,
+        transaction,
+        context,
       );
       this._renderedChildren = children;
+
       var mountImages = [];
@@ -221,2 +280,6 @@ var ReactMultiChild = {
           var child = children[name];
+          var selfDebugID = 0;
+          if (__DEV__) {
+            selfDebugID = getDebugID(this);
+          }
           var mountImage = ReactReconciler.mountComponent(
@@ -225,4 +288,5 @@ var ReactMultiChild = {
             this,
-            this._nativeContainerInfo,
-            context
+            this._hostContainerInfo,
+            context,
+            selfDebugID,
           );
@@ -232,2 +296,7 @@ var ReactMultiChild = {
       }
+
+      if (__DEV__) {
+        setChildrenForInstrumentation.call(this, children);
+      }
+
       return mountImages;
@@ -292,5 +361,10 @@ var ReactMultiChild = {
      */
-    _updateChildren: function(nextNestedChildrenElements, transaction, context) {
+    _updateChildren: function(
+      nextNestedChildrenElements,
+      transaction,
+      context,
+    ) {
       var prevChildren = this._renderedChildren;
       var removedNodes = {};
+      var mountImages = [];
       var nextChildren = this._reconcilerUpdateChildren(
@@ -298,5 +372,6 @@ var ReactMultiChild = {
         nextNestedChildrenElements,
+        mountImages,
         removedNodes,
         transaction,
-        context
+        context,
       );
@@ -309,4 +384,6 @@ var ReactMultiChild = {
       // `lastIndex` will be the last index visited in `prevChildren`.
-      var lastIndex = 0;
       var nextIndex = 0;
+      var lastIndex = 0;
+      // `nextMountIndex` will increment for each newly mounted child.
+      var nextMountIndex = 0;
       var lastPlacedNode = null;
@@ -321,3 +398,3 @@ var ReactMultiChild = {
             updates,
-            this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex)
+            this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex),
           );
@@ -336,2 +413,3 @@ var ReactMultiChild = {
               nextChild,
+              mountImages[nextMountIndex],
               lastPlacedNode,
@@ -339,8 +417,9 @@ var ReactMultiChild = {
               transaction,
-              context
-            )
+              context,
+            ),
           );
+          nextMountIndex++;
         }
         nextIndex++;
-        lastPlacedNode = ReactReconciler.getNativeNode(nextChild);
+        lastPlacedNode = ReactReconciler.getHostNode(nextChild);
       }
@@ -351,3 +430,3 @@ var ReactMultiChild = {
             updates,
-            this._unmountChild(prevChildren[name], removedNodes[name])
+            this._unmountChild(prevChildren[name], removedNodes[name]),
           );
@@ -359,2 +438,6 @@ var ReactMultiChild = {
       this._renderedChildren = nextChildren;
+
+      if (__DEV__) {
+        setChildrenForInstrumentation.call(this, nextChildren);
+      }
     },
@@ -425,2 +508,3 @@ var ReactMultiChild = {
       child,
+      mountImage,
       afterNode,
@@ -428,10 +512,4 @@ var ReactMultiChild = {
       transaction,
-      context) {
-      var mountImage = ReactReconciler.mountComponent(
-        child,
-        transaction,
-        this,
-        this._nativeContainerInfo,
-        context
-      );
+      context,
+    ) {
       child._mountIndex = index;
@@ -453,5 +531,3 @@ var ReactMultiChild = {
     },
-
   },
-
 };
diff --git a/src/renderers/shared/reconciler/ReactMultiChildUpdateTypes.js b/src/renderers/shared/stack/reconciler/ReactMultiChildUpdateTypes.js
similarity index 69%
rename from src/renderers/shared/reconciler/ReactMultiChildUpdateTypes.js
rename to src/renderers/shared/stack/reconciler/ReactMultiChildUpdateTypes.js
index 8e123549d..1319db50f 100644
--- a/src/renderers/shared/reconciler/ReactMultiChildUpdateTypes.js
+++ b/src/renderers/shared/stack/reconciler/ReactMultiChildUpdateTypes.js
@@ -13,4 +13,2 @@
 
-var keyMirror = require('keyMirror');
-
 /**
@@ -20,13 +18,8 @@ var keyMirror = require('keyMirror');
  * Enumerates all the possible types of update configurations.
- *
- * @internal
  */
-var ReactMultiChildUpdateTypes = keyMirror({
-  INSERT_MARKUP: null,
-  MOVE_EXISTING: null,
-  REMOVE_NODE: null,
-  SET_MARKUP: null,
-  TEXT_CONTENT: null,
-});
-
-module.exports = ReactMultiChildUpdateTypes;
+export type ReactMultiChildUpdateTypes =
+  | 'INSERT_MARKUP'
+  | 'MOVE_EXISTING'
+  | 'REMOVE_NODE'
+  | 'SET_MARKUP'
+  | 'TEXT_CONTENT';
diff --git a/src/shared/utils/ReactNodeTypes.js b/src/renderers/shared/stack/reconciler/ReactNodeTypes.js
similarity index 76%
rename from src/shared/utils/ReactNodeTypes.js
rename to src/renderers/shared/stack/reconciler/ReactNodeTypes.js
index 75bd75d13..7b8d6f209 100644
--- a/src/shared/utils/ReactNodeTypes.js
+++ b/src/renderers/shared/stack/reconciler/ReactNodeTypes.js
@@ -9,2 +9,3 @@
  * @providesModule ReactNodeTypes
+ * @flow
  */
@@ -13,3 +14,5 @@
 
-var ReactElement = require('ReactElement');
+type ReactNodeType = 0 | 1 | 2;
+
+var React = require('React');
 
@@ -18,3 +21,3 @@ var invariant = require('invariant');
 var ReactNodeTypes = {
-  NATIVE: 0,
+  HOST: 0,
   COMPOSITE: 1,
@@ -22,6 +25,6 @@ var ReactNodeTypes = {
 
-  getType: function(node) {
+  getType: function(node: ReactElement<any>): ReactNodeType {
     if (node === null || node === false) {
       return ReactNodeTypes.EMPTY;
-    } else if (ReactElement.isValidElement(node)) {
+    } else if (React.isValidElement(node)) {
       if (typeof node.type === 'function') {
@@ -29,3 +32,3 @@ var ReactNodeTypes = {
       } else {
-        return ReactNodeTypes.NATIVE;
+        return ReactNodeTypes.HOST;
       }
diff --git a/src/renderers/shared/reconciler/ReactOwner.js b/src/renderers/shared/stack/reconciler/ReactOwner.js
similarity index 67%
rename from src/renderers/shared/reconciler/ReactOwner.js
rename to src/renderers/shared/stack/reconciler/ReactOwner.js
index df2bfb8d7..a25e987d8 100644
--- a/src/renderers/shared/reconciler/ReactOwner.js
+++ b/src/renderers/shared/stack/reconciler/ReactOwner.js
@@ -9,2 +9,3 @@
  * @providesModule ReactOwner
+ * @flow
  */
@@ -15,2 +16,17 @@ var invariant = require('invariant');
 
+import type {ReactInstance} from 'ReactInstanceType';
+
+/**
+ * @param {?object} object
+ * @return {boolean} True if `object` is a valid owner.
+ * @final
+ */
+function isValidOwner(object: any): boolean {
+  return !!(
+    object &&
+    typeof object.attachRef === 'function' &&
+    typeof object.detachRef === 'function'
+  );
+}
+
 /**
@@ -46,16 +62,2 @@ var invariant = require('invariant');
 var ReactOwner = {
-
-  /**
-   * @param {?object} object
-   * @return {boolean} True if `object` is a valid owner.
-   * @final
-   */
-  isValidOwner: function(object) {
-    return !!(
-      object &&
-      typeof object.attachRef === 'function' &&
-      typeof object.detachRef === 'function'
-    );
-  },
-
   /**
@@ -69,9 +71,13 @@ var ReactOwner = {
    */
-  addComponentAsRefTo: function(component, ref, owner) {
+  addComponentAsRefTo: function(
+    component: ReactInstance,
+    ref: string,
+    owner: ReactInstance,
+  ): void {
     invariant(
-      ReactOwner.isValidOwner(owner),
+      isValidOwner(owner),
       'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' +
-      'be adding a ref to a component that was not created inside a component\'s ' +
-      '`render` method, or you have multiple copies of React loaded ' +
-      '(details: https://fb.me/react-refs-must-have-owner).'
+        "be adding a ref to a component that was not created inside a component's " +
+        '`render` method, or you have multiple copies of React loaded ' +
+        '(details: https://fb.me/react-refs-must-have-owner).',
     );
@@ -89,9 +95,13 @@ var ReactOwner = {
    */
-  removeComponentAsRefFrom: function(component, ref, owner) {
+  removeComponentAsRefFrom: function(
+    component: ReactInstance,
+    ref: string,
+    owner: ReactInstance,
+  ): void {
     invariant(
-      ReactOwner.isValidOwner(owner),
+      isValidOwner(owner),
       'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' +
-      'be removing a ref to a component that was not created inside a component\'s ' +
-      '`render` method, or you have multiple copies of React loaded ' +
-      '(details: https://fb.me/react-refs-must-have-owner).'
+        "be removing a ref to a component that was not created inside a component's " +
+        '`render` method, or you have multiple copies of React loaded ' +
+        '(details: https://fb.me/react-refs-must-have-owner).',
     );
@@ -100,3 +110,6 @@ var ReactOwner = {
     // because we do not want to detach the ref if another component stole it.
-    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
+    if (
+      ownerPublicInstance &&
+      ownerPublicInstance.refs[ref] === component.getPublicInstance()
+    ) {
       owner.detachRef(ref);
@@ -104,3 +117,2 @@ var ReactOwner = {
   },
-
 };
diff --git a/src/renderers/shared/reconciler/ReactReconciler.js b/src/renderers/shared/stack/reconciler/ReactReconciler.js
similarity index 53%
rename from src/renderers/shared/reconciler/ReactReconciler.js
rename to src/renderers/shared/stack/reconciler/ReactReconciler.js
index ae7806e4f..12c1b60ef 100644
--- a/src/renderers/shared/reconciler/ReactReconciler.js
+++ b/src/renderers/shared/stack/reconciler/ReactReconciler.js
@@ -16,2 +16,4 @@ var ReactInstrumentation = require('ReactInstrumentation');
 
+var warning = require('warning');
+
 /**
@@ -25,3 +27,2 @@ function attachRefs() {
 var ReactReconciler = {
-
   /**
@@ -31,4 +32,4 @@ var ReactReconciler = {
    * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
-   * @param {?object} the containing native component instance
-   * @param {?object} info about the native container
+   * @param {?object} the containing host component instance
+   * @param {?object} info about the host container
    * @return {?string} Rendered markup to be inserted into the DOM.
@@ -40,14 +41,27 @@ var ReactReconciler = {
     transaction,
-    nativeParent,
-    nativeContainerInfo,
-    context
+    hostParent,
+    hostContainerInfo,
+    context,
+    parentDebugID, // 0 in production and for roots
   ) {
+    if (__DEV__) {
+      if (internalInstance._debugID !== 0) {
+        ReactInstrumentation.debugTool.onBeforeMountComponent(
+          internalInstance._debugID,
+          internalInstance._currentElement,
+          parentDebugID,
+        );
+      }
+    }
     var markup = internalInstance.mountComponent(
       transaction,
-      nativeParent,
-      nativeContainerInfo,
-      context
+      hostParent,
+      hostContainerInfo,
+      context,
+      parentDebugID,
     );
-    if (internalInstance._currentElement &&
-        internalInstance._currentElement.ref != null) {
+    if (
+      internalInstance._currentElement &&
+      internalInstance._currentElement.ref != null
+    ) {
       transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
@@ -55,3 +69,7 @@ var ReactReconciler = {
     if (__DEV__) {
-      ReactInstrumentation.debugTool.onMountComponent(internalInstance);
+      if (internalInstance._debugID !== 0) {
+        ReactInstrumentation.debugTool.onMountComponent(
+          internalInstance._debugID,
+        );
+      }
     }
@@ -64,4 +82,4 @@ var ReactReconciler = {
    */
-  getNativeNode: function(internalInstance) {
-    return internalInstance.getNativeNode();
+  getHostNode: function(internalInstance) {
+    return internalInstance.getHostNode();
   },
@@ -75,2 +93,9 @@ var ReactReconciler = {
   unmountComponent: function(internalInstance, safely) {
+    if (__DEV__) {
+      if (internalInstance._debugID !== 0) {
+        ReactInstrumentation.debugTool.onBeforeUnmountComponent(
+          internalInstance._debugID,
+        );
+      }
+    }
     ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
@@ -78,3 +103,7 @@ var ReactReconciler = {
     if (__DEV__) {
-      ReactInstrumentation.debugTool.onUnmountComponent(internalInstance);
+      if (internalInstance._debugID !== 0) {
+        ReactInstrumentation.debugTool.onUnmountComponent(
+          internalInstance._debugID,
+        );
+      }
     }
@@ -92,3 +121,6 @@ var ReactReconciler = {
   receiveComponent: function(
-    internalInstance, nextElement, transaction, context
+    internalInstance,
+    nextElement,
+    transaction,
+    context,
   ) {
@@ -96,5 +128,3 @@ var ReactReconciler = {
 
-    if (nextElement === prevElement &&
-        context === internalInstance._context
-      ) {
+    if (nextElement === prevElement && context === internalInstance._context) {
       // Since elements are immutable after the owner is rendered,
@@ -112,6 +142,12 @@ var ReactReconciler = {
 
-    var refsChanged = ReactRef.shouldUpdateRefs(
-      prevElement,
-      nextElement
-    );
+    if (__DEV__) {
+      if (internalInstance._debugID !== 0) {
+        ReactInstrumentation.debugTool.onBeforeUpdateComponent(
+          internalInstance._debugID,
+          nextElement,
+        );
+      }
+    }
+
+    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
 
@@ -123,5 +159,7 @@ var ReactReconciler = {
 
-    if (refsChanged &&
-        internalInstance._currentElement &&
-        internalInstance._currentElement.ref != null) {
+    if (
+      refsChanged &&
+      internalInstance._currentElement &&
+      internalInstance._currentElement.ref != null
+    ) {
       transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
@@ -130,3 +168,7 @@ var ReactReconciler = {
     if (__DEV__) {
-      ReactInstrumentation.debugTool.onUpdateComponent(internalInstance);
+      if (internalInstance._debugID !== 0) {
+        ReactInstrumentation.debugTool.onUpdateComponent(
+          internalInstance._debugID,
+        );
+      }
     }
@@ -143,10 +185,35 @@ var ReactReconciler = {
     internalInstance,
-    transaction
+    transaction,
+    updateBatchNumber,
   ) {
+    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
+      // The component's enqueued batch number should always be the current
+      // batch or the following one.
+      warning(
+        internalInstance._updateBatchNumber == null ||
+          internalInstance._updateBatchNumber === updateBatchNumber + 1,
+        'performUpdateIfNecessary: Unexpected batch number (current %s, ' +
+          'pending %s)',
+        updateBatchNumber,
+        internalInstance._updateBatchNumber,
+      );
+      return;
+    }
+    if (__DEV__) {
+      if (internalInstance._debugID !== 0) {
+        ReactInstrumentation.debugTool.onBeforeUpdateComponent(
+          internalInstance._debugID,
+          internalInstance._currentElement,
+        );
+      }
+    }
     internalInstance.performUpdateIfNecessary(transaction);
     if (__DEV__) {
-      ReactInstrumentation.debugTool.onUpdateComponent(internalInstance);
+      if (internalInstance._debugID !== 0) {
+        ReactInstrumentation.debugTool.onUpdateComponent(
+          internalInstance._debugID,
+        );
+      }
     }
   },
-
 };
diff --git a/src/renderers/shared/reconciler/ReactRef.js b/src/renderers/shared/stack/reconciler/ReactRef.js
similarity index 59%
rename from src/renderers/shared/reconciler/ReactRef.js
rename to src/renderers/shared/stack/reconciler/ReactRef.js
index 3ddc23fbd..e5c497223 100644
--- a/src/renderers/shared/reconciler/ReactRef.js
+++ b/src/renderers/shared/stack/reconciler/ReactRef.js
@@ -9,2 +9,3 @@
  * @providesModule ReactRef
+ * @flow
  */
@@ -15,2 +16,5 @@ var ReactOwner = require('ReactOwner');
 
+import type {ReactInstance} from 'ReactInstanceType';
+import type {ReactElement} from 'ReactElementType';
+
 var ReactRef = {};
@@ -35,4 +39,7 @@ function detachRef(ref, component, owner) {
 
-ReactRef.attachRefs = function(instance, element) {
-  if (element === null || element === false) {
+ReactRef.attachRefs = function(
+  instance: ReactInstance,
+  element: ReactElement | string | number | null | false,
+): void {
+  if (element === null || typeof element !== 'object') {
     return;
@@ -45,3 +52,6 @@ ReactRef.attachRefs = function(instance, element) {
 
-ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
+ReactRef.shouldUpdateRefs = function(
+  prevElement: ReactElement | string | number | null | false,
+  nextElement: ReactElement | string | number | null | false,
+): boolean {
   // If either the owner or a `ref` has changed, make sure the newest owner
@@ -58,10 +68,20 @@ ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
 
-  var prevEmpty = prevElement === null || prevElement === false;
-  var nextEmpty = nextElement === null || nextElement === false;
+  var prevRef = null;
+  var prevOwner = null;
+  if (prevElement !== null && typeof prevElement === 'object') {
+    prevRef = prevElement.ref;
+    prevOwner = prevElement._owner;
+  }
+
+  var nextRef = null;
+  var nextOwner = null;
+  if (nextElement !== null && typeof nextElement === 'object') {
+    nextRef = nextElement.ref;
+    nextOwner = nextElement._owner;
+  }
 
   return (
-    // This has a few false positives w/r/t empty components.
-    prevEmpty || nextEmpty ||
-    nextElement._owner !== prevElement._owner ||
-    nextElement.ref !== prevElement.ref
+    prevRef !== nextRef ||
+    // If owner changes but we have an unchanged function ref, don't update refs
+    (typeof nextRef === 'string' && nextOwner !== prevOwner)
   );
@@ -69,4 +89,7 @@ ReactRef.shouldUpdateRefs = function(prevElement, nextElement) {
 
-ReactRef.detachRefs = function(instance, element) {
-  if (element === null || element === false) {
+ReactRef.detachRefs = function(
+  instance: ReactInstance,
+  element: ReactElement | string | number | null | false,
+): void {
+  if (element === null || typeof element !== 'object') {
     return;
diff --git a/src/renderers/shared/reconciler/ReactSimpleEmptyComponent.js b/src/renderers/shared/stack/reconciler/ReactSimpleEmptyComponent.js
similarity index 76%
rename from src/renderers/shared/reconciler/ReactSimpleEmptyComponent.js
rename to src/renderers/shared/stack/reconciler/ReactSimpleEmptyComponent.js
index 0565a0164..fe009b0c4 100644
--- a/src/renderers/shared/reconciler/ReactSimpleEmptyComponent.js
+++ b/src/renderers/shared/stack/reconciler/ReactSimpleEmptyComponent.js
@@ -15,3 +15,2 @@ var ReactReconciler = require('ReactReconciler');
 
-
 var ReactSimpleEmptyComponent = function(placeholderElement, instantiate) {
@@ -23,5 +22,6 @@ Object.assign(ReactSimpleEmptyComponent.prototype, {
     transaction,
-    nativeParent,
-    nativeContainerInfo,
-    context
+    hostParent,
+    hostContainerInfo,
+    context,
+    parentDebugID, // 0 in production and for roots
   ) {
@@ -30,11 +30,11 @@ Object.assign(ReactSimpleEmptyComponent.prototype, {
       transaction,
-      nativeParent,
-      nativeContainerInfo,
-      context
+      hostParent,
+      hostContainerInfo,
+      context,
+      parentDebugID,
     );
   },
-  receiveComponent: function() {
-  },
-  getNativeNode: function() {
-    return ReactReconciler.getNativeNode(this._renderedComponent);
+  receiveComponent: function() {},
+  getHostNode: function() {
+    return ReactReconciler.getHostNode(this._renderedComponent);
   },
diff --git a/src/renderers/shared/reconciler/ReactUpdateQueue.js b/src/renderers/shared/stack/reconciler/ReactUpdateQueue.js
similarity index 77%
rename from src/renderers/shared/reconciler/ReactUpdateQueue.js
rename to src/renderers/shared/stack/reconciler/ReactUpdateQueue.js
index 65bdd4905..c5474d67f 100644
--- a/src/renderers/shared/reconciler/ReactUpdateQueue.js
+++ b/src/renderers/shared/stack/reconciler/ReactUpdateQueue.js
@@ -15,2 +15,3 @@ var ReactCurrentOwner = require('ReactCurrentOwner');
 var ReactInstanceMap = require('ReactInstanceMap');
+var ReactInstrumentation = require('ReactInstrumentation');
 var ReactUpdates = require('ReactUpdates');
@@ -29,3 +30,3 @@ function formatUnexpectedArgument(arg) {
   }
-  var displayName = arg.constructor && arg.constructor.name || type;
+  var displayName = (arg.constructor && arg.constructor.name) || type;
   var keys = Object.keys(arg);
@@ -41,2 +42,3 @@ function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
     if (__DEV__) {
+      var ctor = publicInstance.constructor;
       // Only warn when we have a callerName. Otherwise we should be silent.
@@ -47,7 +49,7 @@ function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
         '%s(...): Can only update a mounted or mounting component. ' +
-        'This usually means you called %s() on an unmounted component. ' +
-        'This is a no-op. Please check the code for the %s component.',
+          'This usually means you called %s() on an unmounted component. ' +
+          'This is a no-op. Please check the code for the %s component.',
         callerName,
         callerName,
-        publicInstance.constructor.displayName
+        (ctor && (ctor.displayName || ctor.name)) || 'ReactClass',
       );
@@ -61,7 +63,7 @@ function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
       '%s(...): Cannot update during an existing state transition (such as ' +
-      'within `render` or another component\'s constructor). Render methods ' +
-      'should be a pure function of props and state; constructor ' +
-      'side-effects are an anti-pattern, but can be moved to ' +
-      '`componentWillMount`.',
-      callerName
+        "within `render` or another component's constructor). Render methods " +
+        'should be a pure function of props and state; constructor ' +
+        'side-effects are an anti-pattern, but can be moved to ' +
+        '`componentWillMount`.',
+      callerName,
     );
@@ -77,3 +79,2 @@ function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
 var ReactUpdateQueue = {
-
   /**
@@ -92,7 +93,7 @@ var ReactUpdateQueue = {
           '%s is accessing isMounted inside its render() function. ' +
-          'render() should be a pure function of props and state. It should ' +
-          'never access something that requires stale data from the previous ' +
-          'render, such as refs. Move this logic to componentDidMount and ' +
-          'componentDidUpdate instead.',
-          owner.getName() || 'A component'
+            'render() should be a pure function of props and state. It should ' +
+            'never access something that requires stale data from the previous ' +
+            'render, such as refs. Move this logic to componentDidMount and ' +
+            'componentDidUpdate instead.',
+          owner.getName() || 'A component',
         );
@@ -171,3 +172,3 @@ var ReactUpdateQueue = {
       publicInstance,
-      'forceUpdate'
+      'forceUpdate',
     );
@@ -194,6 +195,6 @@ var ReactUpdateQueue = {
    */
-  enqueueReplaceState: function(publicInstance, completeState) {
+  enqueueReplaceState: function(publicInstance, completeState, callback) {
     var internalInstance = getInternalInstanceReadyForUpdate(
       publicInstance,
-      'replaceState'
+      'replaceState',
     );
@@ -207,2 +208,12 @@ var ReactUpdateQueue = {
 
+    // Future-proof 15.5
+    if (callback !== undefined && callback !== null) {
+      ReactUpdateQueue.validateCallback(callback, 'replaceState');
+      if (internalInstance._pendingCallbacks) {
+        internalInstance._pendingCallbacks.push(callback);
+      } else {
+        internalInstance._pendingCallbacks = [callback];
+      }
+    }
+
     enqueueUpdate(internalInstance);
@@ -221,5 +232,14 @@ var ReactUpdateQueue = {
   enqueueSetState: function(publicInstance, partialState) {
+    if (__DEV__) {
+      ReactInstrumentation.debugTool.onSetState();
+      warning(
+        partialState != null,
+        'setState(...): You passed an undefined or null state object; ' +
+          'instead, use forceUpdate().',
+      );
+    }
+
     var internalInstance = getInternalInstanceReadyForUpdate(
       publicInstance,
-      'setState'
+      'setState',
     );
@@ -238,4 +258,6 @@ var ReactUpdateQueue = {
 
-  enqueueElementInternal: function(internalInstance, newElement) {
-    internalInstance._pendingElement = newElement;
+  enqueueElementInternal: function(internalInstance, nextElement, nextContext) {
+    internalInstance._pendingElement = nextElement;
+    // TODO: introduce _pendingContext instead of setting it directly.
+    internalInstance._context = nextContext;
     enqueueUpdate(internalInstance);
@@ -247,8 +269,7 @@ var ReactUpdateQueue = {
       '%s(...): Expected the last optional `callback` argument to be a ' +
-      'function. Instead received: %s.',
+        'function. Instead received: %s.',
       callerName,
-      formatUnexpectedArgument(callback)
+      formatUnexpectedArgument(callback),
     );
   },
-
 };
diff --git a/src/renderers/shared/reconciler/ReactUpdates.js b/src/renderers/shared/stack/reconciler/ReactUpdates.js
similarity index 77%
rename from src/renderers/shared/reconciler/ReactUpdates.js
rename to src/renderers/shared/stack/reconciler/ReactUpdates.js
index 6fd1d2f3b..782af8a2a 100644
--- a/src/renderers/shared/reconciler/ReactUpdates.js
+++ b/src/renderers/shared/stack/reconciler/ReactUpdates.js
@@ -16,3 +16,2 @@ var PooledClass = require('PooledClass');
 var ReactFeatureFlags = require('ReactFeatureFlags');
-var ReactPerf = require('ReactPerf');
 var ReactReconciler = require('ReactReconciler');
@@ -23,2 +22,3 @@ var invariant = require('invariant');
 var dirtyComponents = [];
+var updateBatchNumber = 0;
 var asapCallbackQueue = CallbackQueue.getPooled();
@@ -32,3 +32,3 @@ function ensureInjected() {
     'ReactUpdates: must inject a reconcile transaction class and batching ' +
-    'strategy'
+      'strategy',
   );
@@ -71,3 +71,3 @@ function ReactUpdatesFlushTransaction() {
   this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(
-    /* useCreateElement */ true
+    /* useCreateElement */ true,
   );
@@ -75,32 +75,28 @@ function ReactUpdatesFlushTransaction() {
 
-Object.assign(
-  ReactUpdatesFlushTransaction.prototype,
-  Transaction.Mixin,
-  {
-    getTransactionWrappers: function() {
-      return TRANSACTION_WRAPPERS;
-    },
-
-    destructor: function() {
-      this.dirtyComponentsLength = null;
-      CallbackQueue.release(this.callbackQueue);
-      this.callbackQueue = null;
-      ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
-      this.reconcileTransaction = null;
-    },
-
-    perform: function(method, scope, a) {
-      // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
-      // with this transaction's wrappers around it.
-      return Transaction.Mixin.perform.call(
-        this,
-        this.reconcileTransaction.perform,
-        this.reconcileTransaction,
-        method,
-        scope,
-        a
-      );
-    },
-  }
-);
+Object.assign(ReactUpdatesFlushTransaction.prototype, Transaction, {
+  getTransactionWrappers: function() {
+    return TRANSACTION_WRAPPERS;
+  },
+
+  destructor: function() {
+    this.dirtyComponentsLength = null;
+    CallbackQueue.release(this.callbackQueue);
+    this.callbackQueue = null;
+    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
+    this.reconcileTransaction = null;
+  },
+
+  perform: function(method, scope, a) {
+    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
+    // with this transaction's wrappers around it.
+    return Transaction.perform.call(
+      this,
+      this.reconcileTransaction.perform,
+      this.reconcileTransaction,
+      method,
+      scope,
+      a,
+    );
+  },
+});
 
@@ -110,3 +106,3 @@ function batchedUpdates(callback, a, b, c, d, e) {
   ensureInjected();
-  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
+  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
 }
@@ -128,6 +124,6 @@ function runBatchedUpdates(transaction) {
     len === dirtyComponents.length,
-    'Expected flush transaction\'s stored dirty-components length (%s) to ' +
-    'match dirty-components array length (%s).',
+    "Expected flush transaction's stored dirty-components length (%s) to " +
+      'match dirty-components array length (%s).',
     len,
-    dirtyComponents.length
+    dirtyComponents.length,
   );
@@ -139,2 +135,9 @@ function runBatchedUpdates(transaction) {
 
+  // Any updates enqueued while reconciling must be performed after this entire
+  // batch. Otherwise, if dirtyComponents is [A, B] where A has children B and
+  // C, B could update twice in a single batch if C's render enqueues an update
+  // to B (since B would have already updated, we should skip it, and the only
+  // way we can know to do so is by checking the batch counter).
+  updateBatchNumber++;
+
   for (var i = 0; i < len; i++) {
@@ -155,6 +158,3 @@ function runBatchedUpdates(transaction) {
       // Duck type TopLevelWrapper. This is probably always true.
-      if (
-        component._currentElement.props ===
-        component._renderedComponent._currentElement
-      ) {
+      if (component._currentElement.type.isReactTopLevelWrapper) {
         namedComponent = component._renderedComponent;
@@ -167,3 +167,4 @@ function runBatchedUpdates(transaction) {
       component,
-      transaction.reconcileTransaction
+      transaction.reconcileTransaction,
+      updateBatchNumber,
     );
@@ -178,3 +179,3 @@ function runBatchedUpdates(transaction) {
           callbacks[j],
-          component.getPublicInstance()
+          component.getPublicInstance(),
         );
@@ -206,7 +207,2 @@ var flushBatchedUpdates = function() {
 };
-flushBatchedUpdates = ReactPerf.measure(
-  'ReactUpdates',
-  'flushBatchedUpdates',
-  flushBatchedUpdates
-);
 
@@ -222,3 +218,3 @@ function enqueueUpdate(component) {
   // verify that that's the case. (This is called by each top-level update
-  // function, like setProps, setState, forceUpdate, etc.; creation and
+  // function, like setState, forceUpdate, etc.; creation and
   // destruction of top-level components is guarded in ReactMount.)
@@ -231,2 +227,5 @@ function enqueueUpdate(component) {
   dirtyComponents.push(component);
+  if (component._updateBatchNumber == null) {
+    component._updateBatchNumber = updateBatchNumber + 1;
+  }
 }
@@ -240,4 +239,4 @@ function asap(callback, context) {
     batchingStrategy.isBatchingUpdates,
-    'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' +
-    'updates are not being batched.'
+    "ReactUpdates.asap: Can't enqueue an asap callback in a context where" +
+      'updates are not being batched.',
   );
@@ -251,3 +250,3 @@ var ReactUpdatesInjection = {
       ReconcileTransaction,
-      'ReactUpdates: must provide a reconcile transaction class'
+      'ReactUpdates: must provide a reconcile transaction class',
     );
@@ -259,3 +258,3 @@ var ReactUpdatesInjection = {
       _batchingStrategy,
-      'ReactUpdates: must provide a batching strategy'
+      'ReactUpdates: must provide a batching strategy',
     );
@@ -263,3 +262,3 @@ var ReactUpdatesInjection = {
       typeof _batchingStrategy.batchedUpdates === 'function',
-      'ReactUpdates: must provide a batchedUpdates() function'
+      'ReactUpdates: must provide a batchedUpdates() function',
     );
@@ -267,3 +266,3 @@ var ReactUpdatesInjection = {
       typeof _batchingStrategy.isBatchingUpdates === 'boolean',
-      'ReactUpdates: must provide an isBatchingUpdates boolean attribute'
+      'ReactUpdates: must provide an isBatchingUpdates boolean attribute',
     );
diff --git a/src/renderers/shared/stack/reconciler/__tests__/ReactChildReconciler-test.js b/src/renderers/shared/stack/reconciler/__tests__/ReactChildReconciler-test.js
new file mode 100644
index 000000000..aa591f916
--- /dev/null
+++ b/src/renderers/shared/stack/reconciler/__tests__/ReactChildReconciler-test.js
@@ -0,0 +1,84 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+// NOTE: We're explicitly not using JSX here. This is intended to test
+// the current stack addendum without having source location added by babel.
+
+'use strict';
+
+var React;
+var ReactTestUtils;
+
+describe('ReactChildReconciler', () => {
+  function normalizeCodeLocInfo(str) {
+    return str.replace(/\(at .+?:\d+\)/g, '(at **)');
+  }
+
+  beforeEach(() => {
+    jest.resetModuleRegistry();
+
+    React = require('React');
+    ReactTestUtils = require('ReactTestUtils');
+  });
+
+  it('warns for duplicated keys', () => {
+    spyOn(console, 'error');
+
+    class Component extends React.Component {
+      render() {
+        return <div>{[<div key="1" />, <div key="1" />]}</div>;
+      }
+    }
+
+    ReactTestUtils.renderIntoDocument(<Component />);
+
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'Child keys must be unique; when two children share a key, only the first child will be used.',
+    );
+  });
+
+  it('warns for duplicated keys with component stack info', () => {
+    spyOn(console, 'error');
+
+    class Component extends React.Component {
+      render() {
+        return <div>{[<div key="1" />, <div key="1" />]}</div>;
+      }
+    }
+
+    class Parent extends React.Component {
+      render() {
+        return React.cloneElement(this.props.child);
+      }
+    }
+
+    class GrandParent extends React.Component {
+      render() {
+        return <Parent child={<Component />} />;
+      }
+    }
+
+    ReactTestUtils.renderIntoDocument(<GrandParent />);
+
+    expect(console.error.calls.count()).toBe(1);
+    expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
+      'Warning: flattenChildren(...): ' +
+        'Encountered two children with the same key, `1`. ' +
+        'Child keys must be unique; when two children share a key, ' +
+        'only the first child will be used.\n' +
+        '    in div (at **)\n' +
+        '    in Component (at **)\n' +
+        '    in Parent (at **)\n' +
+        '    in GrandParent (at **)',
+    );
+  });
+});
diff --git a/src/renderers/shared/stack/reconciler/__tests__/ReactComponent-test.js b/src/renderers/shared/stack/reconciler/__tests__/ReactComponent-test.js
new file mode 100644
index 000000000..aebbc34b5
--- /dev/null
+++ b/src/renderers/shared/stack/reconciler/__tests__/ReactComponent-test.js
@@ -0,0 +1,371 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+var React;
+var ReactDOM;
+var ReactTestUtils;
+
+describe('ReactComponent', () => {
+  beforeEach(() => {
+    React = require('React');
+    ReactDOM = require('ReactDOM');
+    ReactTestUtils = require('ReactTestUtils');
+  });
+
+  it('should throw on invalid render targets', () => {
+    var container = document.createElement('div');
+    // jQuery objects are basically arrays; people often pass them in by mistake
+    expect(function() {
+      ReactDOM.render(<div />, [container]);
+    }).toThrowError(
+      '_registerComponent(...): Target container is not a DOM element.',
+    );
+
+    expect(function() {
+      ReactDOM.render(<div />, null);
+    }).toThrowError(
+      '_registerComponent(...): Target container is not a DOM element.',
+    );
+  });
+
+  it('should throw when supplying a ref outside of render method', () => {
+    var instance = <div ref="badDiv" />;
+    expect(function() {
+      instance = ReactTestUtils.renderIntoDocument(instance);
+    }).toThrow();
+  });
+
+  it('should warn when children are mutated during render', () => {
+    spyOn(console, 'error');
+    function Wrapper(props) {
+      props.children[1] = <p key={1} />; // Mutation is illegal
+      return <div>{props.children}</div>;
+    }
+    expect(() => {
+      ReactTestUtils.renderIntoDocument(
+        <Wrapper>
+          <span key={0} />
+          <span key={1} />
+          <span key={2} />
+        </Wrapper>,
+      );
+    }).toThrowError(/Cannot assign to read only property.*/);
+  });
+
+  it('should warn when children are mutated during update', () => {
+    spyOn(console, 'error');
+
+    class Wrapper extends React.Component {
+      componentDidMount() {
+        this.props.children[1] = <p key={1} />; // Mutation is illegal
+        this.forceUpdate();
+      }
+
+      render() {
+        return <div>{this.props.children}</div>;
+      }
+    }
+
+    expect(() => {
+      ReactTestUtils.renderIntoDocument(
+        <Wrapper>
+          <span key={0} />
+          <span key={1} />
+          <span key={2} />
+        </Wrapper>,
+      );
+    }).toThrowError(/Cannot assign to read only property.*/);
+  });
+
+  it('should support refs on owned components', () => {
+    var innerObj = {};
+    var outerObj = {};
+
+    class Wrapper extends React.Component {
+      getObject = () => {
+        return this.props.object;
+      };
+
+      render() {
+        return <div>{this.props.children}</div>;
+      }
+    }
+
+    class Component extends React.Component {
+      render() {
+        var inner = <Wrapper object={innerObj} ref="inner" />;
+        var outer = <Wrapper object={outerObj} ref="outer">{inner}</Wrapper>;
+        return outer;
+      }
+
+      componentDidMount() {
+        expect(this.refs.inner.getObject()).toEqual(innerObj);
+        expect(this.refs.outer.getObject()).toEqual(outerObj);
+      }
+    }
+
+    var instance = <Component />;
+    ReactTestUtils.renderIntoDocument(instance);
+  });
+
+  it('should not have refs on unmounted components', () => {
+    class Parent extends React.Component {
+      render() {
+        return <Child><div ref="test" /></Child>;
+      }
+
+      componentDidMount() {
+        expect(this.refs && this.refs.test).toEqual(undefined);
+      }
+    }
+
+    class Child extends React.Component {
+      render() {
+        return <div />;
+      }
+    }
+
+    var instance = <Parent child={<span />} />;
+    ReactTestUtils.renderIntoDocument(instance);
+  });
+
+  it('should support new-style refs', () => {
+    var innerObj = {};
+    var outerObj = {};
+
+    class Wrapper extends React.Component {
+      getObject = () => {
+        return this.props.object;
+      };
+
+      render() {
+        return <div>{this.props.children}</div>;
+      }
+    }
+
+    var mounted = false;
+
+    class Component extends React.Component {
+      render() {
+        var inner = (
+          <Wrapper object={innerObj} ref={c => (this.innerRef = c)} />
+        );
+        var outer = (
+          <Wrapper object={outerObj} ref={c => (this.outerRef = c)}>
+            {inner}
+          </Wrapper>
+        );
+        return outer;
+      }
+
+      componentDidMount() {
+        expect(this.innerRef.getObject()).toEqual(innerObj);
+        expect(this.outerRef.getObject()).toEqual(outerObj);
+        mounted = true;
+      }
+    }
+
+    var instance = <Component />;
+    ReactTestUtils.renderIntoDocument(instance);
+    expect(mounted).toBe(true);
+  });
+
+  it('should support new-style refs with mixed-up owners', () => {
+    class Wrapper extends React.Component {
+      getTitle = () => {
+        return this.props.title;
+      };
+
+      render() {
+        return this.props.getContent();
+      }
+    }
+
+    var mounted = false;
+
+    class Component extends React.Component {
+      getInner = () => {
+        // (With old-style refs, it's impossible to get a ref to this div
+        // because Wrapper is the current owner when this function is called.)
+        return <div title="inner" ref={c => (this.innerRef = c)} />;
+      };
+
+      render() {
+        return (
+          <Wrapper
+            title="wrapper"
+            ref={c => (this.wrapperRef = c)}
+            getContent={this.getInner}
+          />
+        );
+      }
+
+      componentDidMount() {
+        // Check .props.title to make sure we got the right elements back
+        expect(this.wrapperRef.getTitle()).toBe('wrapper');
+        expect(ReactDOM.findDOMNode(this.innerRef).title).toBe('inner');
+        mounted = true;
+      }
+    }
+
+    var instance = <Component />;
+    ReactTestUtils.renderIntoDocument(instance);
+    expect(mounted).toBe(true);
+  });
+
+  it('should call refs at the correct time', () => {
+    var log = [];
+
+    class Inner extends React.Component {
+      render() {
+        log.push(`inner ${this.props.id} render`);
+        return <div />;
+      }
+
+      componentDidMount() {
+        log.push(`inner ${this.props.id} componentDidMount`);
+      }
+
+      componentDidUpdate() {
+        log.push(`inner ${this.props.id} componentDidUpdate`);
+      }
+
+      componentWillUnmount() {
+        log.push(`inner ${this.props.id} componentWillUnmount`);
+      }
+    }
+
+    class Outer extends React.Component {
+      render() {
+        return (
+          <div>
+            <Inner
+              id={1}
+              ref={c => {
+                log.push(`ref 1 got ${c ? `instance ${c.props.id}` : 'null'}`);
+              }}
+            />
+            <Inner
+              id={2}
+              ref={c => {
+                log.push(`ref 2 got ${c ? `instance ${c.props.id}` : 'null'}`);
+              }}
+            />
+          </div>
+        );
+      }
+
+      componentDidMount() {
+        log.push('outer componentDidMount');
+      }
+
+      componentDidUpdate() {
+        log.push('outer componentDidUpdate');
+      }
+
+      componentWillUnmount() {
+        log.push('outer componentWillUnmount');
+      }
+    }
+
+    // mount, update, unmount
+    var el = document.createElement('div');
+    log.push('start mount');
+    ReactDOM.render(<Outer />, el);
+    log.push('start update');
+    ReactDOM.render(<Outer />, el);
+    log.push('start unmount');
+    ReactDOM.unmountComponentAtNode(el);
+
+    /* eslint-disable indent */
+    expect(log).toEqual([
+      'start mount',
+      'inner 1 render',
+      'inner 2 render',
+      'inner 1 componentDidMount',
+      'ref 1 got instance 1',
+      'inner 2 componentDidMount',
+      'ref 2 got instance 2',
+      'outer componentDidMount',
+      'start update',
+      // Previous (equivalent) refs get cleared
+      'ref 1 got null',
+      'inner 1 render',
+      'ref 2 got null',
+      'inner 2 render',
+      'inner 1 componentDidUpdate',
+      'ref 1 got instance 1',
+      'inner 2 componentDidUpdate',
+      'ref 2 got instance 2',
+      'outer componentDidUpdate',
+      'start unmount',
+      'outer componentWillUnmount',
+      'ref 1 got null',
+      'inner 1 componentWillUnmount',
+      'ref 2 got null',
+      'inner 2 componentWillUnmount',
+    ]);
+    /* eslint-enable indent */
+  });
+
+  it('fires the callback after a component is rendered', () => {
+    var callback = jest.fn();
+    var container = document.createElement('div');
+    ReactDOM.render(<div />, container, callback);
+    expect(callback.mock.calls.length).toBe(1);
+    ReactDOM.render(<div className="foo" />, container, callback);
+    expect(callback.mock.calls.length).toBe(2);
+    ReactDOM.render(<span />, container, callback);
+    expect(callback.mock.calls.length).toBe(3);
+  });
+
+  it('throws usefully when rendering badly-typed elements', () => {
+    spyOn(console, 'error');
+
+    var X = undefined;
+    expect(() => ReactTestUtils.renderIntoDocument(<X />)).toThrowError(
+      'Element type is invalid: expected a string (for built-in components) ' +
+        'or a class/function (for composite components) but got: undefined. ' +
+        "You likely forgot to export your component from the file it's " +
+        'defined in.',
+    );
+
+    var Y = null;
+    expect(() => ReactTestUtils.renderIntoDocument(<Y />)).toThrowError(
+      'Element type is invalid: expected a string (for built-in components) ' +
+        'or a class/function (for composite components) but got: null.',
+    );
+
+    // One warning for each element creation
+    expect(console.error.calls.count()).toBe(2);
+  });
+
+  it('includes owner name in the error about badly-typed elements', () => {
+    spyOn(console, 'error');
+
+    function Foo() {
+      var X = undefined;
+      return <X />;
+    }
+
+    expect(() => ReactTestUtils.renderIntoDocument(<Foo />)).toThrowError(
+      'Element type is invalid: expected a string (for built-in components) ' +
+        'or a class/function (for composite components) but got: undefined. ' +
+        "You likely forgot to export your component from the file it's " +
+        'defined in. Check the render method of `Foo`.',
+    );
+
+    // One warning for each element creation
+    expect(console.error.calls.count()).toBe(1);
+  });
+});
diff --git a/src/renderers/shared/reconciler/__tests__/ReactComponentLifeCycle-test.js b/src/renderers/shared/stack/reconciler/__tests__/ReactComponentLifeCycle-test.js
similarity index 54%
rename from src/renderers/shared/reconciler/__tests__/ReactComponentLifeCycle-test.js
rename to src/renderers/shared/stack/reconciler/__tests__/ReactComponentLifeCycle-test.js
index b7204eb9a..a4a696695 100644
--- a/src/renderers/shared/reconciler/__tests__/ReactComponentLifeCycle-test.js
+++ b/src/renderers/shared/stack/reconciler/__tests__/ReactComponentLifeCycle-test.js
@@ -13,4 +13,2 @@
 
-var keyMirror = require('keyMirror');
-
 var React;
@@ -24,3 +22,2 @@ var clone = function(o) {
 
-
 var GET_INIT_STATE_RETURN_VAL = {
@@ -70,3 +67,3 @@ var POST_WILL_UNMOUNT_STATE = {
  */
-var ComponentLifeCycle = keyMirror({
+type ComponentLifeCycle =
   /**
@@ -75,10 +72,8 @@ var ComponentLifeCycle = keyMirror({
    */
-  MOUNTED: null,
-  /**
+  | 'MOUNTED' /**
    * Unmounted components are inactive and cannot receive new props.
    */
-  UNMOUNTED: null,
-});
+  | 'UNMOUNTED';
 
-function getLifeCycleState(instance) {
+function getLifeCycleState(instance): ComponentLifeCycle {
   var internalInstance = ReactInstanceMap.get(instance);
@@ -86,5 +81,3 @@ function getLifeCycleState(instance) {
   // gets unmounted, it loses that internal instance.
-  return internalInstance ?
-         ComponentLifeCycle.MOUNTED :
-         ComponentLifeCycle.UNMOUNTED;
+  return internalInstance ? 'MOUNTED' : 'UNMOUNTED';
 }
@@ -98,4 +91,4 @@ function getLifeCycleState(instance) {
  */
-describe('ReactComponentLifeCycle', function() {
-  beforeEach(function() {
+describe('ReactComponentLifeCycle', () => {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -107,14 +100,13 @@ describe('ReactComponentLifeCycle', function() {
 
-  it('should not reuse an instance when it has been unmounted', function() {
+  it('should not reuse an instance when it has been unmounted', () => {
     var container = document.createElement('div');
-    var StatefulComponent = React.createClass({
-      getInitialState: function() {
-        return {};
-      },
-      render: function() {
-        return (
-          <div></div>
-        );
-      },
-    });
+
+    class StatefulComponent extends React.Component {
+      state = {};
+
+      render() {
+        return <div />;
+      }
+    }
+
     var element = <StatefulComponent />;
@@ -130,40 +122,42 @@ describe('ReactComponentLifeCycle', function() {
    */
-  it('it should fire onDOMReady when already in onDOMReady', function() {
-
+  it('it should fire onDOMReady when already in onDOMReady', () => {
     var _testJournal = [];
 
-    var Child = React.createClass({
-      componentDidMount: function() {
+    class Child extends React.Component {
+      componentDidMount() {
         _testJournal.push('Child:onDOMReady');
-      },
-      render: function() {
-        return <div></div>;
-      },
-    });
-
-    var SwitcherParent = React.createClass({
-      getInitialState: function() {
+      }
+
+      render() {
+        return <div />;
+      }
+    }
+
+    class SwitcherParent extends React.Component {
+      constructor(props) {
+        super(props);
         _testJournal.push('SwitcherParent:getInitialState');
-        return {showHasOnDOMReadyComponent: false};
-      },
-      componentDidMount: function() {
+        this.state = {showHasOnDOMReadyComponent: false};
+      }
+
+      componentDidMount() {
         _testJournal.push('SwitcherParent:onDOMReady');
         this.switchIt();
-      },
-      switchIt: function() {
+      }
+
+      switchIt = () => {
         this.setState({showHasOnDOMReadyComponent: true});
-      },
-      render: function() {
+      };
+
+      render() {
         return (
-          <div>{
-            this.state.showHasOnDOMReadyComponent ?
-            <Child /> :
-            <div> </div>
-          }</div>
+          <div>
+            {this.state.showHasOnDOMReadyComponent ? <Child /> : <div />}
+          </div>
         );
-      },
-    });
+      }
+    }
 
     var instance = <SwitcherParent />;
-    instance = ReactTestUtils.renderIntoDocument(instance);
+    ReactTestUtils.renderIntoDocument(instance);
     expect(_testJournal).toEqual([
@@ -177,13 +171,13 @@ describe('ReactComponentLifeCycle', function() {
   // had provided a getInitialState method.
-  it('throws when accessing state in componentWillMount', function() {
-    var StatefulComponent = React.createClass({
-      componentWillMount: function() {
+  it('throws when accessing state in componentWillMount', () => {
+    class StatefulComponent extends React.Component {
+      componentWillMount() {
         void this.state.yada;
-      },
-      render: function() {
-        return (
-          <div></div>
-        );
-      },
-    });
+      }
+
+      render() {
+        return <div />;
+      }
+    }
+
     var instance = <StatefulComponent />;
@@ -194,13 +188,13 @@ describe('ReactComponentLifeCycle', function() {
 
-  it('should allow update state inside of componentWillMount', function() {
-    var StatefulComponent = React.createClass({
-      componentWillMount: function() {
+  it('should allow update state inside of componentWillMount', () => {
+    class StatefulComponent extends React.Component {
+      componentWillMount() {
         this.setState({stateField: 'something'});
-      },
-      render: function() {
-        return (
-          <div></div>
-        );
-      },
-    });
+      }
+
+      render() {
+        return <div />;
+      }
+    }
+
     var instance = <StatefulComponent />;
@@ -211,23 +205,25 @@ describe('ReactComponentLifeCycle', function() {
 
-  it('should not allow update state inside of getInitialState', function() {
+  it('should not allow update state inside of getInitialState', () => {
     spyOn(console, 'error');
-    var StatefulComponent = React.createClass({
-      getInitialState: function() {
+
+    class StatefulComponent extends React.Component {
+      constructor(props, context) {
+        super(props, context);
         this.setState({stateField: 'something'});
 
-        return {stateField: 'somethingelse'};
-      },
-      render: function() {
-        return (
-          <div></div>
-        );
-      },
-    });
+        this.state = {stateField: 'somethingelse'};
+      }
+
+      render() {
+        return <div />;
+      }
+    }
+
     ReactTestUtils.renderIntoDocument(<StatefulComponent />);
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: setState(...): Can only update a mounted or ' +
-      'mounting component. This usually means you called setState() on an ' +
-      'unmounted component. This is a no-op. Please check the code for the ' +
-      'StatefulComponent component.'
+        'mounting component. This usually means you called setState() on an ' +
+        'unmounted component. This is a no-op. Please check the code for the ' +
+        'StatefulComponent component.',
     );
@@ -235,16 +231,21 @@ describe('ReactComponentLifeCycle', function() {
 
-  it('should correctly determine if a component is mounted', function() {
+  it('should correctly determine if a component is mounted', () => {
     spyOn(console, 'error');
-    var Component = React.createClass({
-      componentWillMount: function() {
-        expect(this.isMounted()).toBeFalsy();
-      },
-      componentDidMount: function() {
-        expect(this.isMounted()).toBeTruthy();
-      },
-      render: function() {
-        expect(this.isMounted()).toBeFalsy();
-        return <div/>;
-      },
-    });
+    class Component extends React.Component {
+      _isMounted() {
+        // No longer a public API, but we can test that it works internally by
+        // reaching into the updater.
+        return this.updater.isMounted(this);
+      }
+      componentWillMount() {
+        expect(this._isMounted()).toBeFalsy();
+      }
+      componentDidMount() {
+        expect(this._isMounted()).toBeTruthy();
+      }
+      render() {
+        expect(this._isMounted()).toBeFalsy();
+        return <div />;
+      }
+    }
 
@@ -253,7 +254,7 @@ describe('ReactComponentLifeCycle', function() {
     var instance = ReactTestUtils.renderIntoDocument(element);
-    expect(instance.isMounted()).toBeTruthy();
+    expect(instance._isMounted()).toBeTruthy();
 
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'Component is accessing isMounted inside its render()'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'Component is accessing isMounted inside its render()',
     );
@@ -261,16 +262,21 @@ describe('ReactComponentLifeCycle', function() {
 
-  it('should correctly determine if a null component is mounted', function() {
+  it('should correctly determine if a null component is mounted', () => {
     spyOn(console, 'error');
-    var Component = React.createClass({
-      componentWillMount: function() {
-        expect(this.isMounted()).toBeFalsy();
-      },
-      componentDidMount: function() {
-        expect(this.isMounted()).toBeTruthy();
-      },
-      render: function() {
-        expect(this.isMounted()).toBeFalsy();
+    class Component extends React.Component {
+      _isMounted() {
+        // No longer a public API, but we can test that it works internally by
+        // reaching into the updater.
+        return this.updater.isMounted(this);
+      }
+      componentWillMount() {
+        expect(this._isMounted()).toBeFalsy();
+      }
+      componentDidMount() {
+        expect(this._isMounted()).toBeTruthy();
+      }
+      render() {
+        expect(this._isMounted()).toBeFalsy();
         return null;
-      },
-    });
+      }
+    }
 
@@ -279,7 +285,7 @@ describe('ReactComponentLifeCycle', function() {
     var instance = ReactTestUtils.renderIntoDocument(element);
-    expect(instance.isMounted()).toBeTruthy();
+    expect(instance._isMounted()).toBeTruthy();
 
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'Component is accessing isMounted inside its render()'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'Component is accessing isMounted inside its render()',
     );
@@ -287,8 +293,8 @@ describe('ReactComponentLifeCycle', function() {
 
-  it('isMounted should return false when unmounted', function() {
-    var Component = React.createClass({
-      render: function() {
-        return <div/>;
-      },
-    });
+  it('isMounted should return false when unmounted', () => {
+    class Component extends React.Component {
+      render() {
+        return <div />;
+      }
+    }
 
@@ -297,3 +303,5 @@ describe('ReactComponentLifeCycle', function() {
 
-    expect(instance.isMounted()).toBe(true);
+    // No longer a public API, but we can test that it works internally by
+    // reaching into the updater.
+    expect(instance.updater.isMounted(instance)).toBe(true);
 
@@ -301,15 +309,13 @@ describe('ReactComponentLifeCycle', function() {
 
-    expect(instance.isMounted()).toBe(false);
+    expect(instance.updater.isMounted(instance)).toBe(false);
   });
 
-  it('warns if findDOMNode is used inside render', function() {
+  it('warns if findDOMNode is used inside render', () => {
     spyOn(console, 'error');
-    var Component = React.createClass({
-      getInitialState: function() {
-        return {isMounted: false};
-      },
-      componentDidMount: function() {
+    class Component extends React.Component {
+      state = {isMounted: false};
+      componentDidMount() {
         this.setState({isMounted: true});
-      },
-      render: function() {
+      }
+      render() {
         if (this.state.isMounted) {
@@ -317,10 +323,10 @@ describe('ReactComponentLifeCycle', function() {
         }
-        return <div/>;
-      },
-    });
+        return <div />;
+      }
+    }
 
     ReactTestUtils.renderIntoDocument(<Component />);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'Component is accessing findDOMNode inside its render()'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'Component is accessing findDOMNode inside its render()',
     );
@@ -328,5 +334,6 @@ describe('ReactComponentLifeCycle', function() {
 
-  it('should carry through each of the phases of setup', function() {
-    var LifeCycleComponent = React.createClass({
-      getInitialState: function() {
+  it('should carry through each of the phases of setup', () => {
+    class LifeCycleComponent extends React.Component {
+      constructor(props, context) {
+        super(props, context);
         this._testJournal = {};
@@ -339,22 +346,21 @@ describe('ReactComponentLifeCycle', function() {
         this._testJournal.returnedFromGetInitialState = clone(initState);
-        this._testJournal.lifeCycleAtStartOfGetInitialState =
-          getLifeCycleState(this);
-        return initState;
-      },
+        this._testJournal.lifeCycleAtStartOfGetInitialState = getLifeCycleState(
+          this,
+        );
+        this.state = initState;
+      }
 
-      componentWillMount: function() {
+      componentWillMount() {
         this._testJournal.stateAtStartOfWillMount = clone(this.state);
-        this._testJournal.lifeCycleAtStartOfWillMount =
-          getLifeCycleState(this);
+        this._testJournal.lifeCycleAtStartOfWillMount = getLifeCycleState(this);
         this.state.hasWillMountCompleted = true;
-      },
+      }
 
-      componentDidMount: function() {
+      componentDidMount() {
         this._testJournal.stateAtStartOfDidMount = clone(this.state);
-        this._testJournal.lifeCycleAtStartOfDidMount =
-          getLifeCycleState(this);
+        this._testJournal.lifeCycleAtStartOfDidMount = getLifeCycleState(this);
         this.setState({hasDidMountCompleted: true});
-      },
+      }
 
-      render: function() {
+      render() {
         var isInitialRender = !this.state.hasRenderCompleted;
@@ -374,11 +380,12 @@ describe('ReactComponentLifeCycle', function() {
         );
-      },
+      }
 
-      componentWillUnmount: function() {
+      componentWillUnmount() {
         this._testJournal.stateAtStartOfWillUnmount = clone(this.state);
-        this._testJournal.lifeCycleAtStartOfWillUnmount =
-          getLifeCycleState(this);
+        this._testJournal.lifeCycleAtStartOfWillUnmount = getLifeCycleState(
+          this,
+        );
         this.state.hasWillUnmountCompleted = true;
-      },
-    });
+      }
+    }
 
@@ -392,6 +399,7 @@ describe('ReactComponentLifeCycle', function() {
     expect(instance._testJournal.returnedFromGetInitialState).toEqual(
-      GET_INIT_STATE_RETURN_VAL
+      GET_INIT_STATE_RETURN_VAL,
+    );
+    expect(instance._testJournal.lifeCycleAtStartOfGetInitialState).toBe(
+      'UNMOUNTED',
     );
-    expect(instance._testJournal.lifeCycleAtStartOfGetInitialState)
-      .toBe(ComponentLifeCycle.UNMOUNTED);
 
@@ -399,22 +407,19 @@ describe('ReactComponentLifeCycle', function() {
     expect(instance._testJournal.stateAtStartOfWillMount).toEqual(
-      instance._testJournal.returnedFromGetInitialState
+      instance._testJournal.returnedFromGetInitialState,
     );
-    expect(instance._testJournal.lifeCycleAtStartOfWillMount)
-      .toBe(ComponentLifeCycle.MOUNTED);
+    expect(instance._testJournal.lifeCycleAtStartOfWillMount).toBe('MOUNTED');
 
     // componentDidMount
-    expect(instance._testJournal.stateAtStartOfDidMount)
-      .toEqual(DID_MOUNT_STATE);
-    expect(instance._testJournal.lifeCycleAtStartOfDidMount).toBe(
-      ComponentLifeCycle.MOUNTED
+    expect(instance._testJournal.stateAtStartOfDidMount).toEqual(
+      DID_MOUNT_STATE,
     );
+    expect(instance._testJournal.lifeCycleAtStartOfDidMount).toBe('MOUNTED');
 
     // render
-    expect(instance._testJournal.stateInInitialRender)
-      .toEqual(INIT_RENDER_STATE);
-    expect(instance._testJournal.lifeCycleInInitialRender).toBe(
-      ComponentLifeCycle.MOUNTED
+    expect(instance._testJournal.stateInInitialRender).toEqual(
+      INIT_RENDER_STATE,
     );
+    expect(instance._testJournal.lifeCycleInInitialRender).toBe('MOUNTED');
 
-    expect(getLifeCycleState(instance)).toBe(ComponentLifeCycle.MOUNTED);
+    expect(getLifeCycleState(instance)).toBe('MOUNTED');
 
@@ -424,9 +429,6 @@ describe('ReactComponentLifeCycle', function() {
     // render 2nd time
-    expect(instance._testJournal.stateInLaterRender)
-      .toEqual(NEXT_RENDER_STATE);
-    expect(instance._testJournal.lifeCycleInLaterRender).toBe(
-      ComponentLifeCycle.MOUNTED
-    );
+    expect(instance._testJournal.stateInLaterRender).toEqual(NEXT_RENDER_STATE);
+    expect(instance._testJournal.lifeCycleInLaterRender).toBe('MOUNTED');
 
-    expect(getLifeCycleState(instance)).toBe(ComponentLifeCycle.MOUNTED);
+    expect(getLifeCycleState(instance)).toBe('MOUNTED');
 
@@ -434,11 +436,10 @@ describe('ReactComponentLifeCycle', function() {
 
-    expect(instance._testJournal.stateAtStartOfWillUnmount)
-      .toEqual(WILL_UNMOUNT_STATE);
-    // componentWillUnmount called right before unmount.
-    expect(instance._testJournal.lifeCycleAtStartOfWillUnmount).toBe(
-      ComponentLifeCycle.MOUNTED
+    expect(instance._testJournal.stateAtStartOfWillUnmount).toEqual(
+      WILL_UNMOUNT_STATE,
     );
+    // componentWillUnmount called right before unmount.
+    expect(instance._testJournal.lifeCycleAtStartOfWillUnmount).toBe('MOUNTED');
 
     // But the current lifecycle of the component is unmounted.
-    expect(getLifeCycleState(instance)).toBe(ComponentLifeCycle.UNMOUNTED);
+    expect(getLifeCycleState(instance)).toBe('UNMOUNTED');
     expect(instance.state).toEqual(POST_WILL_UNMOUNT_STATE);
@@ -446,15 +447,18 @@ describe('ReactComponentLifeCycle', function() {
 
-  it('should not throw when updating an auxiliary component', function() {
-    var Tooltip = React.createClass({
-      render: function() {
+  it('should not throw when updating an auxiliary component', () => {
+    class Tooltip extends React.Component {
+      render() {
         return <div>{this.props.children}</div>;
-      },
-      componentDidMount: function() {
+      }
+
+      componentDidMount() {
         this.container = document.createElement('div');
         this.updateTooltip();
-      },
-      componentDidUpdate: function() {
+      }
+
+      componentDidUpdate() {
         this.updateTooltip();
-      },
-      updateTooltip: function() {
+      }
+
+      updateTooltip = () => {
         // Even though this.props.tooltip has an owner, updating it shouldn't
@@ -462,10 +466,9 @@ describe('ReactComponentLifeCycle', function() {
         ReactDOM.render(this.props.tooltip, this.container);
-      },
-    });
-    var Component = React.createClass({
-      render: function() {
+      };
+    }
+
+    class Component extends React.Component {
+      render() {
         return (
-          <Tooltip
-              ref="tooltip"
-              tooltip={<div>{this.props.tooltipText}</div>}>
+          <Tooltip ref="tooltip" tooltip={<div>{this.props.tooltipText}</div>}>
             {this.props.text}
@@ -473,10 +476,7 @@ describe('ReactComponentLifeCycle', function() {
         );
-      },
-    });
+      }
+    }
 
     var container = document.createElement('div');
-    ReactDOM.render(
-      <Component text="uno" tooltipText="one" />,
-      container
-    );
+    ReactDOM.render(<Component text="uno" tooltipText="one" />, container);
 
@@ -484,9 +484,6 @@ describe('ReactComponentLifeCycle', function() {
     // makes Tooltip rerender the tooltip component, which shouldn't throw.
-    ReactDOM.render(
-      <Component text="dos" tooltipText="two" />,
-      container
-    );
+    ReactDOM.render(<Component text="dos" tooltipText="two" />, container);
   });
 
-  it('should allow state updates in componentDidMount', function() {
+  it('should allow state updates in componentDidMount', () => {
     /**
@@ -494,16 +491,17 @@ describe('ReactComponentLifeCycle', function() {
      */
-    var SetStateInComponentDidMount = React.createClass({
-      getInitialState: function() {
-        return {
-          stateField: this.props.valueToUseInitially,
-        };
-      },
-      componentDidMount: function() {
+    class SetStateInComponentDidMount extends React.Component {
+      state = {
+        stateField: this.props.valueToUseInitially,
+      };
+
+      componentDidMount() {
         this.setState({stateField: this.props.valueToUseInOnDOMReady});
-      },
-      render: function() {
-        return (<div></div>);
-      },
-    });
-    var instance =
+      }
+
+      render() {
+        return <div />;
+      }
+    }
+
+    var instance = (
       <SetStateInComponentDidMount
@@ -511,3 +509,4 @@ describe('ReactComponentLifeCycle', function() {
         valueToUseInOnDOMReady="goodbye"
-      />;
+      />
+    );
     instance = ReactTestUtils.renderIntoDocument(instance);
@@ -516,3 +515,3 @@ describe('ReactComponentLifeCycle', function() {
 
-  it('should call nested lifecycle methods in the right order', function() {
+  it('should call nested lifecycle methods in the right order', () => {
     var log;
@@ -525,27 +524,27 @@ describe('ReactComponentLifeCycle', function() {
     };
-    var Outer = React.createClass({
-      render: function() {
+    class Outer extends React.Component {
+      componentWillMount = logger('outer componentWillMount');
+      componentDidMount = logger('outer componentDidMount');
+      componentWillReceiveProps = logger('outer componentWillReceiveProps');
+      shouldComponentUpdate = logger('outer shouldComponentUpdate');
+      componentWillUpdate = logger('outer componentWillUpdate');
+      componentDidUpdate = logger('outer componentDidUpdate');
+      componentWillUnmount = logger('outer componentWillUnmount');
+      render() {
         return <div><Inner x={this.props.x} /></div>;
-      },
-      componentWillMount: logger('outer componentWillMount'),
-      componentDidMount: logger('outer componentDidMount'),
-      componentWillReceiveProps: logger('outer componentWillReceiveProps'),
-      shouldComponentUpdate: logger('outer shouldComponentUpdate'),
-      componentWillUpdate: logger('outer componentWillUpdate'),
-      componentDidUpdate: logger('outer componentDidUpdate'),
-      componentWillUnmount: logger('outer componentWillUnmount'),
-    });
-    var Inner = React.createClass({
-      render: function() {
+      }
+    }
+
+    class Inner extends React.Component {
+      componentWillMount = logger('inner componentWillMount');
+      componentDidMount = logger('inner componentDidMount');
+      componentWillReceiveProps = logger('inner componentWillReceiveProps');
+      shouldComponentUpdate = logger('inner shouldComponentUpdate');
+      componentWillUpdate = logger('inner componentWillUpdate');
+      componentDidUpdate = logger('inner componentDidUpdate');
+      componentWillUnmount = logger('inner componentWillUnmount');
+      render() {
         return <span>{this.props.x}</span>;
-      },
-      componentWillMount: logger('inner componentWillMount'),
-      componentDidMount: logger('inner componentDidMount'),
-      componentWillReceiveProps: logger('inner componentWillReceiveProps'),
-      shouldComponentUpdate: logger('inner shouldComponentUpdate'),
-      componentWillUpdate: logger('inner componentWillUpdate'),
-      componentDidUpdate: logger('inner componentDidUpdate'),
-      componentWillUnmount: logger('inner componentWillUnmount'),
-    });
-
+      }
+    }
 
diff --git a/src/renderers/shared/reconciler/__tests__/ReactCompositeComponent-test.js b/src/renderers/shared/stack/reconciler/__tests__/ReactCompositeComponent-test.js
similarity index 58%
rename from src/renderers/shared/reconciler/__tests__/ReactCompositeComponent-test.js
rename to src/renderers/shared/stack/reconciler/__tests__/ReactCompositeComponent-test.js
index c33fb33b2..3a5077642 100644
--- a/src/renderers/shared/reconciler/__tests__/ReactCompositeComponent-test.js
+++ b/src/renderers/shared/stack/reconciler/__tests__/ReactCompositeComponent-test.js
@@ -25,5 +25,4 @@ var reactComponentExpect;
 
-describe('ReactCompositeComponent', function() {
-
-  beforeEach(function() {
+describe('ReactCompositeComponent', () => {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -38,18 +37,16 @@ describe('ReactCompositeComponent', function() {
 
-    MorphingComponent = React.createClass({
-      getInitialState: function() {
-        return {activated: false};
-      },
+    MorphingComponent = class extends React.Component {
+      state = {activated: false};
 
-      _toggleActivatedState: function() {
+      _toggleActivatedState = () => {
         this.setState({activated: !this.state.activated});
-      },
+      };
 
-      render: function() {
+      render() {
         var toggleActivatedState = this._toggleActivatedState;
-        return !this.state.activated ?
-          <a ref="x" onClick={toggleActivatedState} /> :
-          <b ref="x" onClick={toggleActivatedState} />;
-      },
-    });
+        return !this.state.activated
+          ? <a ref="x" onClick={toggleActivatedState} />
+          : <b ref="x" onClick={toggleActivatedState} />;
+      }
+    };
 
@@ -59,16 +56,17 @@ describe('ReactCompositeComponent', function() {
      */
-    ChildUpdates = React.createClass({
-      getAnchor: function() {
+    ChildUpdates = class extends React.Component {
+      getAnchor = () => {
         return this.refs.anch;
-      },
-      render: function() {
+      };
+
+      render() {
         var className = this.props.anchorClassOn ? 'anchorClass' : '';
-        return this.props.renderAnchor ?
-          <a ref="anch" className={className}></a> :
-          <b></b>;
-      },
-    });
+        return this.props.renderAnchor
+          ? <a ref="anch" className={className} />
+          : <b />;
+      }
+    };
   });
 
-  it('should support module pattern components', function() {
+  it('should support module pattern components', () => {
     function Child({test}) {
@@ -87,3 +85,3 @@ describe('ReactCompositeComponent', function() {
 
-  it('should support rendering to different child types over time', function() {
+  it('should support rendering to different child types over time', () => {
     var instance = <MorphingComponent />;
@@ -107,12 +105,13 @@ describe('ReactCompositeComponent', function() {
   it('should not thrash a server rendered layout with client side one', () => {
-    var Child = React.createClass({
-      render: function() {
+    class Child extends React.Component {
+      render() {
         return null;
-      },
-    });
-    var Parent = React.createClass({
-      render: function() {
+      }
+    }
+
+    class Parent extends React.Component {
+      render() {
         return <div><Child /></div>;
-      },
-    });
+      }
+    }
 
@@ -125,3 +124,3 @@ describe('ReactCompositeComponent', function() {
 
-  it('should react to state changes from callbacks', function() {
+  it('should react to state changes from callbacks', () => {
     var instance = <MorphingComponent />;
@@ -139,3 +138,3 @@ describe('ReactCompositeComponent', function() {
 
-  it('should rewire refs when rendering to different child types', function() {
+  it('should rewire refs when rendering to different child types', () => {
     var instance = <MorphingComponent />;
@@ -150,19 +149,22 @@ describe('ReactCompositeComponent', function() {
 
-  it('should not cache old DOM nodes when switching constructors', function() {
+  it('should not cache old DOM nodes when switching constructors', () => {
     var container = document.createElement('div');
     var instance = ReactDOM.render(
-      <ChildUpdates renderAnchor={true} anchorClassOn={false}/>,
-      container
+      <ChildUpdates renderAnchor={true} anchorClassOn={false} />,
+      container,
     );
-    ReactDOM.render(  // Warm any cache
-      <ChildUpdates renderAnchor={true} anchorClassOn={true}/>,
-      container
+    ReactDOM.render(
+      // Warm any cache
+      <ChildUpdates renderAnchor={true} anchorClassOn={true} />,
+      container,
     );
-    ReactDOM.render(  // Clear out the anchor
-      <ChildUpdates renderAnchor={false} anchorClassOn={true}/>,
-      container
+    ReactDOM.render(
+      // Clear out the anchor
+      <ChildUpdates renderAnchor={false} anchorClassOn={true} />,
+      container,
     );
-    ReactDOM.render(  // rerender
-      <ChildUpdates renderAnchor={true} anchorClassOn={false}/>,
-      container
+    ReactDOM.render(
+      // rerender
+      <ChildUpdates renderAnchor={true} anchorClassOn={false} />,
+      container,
     );
@@ -171,70 +173,10 @@ describe('ReactCompositeComponent', function() {
 
-  it('should auto bind methods and values correctly', function() {
-    spyOn(console, 'error');
-
-    var ComponentClass = React.createClass({
-      getInitialState: function() {
-        return {valueToReturn: 'hi'};
-      },
-      methodToBeExplicitlyBound: function() {
-        return this;
-      },
-      methodAutoBound: function() {
-        return this;
-      },
-      render: function() {
-        return <div></div>;
-      },
-    });
-    var instance = <ComponentClass />;
-
-    // Next, prove that once mounted, the scope is bound correctly to the actual
-    // component.
-    var mountedInstance = ReactTestUtils.renderIntoDocument(instance);
-
-    expect(function() {
-      mountedInstance.methodToBeExplicitlyBound.bind(instance)();
-    }).not.toThrow();
-    expect(function() {
-      mountedInstance.methodAutoBound();
-    }).not.toThrow();
-
-    expect(console.error.argsForCall.length).toBe(1);
-    var explicitlyBound = mountedInstance.methodToBeExplicitlyBound.bind(
-      mountedInstance
-    );
-    expect(console.error.argsForCall.length).toBe(2);
-    var autoBound = mountedInstance.methodAutoBound;
-
-    var context = {};
-    expect(explicitlyBound.call(context)).toBe(mountedInstance);
-    expect(autoBound.call(context)).toBe(mountedInstance);
-
-    expect(explicitlyBound.call(mountedInstance)).toBe(mountedInstance);
-    expect(autoBound.call(mountedInstance)).toBe(mountedInstance);
+  it('should use default values for undefined props', () => {
+    class Component extends React.Component {
+      static defaultProps = {prop: 'testKey'};
 
-  });
-
-  it('should not pass this to getDefaultProps', function() {
-    var Component = React.createClass({
-      getDefaultProps: function() {
-        expect(this.render).not.toBeDefined();
-        return {};
-      },
-      render: function() {
-        return <div />;
-      },
-    });
-    ReactTestUtils.renderIntoDocument(<Component />);
-  });
-
-  it('should use default values for undefined props', function() {
-    var Component = React.createClass({
-      getDefaultProps: function() {
-        return {prop: 'testKey'};
-      },
-      render: function() {
+      render() {
         return <span />;
-      },
-    });
+      }
+    }
 
@@ -253,11 +195,10 @@ describe('ReactCompositeComponent', function() {
 
-  it('should not mutate passed-in props object', function() {
-    var Component = React.createClass({
-      getDefaultProps: function() {
-        return {prop: 'testKey'};
-      },
-      render: function() {
+  it('should not mutate passed-in props object', () => {
+    class Component extends React.Component {
+      static defaultProps = {prop: 'testKey'};
+
+      render() {
         return <span />;
-      },
-    });
+      }
+    }
 
@@ -273,3 +214,3 @@ describe('ReactCompositeComponent', function() {
 
-  it('should warn about `forceUpdate` on unmounted components', function() {
+  it('should warn about `forceUpdate` on unmounted components', () => {
     spyOn(console, 'error');
@@ -279,7 +220,7 @@ describe('ReactCompositeComponent', function() {
 
-    var Component = React.createClass({
-      render: function() {
+    class Component extends React.Component {
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
@@ -291,3 +232,3 @@ describe('ReactCompositeComponent', function() {
 
-    expect(console.error.calls.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
 
@@ -296,8 +237,8 @@ describe('ReactCompositeComponent', function() {
     instance.forceUpdate();
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: forceUpdate(...): Can only update a mounted or ' +
-      'mounting component. This usually means you called forceUpdate() on an ' +
-      'unmounted component. This is a no-op. Please check the code for the ' +
-      'Component component.'
+        'mounting component. This usually means you called forceUpdate() on an ' +
+        'unmounted component. This is a no-op. Please check the code for the ' +
+        'Component component.',
     );
@@ -305,3 +246,3 @@ describe('ReactCompositeComponent', function() {
 
-  it('should warn about `setState` on unmounted components', function() {
+  it('should warn about `setState` on unmounted components', () => {
     spyOn(console, 'error');
@@ -313,11 +254,10 @@ describe('ReactCompositeComponent', function() {
 
-    var Component = React.createClass({
-      getInitialState: function() {
-        return {value: 0};
-      },
-      render: function() {
+    class Component extends React.Component {
+      state = {value: 0};
+
+      render() {
         renders++;
         return <div />;
-      },
-    });
+      }
+    }
 
@@ -332,3 +272,3 @@ describe('ReactCompositeComponent', function() {
 
-    expect(console.error.calls.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
 
@@ -341,8 +281,8 @@ describe('ReactCompositeComponent', function() {
 
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: setState(...): Can only update a mounted or ' +
-      'mounting component. This usually means you called setState() on an ' +
-      'unmounted component. This is a no-op. Please check the code for the ' +
-      'Component component.'
+        'mounting component. This usually means you called setState() on an ' +
+        'unmounted component. This is a no-op. Please check the code for the ' +
+        'Component component.',
     );
@@ -350,3 +290,3 @@ describe('ReactCompositeComponent', function() {
 
-  it('should silently allow `setState`, not call cb on unmounting components', function() {
+  it('should silently allow `setState`, not call cb on unmounting components', () => {
     var cbCalled = false;
@@ -355,7 +295,6 @@ describe('ReactCompositeComponent', function() {
 
-    var Component = React.createClass({
-      getInitialState: function() {
-        return {value: 0};
-      },
-      componentWillUnmount: function() {
+    class Component extends React.Component {
+      state = {value: 0};
+
+      componentWillUnmount() {
         expect(() => {
@@ -365,7 +304,8 @@ describe('ReactCompositeComponent', function() {
         }).not.toThrow();
-      },
-      render: function() {
+      }
+
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
@@ -378,4 +318,3 @@ describe('ReactCompositeComponent', function() {
 
-
-  it('should warn about `setState` in render', function() {
+  it('should warn about `setState` in render', () => {
     spyOn(console, 'error');
@@ -387,7 +326,6 @@ describe('ReactCompositeComponent', function() {
 
-    var Component = React.createClass({
-      getInitialState: function() {
-        return {value: 0};
-      },
-      render: function() {
+    class Component extends React.Component {
+      state = {value: 0};
+
+      render() {
         renderPasses++;
@@ -395,9 +333,9 @@ describe('ReactCompositeComponent', function() {
         if (this.state.value === 0) {
-          this.setState({ value: 1 });
+          this.setState({value: 1});
         }
         return <div />;
-      },
-    });
+      }
+    }
 
-    expect(console.error.calls.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
 
@@ -405,9 +343,9 @@ describe('ReactCompositeComponent', function() {
 
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: setState(...): Cannot update during an existing state ' +
-      'transition (such as within `render` or another component\'s ' +
-      'constructor). Render methods should be a pure function of props and ' +
-      'state; constructor side-effects are an anti-pattern, but can be moved ' +
-      'to `componentWillMount`.'
+        "transition (such as within `render` or another component's " +
+        'constructor). Render methods should be a pure function of props and ' +
+        'state; constructor side-effects are an anti-pattern, but can be moved ' +
+        'to `componentWillMount`.',
     );
@@ -428,3 +366,3 @@ describe('ReactCompositeComponent', function() {
 
-  it('should warn about `setState` in getChildContext', function() {
+  it('should warn about `setState` in getChildContext', () => {
     spyOn(console, 'error');
@@ -435,17 +373,18 @@ describe('ReactCompositeComponent', function() {
 
-    var Component = React.createClass({
-      getInitialState: function() {
-        return {value: 0};
-      },
-      getChildContext: function() {
+    class Component extends React.Component {
+      state = {value: 0};
+
+      getChildContext() {
         if (this.state.value === 0) {
-          this.setState({ value: 1 });
+          this.setState({value: 1});
         }
-      },
-      render: function() {
+      }
+
+      render() {
         renderPasses++;
         return <div />;
-      },
-    });
-    expect(console.error.calls.length).toBe(0);
+      }
+    }
+
+    expect(console.error.calls.count()).toBe(0);
     var instance = ReactDOM.render(<Component />, container);
@@ -453,5 +392,5 @@ describe('ReactCompositeComponent', function() {
     expect(instance.state.value).toBe(1);
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: setState(...): Cannot call setState() inside getChildContext()'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      'Warning: setState(...): Cannot call setState() inside getChildContext()',
     );
@@ -459,8 +398,9 @@ describe('ReactCompositeComponent', function() {
 
-  it('should cleanup even if render() fatals', function() {
-    var BadComponent = React.createClass({
-      render: function() {
+  it('should cleanup even if render() fatals', () => {
+    class BadComponent extends React.Component {
+      render() {
         throw new Error();
-      },
-    });
+      }
+    }
+
     var instance = <BadComponent />;
@@ -476,3 +416,3 @@ describe('ReactCompositeComponent', function() {
 
-  it('should call componentWillUnmount before unmounting', function() {
+  it('should call componentWillUnmount before unmounting', () => {
     var container = document.createElement('div');
@@ -480,4 +420,4 @@ describe('ReactCompositeComponent', function() {
 
-    var Component = React.createClass({
-      render: function() {
+    class Component extends React.Component {
+      render() {
         return (
@@ -488,12 +428,14 @@ describe('ReactCompositeComponent', function() {
         );
-      },
-    });
-    var Inner = React.createClass({
-      componentWillUnmount: function() {
+      }
+    }
+
+    class Inner extends React.Component {
+      componentWillUnmount() {
         innerUnmounted = true;
-      },
-      render: function() {
+      }
+
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
@@ -504,18 +446,16 @@ describe('ReactCompositeComponent', function() {
 
-  it('should warn when shouldComponentUpdate() returns undefined', function() {
+  it('should warn when shouldComponentUpdate() returns undefined', () => {
     spyOn(console, 'error');
 
-    var Component = React.createClass({
-      getInitialState: function() {
-        return {bogus: false};
-      },
+    class Component extends React.Component {
+      state = {bogus: false};
 
-      shouldComponentUpdate: function() {
+      shouldComponentUpdate() {
         return undefined;
-      },
+      }
 
-      render: function() {
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
@@ -524,6 +464,6 @@ describe('ReactCompositeComponent', function() {
 
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: Component.shouldComponentUpdate(): Returned undefined instead of a ' +
-      'boolean value. Make sure to return true or false.'
+        'boolean value. Make sure to return true or false.',
     );
@@ -531,13 +471,12 @@ describe('ReactCompositeComponent', function() {
 
-  it('should warn when componentDidUnmount method is defined', function() {
+  it('should warn when componentDidUnmount method is defined', () => {
     spyOn(console, 'error');
 
-    var Component = React.createClass({
-      componentDidUnmount: function() {
-      },
+    class Component extends React.Component {
+      componentDidUnmount = () => {};
 
-      render: function() {
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
@@ -545,7 +484,7 @@ describe('ReactCompositeComponent', function() {
 
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: Component has a method called ' +
-      'componentDidUnmount(). But there is no such lifecycle method. ' +
-      'Did you mean componentWillUnmount()?'
+        'componentDidUnmount(). But there is no such lifecycle method. ' +
+        'Did you mean componentWillUnmount()?',
     );
@@ -553,15 +492,15 @@ describe('ReactCompositeComponent', function() {
 
-  it('should pass context to children when not owner', function() {
-    var Parent = React.createClass({
-      render: function() {
+  it('should pass context to children when not owner', () => {
+    class Parent extends React.Component {
+      render() {
         return <Child><Grandchild /></Child>;
-      },
-    });
+      }
+    }
 
-    var Child = React.createClass({
-      childContextTypes: {
+    class Child extends React.Component {
+      static childContextTypes = {
         foo: ReactPropTypes.string,
-      },
+      };
 
-      getChildContext: function() {
+      getChildContext() {
         return {
@@ -569,18 +508,18 @@ describe('ReactCompositeComponent', function() {
         };
-      },
+      }
 
-      render: function() {
+      render() {
         return React.Children.only(this.props.children);
-      },
-    });
+      }
+    }
 
-    var Grandchild = React.createClass({
-      contextTypes: {
+    class Grandchild extends React.Component {
+      static contextTypes = {
         foo: ReactPropTypes.string,
-      },
+      };
 
-      render: function() {
+      render() {
         return <div>{this.context.foo}</div>;
-      },
-    });
+      }
+    }
 
@@ -590,16 +529,17 @@ describe('ReactCompositeComponent', function() {
 
-  it('should skip update when rerendering element in container', function() {
-    var Parent = React.createClass({
-      render: function() {
+  it('should skip update when rerendering element in container', () => {
+    class Parent extends React.Component {
+      render() {
         return <div>{this.props.children}</div>;
-      },
-    });
+      }
+    }
 
     var childRenders = 0;
-    var Child = React.createClass({
-      render: function() {
+
+    class Child extends React.Component {
+      render() {
         childRenders++;
         return <div />;
-      },
-    });
+      }
+    }
 
@@ -613,3 +553,3 @@ describe('ReactCompositeComponent', function() {
 
-  it('should pass context when re-rendered for static child', function() {
+  it('should pass context when re-rendered for static child', () => {
     var parentInstance = null;
@@ -617,9 +557,13 @@ describe('ReactCompositeComponent', function() {
 
-    var Parent = React.createClass({
-      childContextTypes: {
+    class Parent extends React.Component {
+      static childContextTypes = {
         foo: ReactPropTypes.string,
         flag: ReactPropTypes.bool,
-      },
+      };
 
-      getChildContext: function() {
+      state = {
+        flag: false,
+      };
+
+      getChildContext() {
         return {
@@ -628,35 +572,29 @@ describe('ReactCompositeComponent', function() {
         };
-      },
-
-      getInitialState: function() {
-        return {
-          flag: false,
-        };
-      },
+      }
 
-      render: function() {
+      render() {
         return React.Children.only(this.props.children);
-      },
-    });
+      }
+    }
 
-    var Middle = React.createClass({
-      render: function() {
+    class Middle extends React.Component {
+      render() {
         return this.props.children;
-      },
-    });
+      }
+    }
 
-    var Child = React.createClass({
-      contextTypes: {
+    class Child extends React.Component {
+      static contextTypes = {
         foo: ReactPropTypes.string,
         flag: ReactPropTypes.bool,
-      },
+      };
 
-      render: function() {
+      render() {
         childInstance = this;
         return <span>Child</span>;
-      },
-    });
+      }
+    }
 
     parentInstance = ReactTestUtils.renderIntoDocument(
-      <Parent><Middle><Child /></Middle></Parent>
+      <Parent><Middle><Child /></Middle></Parent>,
     );
@@ -664,3 +602,6 @@ describe('ReactCompositeComponent', function() {
     expect(parentInstance.state.flag).toBe(false);
-    reactComponentExpect(childInstance).scalarContextEqual({foo: 'bar', flag: false});
+    reactComponentExpect(childInstance).scalarContextEqual({
+      foo: 'bar',
+      flag: false,
+    });
 
@@ -669,10 +610,17 @@ describe('ReactCompositeComponent', function() {
 
-    reactComponentExpect(childInstance).scalarContextEqual({foo: 'bar', flag: true});
+    reactComponentExpect(childInstance).scalarContextEqual({
+      foo: 'bar',
+      flag: true,
+    });
   });
 
-  it('should pass context when re-rendered for static child within a composite component', function() {
-    var Parent = React.createClass({
-      childContextTypes: {
+  it('should pass context when re-rendered for static child within a composite component', () => {
+    class Parent extends React.Component {
+      static childContextTypes = {
         flag: ReactPropTypes.bool,
-      },
+      };
+
+      state = {
+        flag: true,
+      };
 
@@ -682,9 +630,3 @@ describe('ReactCompositeComponent', function() {
         };
-      },
-
-      getInitialState: function() {
-        return {
-          flag: true,
-        };
-      },
+      }
 
@@ -692,17 +634,16 @@ describe('ReactCompositeComponent', function() {
         return <div>{this.props.children}</div>;
-      },
-
-    });
+      }
+    }
 
-    var Child = React.createClass({
-      contextTypes: {
+    class Child extends React.Component {
+      static contextTypes = {
         flag: ReactPropTypes.bool,
-      },
+      };
 
-      render: function() {
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
-    var Wrapper = React.createClass({
+    class Wrapper extends React.Component {
       render() {
@@ -713,9 +654,6 @@ describe('ReactCompositeComponent', function() {
         );
-      },
-    });
-
+      }
+    }
 
-    var wrapper = ReactTestUtils.renderIntoDocument(
-      <Wrapper />
-    );
+    var wrapper = ReactTestUtils.renderIntoDocument(<Wrapper />);
 
@@ -729,6 +667,5 @@ describe('ReactCompositeComponent', function() {
     reactComponentExpect(wrapper.refs.child).scalarContextEqual({flag: false});
-
   });
 
-  it('should pass context transitively', function() {
+  it('should pass context transitively', () => {
     var childInstance = null;
@@ -736,9 +673,9 @@ describe('ReactCompositeComponent', function() {
 
-    var Parent = React.createClass({
-      childContextTypes: {
+    class Parent extends React.Component {
+      static childContextTypes = {
         foo: ReactPropTypes.string,
         depth: ReactPropTypes.number,
-      },
+      };
 
-      getChildContext: function() {
+      getChildContext() {
         return {
@@ -747,20 +684,20 @@ describe('ReactCompositeComponent', function() {
         };
-      },
+      }
 
-      render: function() {
+      render() {
         return <Child />;
-      },
-    });
+      }
+    }
 
-    var Child = React.createClass({
-      contextTypes: {
+    class Child extends React.Component {
+      static contextTypes = {
         foo: ReactPropTypes.string,
         depth: ReactPropTypes.number,
-      },
+      };
 
-      childContextTypes: {
+      static childContextTypes = {
         depth: ReactPropTypes.number,
-      },
+      };
 
-      getChildContext: function() {
+      getChildContext() {
         return {
@@ -768,28 +705,34 @@ describe('ReactCompositeComponent', function() {
         };
-      },
+      }
 
-      render: function() {
+      render() {
         childInstance = this;
         return <Grandchild />;
-      },
-    });
+      }
+    }
 
-    var Grandchild = React.createClass({
-      contextTypes: {
+    class Grandchild extends React.Component {
+      static contextTypes = {
         foo: ReactPropTypes.string,
         depth: ReactPropTypes.number,
-      },
+      };
 
-      render: function() {
+      render() {
         grandchildInstance = this;
         return <div />;
-      },
-    });
+      }
+    }
 
     ReactTestUtils.renderIntoDocument(<Parent />);
-    reactComponentExpect(childInstance).scalarContextEqual({foo: 'bar', depth: 0});
-    reactComponentExpect(grandchildInstance).scalarContextEqual({foo: 'bar', depth: 1});
+    reactComponentExpect(childInstance).scalarContextEqual({
+      foo: 'bar',
+      depth: 0,
+    });
+    reactComponentExpect(grandchildInstance).scalarContextEqual({
+      foo: 'bar',
+      depth: 1,
+    });
   });
 
-  it('should pass context when re-rendered', function() {
+  it('should pass context when re-rendered', () => {
     var parentInstance = null;
@@ -797,9 +740,13 @@ describe('ReactCompositeComponent', function() {
 
-    var Parent = React.createClass({
-      childContextTypes: {
+    class Parent extends React.Component {
+      static childContextTypes = {
         foo: ReactPropTypes.string,
         depth: ReactPropTypes.number,
-      },
+      };
+
+      state = {
+        flag: false,
+      };
 
-      getChildContext: function() {
+      getChildContext() {
         return {
@@ -808,11 +755,5 @@ describe('ReactCompositeComponent', function() {
         };
-      },
-
-      getInitialState: function() {
-        return {
-          flag: false,
-        };
-      },
+      }
 
-      render: function() {
+      render() {
         var output = <Child />;
@@ -822,16 +763,16 @@ describe('ReactCompositeComponent', function() {
         return output;
-      },
-    });
+      }
+    }
 
-    var Child = React.createClass({
-      contextTypes: {
+    class Child extends React.Component {
+      static contextTypes = {
         foo: ReactPropTypes.string,
         depth: ReactPropTypes.number,
-      },
+      };
 
-      render: function() {
+      render() {
         childInstance = this;
         return <span>Child</span>;
-      },
-    });
+      }
+    }
 
@@ -846,56 +787,57 @@ describe('ReactCompositeComponent', function() {
 
-    reactComponentExpect(childInstance).scalarContextEqual({foo: 'bar', depth: 0});
+    reactComponentExpect(childInstance).scalarContextEqual({
+      foo: 'bar',
+      depth: 0,
+    });
   });
 
-  it('unmasked context propagates through updates', function() {
-
-    var Leaf = React.createClass({
-      contextTypes: {
+  it('unmasked context propagates through updates', () => {
+    class Leaf extends React.Component {
+      static contextTypes = {
         foo: ReactPropTypes.string.isRequired,
-      },
+      };
 
-      componentWillReceiveProps: function(nextProps, nextContext) {
+      componentWillReceiveProps(nextProps, nextContext) {
         expect('foo' in nextContext).toBe(true);
-      },
+      }
 
-      componentDidUpdate: function(prevProps, prevState, prevContext) {
+      componentDidUpdate(prevProps, prevState, prevContext) {
         expect('foo' in prevContext).toBe(true);
-      },
+      }
 
-      shouldComponentUpdate: function(nextProps, nextState, nextContext) {
+      shouldComponentUpdate(nextProps, nextState, nextContext) {
         expect('foo' in nextContext).toBe(true);
         return true;
-      },
+      }
 
-      render: function() {
+      render() {
         return <span>{this.context.foo}</span>;
-      },
-    });
-
-    var Intermediary = React.createClass({
+      }
+    }
 
-      componentWillReceiveProps: function(nextProps, nextContext) {
+    class Intermediary extends React.Component {
+      componentWillReceiveProps(nextProps, nextContext) {
         expect('foo' in nextContext).toBe(false);
-      },
+      }
 
-      componentDidUpdate: function(prevProps, prevState, prevContext) {
+      componentDidUpdate(prevProps, prevState, prevContext) {
         expect('foo' in prevContext).toBe(false);
-      },
+      }
 
-      shouldComponentUpdate: function(nextProps, nextState, nextContext) {
+      shouldComponentUpdate(nextProps, nextState, nextContext) {
         expect('foo' in nextContext).toBe(false);
         return true;
-      },
+      }
 
-      render: function() {
+      render() {
         return <Leaf />;
-      },
-    });
+      }
+    }
 
-    var Parent = React.createClass({
-      childContextTypes: {
+    class Parent extends React.Component {
+      static childContextTypes = {
         foo: ReactPropTypes.string,
-      },
+      };
 
-      getChildContext: function() {
+      getChildContext() {
         return {
@@ -903,8 +845,8 @@ describe('ReactCompositeComponent', function() {
         };
-      },
+      }
 
-      render: function() {
+      render() {
         return <Intermediary />;
-      },
-    });
+      }
+    }
 
@@ -922,3 +864,3 @@ describe('ReactCompositeComponent', function() {
 
-  it('should trigger componentWillReceiveProps for context changes', function() {
+  it('should trigger componentWillReceiveProps for context changes', () => {
     var contextChanges = 0;
@@ -926,8 +868,8 @@ describe('ReactCompositeComponent', function() {
 
-    var GrandChild = React.createClass({
-      contextTypes: {
+    class GrandChild extends React.Component {
+      static contextTypes = {
         foo: ReactPropTypes.string.isRequired,
-      },
+      };
 
-      componentWillReceiveProps: function(nextProps, nextContext) {
+      componentWillReceiveProps(nextProps, nextContext) {
         expect('foo' in nextContext).toBe(true);
@@ -941,15 +883,15 @@ describe('ReactCompositeComponent', function() {
         }
-      },
+      }
 
-      render: function() {
+      render() {
         return <span className="grand-child">{this.props.children}</span>;
-      },
-    });
+      }
+    }
 
-    var ChildWithContext = React.createClass({
-      contextTypes: {
+    class ChildWithContext extends React.Component {
+      static contextTypes = {
         foo: ReactPropTypes.string.isRequired,
-      },
+      };
 
-      componentWillReceiveProps: function(nextProps, nextContext) {
+      componentWillReceiveProps(nextProps, nextContext) {
         expect('foo' in nextContext).toBe(true);
@@ -963,11 +905,11 @@ describe('ReactCompositeComponent', function() {
         }
-      },
+      }
 
-      render: function() {
+      render() {
         return <div className="child-with">{this.props.children}</div>;
-      },
-    });
+      }
+    }
 
-    var ChildWithoutContext = React.createClass({
-      componentWillReceiveProps: function(nextProps, nextContext) {
+    class ChildWithoutContext extends React.Component {
+      componentWillReceiveProps(nextProps, nextContext) {
         expect('foo' in nextContext).toBe(false);
@@ -981,21 +923,19 @@ describe('ReactCompositeComponent', function() {
         }
-      },
+      }
 
-      render: function() {
+      render() {
         return <div className="child-without">{this.props.children}</div>;
-      },
-    });
+      }
+    }
 
-    var Parent = React.createClass({
-      childContextTypes: {
+    class Parent extends React.Component {
+      static childContextTypes = {
         foo: ReactPropTypes.string,
-      },
+      };
 
-      getInitialState() {
-        return {
-          foo: 'abc',
-        };
-      },
+      state = {
+        foo: 'abc',
+      };
 
-      getChildContext: function() {
+      getChildContext() {
         return {
@@ -1003,5 +943,5 @@ describe('ReactCompositeComponent', function() {
         };
-      },
+      }
 
-      onClick() {
+      onClick = () => {
         this.setState({
@@ -1009,8 +949,12 @@ describe('ReactCompositeComponent', function() {
         });
-      },
+      };
 
-      render: function() {
-        return <div className="parent" onClick={this.onClick}>{this.props.children}</div>;
-      },
-    });
+      render() {
+        return (
+          <div className="parent" onClick={this.onClick}>
+            {this.props.children}
+          </div>
+        );
+      }
+    }
 
@@ -1030,3 +974,3 @@ describe('ReactCompositeComponent', function() {
       </Parent>,
-      div
+      div,
     );
@@ -1039,24 +983,25 @@ describe('ReactCompositeComponent', function() {
 
-  it('should disallow nested render calls', function() {
+  it('should disallow nested render calls', () => {
     spyOn(console, 'error');
 
-    var Inner = React.createClass({
-      render: function() {
+    class Inner extends React.Component {
+      render() {
         return <div />;
-      },
-    });
-    var Outer = React.createClass({
-      render: function() {
+      }
+    }
+
+    class Outer extends React.Component {
+      render() {
         ReactTestUtils.renderIntoDocument(<Inner />);
         return <div />;
-      },
-    });
+      }
+    }
 
     ReactTestUtils.renderIntoDocument(<Outer />);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
       'Warning: _renderNewRootComponent(): Render methods should ' +
-      'be a pure function of props and state; triggering nested component ' +
-      'updates from render is not allowed. If necessary, trigger nested ' +
-      'updates in componentDidUpdate. Check the render method of Outer.'
+        'be a pure function of props and state; triggering nested component ' +
+        'updates from render is not allowed. If necessary, trigger nested ' +
+        'updates in componentDidUpdate. Check the render method of Outer.',
     );
@@ -1064,17 +1009,18 @@ describe('ReactCompositeComponent', function() {
 
-  it('only renders once if updated in componentWillReceiveProps', function() {
+  it('only renders once if updated in componentWillReceiveProps', () => {
     var renders = 0;
-    var Component = React.createClass({
-      getInitialState: function() {
-        return {updated: false};
-      },
-      componentWillReceiveProps: function(props) {
+
+    class Component extends React.Component {
+      state = {updated: false};
+
+      componentWillReceiveProps(props) {
         expect(props.update).toBe(1);
         this.setState({updated: true});
-      },
-      render: function() {
+      }
+
+      render() {
         renders++;
         return <div />;
-      },
-    });
+      }
+    }
 
@@ -1089,13 +1035,15 @@ describe('ReactCompositeComponent', function() {
 
-  it('should update refs if shouldComponentUpdate gives false', function() {
-    var Static = React.createClass({
-      shouldComponentUpdate: function() {
+  it('should update refs if shouldComponentUpdate gives false', () => {
+    class Static extends React.Component {
+      shouldComponentUpdate() {
         return false;
-      },
-      render: function() {
+      }
+
+      render() {
         return <div>{this.props.children}</div>;
-      },
-    });
-    var Component = React.createClass({
-      render: function() {
+      }
+    }
+
+    class Component extends React.Component {
+      render() {
         if (this.props.flipped) {
@@ -1115,4 +1063,4 @@ describe('ReactCompositeComponent', function() {
         }
-      },
-    });
+      }
+    }
 
@@ -1130,18 +1078,22 @@ describe('ReactCompositeComponent', function() {
 
-  it('should allow access to findDOMNode in componentWillUnmount', function() {
+  it('should allow access to findDOMNode in componentWillUnmount', () => {
     var a = null;
     var b = null;
-    var Component = React.createClass({
-      componentDidMount: function() {
+
+    class Component extends React.Component {
+      componentDidMount() {
         a = ReactDOM.findDOMNode(this);
         expect(a).not.toBe(null);
-      },
-      componentWillUnmount: function() {
+      }
+
+      componentWillUnmount() {
         b = ReactDOM.findDOMNode(this);
         expect(b).not.toBe(null);
-      },
-      render: function() {
+      }
+
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
+
     var container = document.createElement('div');
@@ -1153,9 +1105,9 @@ describe('ReactCompositeComponent', function() {
 
-  it('context should be passed down from the parent', function() {
-    var Parent = React.createClass({
-      childContextTypes: {
+  it('context should be passed down from the parent', () => {
+    class Parent extends React.Component {
+      static childContextTypes = {
         foo: ReactPropTypes.string,
-      },
+      };
 
-      getChildContext: function() {
+      getChildContext() {
         return {
@@ -1163,18 +1115,18 @@ describe('ReactCompositeComponent', function() {
         };
-      },
+      }
 
-      render: function() {
+      render() {
         return <div>{this.props.children}</div>;
-      },
-    });
+      }
+    }
 
-    var Component = React.createClass({
-      contextTypes: {
+    class Component extends React.Component {
+      static contextTypes = {
         foo: ReactPropTypes.string.isRequired,
-      },
+      };
 
-      render: function() {
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
@@ -1184,14 +1136,14 @@ describe('ReactCompositeComponent', function() {
 
-  it('should replace state', function() {
-    var Moo = React.createClass({
-      getInitialState: function() {
-        return {x: 1};
-      },
-      render: function() {
+  it('should replace state', () => {
+    class Moo extends React.Component {
+      state = {x: 1};
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
     var moo = ReactTestUtils.renderIntoDocument(<Moo />);
-    moo.replaceState({y: 2});
+    // No longer a public API, but we can test that it works internally by
+    // reaching into the updater.
+    moo.updater.enqueueReplaceState(moo, {y: 2});
     expect('x' in moo.state).toBe(false);
@@ -1200,3 +1152,3 @@ describe('ReactCompositeComponent', function() {
 
-  it('should support objects with prototypes as state', function() {
+  it('should support objects with prototypes as state', () => {
     var NotActuallyImmutable = function(str) {
@@ -1207,10 +1159,11 @@ describe('ReactCompositeComponent', function() {
     };
-    var Moo = React.createClass({
-      getInitialState: function() {
-        return new NotActuallyImmutable('first');
-      },
-      render: function() {
+    class Moo extends React.Component {
+      state = new NotActuallyImmutable('first');
+      // No longer a public API, but we can test that it works internally by
+      // reaching into the updater.
+      _replaceState = update => this.updater.enqueueReplaceState(this, update);
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
@@ -1221,3 +1174,3 @@ describe('ReactCompositeComponent', function() {
     var secondState = new NotActuallyImmutable('second');
-    moo.replaceState(secondState);
+    moo._replaceState(secondState);
     expect(moo.state.str).toBe('second');
@@ -1235,3 +1188,3 @@ describe('ReactCompositeComponent', function() {
       moo.setState({str: 'fourth'});
-      moo.replaceState(fifthState);
+      moo._replaceState(fifthState);
     });
@@ -1242,3 +1195,3 @@ describe('ReactCompositeComponent', function() {
     ReactUpdates.batchedUpdates(function() {
-      moo.replaceState(sixthState);
+      moo._replaceState(sixthState);
       moo.setState({str: 'seventh'});
@@ -1249,3 +1202,3 @@ describe('ReactCompositeComponent', function() {
 
-  it('should not warn about unmounting during unmounting', function() {
+  it('should not warn about unmounting during unmounting', () => {
     var container = document.createElement('div');
@@ -1253,21 +1206,21 @@ describe('ReactCompositeComponent', function() {
 
-    var Component = React.createClass({
-      componentWillMount: function() {
+    class Component extends React.Component {
+      componentWillMount() {
         ReactDOM.render(<div />, layer);
-      },
+      }
 
-      componentWillUnmount: function() {
+      componentWillUnmount() {
         ReactDOM.unmountComponentAtNode(layer);
-      },
+      }
 
-      render: function() {
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
-    var Outer = React.createClass({
-      render: function() {
+    class Outer extends React.Component {
+      render() {
         return <div>{this.props.children}</div>;
-      },
-    });
+      }
+    }
 
@@ -1277,3 +1230,3 @@ describe('ReactCompositeComponent', function() {
 
-  it('should warn when mutated props are passed', function() {
+  it('should warn when mutated props are passed', () => {
     spyOn(console, 'error');
@@ -1284,3 +1237,3 @@ describe('ReactCompositeComponent', function() {
       constructor(props) {
-        var _props = { idx: props.idx + '!' };
+        var _props = {idx: props.idx + '!'};
         super(_props);
@@ -1293,3 +1246,3 @@ describe('ReactCompositeComponent', function() {
 
-    expect(console.error.calls.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
 
@@ -1297,10 +1250,49 @@ describe('ReactCompositeComponent', function() {
 
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'Foo(...): When calling super() in `Foo`, make sure to pass ' +
-      'up the same props that your component\'s constructor was passed.'
+        "up the same props that your component's constructor was passed.",
     );
-
   });
 
+  it('should only call componentWillUnmount once', () => {
+    var app;
+    var count = 0;
+
+    class App extends React.Component {
+      render() {
+        if (this.props.stage === 1) {
+          return <UnunmountableComponent />;
+        } else {
+          return null;
+        }
+      }
+    }
+
+    class UnunmountableComponent extends React.Component {
+      componentWillUnmount() {
+        app.setState({});
+        count++;
+        throw Error('always fails');
+      }
+
+      render() {
+        return <div>Hello {this.props.name}</div>;
+      }
+    }
+
+    var container = document.createElement('div');
+
+    var setRef = ref => {
+      if (ref) {
+        app = ref;
+      }
+    };
+
+    expect(function() {
+      ReactDOM.render(<App ref={setRef} stage={1} />, container);
+      ReactDOM.render(<App ref={setRef} stage={2} />, container);
+    }).toThrow();
+    expect(count).toBe(1);
+  });
 });
diff --git a/src/renderers/shared/reconciler/__tests__/ReactCompositeComponentDOMMinimalism-test.js b/src/renderers/shared/stack/reconciler/__tests__/ReactCompositeComponentDOMMinimalism-test.js
similarity index 79%
rename from src/renderers/shared/reconciler/__tests__/ReactCompositeComponentDOMMinimalism-test.js
rename to src/renderers/shared/stack/reconciler/__tests__/ReactCompositeComponentDOMMinimalism-test.js
index 2c5f0a71a..ee226c93a 100644
--- a/src/renderers/shared/reconciler/__tests__/ReactCompositeComponentDOMMinimalism-test.js
+++ b/src/renderers/shared/stack/reconciler/__tests__/ReactCompositeComponentDOMMinimalism-test.js
@@ -29,5 +29,4 @@ var expectSingleChildlessDiv;
  */
-describe('ReactCompositeComponentDOMMinimalism', function() {
-
-  beforeEach(function() {
+describe('ReactCompositeComponentDOMMinimalism', () => {
+  beforeEach(() => {
     reactComponentExpect = require('reactComponentExpect');
@@ -36,4 +35,4 @@ describe('ReactCompositeComponentDOMMinimalism', function() {
 
-    LowerLevelComposite = React.createClass({
-      render: function() {
+    LowerLevelComposite = class extends React.Component {
+      render() {
         return (
@@ -43,7 +42,7 @@ describe('ReactCompositeComponentDOMMinimalism', function() {
         );
-      },
-    });
+      }
+    };
 
-    MyCompositeComponent = React.createClass({
-      render: function() {
+    MyCompositeComponent = class extends React.Component {
+      render() {
         return (
@@ -53,4 +52,4 @@ describe('ReactCompositeComponentDOMMinimalism', function() {
         );
-      },
-    });
+      }
+    };
 
@@ -60,5 +59,5 @@ describe('ReactCompositeComponentDOMMinimalism', function() {
         .toBeCompositeComponentWithType(LowerLevelComposite)
-          .expectRenderedChild()
-          .toBeDOMComponentWithTag('div')
-          .toBeDOMComponentWithNoChildren();
+        .expectRenderedChild()
+        .toBeDOMComponentWithTag('div')
+        .toBeDOMComponentWithNoChildren();
     };
@@ -66,3 +65,3 @@ describe('ReactCompositeComponentDOMMinimalism', function() {
 
-  it('should not render extra nodes for non-interpolated text', function() {
+  it('should not render extra nodes for non-interpolated text', () => {
     var instance = (
@@ -76,3 +75,3 @@ describe('ReactCompositeComponentDOMMinimalism', function() {
 
-  it('should not render extra nodes for non-interpolated text', function() {
+  it('should not render extra nodes for non-interpolated text', () => {
     var instance = (
@@ -86,3 +85,3 @@ describe('ReactCompositeComponentDOMMinimalism', function() {
 
-  it('should not render extra nodes for non-interpolated text', function() {
+  it('should not render extra nodes for non-interpolated text', () => {
     var instance = (
@@ -98,10 +97,9 @@ describe('ReactCompositeComponentDOMMinimalism', function() {
       .toBeCompositeComponentWithType(LowerLevelComposite)
-        .expectRenderedChild()
-        .toBeDOMComponentWithTag('div')
-        .toBeDOMComponentWithChildCount(1)
-        .expectRenderedChildAt(0)
-          .toBeDOMComponentWithTag('ul')
-          .toBeDOMComponentWithNoChildren();
+      .expectRenderedChild()
+      .toBeDOMComponentWithTag('div')
+      .toBeDOMComponentWithChildCount(1)
+      .expectRenderedChildAt(0)
+      .toBeDOMComponentWithTag('ul')
+      .toBeDOMComponentWithNoChildren();
   });
-
 });
diff --git a/src/renderers/shared/reconciler/__tests__/ReactCompositeComponentNestedState-test.js b/src/renderers/shared/stack/reconciler/__tests__/ReactCompositeComponentNestedState-test.js
similarity index 64%
rename from src/renderers/shared/reconciler/__tests__/ReactCompositeComponentNestedState-test.js
rename to src/renderers/shared/stack/reconciler/__tests__/ReactCompositeComponentNestedState-test.js
index d574d57b9..f8e7f4af2 100644
--- a/src/renderers/shared/reconciler/__tests__/ReactCompositeComponentNestedState-test.js
+++ b/src/renderers/shared/stack/reconciler/__tests__/ReactCompositeComponentNestedState-test.js
@@ -17,5 +17,4 @@ var ReactTestUtils;
 
-describe('ReactCompositeComponentNestedState-state', function() {
-
-  beforeEach(function() {
+describe('ReactCompositeComponentNestedState-state', () => {
+  beforeEach(() => {
     React = require('React');
@@ -25,9 +24,7 @@ describe('ReactCompositeComponentNestedState-state', function() {
 
-  it('should provide up to date values for props', function() {
-    var ParentComponent = React.createClass({
-      getInitialState: function() {
-        return {color: 'blue'};
-      },
+  it('should provide up to date values for props', () => {
+    class ParentComponent extends React.Component {
+      state = {color: 'blue'};
 
-      handleColor: function(color) {
+      handleColor = color => {
         this.props.logger('parent-handleColor', this.state.color);
@@ -36,5 +33,5 @@ describe('ReactCompositeComponentNestedState-state', function() {
         });
-      },
+      };
 
-      render: function() {
+      render() {
         this.props.logger('parent-render', this.state.color);
@@ -47,24 +44,36 @@ describe('ReactCompositeComponentNestedState-state', function() {
         );
-      },
-    });
+      }
+    }
 
-    var ChildComponent = React.createClass({
-      getInitialState: function() {
-        this.props.logger('getInitialState', this.props.color);
-        return {hue: 'dark ' + this.props.color};
-      },
+    class ChildComponent extends React.Component {
+      constructor(props) {
+        super(props);
+        props.logger('getInitialState', props.color);
+        this.state = {hue: 'dark ' + props.color};
+      }
 
-      handleHue: function(shade, color) {
+      handleHue = (shade, color) => {
         this.props.logger('handleHue', this.state.hue, this.props.color);
         this.props.onSelectColor(color);
-        this.setState(function(state, props) {
-          this.props.logger('setState-this', this.state.hue, this.props.color);
-          this.props.logger('setState-args', state.hue, props.color);
-          return {hue: shade + ' ' + props.color};
-        }, function() {
-          this.props.logger('after-setState', this.state.hue, this.props.color);
-        });
-      },
+        this.setState(
+          function(state, props) {
+            this.props.logger(
+              'setState-this',
+              this.state.hue,
+              this.props.color,
+            );
+            this.props.logger('setState-args', state.hue, props.color);
+            return {hue: shade + ' ' + props.color};
+          },
+          function() {
+            this.props.logger(
+              'after-setState',
+              this.state.hue,
+              this.props.color,
+            );
+          },
+        );
+      };
 
-      render: function() {
+      render() {
         this.props.logger('render', this.state.hue, this.props.color);
@@ -86,4 +95,4 @@ describe('ReactCompositeComponentNestedState-state', function() {
         );
-      },
-    });
+      }
+    }
 
@@ -92,13 +101,8 @@ describe('ReactCompositeComponentNestedState-state', function() {
 
-    var logger = jest.genMockFn();
+    var logger = jest.fn();
 
-    void ReactDOM.render(
-      <ParentComponent logger={logger} />,
-      container
-    );
+    void ReactDOM.render(<ParentComponent logger={logger} />, container);
 
     // click "light green"
-    ReactTestUtils.Simulate.click(
-      container.childNodes[0].childNodes[3]
-    );
+    ReactTestUtils.Simulate.click(container.childNodes[0].childNodes[3]);
 
diff --git a/src/renderers/shared/stack/reconciler/__tests__/ReactCompositeComponentState-test.js b/src/renderers/shared/stack/reconciler/__tests__/ReactCompositeComponentState-test.js
new file mode 100644
index 000000000..bd3d4120a
--- /dev/null
+++ b/src/renderers/shared/stack/reconciler/__tests__/ReactCompositeComponentState-test.js
@@ -0,0 +1,248 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+var React;
+var ReactDOM;
+
+var TestComponent;
+
+describe('ReactCompositeComponent-state', () => {
+  beforeEach(() => {
+    React = require('React');
+
+    ReactDOM = require('ReactDOM');
+
+    TestComponent = class extends React.Component {
+      constructor(props) {
+        super(props);
+        this.peekAtState('getInitialState', undefined, props);
+        this.state = {color: 'red'};
+      }
+
+      peekAtState = (from, state = this.state, props = this.props) => {
+        props.stateListener(from, state && state.color);
+      };
+
+      peekAtCallback = from => {
+        return () => this.peekAtState(from);
+      };
+
+      setFavoriteColor(nextColor) {
+        this.setState(
+          {color: nextColor},
+          this.peekAtCallback('setFavoriteColor'),
+        );
+      }
+
+      render() {
+        this.peekAtState('render');
+        return <div>{this.state.color}</div>;
+      }
+
+      componentWillMount() {
+        this.peekAtState('componentWillMount-start');
+        this.setState(function(state) {
+          this.peekAtState('before-setState-sunrise', state);
+        });
+        this.setState(
+          {color: 'sunrise'},
+          this.peekAtCallback('setState-sunrise'),
+        );
+        this.setState(function(state) {
+          this.peekAtState('after-setState-sunrise', state);
+        });
+        this.peekAtState('componentWillMount-after-sunrise');
+        this.setState(
+          {color: 'orange'},
+          this.peekAtCallback('setState-orange'),
+        );
+        this.setState(function(state) {
+          this.peekAtState('after-setState-orange', state);
+        });
+        this.peekAtState('componentWillMount-end');
+      }
+
+      componentDidMount() {
+        this.peekAtState('componentDidMount-start');
+        this.setState(
+          {color: 'yellow'},
+          this.peekAtCallback('setState-yellow'),
+        );
+        this.peekAtState('componentDidMount-end');
+      }
+
+      componentWillReceiveProps(newProps) {
+        this.peekAtState('componentWillReceiveProps-start');
+        if (newProps.nextColor) {
+          this.setState(function(state) {
+            this.peekAtState('before-setState-receiveProps', state);
+            return {color: newProps.nextColor};
+          });
+          // No longer a public API, but we can test that it works internally by
+          // reaching into the updater.
+          this.updater.enqueueReplaceState(this, {color: undefined});
+          this.setState(function(state) {
+            this.peekAtState('before-setState-again-receiveProps', state);
+            return {color: newProps.nextColor};
+          }, this.peekAtCallback('setState-receiveProps'));
+          this.setState(function(state) {
+            this.peekAtState('after-setState-receiveProps', state);
+          });
+        }
+        this.peekAtState('componentWillReceiveProps-end');
+      }
+
+      shouldComponentUpdate(nextProps, nextState) {
+        this.peekAtState('shouldComponentUpdate-currentState');
+        this.peekAtState('shouldComponentUpdate-nextState', nextState);
+        return true;
+      }
+
+      componentWillUpdate(nextProps, nextState) {
+        this.peekAtState('componentWillUpdate-currentState');
+        this.peekAtState('componentWillUpdate-nextState', nextState);
+      }
+
+      componentDidUpdate(prevProps, prevState) {
+        this.peekAtState('componentDidUpdate-currentState');
+        this.peekAtState('componentDidUpdate-prevState', prevState);
+      }
+
+      componentWillUnmount() {
+        this.peekAtState('componentWillUnmount');
+      }
+    };
+  });
+
+  it('should support setting state', () => {
+    var container = document.createElement('div');
+    document.body.appendChild(container);
+
+    var stateListener = jest.fn();
+    var instance = ReactDOM.render(
+      <TestComponent stateListener={stateListener} />,
+      container,
+      function peekAtInitialCallback() {
+        this.peekAtState('initial-callback');
+      },
+    );
+    ReactDOM.render(
+      <TestComponent stateListener={stateListener} nextColor="green" />,
+      container,
+      instance.peekAtCallback('setProps'),
+    );
+    instance.setFavoriteColor('blue');
+    instance.forceUpdate(instance.peekAtCallback('forceUpdate'));
+
+    ReactDOM.unmountComponentAtNode(container);
+
+    expect(stateListener.mock.calls.join('\n')).toEqual(
+      [
+        // there is no state when getInitialState() is called
+        ['getInitialState', null],
+        ['componentWillMount-start', 'red'],
+        // setState()'s only enqueue pending states.
+        ['componentWillMount-after-sunrise', 'red'],
+        ['componentWillMount-end', 'red'],
+        // pending state queue is processed
+        ['before-setState-sunrise', 'red'],
+        ['after-setState-sunrise', 'sunrise'],
+        ['after-setState-orange', 'orange'],
+        // pending state has been applied
+        ['render', 'orange'],
+        ['componentDidMount-start', 'orange'],
+        // setState-sunrise and setState-orange should be called here,
+        // after the bug in #1740
+        // componentDidMount() called setState({color:'yellow'}), which is async.
+        // The update doesn't happen until the next flush.
+        ['componentDidMount-end', 'orange'],
+        ['shouldComponentUpdate-currentState', 'orange'],
+        ['shouldComponentUpdate-nextState', 'yellow'],
+        ['componentWillUpdate-currentState', 'orange'],
+        ['componentWillUpdate-nextState', 'yellow'],
+        ['render', 'yellow'],
+        ['componentDidUpdate-currentState', 'yellow'],
+        ['componentDidUpdate-prevState', 'orange'],
+        ['setState-sunrise', 'yellow'],
+        ['setState-orange', 'yellow'],
+        ['setState-yellow', 'yellow'],
+        ['initial-callback', 'yellow'],
+        ['componentWillReceiveProps-start', 'yellow'],
+        // setState({color:'green'}) only enqueues a pending state.
+        ['componentWillReceiveProps-end', 'yellow'],
+        // pending state queue is processed
+        // before-setState-receiveProps never called, due to replaceState.
+        ['before-setState-again-receiveProps', undefined],
+        ['after-setState-receiveProps', 'green'],
+        ['shouldComponentUpdate-currentState', 'yellow'],
+        ['shouldComponentUpdate-nextState', 'green'],
+        ['componentWillUpdate-currentState', 'yellow'],
+        ['componentWillUpdate-nextState', 'green'],
+        ['render', 'green'],
+        ['componentDidUpdate-currentState', 'green'],
+        ['componentDidUpdate-prevState', 'yellow'],
+        ['setState-receiveProps', 'green'],
+        ['setProps', 'green'],
+        // setFavoriteColor('blue')
+        ['shouldComponentUpdate-currentState', 'green'],
+        ['shouldComponentUpdate-nextState', 'blue'],
+        ['componentWillUpdate-currentState', 'green'],
+        ['componentWillUpdate-nextState', 'blue'],
+        ['render', 'blue'],
+        ['componentDidUpdate-currentState', 'blue'],
+        ['componentDidUpdate-prevState', 'green'],
+        ['setFavoriteColor', 'blue'],
+        // forceUpdate()
+        ['componentWillUpdate-currentState', 'blue'],
+        ['componentWillUpdate-nextState', 'blue'],
+        ['render', 'blue'],
+        ['componentDidUpdate-currentState', 'blue'],
+        ['componentDidUpdate-prevState', 'blue'],
+        ['forceUpdate', 'blue'],
+        // unmountComponent()
+        // state is available within `componentWillUnmount()`
+        ['componentWillUnmount', 'blue'],
+      ].join('\n'),
+    );
+  });
+
+  it('should batch unmounts', () => {
+    var outer;
+
+    class Inner extends React.Component {
+      render() {
+        return <div />;
+      }
+
+      componentWillUnmount() {
+        // This should get silently ignored (maybe with a warning), but it
+        // shouldn't break React.
+        outer.setState({showInner: false});
+      }
+    }
+
+    class Outer extends React.Component {
+      state = {showInner: true};
+
+      render() {
+        return <div>{this.state.showInner && <Inner />}</div>;
+      }
+    }
+
+    var container = document.createElement('div');
+    outer = ReactDOM.render(<Outer />, container);
+    expect(() => {
+      ReactDOM.unmountComponentAtNode(container);
+    }).not.toThrow();
+  });
+});
diff --git a/src/renderers/shared/reconciler/__tests__/ReactEmptyComponent-test.js b/src/renderers/shared/stack/reconciler/__tests__/ReactEmptyComponent-test.js
similarity index 51%
rename from src/renderers/shared/reconciler/__tests__/ReactEmptyComponent-test.js
rename to src/renderers/shared/stack/reconciler/__tests__/ReactEmptyComponent-test.js
index 406e18e2a..a6b4cfaaf 100644
--- a/src/renderers/shared/reconciler/__tests__/ReactEmptyComponent-test.js
+++ b/src/renderers/shared/stack/reconciler/__tests__/ReactEmptyComponent-test.js
@@ -22,4 +22,4 @@ var log;
 
-describe('ReactEmptyComponent', function() {
-  beforeEach(function() {
+describe('ReactEmptyComponent', () => {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -34,18 +34,19 @@ describe('ReactEmptyComponent', function() {
 
-    TogglingComponent = React.createClass({
-      getInitialState: function() {
-        return {component: this.props.firstComponent};
-      },
-      componentDidMount: function() {
+    TogglingComponent = class extends React.Component {
+      state = {component: this.props.firstComponent};
+
+      componentDidMount() {
         log(ReactDOM.findDOMNode(this));
         this.setState({component: this.props.secondComponent});
-      },
-      componentDidUpdate: function() {
+      }
+
+      componentDidUpdate() {
         log(ReactDOM.findDOMNode(this));
-      },
-      render: function() {
+      }
+
+      render() {
         var Component = this.state.component;
         return Component ? <Component /> : null;
-      },
-    });
+      }
+    };
   });
@@ -53,12 +54,13 @@ describe('ReactEmptyComponent', function() {
   it('should render null and false as a noscript tag under the hood', () => {
-    var Component1 = React.createClass({
-      render: function() {
+    class Component1 extends React.Component {
+      render() {
         return null;
-      },
-    });
-    var Component2 = React.createClass({
-      render: function() {
+      }
+    }
+
+    class Component2 extends React.Component {
+      render() {
         return false;
-      },
-    });
+      }
+    }
 
@@ -66,8 +68,4 @@ describe('ReactEmptyComponent', function() {
     var instance2 = ReactTestUtils.renderIntoDocument(<Component2 />);
-    reactComponentExpect(instance1)
-      .expectRenderedChild()
-      .toBeEmptyComponent();
-    reactComponentExpect(instance2)
-      .expectRenderedChild()
-      .toBeEmptyComponent();
+    reactComponentExpect(instance1).expectRenderedChild().toBeEmptyComponent();
+    reactComponentExpect(instance2).expectRenderedChild().toBeEmptyComponent();
   });
@@ -75,10 +73,11 @@ describe('ReactEmptyComponent', function() {
   it('should still throw when rendering to undefined', () => {
-    var Component = React.createClass({
-      render: function() {},
-    });
+    class Component extends React.Component {
+      render() {}
+    }
+
     expect(function() {
       ReactTestUtils.renderIntoDocument(<Component />);
-    }).toThrow(
+    }).toThrowError(
       'Component.render(): A valid React element (or null) must be returned. You may ' +
-      'have returned undefined, an array or some other invalid object.'
+        'have returned undefined, an array or some other invalid object.',
     );
@@ -87,12 +86,8 @@ describe('ReactEmptyComponent', function() {
   it('should be able to switch between rendering null and a normal tag', () => {
-    var instance1 =
-      <TogglingComponent
-        firstComponent={null}
-        secondComponent={'div'}
-      />;
-    var instance2 =
-      <TogglingComponent
-        firstComponent={'div'}
-        secondComponent={null}
-      />;
+    var instance1 = (
+      <TogglingComponent firstComponent={null} secondComponent={'div'} />
+    );
+    var instance2 = (
+      <TogglingComponent firstComponent={'div'} secondComponent={null} />
+    );
 
@@ -101,7 +96,7 @@ describe('ReactEmptyComponent', function() {
 
-    expect(log.argsForCall.length).toBe(4);
-    expect(log.argsForCall[0][0]).toBe(null);
-    expect(log.argsForCall[1][0].tagName).toBe('DIV');
-    expect(log.argsForCall[2][0].tagName).toBe('DIV');
-    expect(log.argsForCall[3][0]).toBe(null);
+    expect(log.calls.count()).toBe(4);
+    expect(log.calls.argsFor(0)[0]).toBe(null);
+    expect(log.calls.argsFor(1)[0].tagName).toBe('DIV');
+    expect(log.calls.argsFor(2)[0].tagName).toBe('DIV');
+    expect(log.calls.argsFor(3)[0]).toBe(null);
   });
@@ -109,7 +104,5 @@ describe('ReactEmptyComponent', function() {
   it('should be able to switch in a list of children', () => {
-    var instance1 =
-      <TogglingComponent
-        firstComponent={null}
-        secondComponent={'div'}
-      />;
+    var instance1 = (
+      <TogglingComponent firstComponent={null} secondComponent={'div'} />
+    );
 
@@ -120,67 +113,58 @@ describe('ReactEmptyComponent', function() {
         {instance1}
-      </div>
+      </div>,
     );
 
-    expect(log.argsForCall.length).toBe(6);
-    expect(log.argsForCall[0][0]).toBe(null);
-    expect(log.argsForCall[1][0]).toBe(null);
-    expect(log.argsForCall[2][0]).toBe(null);
-    expect(log.argsForCall[3][0].tagName).toBe('DIV');
-    expect(log.argsForCall[4][0].tagName).toBe('DIV');
-    expect(log.argsForCall[5][0].tagName).toBe('DIV');
+    expect(log.calls.count()).toBe(6);
+    expect(log.calls.argsFor(0)[0]).toBe(null);
+    expect(log.calls.argsFor(1)[0]).toBe(null);
+    expect(log.calls.argsFor(2)[0]).toBe(null);
+    expect(log.calls.argsFor(3)[0].tagName).toBe('DIV');
+    expect(log.calls.argsFor(4)[0].tagName).toBe('DIV');
+    expect(log.calls.argsFor(5)[0].tagName).toBe('DIV');
   });
 
-  it('should distinguish between a script placeholder and an actual script tag',
-    () => {
-      var instance1 =
-        <TogglingComponent
-          firstComponent={null}
-          secondComponent={'script'}
-        />;
-      var instance2 =
-        <TogglingComponent
-          firstComponent={'script'}
-          secondComponent={null}
-        />;
+  it('should distinguish between a script placeholder and an actual script tag', () => {
+    var instance1 = (
+      <TogglingComponent firstComponent={null} secondComponent={'script'} />
+    );
+    var instance2 = (
+      <TogglingComponent firstComponent={'script'} secondComponent={null} />
+    );
 
-      expect(function() {
-        ReactTestUtils.renderIntoDocument(instance1);
-      }).not.toThrow();
-      expect(function() {
-        ReactTestUtils.renderIntoDocument(instance2);
-      }).not.toThrow();
+    expect(function() {
+      ReactTestUtils.renderIntoDocument(instance1);
+    }).not.toThrow();
+    expect(function() {
+      ReactTestUtils.renderIntoDocument(instance2);
+    }).not.toThrow();
 
-      expect(log.argsForCall.length).toBe(4);
-      expect(log.argsForCall[0][0]).toBe(null);
-      expect(log.argsForCall[1][0].tagName).toBe('SCRIPT');
-      expect(log.argsForCall[2][0].tagName).toBe('SCRIPT');
-      expect(log.argsForCall[3][0]).toBe(null);
-    }
-  );
+    expect(log.calls.count()).toBe(4);
+    expect(log.calls.argsFor(0)[0]).toBe(null);
+    expect(log.calls.argsFor(1)[0].tagName).toBe('SCRIPT');
+    expect(log.calls.argsFor(2)[0].tagName).toBe('SCRIPT');
+    expect(log.calls.argsFor(3)[0]).toBe(null);
+  });
 
-  it('should have findDOMNode return null when multiple layers of composite ' +
-    'components render to the same null placeholder',
+  it(
+    'should have findDOMNode return null when multiple layers of composite ' +
+      'components render to the same null placeholder',
     () => {
-      var GrandChild = React.createClass({
-        render: function() {
+      class GrandChild extends React.Component {
+        render() {
           return null;
-        },
-      });
+        }
+      }
 
-      var Child = React.createClass({
-        render: function() {
+      class Child extends React.Component {
+        render() {
           return <GrandChild />;
-        },
-      });
-
-      var instance1 =
-        <TogglingComponent
-          firstComponent={'div'}
-          secondComponent={Child}
-        />;
-      var instance2 =
-        <TogglingComponent
-          firstComponent={Child}
-          secondComponent={'div'}
-        />;
+        }
+      }
+
+      var instance1 = (
+        <TogglingComponent firstComponent={'div'} secondComponent={Child} />
+      );
+      var instance2 = (
+        <TogglingComponent firstComponent={Child} secondComponent={'div'} />
+      );
 
@@ -193,17 +177,19 @@ describe('ReactEmptyComponent', function() {
 
-      expect(log.argsForCall.length).toBe(4);
-      expect(log.argsForCall[0][0].tagName).toBe('DIV');
-      expect(log.argsForCall[1][0]).toBe(null);
-      expect(log.argsForCall[2][0]).toBe(null);
-      expect(log.argsForCall[3][0].tagName).toBe('DIV');
-    }
+      expect(log.calls.count()).toBe(4);
+      expect(log.calls.argsFor(0)[0].tagName).toBe('DIV');
+      expect(log.calls.argsFor(1)[0]).toBe(null);
+      expect(log.calls.argsFor(2)[0]).toBe(null);
+      expect(log.calls.argsFor(3)[0].tagName).toBe('DIV');
+    },
   );
 
-  it('works when switching components', function() {
+  it('works when switching components', () => {
     var assertions = 0;
-    var Inner = React.createClass({
-      render: function() {
+
+    class Inner extends React.Component {
+      render() {
         return <span />;
-      },
-      componentDidMount: function() {
+      }
+
+      componentDidMount() {
         // Make sure the DOM node resolves properly even if we're replacing a
@@ -212,4 +198,5 @@ describe('ReactEmptyComponent', function() {
         assertions++;
-      },
-      componentWillUnmount: function() {
+      }
+
+      componentWillUnmount() {
         // Even though we're getting replaced by `null`, we haven't been
@@ -218,9 +205,10 @@ describe('ReactEmptyComponent', function() {
         assertions++;
-      },
-    });
-    var Wrapper = React.createClass({
-      render: function() {
+      }
+    }
+
+    class Wrapper extends React.Component {
+      render() {
         return this.props.showInner ? <Inner /> : null;
-      },
-    });
+      }
+    }
 
@@ -244,3 +232,3 @@ describe('ReactEmptyComponent', function() {
 
-  it('throws when rendering null at the top level', function() {
+  it('throws when rendering null at the top level', () => {
     // TODO: This should actually work since `null` is a valid ReactNode
@@ -249,9 +237,7 @@ describe('ReactEmptyComponent', function() {
       ReactDOM.render(null, div);
-    }).toThrow(
-      'ReactDOM.render(): Invalid component element.'
-    );
+    }).toThrowError('ReactDOM.render(): Invalid component element.');
   });
 
-  it('does not break when updating during mount', function() {
-    var Child = React.createClass({
+  it('does not break when updating during mount', () => {
+    class Child extends React.Component {
       componentDidMount() {
@@ -260,3 +246,4 @@ describe('ReactEmptyComponent', function() {
         }
-      },
+      }
+
       render() {
@@ -267,9 +254,10 @@ describe('ReactEmptyComponent', function() {
         return <div>hello world</div>;
-      },
-    });
+      }
+    }
 
-    var Parent = React.createClass({
-      update() {
+    class Parent extends React.Component {
+      update = () => {
         this.forceUpdate();
-      },
+      };
+
       render() {
@@ -282,4 +270,4 @@ describe('ReactEmptyComponent', function() {
         );
-      },
-    });
+      }
+    }
 
@@ -290,8 +278,8 @@ describe('ReactEmptyComponent', function() {
 
-  it('preserves the dom node during updates', function() {
-    var Empty = React.createClass({
-      render: function() {
+  it('preserves the dom node during updates', () => {
+    class Empty extends React.Component {
+      render() {
         return null;
-      },
-    });
+      }
+    }
 
diff --git a/src/core/__tests__/ReactErrorBoundaries-test.js b/src/renderers/shared/stack/reconciler/__tests__/ReactErrorBoundaries-test.js
similarity index 69%
rename from src/core/__tests__/ReactErrorBoundaries-test.js
rename to src/renderers/shared/stack/reconciler/__tests__/ReactErrorBoundaries-test.js
index 0ba37323d..b1f3f2f12 100644
--- a/src/core/__tests__/ReactErrorBoundaries-test.js
+++ b/src/renderers/shared/stack/reconciler/__tests__/ReactErrorBoundaries-test.js
@@ -16,5 +16,4 @@ var ReactDOM;
 
-describe('ReactErrorBoundaries', function() {
-
-  beforeEach(function() {
+describe('ReactErrorBoundaries', () => {
+  beforeEach(() => {
     ReactDOM = require('ReactDOM');
@@ -23,3 +22,3 @@ describe('ReactErrorBoundaries', function() {
 
-  it('does not register event handlers for unmounted children', function() {
+  it('does not register event handlers for unmounted children', () => {
     class Angry extends React.Component {
@@ -37,5 +36,7 @@ describe('ReactErrorBoundaries', function() {
         if (!this.state.error) {
-          return (<div><button onClick={this.onClick}>ClickMe</button><Angry /></div>);
+          return (
+            <div><button onClick={this.onClick}>ClickMe</button><Angry /></div>
+          );
         } else {
-          return (<div>Happy Birthday!</div>);
+          return <div>Happy Birthday!</div>;
         }
@@ -52,3 +53,3 @@ describe('ReactErrorBoundaries', function() {
     var container = document.createElement('div');
-    EventPluginHub.putListener = jest.genMockFn();
+    EventPluginHub.putListener = jest.fn();
     ReactDOM.render(<Boundary />, container);
@@ -57,3 +58,58 @@ describe('ReactErrorBoundaries', function() {
 
-  it('will catch exceptions in componentWillUnmount', function() {
+  it('renders an error state', () => {
+    var log = [];
+    class Angry extends React.Component {
+      render() {
+        log.push('Angry render');
+        throw new Error('Please, do not render me.');
+      }
+      componentDidMount() {
+        log.push('Angry componentDidMount');
+      }
+      componentWillUnmount() {
+        log.push('Angry componentWillUnmount');
+      }
+    }
+
+    class Boundary extends React.Component {
+      constructor(props) {
+        super(props);
+        this.state = {error: false};
+      }
+      render() {
+        log.push('Boundary render');
+        if (!this.state.error) {
+          return (
+            <div><button onClick={this.onClick}>ClickMe</button><Angry /></div>
+          );
+        } else {
+          return <div>Happy Birthday!</div>;
+        }
+      }
+      componentDidMount() {
+        log.push('Boundary componentDidMount');
+      }
+      componentWillUnmount() {
+        log.push('Boundary componentWillUnmount');
+      }
+      onClick() {
+        /* do nothing */
+      }
+      unstable_handleError() {
+        this.setState({error: true});
+      }
+    }
+
+    var container = document.createElement('div');
+    ReactDOM.render(<Boundary />, container);
+    expect(container.firstChild.innerHTML).toBe('Happy Birthday!');
+    expect(log).toEqual([
+      'Boundary render',
+      'Angry render',
+      'Boundary render',
+      'Boundary componentDidMount',
+    ]);
+  });
+
+  it('will catch exceptions in componentWillUnmount', () => {
     class ErrorBoundary extends React.Component {
@@ -63,3 +119,3 @@ describe('ReactErrorBoundaries', function() {
       }
-      
+
       render() {
@@ -70,3 +126,3 @@ describe('ReactErrorBoundaries', function() {
       }
-      
+
       unstable_handleError() {
@@ -98,3 +154,3 @@ describe('ReactErrorBoundaries', function() {
       </ErrorBoundary>,
-      container
+      container,
     );
@@ -103,3 +159,4 @@ describe('ReactErrorBoundaries', function() {
 
-  it('expect uneventful render to succeed', function() {
+  it('expect uneventful render to succeed', () => {
+    var log = [];
     class Boundary extends React.Component {
@@ -110,3 +167,4 @@ describe('ReactErrorBoundaries', function() {
       render() {
-        return (<div><button onClick={this.onClick}>ClickMe</button></div>);
+        log.push('Boundary render');
+        return <div><button onClick={this.onClick}>ClickMe</button></div>;
       }
@@ -115,2 +173,8 @@ describe('ReactErrorBoundaries', function() {
       }
+      componentDidMount() {
+        log.push('Boundary componentDidMount');
+      }
+      componentWillUnmount() {
+        log.push('Boundary componentWillUnmount');
+      }
       unstable_handleError() {
@@ -120,10 +184,8 @@ describe('ReactErrorBoundaries', function() {
 
-    var EventPluginHub = require('EventPluginHub');
     var container = document.createElement('div');
-    EventPluginHub.putListener = jest.genMockFn();
     ReactDOM.render(<Boundary />, container);
-    expect(EventPluginHub.putListener).toBeCalled();
+    expect(log).toEqual(['Boundary render', 'Boundary componentDidMount']);
   });
 
-  it('correctly handles composite siblings', function() {
+  it('correctly handles composite siblings', () => {
     class ErrorBoundary extends React.Component {
@@ -133,3 +195,3 @@ describe('ReactErrorBoundaries', function() {
       }
-      
+
       render() {
@@ -140,3 +202,3 @@ describe('ReactErrorBoundaries', function() {
       }
-      
+
       unstable_handleError() {
@@ -157,3 +219,3 @@ describe('ReactErrorBoundaries', function() {
       <ErrorBoundary><Broken /><Composite /></ErrorBoundary>,
-      container
+      container,
     );
@@ -162,3 +224,3 @@ describe('ReactErrorBoundaries', function() {
 
-  it('catches errors from children', function() {
+  it('catches errors from children', () => {
     var log = [];
diff --git a/src/renderers/shared/reconciler/__tests__/ReactIdentity-test.js b/src/renderers/shared/stack/reconciler/__tests__/ReactIdentity-test.js
similarity index 72%
rename from src/renderers/shared/reconciler/__tests__/ReactIdentity-test.js
rename to src/renderers/shared/stack/reconciler/__tests__/ReactIdentity-test.js
index 02ec4361d..254fc50e6 100644
--- a/src/renderers/shared/reconciler/__tests__/ReactIdentity-test.js
+++ b/src/renderers/shared/stack/reconciler/__tests__/ReactIdentity-test.js
@@ -18,5 +18,4 @@ var ReactTestUtils;
 
-describe('ReactIdentity', function() {
-
-  beforeEach(function() {
+describe('ReactIdentity', () => {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -32,6 +31,6 @@ describe('ReactIdentity', function() {
 
-  it('should allow key property to express identity', function() {
+  it('should allow key property to express identity', () => {
     var node;
-    var Component = (props) =>
-      <div ref={(c) => node = c}>
+    var Component = props =>
+      <div ref={c => (node = c)}>
         <div key={props.swap ? 'banana' : 'apple'} />
@@ -49,9 +48,8 @@ describe('ReactIdentity', function() {
 
-  it('should use composite identity', function() {
-
-    var Wrapper = React.createClass({
-      render: function() {
+  it('should use composite identity', () => {
+    class Wrapper extends React.Component {
+      render() {
         return <a>{this.props.children}</a>;
-      },
-    });
+      }
+    }
 
@@ -61,8 +59,8 @@ describe('ReactIdentity', function() {
     ReactDOM.render(
-      <Wrapper key="wrap1"><span ref={(c) => node1 = c} /></Wrapper>,
-      container
+      <Wrapper key="wrap1"><span ref={c => (node1 = c)} /></Wrapper>,
+      container,
     );
     ReactDOM.render(
-      <Wrapper key="wrap2"><span ref={(c) => node2 = c} /></Wrapper>,
-      container
+      <Wrapper key="wrap2"><span ref={c => (node2 = c)} /></Wrapper>,
+      container,
     );
@@ -73,6 +71,4 @@ describe('ReactIdentity', function() {
   function renderAComponentWithKeyIntoContainer(key, container) {
-
-    var Wrapper = React.createClass({
-
-      render: function() {
+    class Wrapper extends React.Component {
+      render() {
         var s1 = <span ref="span1" key={key} />;
@@ -83,5 +79,4 @@ describe('ReactIdentity', function() {
         return <div>{[s1, frag(map)]}</div>;
-      },
-
-    });
+      }
+    }
 
@@ -95,11 +90,8 @@ describe('ReactIdentity', function() {
 
-  it('should allow any character as a key, in a detached parent', function() {
+  it('should allow any character as a key, in a detached parent', () => {
     var detachedContainer = document.createElement('div');
-    renderAComponentWithKeyIntoContainer(
-      "<'WEIRD/&\\key'>",
-      detachedContainer
-    );
+    renderAComponentWithKeyIntoContainer("<'WEIRD/&\\key'>", detachedContainer);
   });
 
-  it('should allow any character as a key, in an attached parent', function() {
+  it('should allow any character as a key, in an attached parent', () => {
     // This test exists to protect against implementation details that
@@ -109,6 +101,3 @@ describe('ReactIdentity', function() {
 
-    renderAComponentWithKeyIntoContainer(
-      "<'WEIRD/&\\key'>",
-      attachedContainer
-    );
+    renderAComponentWithKeyIntoContainer("<'WEIRD/&\\key'>", attachedContainer);
 
@@ -117,3 +106,3 @@ describe('ReactIdentity', function() {
 
-  it('should not allow scripts in keys to execute', function() {
+  it('should not allow scripts in keys to execute', () => {
     var h4x0rKey =
@@ -132,3 +121,3 @@ describe('ReactIdentity', function() {
 
-  it('should let restructured components retain their uniqueness', function() {
+  it('should let restructured components retain their uniqueness', () => {
     var instance0 = <span />;
@@ -137,4 +126,4 @@ describe('ReactIdentity', function() {
 
-    var TestComponent = React.createClass({
-      render: function() {
+    class TestComponent extends React.Component {
+      render() {
         return (
@@ -146,17 +135,13 @@ describe('ReactIdentity', function() {
         );
-      },
-    });
+      }
+    }
 
-    var TestContainer = React.createClass({
-
-      render: function() {
+    class TestContainer extends React.Component {
+      render() {
         return <TestComponent>{instance0}{instance1}</TestComponent>;
-      },
-
-    });
+      }
+    }
 
     expect(function() {
-
       ReactTestUtils.renderIntoDocument(<TestContainer />);
-
     }).not.toThrow();
@@ -164,3 +149,3 @@ describe('ReactIdentity', function() {
 
-  it('should let nested restructures retain their uniqueness', function() {
+  it('should let nested restructures retain their uniqueness', () => {
     var instance0 = <span />;
@@ -169,4 +154,4 @@ describe('ReactIdentity', function() {
 
-    var TestComponent = React.createClass({
-      render: function() {
+    class TestComponent extends React.Component {
+      render() {
         return (
@@ -178,8 +163,7 @@ describe('ReactIdentity', function() {
         );
-      },
-    });
+      }
+    }
 
-    var TestContainer = React.createClass({
-
-      render: function() {
+    class TestContainer extends React.Component {
+      render() {
         return (
@@ -189,10 +173,7 @@ describe('ReactIdentity', function() {
         );
-      },
-
-    });
+      }
+    }
 
     expect(function() {
-
       ReactTestUtils.renderIntoDocument(<TestContainer />);
-
     }).not.toThrow();
@@ -200,12 +181,11 @@ describe('ReactIdentity', function() {
 
-  it('should let text nodes retain their uniqueness', function() {
-    var TestComponent = React.createClass({
-      render: function() {
+  it('should let text nodes retain their uniqueness', () => {
+    class TestComponent extends React.Component {
+      render() {
         return <div>{this.props.children}<span /></div>;
-      },
-    });
-
-    var TestContainer = React.createClass({
+      }
+    }
 
-      render: function() {
+    class TestContainer extends React.Component {
+      render() {
         return (
@@ -216,10 +196,7 @@ describe('ReactIdentity', function() {
         );
-      },
-
-    });
+      }
+    }
 
     expect(function() {
-
       ReactTestUtils.renderIntoDocument(<TestContainer />);
-
     }).not.toThrow();
@@ -227,21 +204,17 @@ describe('ReactIdentity', function() {
 
-  it('should retain key during updates in composite components', function() {
-
-    var TestComponent = React.createClass({
-      render: function() {
+  it('should retain key during updates in composite components', () => {
+    class TestComponent extends React.Component {
+      render() {
         return <div>{this.props.children}</div>;
-      },
-    });
-
-    var TestContainer = React.createClass({
+      }
+    }
 
-      getInitialState: function() {
-        return {swapped: false};
-      },
+    class TestContainer extends React.Component {
+      state = {swapped: false};
 
-      swap: function() {
+      swap = () => {
         this.setState({swapped: true});
-      },
+      };
 
-      render: function() {
+      render() {
         return (
@@ -252,5 +225,4 @@ describe('ReactIdentity', function() {
         );
-      },
-
-    });
+      }
+    }
 
@@ -272,7 +244,6 @@ describe('ReactIdentity', function() {
     expect(beforeB).toBe(afterB);
-
   });
 
-  it('should not allow implicit and explicit keys to collide', function() {
-    var component =
+  it('should not allow implicit and explicit keys to collide', () => {
+    var component = (
       <div>
@@ -280,3 +251,4 @@ describe('ReactIdentity', function() {
         <span key="0" />
-      </div>;
+      </div>
+    );
 
@@ -286,4 +258,2 @@ describe('ReactIdentity', function() {
   });
-
-
 });
diff --git a/src/renderers/shared/reconciler/__tests__/ReactMockedComponent-test.js b/src/renderers/shared/stack/reconciler/__tests__/ReactMockedComponent-test.js
similarity index 74%
rename from src/renderers/shared/reconciler/__tests__/ReactMockedComponent-test.js
rename to src/renderers/shared/stack/reconciler/__tests__/ReactMockedComponent-test.js
index 761b68b05..185bd0762 100644
--- a/src/renderers/shared/reconciler/__tests__/ReactMockedComponent-test.js
+++ b/src/renderers/shared/stack/reconciler/__tests__/ReactMockedComponent-test.js
@@ -19,5 +19,4 @@ var MockedComponent;
 
-describe('ReactMockedComponent', function() {
-
-  beforeEach(function() {
+describe('ReactMockedComponent', () => {
+  beforeEach(() => {
     React = require('React');
@@ -25,4 +24,8 @@ describe('ReactMockedComponent', function() {
 
-    AutoMockedComponent = jest.genMockFromModule('ReactMockedComponentTestComponent');
-    MockedComponent = jest.genMockFromModule('ReactMockedComponentTestComponent');
+    AutoMockedComponent = jest.genMockFromModule(
+      'ReactMockedComponentTestComponent',
+    );
+    MockedComponent = jest.genMockFromModule(
+      'ReactMockedComponentTestComponent',
+    );
 
@@ -34,3 +37,3 @@ describe('ReactMockedComponent', function() {
     ReactTestUtils.renderIntoDocument(<AutoMockedComponent />);
-    expect(console.error.calls.length).toBe(0);
+    expect(console.error.calls.count()).toBe(0);
   });
@@ -38,17 +41,13 @@ describe('ReactMockedComponent', function() {
   it('should allow an implicitly mocked component to be updated', () => {
-    var Wrapper = React.createClass({
-
-      getInitialState: function() {
-        return {foo: 1};
-      },
+    class Wrapper extends React.Component {
+      state = {foo: 1};
 
-      update: function() {
+      update = () => {
         this.setState({foo: 2});
-      },
+      };
 
-      render: function() {
+      render() {
         return <div><AutoMockedComponent prop={this.state.foo} /></div>;
-      },
-
-    });
+      }
+    }
 
@@ -58,3 +57,3 @@ describe('ReactMockedComponent', function() {
       instance,
-      AutoMockedComponent
+      AutoMockedComponent,
     );
@@ -75,17 +74,14 @@ describe('ReactMockedComponent', function() {
   it('should allow an explicitly mocked component to be updated', () => {
-    var Wrapper = React.createClass({
-
-      getInitialState: function() {
-        return {foo: 1};
-      },
+    class Wrapper extends React.Component {
+      state = {foo: 1};
 
-      update: function() {
+      update = () => {
         this.setState({foo: 2});
-      },
+      };
 
-      render: function() {
+      render() {
         return <div><MockedComponent prop={this.state.foo} /></div>;
-      },
+      }
+    }
 
-    });
     var instance = ReactTestUtils.renderIntoDocument(<Wrapper />);
@@ -94,3 +90,3 @@ describe('ReactMockedComponent', function() {
       instance,
-      MockedComponent
+      MockedComponent,
     );
@@ -105,3 +101,2 @@ describe('ReactMockedComponent', function() {
   });
-
 });
diff --git a/src/renderers/shared/reconciler/__tests__/ReactMultiChild-test.js b/src/renderers/shared/stack/reconciler/__tests__/ReactMultiChild-test.js
similarity index 50%
rename from src/renderers/shared/reconciler/__tests__/ReactMultiChild-test.js
rename to src/renderers/shared/stack/reconciler/__tests__/ReactMultiChild-test.js
index 979b2115a..e11c3ba00 100644
--- a/src/renderers/shared/reconciler/__tests__/ReactMultiChild-test.js
+++ b/src/renderers/shared/stack/reconciler/__tests__/ReactMultiChild-test.js
@@ -13,8 +13,11 @@
 
-describe('ReactMultiChild', function() {
-  var React;
+describe('ReactMultiChild', () => {
+  function normalizeCodeLocInfo(str) {
+    return str.replace(/\(at .+?:\d+\)/g, '(at **)');
+  }
 
+  var React;
   var ReactDOM;
 
-  beforeEach(function() {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -24,18 +27,18 @@ describe('ReactMultiChild', function() {
 
-  describe('reconciliation', function() {
-    it('should update children when possible', function() {
+  describe('reconciliation', () => {
+    it('should update children when possible', () => {
       var container = document.createElement('div');
 
-      var mockMount = jest.genMockFn();
-      var mockUpdate = jest.genMockFn();
-      var mockUnmount = jest.genMockFn();
+      var mockMount = jest.fn();
+      var mockUpdate = jest.fn();
+      var mockUnmount = jest.fn();
 
-      var MockComponent = React.createClass({
-        componentDidMount: mockMount,
-        componentDidUpdate: mockUpdate,
-        componentWillUnmount: mockUnmount,
-        render: function() {
+      class MockComponent extends React.Component {
+        componentDidMount = mockMount;
+        componentDidUpdate = mockUpdate;
+        componentWillUnmount = mockUnmount;
+        render() {
           return <span />;
-        },
-      });
+        }
+      }
 
@@ -58,15 +61,15 @@ describe('ReactMultiChild', function() {
 
-    it('should replace children with different constructors', function() {
+    it('should replace children with different constructors', () => {
       var container = document.createElement('div');
 
-      var mockMount = jest.genMockFn();
-      var mockUnmount = jest.genMockFn();
+      var mockMount = jest.fn();
+      var mockUnmount = jest.fn();
 
-      var MockComponent = React.createClass({
-        componentDidMount: mockMount,
-        componentWillUnmount: mockUnmount,
-        render: function() {
+      class MockComponent extends React.Component {
+        componentDidMount = mockMount;
+        componentWillUnmount = mockUnmount;
+        render() {
           return <span />;
-        },
-      });
+        }
+      }
 
@@ -86,21 +89,21 @@ describe('ReactMultiChild', function() {
 
-    it('should NOT replace children with different owners', function() {
+    it('should NOT replace children with different owners', () => {
       var container = document.createElement('div');
 
-      var mockMount = jest.genMockFn();
-      var mockUnmount = jest.genMockFn();
+      var mockMount = jest.fn();
+      var mockUnmount = jest.fn();
 
-      var MockComponent = React.createClass({
-        componentDidMount: mockMount,
-        componentWillUnmount: mockUnmount,
-        render: function() {
+      class MockComponent extends React.Component {
+        componentDidMount = mockMount;
+        componentWillUnmount = mockUnmount;
+        render() {
           return <span />;
-        },
-      });
+        }
+      }
 
-      var WrapperComponent = React.createClass({
-        render: function() {
+      class WrapperComponent extends React.Component {
+        render() {
           return this.props.children || <MockComponent />;
-        },
-      });
+        }
+      }
 
@@ -116,3 +119,3 @@ describe('ReactMultiChild', function() {
         <WrapperComponent><MockComponent /></WrapperComponent>,
-        container
+        container,
       );
@@ -123,15 +126,15 @@ describe('ReactMultiChild', function() {
 
-    it('should replace children with different keys', function() {
+    it('should replace children with different keys', () => {
       var container = document.createElement('div');
 
-      var mockMount = jest.genMockFn();
-      var mockUnmount = jest.genMockFn();
+      var mockMount = jest.fn();
+      var mockUnmount = jest.fn();
 
-      var MockComponent = React.createClass({
-        componentDidMount: mockMount,
-        componentWillUnmount: mockUnmount,
-        render: function() {
+      class MockComponent extends React.Component {
+        componentDidMount = mockMount;
+        componentWillUnmount = mockUnmount;
+        render() {
           return <span />;
-        },
-      });
+        }
+      }
 
@@ -150,2 +153,45 @@ describe('ReactMultiChild', function() {
     });
+
+    it('should warn for duplicated keys with component stack info', () => {
+      spyOn(console, 'error');
+
+      var container = document.createElement('div');
+
+      class WrapperComponent extends React.Component {
+        render() {
+          return <div>{this.props.children}</div>;
+        }
+      }
+
+      class Parent extends React.Component {
+        render() {
+          return (
+            <div>
+              <WrapperComponent>
+                {this.props.children}
+              </WrapperComponent>
+            </div>
+          );
+        }
+      }
+
+      ReactDOM.render(<Parent>{[<div key="1" />]}</Parent>, container);
+
+      ReactDOM.render(
+        <Parent>{[<div key="1" />, <div key="1" />]}</Parent>,
+        container,
+      );
+
+      expect(console.error.calls.count()).toBe(1);
+      expect(normalizeCodeLocInfo(console.error.calls.argsFor(0)[0])).toBe(
+        'Warning: flattenChildren(...): ' +
+          'Encountered two children with the same key, `1`. ' +
+          'Child keys must be unique; when two children share a key, ' +
+          'only the first child will be used.\n' +
+          '    in div (at **)\n' +
+          '    in WrapperComponent (at **)\n' +
+          '    in div (at **)\n' +
+          '    in Parent (at **)',
+      );
+    });
   });
diff --git a/src/renderers/shared/reconciler/__tests__/ReactMultiChildReconcile-test.js b/src/renderers/shared/stack/reconciler/__tests__/ReactMultiChildReconcile-test.js
similarity index 78%
rename from src/renderers/shared/reconciler/__tests__/ReactMultiChildReconcile-test.js
rename to src/renderers/shared/stack/reconciler/__tests__/ReactMultiChildReconcile-test.js
index 93ef77beb..644e614a1 100644
--- a/src/renderers/shared/reconciler/__tests__/ReactMultiChildReconcile-test.js
+++ b/src/renderers/shared/stack/reconciler/__tests__/ReactMultiChildReconcile-test.js
@@ -18,4 +18,2 @@ var ReactInstanceMap = require('ReactInstanceMap');
 
-var mapObject = require('mapObject');
-
 var stripEmptyValues = function(obj) {
@@ -49,16 +47,22 @@ var getOriginalKey = function(childName) {
  */
-var StatusDisplay = React.createClass({
-  getInitialState: function() {
-    return {internalState: Math.random()};
-  },
+class StatusDisplay extends React.Component {
+  state = {internalState: Math.random()};
 
-  getStatus: function() {
+  getStatus = () => {
     return this.props.status;
-  },
+  };
 
-  getInternalState: function() {
+  getInternalState = () => {
     return this.state.internalState;
-  },
+  };
+
+  componentDidMount() {
+    this.props.onFlush();
+  }
 
-  render: function() {
+  componentDidUpdate() {
+    this.props.onFlush();
+  }
+
+  render() {
     return (
@@ -68,4 +72,4 @@ var StatusDisplay = React.createClass({
     );
-  },
-});
+  }
+}
 
@@ -74,18 +78,15 @@ var StatusDisplay = React.createClass({
  */
-var FriendsStatusDisplay = React.createClass({
+class FriendsStatusDisplay extends React.Component {
   /**
-   * Retrieves the rendered children in a nice format for comparing to the input
-   * `this.props.usernameToStatus`. Gets the order directly from each rendered
-   * child's `index` field. Refs are not maintained in the rendered order, and
-   * neither is `this._renderedChildren` (surprisingly).
-   */
-  getStatusDisplays: function() {
-    var name;
-    var orderOfUsernames = [];
+  * Gets the order directly from each rendered child's `index` field.
+  * Refs are not maintained in the rendered order, and neither is
+  * `this._renderedChildren` (surprisingly).
+  */
+  getOriginalKeys = () => {
+    var originalKeys = [];
     // TODO: Update this to a better test that doesn't rely so much on internal
     // implementation details.
-    var statusDisplays =
-      ReactInstanceMap.get(this)
-      ._renderedComponent
+    var statusDisplays = ReactInstanceMap.get(this)._renderedComponent
       ._renderedChildren;
+    var name;
     for (name in statusDisplays) {
@@ -94,9 +95,18 @@ var FriendsStatusDisplay = React.createClass({
       if (isPresent) {
-        orderOfUsernames[child._mountIndex] = getOriginalKey(name);
+        originalKeys[child._mountIndex] = getOriginalKey(name);
       }
     }
+    return originalKeys;
+  };
+
+  /**
+   * Retrieves the rendered children in a nice format for comparing to the input
+   * `this.props.usernameToStatus`.
+   */
+  getStatusDisplays = () => {
     var res = {};
     var i;
-    for (i = 0; i < orderOfUsernames.length; i++) {
-      var key = orderOfUsernames[i];
+    var originalKeys = this.getOriginalKeys();
+    for (i = 0; i < originalKeys.length; i++) {
+      var key = originalKeys[i];
       res[key] = this.refs[key];
@@ -104,4 +114,25 @@ var FriendsStatusDisplay = React.createClass({
     return res;
-  },
-  render: function() {
+  };
+
+  /**
+   * Verifies that by the time a child is flushed, the refs that appeared
+   * earlier have already been resolved.
+   * TODO: This assumption will likely break with incremental reconciler
+   * but our internal layer API depends on this assumption. We need to change
+   * it to be more declarative before making ref resolution indeterministic.
+   */
+  verifyPreviousRefsResolved = flushedKey => {
+    var i;
+    var originalKeys = this.getOriginalKeys();
+    for (i = 0; i < originalKeys.length; i++) {
+      var key = originalKeys[i];
+      if (key === flushedKey) {
+        // We are only interested in children up to the current key.
+        return;
+      }
+      expect(this.refs[key]).toBeTruthy();
+    }
+  };
+
+  render() {
     var children = [];
@@ -111,4 +142,10 @@ var FriendsStatusDisplay = React.createClass({
       children.push(
-        !status ? null :
-        <StatusDisplay key={key} ref={key} status={status} />
+        !status
+          ? null
+          : <StatusDisplay
+              key={key}
+              ref={key}
+              onFlush={this.verifyPreviousRefsResolved.bind(this, key)}
+              status={status}
+            />,
       );
@@ -120,10 +157,10 @@ var FriendsStatusDisplay = React.createClass({
     );
-  },
-});
-
+  }
+}
 
 function getInternalStateByUserName(statusDisplays) {
-  return mapObject(statusDisplays, function(statusDisplay, key) {
-    return statusDisplay.getInternalState();
-  });
+  return Object.keys(statusDisplays).reduce((acc, key) => {
+    acc[key] = statusDisplays[key].getInternalState();
+    return acc;
+  }, {});
 }
@@ -139,4 +176,5 @@ function verifyStatuses(statusDisplays, props) {
   var username;
-  expect(Object.keys(nonEmptyStatusDisplays).length)
-    .toEqual(Object.keys(nonEmptyStatusProps).length);
+  expect(Object.keys(nonEmptyStatusDisplays).length).toEqual(
+    Object.keys(nonEmptyStatusProps).length,
+  );
   for (username in nonEmptyStatusDisplays) {
@@ -145,4 +183,5 @@ function verifyStatuses(statusDisplays, props) {
     }
-    expect(nonEmptyStatusDisplays[username].getStatus())
-      .toEqual(nonEmptyStatusProps[username]);
+    expect(nonEmptyStatusDisplays[username].getStatus()).toEqual(
+      nonEmptyStatusProps[username],
+    );
   }
@@ -154,8 +193,10 @@ function verifyStatuses(statusDisplays, props) {
     }
-    expect(nonEmptyStatusDisplays[username].getStatus())
-      .toEqual(nonEmptyStatusProps[username]);
+    expect(nonEmptyStatusDisplays[username].getStatus()).toEqual(
+      nonEmptyStatusProps[username],
+    );
   }
 
-  expect(Object.keys(nonEmptyStatusDisplays))
-      .toEqual(Object.keys(nonEmptyStatusProps));
+  expect(Object.keys(nonEmptyStatusDisplays)).toEqual(
+    Object.keys(nonEmptyStatusProps),
+  );
 }
@@ -175,4 +216,5 @@ function verifyStatesPreserved(lastInternalStates, statusDisplays) {
     if (lastInternalStates[key]) {
-      expect(lastInternalStates[key])
-        .toEqual(statusDisplays[key].getInternalState());
+      expect(lastInternalStates[key]).toEqual(
+        statusDisplays[key].getInternalState(),
+      );
     }
@@ -181,3 +223,2 @@ function verifyStatesPreserved(lastInternalStates, statusDisplays) {
 
-
 /**
@@ -204,3 +245,3 @@ function verifyDomOrderingAccurate(parentInstance, statusDisplays) {
     orderedLogicalIDs.push(
-      ReactInstanceMap.get(statusDisplay)._renderedComponent._rootNodeID
+      ReactInstanceMap.get(statusDisplay)._renderedComponent._rootNodeID,
     );
@@ -218,3 +259,3 @@ function testPropsSequence(sequence) {
     <FriendsStatusDisplay {...sequence[0]} />,
-    container
+    container,
   );
@@ -225,6 +266,3 @@ function testPropsSequence(sequence) {
   for (i = 1; i < sequence.length; i++) {
-    ReactDOM.render(
-      <FriendsStatusDisplay {...sequence[i]} />,
-      container
-    );
+    ReactDOM.render(<FriendsStatusDisplay {...sequence[i]} />, container);
     statusDisplays = parentInstance.getStatusDisplays();
@@ -238,4 +276,4 @@ function testPropsSequence(sequence) {
 
-describe('ReactMultiChildReconcile', function() {
-  beforeEach(function() {
+describe('ReactMultiChildReconcile', () => {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -243,3 +281,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should reset internal state if removed then readded', function() {
+  it('should reset internal state if removed then readded', () => {
     // Test basics.
@@ -254,3 +292,3 @@ describe('ReactMultiChildReconcile', function() {
       <FriendsStatusDisplay {...props} />,
-      container
+      container,
     );
@@ -260,6 +298,3 @@ describe('ReactMultiChildReconcile', function() {
     // Now remove the child.
-    ReactDOM.render(
-      <FriendsStatusDisplay />,
-      container
-    );
+    ReactDOM.render(<FriendsStatusDisplay />, container);
     statusDisplays = parentInstance.getStatusDisplays();
@@ -268,13 +303,11 @@ describe('ReactMultiChildReconcile', function() {
     // Now reset the props that cause there to be a child
-    ReactDOM.render(
-      <FriendsStatusDisplay {...props} />,
-      container
-    );
+    ReactDOM.render(<FriendsStatusDisplay {...props} />, container);
     statusDisplays = parentInstance.getStatusDisplays();
     expect(statusDisplays.jcw).toBeTruthy();
-    expect(statusDisplays.jcw.getInternalState())
-        .toNotBe(startingInternalState);
+    expect(statusDisplays.jcw.getInternalState()).not.toBe(
+      startingInternalState,
+    );
   });
 
-  it('should create unique identity', function() {
+  it('should create unique identity', () => {
     // Test basics.
@@ -289,3 +322,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should preserve order if children order has not changed', function() {
+  it('should preserve order if children order has not changed', () => {
     var PROPS_SEQUENCE = [
@@ -307,5 +340,5 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should transition from zero to one children correctly', function() {
+  it('should transition from zero to one children correctly', () => {
     var PROPS_SEQUENCE = [
-      {usernameToStatus: {} },
+      {usernameToStatus: {}},
       {
@@ -319,3 +352,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should transition from one to zero children correctly', function() {
+  it('should transition from one to zero children correctly', () => {
     var PROPS_SEQUENCE = [
@@ -326,3 +359,3 @@ describe('ReactMultiChildReconcile', function() {
       },
-      {usernameToStatus: {} },
+      {usernameToStatus: {}},
     ];
@@ -331,3 +364,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should transition from one child to null children', function() {
+  it('should transition from one child to null children', () => {
     testPropsSequence([
@@ -342,3 +375,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should transition from null children to one child', function() {
+  it('should transition from null children to one child', () => {
     testPropsSequence([
@@ -353,3 +386,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should transition from zero children to null children', function() {
+  it('should transition from zero children to null children', () => {
     testPropsSequence([
@@ -362,3 +395,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should transition from null children to zero children', function() {
+  it('should transition from null children to zero children', () => {
     testPropsSequence([
@@ -371,4 +404,2 @@ describe('ReactMultiChildReconcile', function() {
 
-
-
   /**
@@ -377,3 +408,3 @@ describe('ReactMultiChildReconcile', function() {
    */
-  it('should remove nulled out children at the beginning', function() {
+  it('should remove nulled out children at the beginning', () => {
     var PROPS_SEQUENCE = [
@@ -395,3 +426,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should remove nulled out children at the end', function() {
+  it('should remove nulled out children at the end', () => {
     var PROPS_SEQUENCE = [
@@ -413,3 +444,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should reverse the order of two children', function() {
+  it('should reverse the order of two children', () => {
     var PROPS_SEQUENCE = [
@@ -431,3 +462,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should reverse the order of more than two children', function() {
+  it('should reverse the order of more than two children', () => {
     var PROPS_SEQUENCE = [
@@ -451,3 +482,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should cycle order correctly', function() {
+  it('should cycle order correctly', () => {
     var PROPS_SEQUENCE = [
@@ -486,3 +517,4 @@ describe('ReactMultiChildReconcile', function() {
       {
-        usernameToStatus: {               // Full circle!
+        usernameToStatus: {
+          // Full circle!
           userOne: 'userOneStatus',
@@ -497,3 +529,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should cycle order correctly in the other direction', function() {
+  it('should cycle order correctly in the other direction', () => {
     var PROPS_SEQUENCE = [
@@ -532,3 +564,4 @@ describe('ReactMultiChildReconcile', function() {
       {
-        usernameToStatus: {               // Full circle!
+        usernameToStatus: {
+          // Full circle!
           userOne: 'userOneStatus',
@@ -543,4 +576,3 @@ describe('ReactMultiChildReconcile', function() {
 
-
-  it('should remove nulled out children and ignore new null children', function() {
+  it('should remove nulled out children and ignore new null children', () => {
     var PROPS_SEQUENCE = [
@@ -563,3 +595,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should remove nulled out children and reorder remaining', function() {
+  it('should remove nulled out children and reorder remaining', () => {
     var PROPS_SEQUENCE = [
@@ -569,3 +601,3 @@ describe('ReactMultiChildReconcile', function() {
           jordanjcw: 'jordanjcwStatus',
-          john: 'johnStatus',  // john will go away
+          john: 'johnStatus', // john will go away
           joe: 'joeStatus',
@@ -584,3 +616,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should append children to the end', function() {
+  it('should append children to the end', () => {
     var PROPS_SEQUENCE = [
@@ -603,3 +635,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should append multiple children to the end', function() {
+  it('should append multiple children to the end', () => {
     var PROPS_SEQUENCE = [
@@ -623,3 +655,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should prepend children to the beginning', function() {
+  it('should prepend children to the beginning', () => {
     var PROPS_SEQUENCE = [
@@ -642,3 +674,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should prepend multiple children to the beginning', function() {
+  it('should prepend multiple children to the beginning', () => {
     var PROPS_SEQUENCE = [
@@ -662,3 +694,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should not prepend an empty child to the beginning', function() {
+  it('should not prepend an empty child to the beginning', () => {
     var PROPS_SEQUENCE = [
@@ -681,3 +713,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should not append an empty child to the end', function() {
+  it('should not append an empty child to the end', () => {
     var PROPS_SEQUENCE = [
@@ -700,3 +732,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should not insert empty children in the middle', function() {
+  it('should not insert empty children in the middle', () => {
     var PROPS_SEQUENCE = [
@@ -721,3 +753,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should insert one new child in the middle', function() {
+  it('should insert one new child in the middle', () => {
     var PROPS_SEQUENCE = [
@@ -740,3 +772,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should insert multiple new truthy children in the middle', function() {
+  it('should insert multiple new truthy children in the middle', () => {
     var PROPS_SEQUENCE = [
@@ -761,3 +793,3 @@ describe('ReactMultiChildReconcile', function() {
 
-  it('should insert non-empty children in middle where nulls were', function() {
+  it('should insert non-empty children in middle where nulls were', () => {
     var PROPS_SEQUENCE = [
diff --git a/src/renderers/shared/reconciler/__tests__/ReactMultiChildText-test.js b/src/renderers/shared/stack/reconciler/__tests__/ReactMultiChildText-test.js
similarity index 57%
rename from src/renderers/shared/reconciler/__tests__/ReactMultiChildText-test.js
rename to src/renderers/shared/stack/reconciler/__tests__/ReactMultiChildText-test.js
index 8d8de3d90..549b0d259 100644
--- a/src/renderers/shared/reconciler/__tests__/ReactMultiChildText-test.js
+++ b/src/renderers/shared/stack/reconciler/__tests__/ReactMultiChildText-test.js
@@ -62,3 +62,3 @@ var expectChildren = function(d, children) {
         expect(openingCommentNode.nodeType).toBe(8);
-        expect(openingCommentNode.nodeValue).toMatch(' react-text: [0-9]+ ');
+        expect(openingCommentNode.nodeValue).toMatch(/ react-text: [0-9]+ /);
 
@@ -90,3 +90,2 @@ var expectChildren = function(d, children) {
 
-
 /**
@@ -96,4 +95,4 @@ var expectChildren = function(d, children) {
  */
-describe('ReactMultiChildText', function() {
-  it('should correctly handle all possible children for render and update', function() {
+describe('ReactMultiChildText', () => {
+  it('should correctly handle all possible children for render and update', () => {
     spyOn(console, 'error');
@@ -101,89 +100,155 @@ describe('ReactMultiChildText', function() {
       // basic values
-      undefined, [],
-      null, [],
-      false, [],
-      true, [],
-      0, '0',
-      1.2, '1.2',
-      '', '',
-      'foo', 'foo',
-
-      [], [],
-      [undefined], [],
-      [null], [],
-      [false], [],
-      [true], [],
-      [0], ['0'],
-      [1.2], ['1.2'],
-      [''], [''],
-      ['foo'], ['foo'],
-      [<div />], [<div />],
+      undefined,
+      [],
+      null,
+      [],
+      false,
+      [],
+      true,
+      [],
+      0,
+      '0',
+      1.2,
+      '1.2',
+      '',
+      '',
+      'foo',
+      'foo',
+
+      [],
+      [],
+      [undefined],
+      [],
+      [null],
+      [],
+      [false],
+      [],
+      [true],
+      [],
+      [0],
+      ['0'],
+      [1.2],
+      ['1.2'],
+      [''],
+      [''],
+      ['foo'],
+      ['foo'],
+      [<div />],
+      [<div />],
 
       // two adjacent values
-      [true, 0], ['0'],
-      [0, 0], ['0', '0'],
-      [1.2, 0], ['1.2', '0'],
-      [0, ''], ['0', ''],
-      ['foo', 0], ['foo', '0'],
-      [0, <div />], ['0', <div />],
-
-      [true, 1.2], ['1.2'],
-      [1.2, 0], ['1.2', '0'],
-      [1.2, 1.2], ['1.2', '1.2'],
-      [1.2, ''], ['1.2', ''],
-      ['foo', 1.2], ['foo', '1.2'],
-      [1.2, <div />], ['1.2', <div />],
-
-      [true, ''], [''],
-      ['', 0], ['', '0'],
-      [1.2, ''], ['1.2', ''],
-      ['', ''], ['', ''],
-      ['foo', ''], ['foo', ''],
-      ['', <div />], ['', <div />],
-
-      [true, 'foo'], ['foo'],
-      ['foo', 0], ['foo', '0'],
-      [1.2, 'foo'], ['1.2', 'foo'],
-      ['foo', ''], ['foo', ''],
-      ['foo', 'foo'], ['foo', 'foo'],
-      ['foo', <div />], ['foo', <div />],
+      [true, 0],
+      ['0'],
+      [0, 0],
+      ['0', '0'],
+      [1.2, 0],
+      ['1.2', '0'],
+      [0, ''],
+      ['0', ''],
+      ['foo', 0],
+      ['foo', '0'],
+      [0, <div />],
+      ['0', <div />],
+
+      [true, 1.2],
+      ['1.2'],
+      [1.2, 0],
+      ['1.2', '0'],
+      [1.2, 1.2],
+      ['1.2', '1.2'],
+      [1.2, ''],
+      ['1.2', ''],
+      ['foo', 1.2],
+      ['foo', '1.2'],
+      [1.2, <div />],
+      ['1.2', <div />],
+
+      [true, ''],
+      [''],
+      ['', 0],
+      ['', '0'],
+      [1.2, ''],
+      ['1.2', ''],
+      ['', ''],
+      ['', ''],
+      ['foo', ''],
+      ['foo', ''],
+      ['', <div />],
+      ['', <div />],
+
+      [true, 'foo'],
+      ['foo'],
+      ['foo', 0],
+      ['foo', '0'],
+      [1.2, 'foo'],
+      ['1.2', 'foo'],
+      ['foo', ''],
+      ['foo', ''],
+      ['foo', 'foo'],
+      ['foo', 'foo'],
+      ['foo', <div />],
+      ['foo', <div />],
 
       // values separated by an element
-      [true, <div />, true], [<div />],
-      [1.2, <div />, 1.2], ['1.2', <div />, '1.2'],
-      ['', <div />, ''], ['', <div />, ''],
-      ['foo', <div />, 'foo'], ['foo', <div />, 'foo'],
-
-      [true, 1.2, <div />, '', 'foo'], ['1.2', <div />, '', 'foo'],
-      [1.2, '', <div />, 'foo', true], ['1.2', '', <div />, 'foo'],
-      ['', 'foo', <div />, true, 1.2], ['', 'foo', <div />, '1.2'],
-
-      [true, 1.2, '', <div />, 'foo', true, 1.2], ['1.2', '', <div />, 'foo', '1.2'],
-      ['', 'foo', true, <div />, 1.2, '', 'foo'], ['', 'foo', <div />, '1.2', '', 'foo'],
+      [true, <div />, true],
+      [<div />],
+      [1.2, <div />, 1.2],
+      ['1.2', <div />, '1.2'],
+      ['', <div />, ''],
+      ['', <div />, ''],
+      ['foo', <div />, 'foo'],
+      ['foo', <div />, 'foo'],
+
+      [true, 1.2, <div />, '', 'foo'],
+      ['1.2', <div />, '', 'foo'],
+      [1.2, '', <div />, 'foo', true],
+      ['1.2', '', <div />, 'foo'],
+      ['', 'foo', <div />, true, 1.2],
+      ['', 'foo', <div />, '1.2'],
+
+      [true, 1.2, '', <div />, 'foo', true, 1.2],
+      ['1.2', '', <div />, 'foo', '1.2'],
+      ['', 'foo', true, <div />, 1.2, '', 'foo'],
+      ['', 'foo', <div />, '1.2', '', 'foo'],
 
       // values inside arrays
-      [[true], [true]], [],
-      [[1.2], [1.2]], ['1.2', '1.2'],
-      [[''], ['']], ['', ''],
-      [['foo'], ['foo']], ['foo', 'foo'],
-      [[<div />], [<div />]], [<div />, <div />],
-
-      [[true, 1.2, <div />], '', 'foo'], ['1.2', <div />, '', 'foo'],
-      [1.2, '', [<div />, 'foo', true]], ['1.2', '', <div />, 'foo'],
-      ['', ['foo', <div />, true], 1.2], ['', 'foo', <div />, '1.2'],
-
-      [true, [1.2, '', <div />, 'foo'], true, 1.2], ['1.2', '', <div />, 'foo', '1.2'],
-      ['', 'foo', [true, <div />, 1.2, ''], 'foo'], ['', 'foo', <div />, '1.2', '', 'foo'],
+      [[true], [true]],
+      [],
+      [[1.2], [1.2]],
+      ['1.2', '1.2'],
+      [[''], ['']],
+      ['', ''],
+      [['foo'], ['foo']],
+      ['foo', 'foo'],
+      [[<div />], [<div />]],
+      [<div />, <div />],
+
+      [[true, 1.2, <div />], '', 'foo'],
+      ['1.2', <div />, '', 'foo'],
+      [1.2, '', [<div />, 'foo', true]],
+      ['1.2', '', <div />, 'foo'],
+      ['', ['foo', <div />, true], 1.2],
+      ['', 'foo', <div />, '1.2'],
+
+      [true, [1.2, '', <div />, 'foo'], true, 1.2],
+      ['1.2', '', <div />, 'foo', '1.2'],
+      ['', 'foo', [true, <div />, 1.2, ''], 'foo'],
+      ['', 'foo', <div />, '1.2', '', 'foo'],
 
       // values inside elements
-      [<div>{true}{1.2}{<div />}</div>, '', 'foo'], [<div />, '', 'foo'],
-      [1.2, '', <div>{<div />}{'foo'}{true}</div>], ['1.2', '', <div />],
-      ['', <div>{'foo'}{<div />}{true}</div>, 1.2], ['', <div />, '1.2'],
-
-      [true, <div>{1.2}{''}{<div />}{'foo'}</div>, true, 1.2], [<div />, '1.2'],
-      ['', 'foo', <div>{true}{<div />}{1.2}{''}</div>, 'foo'], ['', 'foo', <div />, 'foo'],
+      [<div>{true}{1.2}{<div />}</div>, '', 'foo'],
+      [<div />, '', 'foo'],
+      [1.2, '', <div>{<div />}{'foo'}{true}</div>],
+      ['1.2', '', <div />],
+      ['', <div>{'foo'}{<div />}{true}</div>, 1.2],
+      ['', <div />, '1.2'],
+
+      [true, <div>{1.2}{''}{<div />}{'foo'}</div>, true, 1.2],
+      [<div />, '1.2'],
+      ['', 'foo', <div>{true}{<div />}{1.2}{''}</div>, 'foo'],
+      ['', 'foo', <div />, 'foo'],
     ]);
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'Warning: Each child in an array or iterator should have a unique "key" prop.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'Warning: Each child in an array or iterator should have a unique "key" prop.',
     );
@@ -191,6 +256,6 @@ describe('ReactMultiChildText', function() {
 
-  it('should throw if rendering both HTML and children', function() {
+  it('should throw if rendering both HTML and children', () => {
     expect(function() {
       ReactTestUtils.renderIntoDocument(
-        <div dangerouslySetInnerHTML={{__html: 'abcdef'}}>ghjkl</div>
+        <div dangerouslySetInnerHTML={{__html: 'abcdef'}}>ghjkl</div>,
       );
@@ -199,3 +264,3 @@ describe('ReactMultiChildText', function() {
 
-  it('should render between nested components and inline children', function() {
+  it('should render between nested components and inline children', () => {
     ReactTestUtils.renderIntoDocument(<div><h1><span /><span /></h1></div>);
@@ -215,3 +280,3 @@ describe('ReactMultiChildText', function() {
 
-  it('should reorder keyed text nodes', function() {
+  it('should reorder keyed text nodes', () => {
     spyOn(console, 'error');
@@ -221,3 +286,3 @@ describe('ReactMultiChildText', function() {
       <div>{new Map([['a', 'alpha'], ['b', 'beta']])}</div>,
-      container
+      container,
     );
@@ -234,3 +299,3 @@ describe('ReactMultiChildText', function() {
       <div>{new Map([['b', 'beta'], ['a', 'alpha']])}</div>,
-      container
+      container,
     );
@@ -246,3 +311,3 @@ describe('ReactMultiChildText', function() {
     // Using Maps as children gives a single warning
-    expect(console.error.calls.length).toBe(1);
+    expect(console.error.calls.count()).toBe(1);
   });
diff --git a/src/renderers/shared/reconciler/__tests__/ReactStatelessComponent-test.js b/src/renderers/shared/stack/reconciler/__tests__/ReactStatelessComponent-test.js
similarity index 51%
rename from src/renderers/shared/reconciler/__tests__/ReactStatelessComponent-test.js
rename to src/renderers/shared/stack/reconciler/__tests__/ReactStatelessComponent-test.js
index 8e0c8ac49..e55850bed 100644
--- a/src/renderers/shared/reconciler/__tests__/ReactStatelessComponent-test.js
+++ b/src/renderers/shared/stack/reconciler/__tests__/ReactStatelessComponent-test.js
@@ -13,2 +13,3 @@
 
+var PropTypes;
 var React;
@@ -21,5 +22,4 @@ function StatelessComponent(props) {
 
-describe('ReactStatelessComponent', function() {
-
-  beforeEach(function() {
+describe('ReactStatelessComponent', () => {
+  beforeEach(() => {
     React = require('React');
@@ -27,5 +27,6 @@ describe('ReactStatelessComponent', function() {
     ReactTestUtils = require('ReactTestUtils');
+    PropTypes = require('prop-types');
   });
 
-  it('should render stateless component', function() {
+  it('should render stateless component', () => {
     var el = document.createElement('div');
@@ -36,8 +37,8 @@ describe('ReactStatelessComponent', function() {
 
-  it('should update stateless component', function() {
-    var Parent = React.createClass({
+  it('should update stateless component', () => {
+    class Parent extends React.Component {
       render() {
         return <StatelessComponent {...this.props} />;
-      },
-    });
+      }
+    }
 
@@ -51,3 +52,3 @@ describe('ReactStatelessComponent', function() {
 
-  it('should unmount stateless component', function() {
+  it('should unmount stateless component', () => {
     var container = document.createElement('div');
@@ -61,12 +62,12 @@ describe('ReactStatelessComponent', function() {
 
-  it('should pass context thru stateless component', function() {
-    var Child = React.createClass({
-      contextTypes: {
-        test: React.PropTypes.string.isRequired,
-      },
+  it('should pass context thru stateless component', () => {
+    class Child extends React.Component {
+      static contextTypes = {
+        test: PropTypes.string.isRequired,
+      };
 
-      render: function() {
+      render() {
         return <div>{this.context.test}</div>;
-      },
-    });
+      }
+    }
 
@@ -76,6 +77,6 @@ describe('ReactStatelessComponent', function() {
 
-    var GrandParent = React.createClass({
-      childContextTypes: {
-        test: React.PropTypes.string.isRequired,
-      },
+    class GrandParent extends React.Component {
+      static childContextTypes = {
+        test: PropTypes.string.isRequired,
+      };
 
@@ -83,8 +84,8 @@ describe('ReactStatelessComponent', function() {
         return {test: this.props.test};
-      },
+      }
 
-      render: function() {
+      render() {
         return <Parent />;
-      },
-    });
+      }
+    }
 
@@ -100,3 +101,24 @@ describe('ReactStatelessComponent', function() {
 
-  it('should warn when stateless component returns array', function() {
+  it('should warn for childContextTypes on a functional component', () => {
+    spyOn(console, 'error');
+    function StatelessComponentWithChildContext(props) {
+      return <div>{props.name}</div>;
+    }
+
+    StatelessComponentWithChildContext.childContextTypes = {
+      foo: PropTypes.string,
+    };
+
+    var container = document.createElement('div');
+
+    ReactDOM.render(<StatelessComponentWithChildContext name="A" />, container);
+
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'StatelessComponentWithChildContext(...): childContextTypes cannot ' +
+        'be defined on a functional component.',
+    );
+  });
+
+  it('should warn when stateless component returns array', () => {
     spyOn(console, 'error');
@@ -108,6 +130,6 @@ describe('ReactStatelessComponent', function() {
     }).toThrow();
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'NotAComponent(...): A valid React element (or null) must be returned. '+
-      'You may have returned undefined, an array or some other invalid object.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'NotAComponent(...): A valid React element (or null) must be returned. ' +
+        'You may have returned undefined, an array or some other invalid object.',
     );
@@ -115,3 +137,3 @@ describe('ReactStatelessComponent', function() {
 
-  it('should throw on string refs in pure functions', function() {
+  it('should throw on string refs in pure functions', () => {
     function Child() {
@@ -122,23 +144,23 @@ describe('ReactStatelessComponent', function() {
       ReactTestUtils.renderIntoDocument(<Child test="test" />);
-    }).toThrow(
-      'Stateless function components cannot have refs.'
-    );
+    }).toThrowError('Stateless function components cannot have refs.');
   });
 
-  it('should warn when given a ref', function() {
+  it('should warn when given a ref', () => {
     spyOn(console, 'error');
 
-    var Parent = React.createClass({
-      displayName: 'Parent',
-      render: function() {
-        return <StatelessComponent name="A" ref="stateless"/>;
-      },
-    });
-    ReactTestUtils.renderIntoDocument(<Parent/>);
+    class Parent extends React.Component {
+      static displayName = 'Parent';
+
+      render() {
+        return <StatelessComponent name="A" ref="stateless" />;
+      }
+    }
+
+    ReactTestUtils.renderIntoDocument(<Parent />);
 
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'Stateless function components cannot be given refs ' +
-      '(See ref "stateless" in StatelessComponent created by Parent). ' +
-      'Attempts to access this ref will fail.'
+        '(See ref "stateless" in StatelessComponent created by Parent). ' +
+        'Attempts to access this ref will fail.',
     );
@@ -146,3 +168,3 @@ describe('ReactStatelessComponent', function() {
 
-  it('should provide a null ref', function() {
+  it('should provide a null ref', () => {
     function Child() {
@@ -155,3 +177,3 @@ describe('ReactStatelessComponent', function() {
 
-  it('should use correct name in key warning', function() {
+  it('should use correct name in key warning', () => {
     function Child() {
@@ -162,8 +184,8 @@ describe('ReactStatelessComponent', function() {
     ReactTestUtils.renderIntoDocument(<Child />);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain('a unique "key" prop');
-    expect(console.error.argsForCall[0][0]).toContain('Child');
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain('a unique "key" prop');
+    expect(console.error.calls.argsFor(0)[0]).toContain('Child');
   });
 
-  it('should support default props and prop types', function() {
+  it('should support default props and prop types', () => {
     function Child(props) {
@@ -172,3 +194,3 @@ describe('ReactStatelessComponent', function() {
     Child.defaultProps = {test: 2};
-    Child.propTypes = {test: React.PropTypes.string};
+    Child.propTypes = {test: PropTypes.string};
 
@@ -176,6 +198,9 @@ describe('ReactStatelessComponent', function() {
     ReactTestUtils.renderIntoDocument(<Child />);
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toBe(
-      'Warning: Failed propType: Invalid prop `test` of type `number` ' +
-      'supplied to `Child`, expected `string`.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(
+      console.error.calls.argsFor(0)[0].replace(/\(at .+?:\d+\)/g, '(at **)'),
+    ).toBe(
+      'Warning: Failed prop type: Invalid prop `test` of type `number` ' +
+        'supplied to `Child`, expected `string`.\n' +
+        '    in Child (at **)',
     );
@@ -183,14 +208,17 @@ describe('ReactStatelessComponent', function() {
 
-  it('should receive context', function() {
-    var Parent = React.createClass({
-      childContextTypes: {
-        lang: React.PropTypes.string,
-      },
-      getChildContext: function() {
+  it('should receive context', () => {
+    class Parent extends React.Component {
+      static childContextTypes = {
+        lang: PropTypes.string,
+      };
+
+      getChildContext() {
         return {lang: 'en'};
-      },
-      render: function() {
+      }
+
+      render() {
         return <Child />;
-      },
-    });
+      }
+    }
+
     function Child(props, context) {
@@ -198,3 +226,3 @@ describe('ReactStatelessComponent', function() {
     }
-    Child.contextTypes = {lang: React.PropTypes.string};
+    Child.contextTypes = {lang: PropTypes.string};
 
@@ -205,3 +233,3 @@ describe('ReactStatelessComponent', function() {
 
-  it('should work with arrow functions', function() {
+  it('should work with arrow functions', () => {
     var Child = function() {
@@ -216,3 +244,3 @@ describe('ReactStatelessComponent', function() {
 
-  it('should allow simple functions to return null', function() {
+  it('should allow simple functions to return null', () => {
     var Child = function() {
@@ -223,3 +251,3 @@ describe('ReactStatelessComponent', function() {
 
-  it('should allow simple functions to return false', function() {
+  it('should allow simple functions to return false', () => {
     function Child() {
@@ -230,3 +258,3 @@ describe('ReactStatelessComponent', function() {
 
-  it('should warn when using non-React functions in JSX', function() {
+  it('should warn when using non-React functions in JSX', () => {
     spyOn(console, 'error');
@@ -237,7 +265,7 @@ describe('ReactStatelessComponent', function() {
       ReactTestUtils.renderIntoDocument(<div><NotAComponent /></div>);
-    }).toThrow();  // has no method 'render'
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    }).toThrow(); // has no method 'render'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'NotAComponent(...): A valid React element (or null) must be returned. You may ' +
-      'have returned undefined, an array or some other invalid object.'
+        'have returned undefined, an array or some other invalid object.',
     );
diff --git a/src/renderers/shared/reconciler/__tests__/ReactUpdates-test.js b/src/renderers/shared/stack/reconciler/__tests__/ReactUpdates-test.js
similarity index 65%
rename from src/renderers/shared/reconciler/__tests__/ReactUpdates-test.js
rename to src/renderers/shared/stack/reconciler/__tests__/ReactUpdates-test.js
index f59193d69..e676e87a2 100644
--- a/src/renderers/shared/reconciler/__tests__/ReactUpdates-test.js
+++ b/src/renderers/shared/stack/reconciler/__tests__/ReactUpdates-test.js
@@ -18,4 +18,4 @@ var ReactUpdates;
 
-describe('ReactUpdates', function() {
-  beforeEach(function() {
+describe('ReactUpdates', () => {
+  beforeEach(() => {
     React = require('React');
@@ -26,15 +26,16 @@ describe('ReactUpdates', function() {
 
-  it('should batch state when updating state twice', function() {
+  it('should batch state when updating state twice', () => {
     var updateCount = 0;
-    var Component = React.createClass({
-      getInitialState: function() {
-        return {x: 0};
-      },
-      componentDidUpdate: function() {
+
+    class Component extends React.Component {
+      state = {x: 0};
+
+      componentDidUpdate() {
         updateCount++;
-      },
-      render: function() {
+      }
+
+      render() {
         return <div>{this.state.x}</div>;
-      },
-    });
+      }
+    }
 
@@ -54,15 +55,16 @@ describe('ReactUpdates', function() {
 
-  it('should batch state when updating two different state keys', function() {
+  it('should batch state when updating two different state keys', () => {
     var updateCount = 0;
-    var Component = React.createClass({
-      getInitialState: function() {
-        return {x: 0, y: 0};
-      },
-      componentDidUpdate: function() {
+
+    class Component extends React.Component {
+      state = {x: 0, y: 0};
+
+      componentDidUpdate() {
         updateCount++;
-      },
-      render: function() {
+      }
+
+      render() {
         return <div>({this.state.x}, {this.state.y})</div>;
-      },
-    });
+      }
+    }
 
@@ -85,15 +87,16 @@ describe('ReactUpdates', function() {
 
-  it('should batch state and props together', function() {
+  it('should batch state and props together', () => {
     var updateCount = 0;
-    var Component = React.createClass({
-      getInitialState: function() {
-        return {y: 0};
-      },
-      componentDidUpdate: function() {
+
+    class Component extends React.Component {
+      state = {y: 0};
+
+      componentDidUpdate() {
         updateCount++;
-      },
-      render: function() {
+      }
+
+      render() {
         return <div>({this.props.x}, {this.state.y})</div>;
-      },
-    });
+      }
+    }
 
@@ -117,27 +120,30 @@ describe('ReactUpdates', function() {
 
-  it('should batch parent/child state updates together', function() {
+  it('should batch parent/child state updates together', () => {
     var parentUpdateCount = 0;
-    var Parent = React.createClass({
-      getInitialState: function() {
-        return {x: 0};
-      },
-      componentDidUpdate: function() {
+
+    class Parent extends React.Component {
+      state = {x: 0};
+
+      componentDidUpdate() {
         parentUpdateCount++;
-      },
-      render: function() {
+      }
+
+      render() {
         return <div><Child ref="child" x={this.state.x} /></div>;
-      },
-    });
+      }
+    }
+
     var childUpdateCount = 0;
-    var Child = React.createClass({
-      getInitialState: function() {
-        return {y: 0};
-      },
-      componentDidUpdate: function() {
+
+    class Child extends React.Component {
+      state = {y: 0};
+
+      componentDidUpdate() {
         childUpdateCount++;
-      },
-      render: function() {
+      }
+
+      render() {
         return <div>{this.props.x + this.state.y}</div>;
-      },
-    });
+      }
+    }
 
@@ -163,27 +169,30 @@ describe('ReactUpdates', function() {
 
-  it('should batch child/parent state updates together', function() {
+  it('should batch child/parent state updates together', () => {
     var parentUpdateCount = 0;
-    var Parent = React.createClass({
-      getInitialState: function() {
-        return {x: 0};
-      },
-      componentDidUpdate: function() {
+
+    class Parent extends React.Component {
+      state = {x: 0};
+
+      componentDidUpdate() {
         parentUpdateCount++;
-      },
-      render: function() {
+      }
+
+      render() {
         return <div><Child ref="child" x={this.state.x} /></div>;
-      },
-    });
+      }
+    }
+
     var childUpdateCount = 0;
-    var Child = React.createClass({
-      getInitialState: function() {
-        return {y: 0};
-      },
-      componentDidUpdate: function() {
+
+    class Child extends React.Component {
+      state = {y: 0};
+
+      componentDidUpdate() {
         childUpdateCount++;
-      },
-      render: function() {
+      }
+
+      render() {
         return <div>{this.props.x + this.state.y}</div>;
-      },
-    });
+      }
+    }
 
@@ -211,15 +220,16 @@ describe('ReactUpdates', function() {
 
-  it('should support chained state updates', function() {
+  it('should support chained state updates', () => {
     var updateCount = 0;
-    var Component = React.createClass({
-      getInitialState: function() {
-        return {x: 0};
-      },
-      componentDidUpdate: function() {
+
+    class Component extends React.Component {
+      state = {x: 0};
+
+      componentDidUpdate() {
         updateCount++;
-      },
-      render: function() {
+      }
+
+      render() {
         return <div>{this.state.x}</div>;
-      },
-    });
+      }
+    }
 
@@ -249,19 +259,21 @@ describe('ReactUpdates', function() {
 
-  it('should batch forceUpdate together', function() {
+  it('should batch forceUpdate together', () => {
     var shouldUpdateCount = 0;
     var updateCount = 0;
-    var Component = React.createClass({
-      getInitialState: function() {
-        return {x: 0};
-      },
-      shouldComponentUpdate: function() {
+
+    class Component extends React.Component {
+      state = {x: 0};
+
+      shouldComponentUpdate() {
         shouldUpdateCount++;
-      },
-      componentDidUpdate: function() {
+      }
+
+      componentDidUpdate() {
         updateCount++;
-      },
-      render: function() {
+      }
+
+      render() {
         return <div>{this.state.x}</div>;
-      },
-    });
+      }
+    }
 
@@ -289,3 +301,3 @@ describe('ReactUpdates', function() {
 
-  it('should update children even if parent blocks updates', function() {
+  it('should update children even if parent blocks updates', () => {
     var parentRenderCount = 0;
@@ -293,19 +305,19 @@ describe('ReactUpdates', function() {
 
-    var Parent = React.createClass({
-      shouldComponentUpdate: function() {
+    class Parent extends React.Component {
+      shouldComponentUpdate() {
         return false;
-      },
+      }
 
-      render: function() {
+      render() {
         parentRenderCount++;
         return <Child ref="child" />;
-      },
-    });
+      }
+    }
 
-    var Child = React.createClass({
-      render: function() {
+    class Child extends React.Component {
+      render() {
         childRenderCount++;
         return <div />;
-      },
-    });
+      }
+    }
 
@@ -335,3 +347,3 @@ describe('ReactUpdates', function() {
 
-  it('should not reconcile children passed via props', function() {
+  it('should not reconcile children passed via props', () => {
     var numMiddleRenders = 0;
@@ -339,25 +351,25 @@ describe('ReactUpdates', function() {
 
-    var Top = React.createClass({
-      render: function() {
+    class Top extends React.Component {
+      render() {
         return <Middle><Bottom /></Middle>;
-      },
-    });
+      }
+    }
 
-    var Middle = React.createClass({
-      componentDidMount: function() {
+    class Middle extends React.Component {
+      componentDidMount() {
         this.forceUpdate();
-      },
+      }
 
-      render: function() {
+      render() {
         numMiddleRenders++;
         return React.Children.only(this.props.children);
-      },
-    });
+      }
+    }
 
-    var Bottom = React.createClass({
-      render: function() {
+    class Bottom extends React.Component {
+      render() {
         numBottomRenders++;
         return null;
-      },
-    });
+      }
+    }
 
@@ -368,3 +380,3 @@ describe('ReactUpdates', function() {
 
-  it('should flow updates correctly', function() {
+  it('should flow updates correctly', () => {
     var willUpdates = [];
@@ -381,26 +393,19 @@ describe('ReactUpdates', function() {
 
-    var Box = React.createClass({
-      mixins: [UpdateLoggingMixin],
-
-      render: function() {
+    class Box extends React.Component {
+      render() {
         return <div ref="boxDiv">{this.props.children}</div>;
-      },
-    });
-
-    var Child = React.createClass({
-      mixins: [UpdateLoggingMixin],
+      }
+    }
+    Object.assign(Box.prototype, UpdateLoggingMixin);
 
-      render: function() {
+    class Child extends React.Component {
+      render() {
         return <span ref="span">child</span>;
-      },
-    });
-
-    var Switcher = React.createClass({
-      mixins: [UpdateLoggingMixin],
-
-      getInitialState: function() {
-        return {tabKey: 'hello'};
-      },
+      }
+    }
+    Object.assign(Child.prototype, UpdateLoggingMixin);
 
-      render: function() {
+    class Switcher extends React.Component {
+      state = {tabKey: 'hello'};
+      render() {
         var child = this.props.children;
@@ -418,9 +423,8 @@ describe('ReactUpdates', function() {
         );
-      },
-    });
-
-    var App = React.createClass({
-      mixins: [UpdateLoggingMixin],
+      }
+    }
+    Object.assign(Switcher.prototype, UpdateLoggingMixin);
 
-      render: function() {
+    class App extends React.Component {
+      render() {
         return (
@@ -430,4 +434,5 @@ describe('ReactUpdates', function() {
         );
-      },
-    });
+      }
+    }
+    Object.assign(App.prototype, UpdateLoggingMixin);
 
@@ -477,3 +482,3 @@ describe('ReactUpdates', function() {
       ['Switcher', 'Box'],
-      ['Box', 'Switcher']
+      ['Box', 'Switcher'],
     );
@@ -484,3 +489,3 @@ describe('ReactUpdates', function() {
       ['Box', 'Child'],
-      ['Box', 'Child']
+      ['Box', 'Child'],
     );
@@ -491,3 +496,3 @@ describe('ReactUpdates', function() {
       ['Switcher', 'Box', 'Child'],
-      ['Box', 'Switcher', 'Child']
+      ['Box', 'Switcher', 'Child'],
     );
@@ -495,11 +500,11 @@ describe('ReactUpdates', function() {
 
-  it('should share reconcile transaction across different roots', function() {
+  it('should share reconcile transaction across different roots', () => {
     var ReconcileTransaction = ReactUpdates.ReactReconcileTransaction;
-    spyOn(ReconcileTransaction, 'getPooled').andCallThrough();
+    spyOn(ReconcileTransaction, 'getPooled').and.callThrough();
 
-    var Component = React.createClass({
-      render: function() {
+    class Component extends React.Component {
+      render() {
         return <div>{this.props.text}</div>;
-      },
-    });
+      }
+    }
 
@@ -513,3 +518,3 @@ describe('ReactUpdates', function() {
     });
-    expect(ReconcileTransaction.getPooled.calls.length).toBe(2);
+    expect(ReconcileTransaction.getPooled.calls.count()).toBe(2);
 
@@ -521,6 +526,6 @@ describe('ReactUpdates', function() {
     });
-    expect(ReconcileTransaction.getPooled.calls.length).toBe(3);
+    expect(ReconcileTransaction.getPooled.calls.count()).toBe(3);
   });
 
-  it('should queue mount-ready handlers across different roots', function() {
+  it('should queue mount-ready handlers across different roots', () => {
     // We'll define two components A and B, then update both of them. When A's
@@ -534,23 +539,22 @@ describe('ReactUpdates', function() {
 
-    var A = React.createClass({
-      getInitialState: function() {
-        return {x: 0};
-      },
-      componentDidUpdate: function() {
+    class A extends React.Component {
+      state = {x: 0};
+
+      componentDidUpdate() {
         expect(ReactDOM.findDOMNode(b).textContent).toBe('B1');
         aUpdated = true;
-      },
-      render: function() {
+      }
+
+      render() {
         return <div>A{this.state.x}</div>;
-      },
-    });
+      }
+    }
 
-    var B = React.createClass({
-      getInitialState: function() {
-        return {x: 0};
-      },
-      render: function() {
+    class B extends React.Component {
+      state = {x: 0};
+
+      render() {
         return <div>B{this.state.x}</div>;
-      },
-    });
+      }
+    }
 
@@ -567,13 +571,14 @@ describe('ReactUpdates', function() {
 
-  it('should flush updates in the correct order', function() {
+  it('should flush updates in the correct order', () => {
     var updates = [];
-    var Outer = React.createClass({
-      getInitialState: function() {
-        return {x: 0};
-      },
-      render: function() {
+
+    class Outer extends React.Component {
+      state = {x: 0};
+
+      render() {
         updates.push('Outer-render-' + this.state.x);
         return <div><Inner x={this.state.x} ref="inner" /></div>;
-      },
-      componentDidUpdate: function() {
+      }
+
+      componentDidUpdate() {
         var x = this.state.x;
@@ -584,16 +589,17 @@ describe('ReactUpdates', function() {
         });
-      },
-    });
-    var Inner = React.createClass({
-      getInitialState: function() {
-        return {x: 0};
-      },
-      render: function() {
+      }
+    }
+
+    class Inner extends React.Component {
+      state = {x: 0};
+
+      render() {
         updates.push('Inner-render-' + this.props.x + '-' + this.state.x);
         return <div />;
-      },
-      componentDidUpdate: function() {
+      }
+
+      componentDidUpdate() {
         updates.push('Inner-didUpdate-' + this.props.x + '-' + this.state.x);
-      },
-    });
+      }
+    }
 
@@ -613,13 +619,13 @@ describe('ReactUpdates', function() {
       'Outer-render-0',
-        'Inner-render-0-0',
+      'Inner-render-0-0',
 
       'Outer-setState-1',
-        'Outer-render-1',
-          'Inner-render-1-0',
-          'Inner-didUpdate-1-0',
-        'Outer-didUpdate-1',
-          'Inner-setState-1',
-            'Inner-render-1-1',
-            'Inner-didUpdate-1-1',
-          'Inner-callback-1',
+      'Outer-render-1',
+      'Inner-render-1-0',
+      'Inner-didUpdate-1-0',
+      'Outer-didUpdate-1',
+      'Inner-setState-1',
+      'Inner-render-1-1',
+      'Inner-didUpdate-1-1',
+      'Inner-callback-1',
       'Outer-callback-1',
@@ -627,10 +633,10 @@ describe('ReactUpdates', function() {
       'Outer-setState-2',
-        'Outer-render-2',
-          'Inner-render-2-1',
-          'Inner-didUpdate-2-1',
-        'Outer-didUpdate-2',
-          'Inner-setState-2',
-            'Inner-render-2-2',
-            'Inner-didUpdate-2-2',
-          'Inner-callback-2',
+      'Outer-render-2',
+      'Inner-render-2-1',
+      'Inner-didUpdate-2-1',
+      'Outer-didUpdate-2',
+      'Inner-setState-2',
+      'Inner-render-2-2',
+      'Inner-didUpdate-2-2',
+      'Inner-callback-2',
       'Outer-callback-2',
@@ -640,3 +646,3 @@ describe('ReactUpdates', function() {
 
-  it('should flush updates in the correct order across roots', function() {
+  it('should flush updates in the correct order across roots', () => {
     var instances = [];
@@ -644,8 +650,9 @@ describe('ReactUpdates', function() {
 
-    var MockComponent = React.createClass({
-      render: function() {
+    class MockComponent extends React.Component {
+      render() {
         updates.push(this.props.depth);
         return <div />;
-      },
-      componentDidMount: function() {
+      }
+
+      componentDidMount() {
         instances.push(this);
@@ -657,7 +664,7 @@ describe('ReactUpdates', function() {
             />,
-            ReactDOM.findDOMNode(this)
+            ReactDOM.findDOMNode(this),
           );
         }
-      },
-    });
+      }
+    }
 
@@ -677,10 +684,9 @@ describe('ReactUpdates', function() {
 
-  it('should queue nested updates', function() {
+  it('should queue nested updates', () => {
     // See https://github.com/facebook/react/issues/1147
 
-    var X = React.createClass({
-      getInitialState: function() {
-        return {s: 0};
-      },
-      render: function() {
+    class X extends React.Component {
+      state = {s: 0};
+
+      render() {
         if (this.state.s === 0) {
@@ -694,4 +700,5 @@ describe('ReactUpdates', function() {
         }
-      },
-      go: function() {
+      }
+
+      go = () => {
         this.setState({s: 1});
@@ -699,7 +706,7 @@ describe('ReactUpdates', function() {
         this.setState({s: 1});
-      },
-    });
+      };
+    }
 
-    var Y = React.createClass({
-      render: function() {
+    class Y extends React.Component {
+      render() {
         return (
@@ -709,13 +716,14 @@ describe('ReactUpdates', function() {
         );
-      },
-    });
+      }
+    }
 
-    var Z = React.createClass({
-      render: function() {
+    class Z extends React.Component {
+      render() {
         return <div />;
-      },
-      componentWillUpdate: function() {
+      }
+
+      componentWillUpdate() {
         x.go();
-      },
-    });
+      }
+    }
 
@@ -732,3 +740,3 @@ describe('ReactUpdates', function() {
 
-  it('should queue updates from during mount', function() {
+  it('should queue updates from during mount', () => {
     // See https://github.com/facebook/react/issues/1353
@@ -736,22 +744,23 @@ describe('ReactUpdates', function() {
 
-    var A = React.createClass({
-      getInitialState: function() {
-        return {x: 0};
-      },
-      componentWillMount: function() {
+    class A extends React.Component {
+      state = {x: 0};
+
+      componentWillMount() {
         a = this;
-      },
-      render: function() {
+      }
+
+      render() {
         return <div>A{this.state.x}</div>;
-      },
-    });
+      }
+    }
 
-    var B = React.createClass({
-      componentWillMount: function() {
+    class B extends React.Component {
+      componentWillMount() {
         a.setState({x: 1});
-      },
-      render: function() {
+      }
+
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
@@ -762,3 +771,3 @@ describe('ReactUpdates', function() {
           <B />
-        </div>
+        </div>,
       );
@@ -770,9 +779,9 @@ describe('ReactUpdates', function() {
 
-  it('calls componentWillReceiveProps setState callback properly', function() {
+  it('calls componentWillReceiveProps setState callback properly', () => {
     var callbackCount = 0;
-    var A = React.createClass({
-      getInitialState: function() {
-        return {x: this.props.x};
-      },
-      componentWillReceiveProps: function(nextProps) {
+
+    class A extends React.Component {
+      state = {x: this.props.x};
+
+      componentWillReceiveProps(nextProps) {
         var newX = nextProps.x;
@@ -783,7 +792,8 @@ describe('ReactUpdates', function() {
         });
-      },
-      render: function() {
+      }
+
+      render() {
         return <div>{this.state.x}</div>;
-      },
-    });
+      }
+    }
 
@@ -795,9 +805,11 @@ describe('ReactUpdates', function() {
 
-  it('calls asap callbacks properly', function() {
+  it('calls asap callbacks properly', () => {
     var callbackCount = 0;
-    var A = React.createClass({
-      render: function() {
+
+    class A extends React.Component {
+      render() {
         return <div />;
-      },
-      componentDidUpdate: function() {
+      }
+
+      componentDidUpdate() {
         ReactUpdates.asap(function() {
@@ -811,4 +823,4 @@ describe('ReactUpdates', function() {
         expect(callbackCount).toBe(0);
-      },
-    });
+      }
+    }
 
@@ -819,11 +831,14 @@ describe('ReactUpdates', function() {
 
-  it('calls asap callbacks with queued updates', function() {
+  it('calls asap callbacks with queued updates', () => {
     var log = [];
-    var A = React.createClass({
-      getInitialState: () => ({updates: 0}),
-      render: function() {
+
+    class A extends React.Component {
+      state = {updates: 0};
+
+      render() {
         log.push('render-' + this.state.updates);
         return <div />;
-      },
-      componentDidUpdate: function() {
+      }
+
+      componentDidUpdate() {
         if (this.state.updates === 1) {
@@ -844,4 +859,4 @@ describe('ReactUpdates', function() {
         log.push('didUpdate-' + this.state.updates);
-      },
-    });
+      }
+    }
 
@@ -867,4 +882,3 @@ describe('ReactUpdates', function() {
 
-  it('does not call render after a component as been deleted', function() {
-
+  it('does not call render after a component as been deleted', () => {
     var renderCount = 0;
@@ -872,23 +886,22 @@ describe('ReactUpdates', function() {
 
-    var B = React.createClass({
-      getInitialState: function() {
-        return {updates: 0};
-      },
-      componentDidMount: function() {
+    class B extends React.Component {
+      state = {updates: 0};
+
+      componentDidMount() {
         componentB = this;
-      },
-      render: function() {
+      }
+
+      render() {
         renderCount++;
         return <div />;
-      },
-    });
+      }
+    }
 
-    var A = React.createClass({
-      getInitialState: function() {
-        return {showB: true};
-      },
-      render: function() {
+    class A extends React.Component {
+      state = {showB: true};
+
+      render() {
         return this.state.showB ? <B /> : <div />;
-      },
-    });
+      }
+    }
 
@@ -906,16 +919,16 @@ describe('ReactUpdates', function() {
 
-  it('marks top-level updates', function() {
+  it('marks top-level updates', () => {
     var ReactFeatureFlags = require('ReactFeatureFlags');
 
-    var Foo = React.createClass({
-      render: function() {
+    class Foo extends React.Component {
+      render() {
         return <Bar />;
-      },
-    });
+      }
+    }
 
-    var Bar = React.createClass({
-      render: function() {
+    class Bar extends React.Component {
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
@@ -931,6 +944,6 @@ describe('ReactUpdates', function() {
 
-      expect(console.time.argsForCall.length).toBe(1);
-      expect(console.time.argsForCall[0][0]).toBe('React update: Foo');
-      expect(console.timeEnd.argsForCall.length).toBe(1);
-      expect(console.timeEnd.argsForCall[0][0]).toBe('React update: Foo');
+      expect(console.time.calls.count()).toBe(1);
+      expect(console.time.calls.argsFor(0)[0]).toBe('React update: Foo');
+      expect(console.timeEnd.calls.count()).toBe(1);
+      expect(console.timeEnd.calls.argsFor(0)[0]).toBe('React update: Foo');
     } finally {
@@ -940,3 +953,3 @@ describe('ReactUpdates', function() {
 
-  it('throws in setState if the update callback is not a function', function() {
+  it('throws in setState if the update callback is not a function', () => {
     function Foo() {
@@ -945,23 +958,24 @@ describe('ReactUpdates', function() {
     }
-    var A = React.createClass({
-      getInitialState: function() {
-        return {};
-      },
-      render: function() {
+
+    class A extends React.Component {
+      state = {};
+
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
+
     var component = ReactTestUtils.renderIntoDocument(<A />);
 
-    expect(() => component.setState({}, 'no')).toThrow(
+    expect(() => component.setState({}, 'no')).toThrowError(
       'setState(...): Expected the last optional `callback` argument ' +
-      'to be a function. Instead received: string.'
+        'to be a function. Instead received: string.',
     );
-    expect(() => component.setState({}, {})).toThrow(
+    expect(() => component.setState({}, {})).toThrowError(
       'setState(...): Expected the last optional `callback` argument ' +
-      'to be a function. Instead received: Object.'
+        'to be a function. Instead received: Object.',
     );
-    expect(() => component.setState({}, new Foo())).toThrow(
+    expect(() => component.setState({}, new Foo())).toThrowError(
       'setState(...): Expected the last optional `callback` argument ' +
-      'to be a function. Instead received: Foo (keys: a, b).'
+        'to be a function. Instead received: Foo (keys: a, b).',
     );
@@ -969,3 +983,3 @@ describe('ReactUpdates', function() {
 
-  it('throws in replaceState if the update callback is not a function', function() {
+  it('throws in forceUpdate if the update callback is not a function', () => {
     function Foo() {
@@ -974,23 +988,24 @@ describe('ReactUpdates', function() {
     }
-    var A = React.createClass({
-      getInitialState: function() {
-        return {};
-      },
-      render: function() {
+
+    class A extends React.Component {
+      state = {};
+
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
+
     var component = ReactTestUtils.renderIntoDocument(<A />);
 
-    expect(() => component.replaceState({}, 'no')).toThrow(
-      'replaceState(...): Expected the last optional `callback` argument ' +
-      'to be a function. Instead received: string.'
+    expect(() => component.forceUpdate('no')).toThrowError(
+      'forceUpdate(...): Expected the last optional `callback` argument ' +
+        'to be a function. Instead received: string.',
     );
-    expect(() => component.replaceState({}, {})).toThrow(
-      'replaceState(...): Expected the last optional `callback` argument ' +
-      'to be a function. Instead received: Object.'
+    expect(() => component.forceUpdate({})).toThrowError(
+      'forceUpdate(...): Expected the last optional `callback` argument ' +
+        'to be a function. Instead received: Object.',
     );
-    expect(() => component.replaceState({}, new Foo())).toThrow(
-      'replaceState(...): Expected the last optional `callback` argument ' +
-      'to be a function. Instead received: Foo (keys: a, b).'
+    expect(() => component.forceUpdate(new Foo())).toThrowError(
+      'forceUpdate(...): Expected the last optional `callback` argument ' +
+        'to be a function. Instead received: Foo (keys: a, b).',
     );
@@ -998,29 +1013,107 @@ describe('ReactUpdates', function() {
 
-  it('throws in forceUpdate if the update callback is not a function', function() {
-    function Foo() {
-      this.a = 1;
-      this.b = 2;
+  it('does not update one component twice in a batch (#2410)', () => {
+    class Parent extends React.Component {
+      getChild = () => {
+        return this.refs.child;
+      };
+
+      render() {
+        return <Child ref="child" />;
+      }
     }
-    var A = React.createClass({
-      getInitialState: function() {
-        return {};
-      },
-      render: function() {
+
+    var renderCount = 0;
+    var postRenderCount = 0;
+    var once = false;
+
+    class Child extends React.Component {
+      state = {updated: false};
+
+      componentWillUpdate() {
+        if (!once) {
+          once = true;
+          this.setState({updated: true});
+        }
+      }
+
+      componentDidMount() {
+        expect(renderCount).toBe(postRenderCount + 1);
+        postRenderCount++;
+      }
+
+      componentDidUpdate() {
+        expect(renderCount).toBe(postRenderCount + 1);
+        postRenderCount++;
+      }
+
+      render() {
+        expect(renderCount).toBe(postRenderCount);
+        renderCount++;
         return <div />;
-      },
+      }
+    }
+
+    var parent = ReactTestUtils.renderIntoDocument(<Parent />);
+    var child = parent.getChild();
+    ReactDOM.unstable_batchedUpdates(function() {
+      parent.forceUpdate();
+      child.forceUpdate();
     });
-    var component = ReactTestUtils.renderIntoDocument(<A />);
+  });
 
-    expect(() => component.forceUpdate('no')).toThrow(
-      'forceUpdate(...): Expected the last optional `callback` argument ' +
-      'to be a function. Instead received: string.'
-    );
-    expect(() => component.forceUpdate({})).toThrow(
-      'forceUpdate(...): Expected the last optional `callback` argument ' +
-      'to be a function. Instead received: Object.'
-    );
-    expect(() => component.forceUpdate(new Foo())).toThrow(
-      'forceUpdate(...): Expected the last optional `callback` argument ' +
-      'to be a function. Instead received: Foo (keys: a, b).'
-    );
+  it('does not update one component twice in a batch (#6371)', () => {
+    var callbacks = [];
+    function emitChange() {
+      callbacks.forEach(c => c());
+    }
+
+    class App extends React.Component {
+      constructor(props) {
+        super(props);
+        this.state = {showChild: true};
+      }
+      componentDidMount() {
+        this.setState({showChild: false});
+      }
+      render() {
+        return (
+          <div>
+            <ForceUpdatesOnChange />
+            {this.state.showChild && <EmitsChangeOnUnmount />}
+          </div>
+        );
+      }
+    }
+
+    class EmitsChangeOnUnmount extends React.Component {
+      componentWillUnmount() {
+        emitChange();
+      }
+      render() {
+        return null;
+      }
+    }
+
+    class ForceUpdatesOnChange extends React.Component {
+      componentDidMount() {
+        this.onChange = () => this.forceUpdate();
+        this.onChange();
+        callbacks.push(this.onChange);
+      }
+      componentWillUnmount() {
+        callbacks = callbacks.filter(c => c !== this.onChange);
+      }
+      render() {
+        return <div key={Math.random()} onClick={function() {}} />;
+      }
+    }
+
+    ReactDOM.render(<App />, document.createElement('div'));
+  });
+
+  it('unstable_batchedUpdates should return value from a callback', () => {
+    var result = ReactDOM.unstable_batchedUpdates(function() {
+      return 42;
+    });
+    expect(result).toEqual(42);
   });
diff --git a/src/renderers/shared/reconciler/__tests__/refs-destruction-test.js b/src/renderers/shared/stack/reconciler/__tests__/refs-destruction-test.js
similarity index 68%
rename from src/renderers/shared/reconciler/__tests__/refs-destruction-test.js
rename to src/renderers/shared/stack/reconciler/__tests__/refs-destruction-test.js
index 0d001c225..44df2d61b 100644
--- a/src/renderers/shared/reconciler/__tests__/refs-destruction-test.js
+++ b/src/renderers/shared/stack/reconciler/__tests__/refs-destruction-test.js
@@ -19,4 +19,4 @@ var TestComponent;
 
-describe('refs-destruction', function() {
-  beforeEach(function() {
+describe('refs-destruction', () => {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -27,22 +27,23 @@ describe('refs-destruction', function() {
 
-    TestComponent = React.createClass({
-      render: function() {
+    TestComponent = class extends React.Component {
+      render() {
         return (
           <div>
-            {this.props.destroy ? null :
-              <div ref="theInnerDiv">
-                Lets try to destroy this.
-              </div>
-            }
+            {this.props.destroy
+              ? null
+              : <div ref="theInnerDiv">
+                  Lets try to destroy this.
+                </div>}
           </div>
         );
-      },
-    });
+      }
+    };
   });
 
-  it('should remove refs when destroying the parent', function() {
+  it('should remove refs when destroying the parent', () => {
     var container = document.createElement('div');
     var testInstance = ReactDOM.render(<TestComponent />, container);
-    expect(ReactTestUtils.isDOMComponent(testInstance.refs.theInnerDiv))
-      .toBe(true);
+    expect(ReactTestUtils.isDOMComponent(testInstance.refs.theInnerDiv)).toBe(
+      true,
+    );
     expect(Object.keys(testInstance.refs || {}).length).toEqual(1);
@@ -52,7 +53,8 @@ describe('refs-destruction', function() {
 
-  it('should remove refs when destroying the child', function() {
+  it('should remove refs when destroying the child', () => {
     var container = document.createElement('div');
     var testInstance = ReactDOM.render(<TestComponent />, container);
-    expect(ReactTestUtils.isDOMComponent(testInstance.refs.theInnerDiv))
-      .toBe(true);
+    expect(ReactTestUtils.isDOMComponent(testInstance.refs.theInnerDiv)).toBe(
+      true,
+    );
     expect(Object.keys(testInstance.refs || {}).length).toEqual(1);
@@ -62,5 +64,5 @@ describe('refs-destruction', function() {
 
-  it('should not error when destroying child with ref asynchronously', function() {
-    var Modal = React.createClass({
-      componentDidMount: function() {
+  it('should not error when destroying child with ref asynchronously', () => {
+    class Modal extends React.Component {
+      componentDidMount() {
         this.div = document.createElement('div');
@@ -68,7 +70,9 @@ describe('refs-destruction', function() {
         this.componentDidUpdate();
-      },
-      componentDidUpdate: function() {
+      }
+
+      componentDidUpdate() {
         ReactDOM.render(<div>{this.props.children}</div>, this.div);
-      },
-      componentWillUnmount: function() {
+      }
+
+      componentWillUnmount() {
         var self = this;
@@ -81,22 +85,28 @@ describe('refs-destruction', function() {
         }, 0);
-      },
+      }
+
       render() {
         return null;
-      },
-    });
-    var AppModal = React.createClass({
-      render: function() {
-        return (<Modal>
-          <a ref="ref"/>
-        </Modal>);
-      },
-    });
-    var App = React.createClass({
-      render: function() {
-        return this.props.hidden ? null : <AppModal onClose={this.close}/>;
-      },
-    });
+      }
+    }
+
+    class AppModal extends React.Component {
+      render() {
+        return (
+          <Modal>
+            <a ref="ref" />
+          </Modal>
+        );
+      }
+    }
+
+    class App extends React.Component {
+      render() {
+        return this.props.hidden ? null : <AppModal onClose={this.close} />;
+      }
+    }
+
     var container = document.createElement('div');
     ReactDOM.render(<App />, container);
-    ReactDOM.render(<App hidden={true}/>, container);
+    ReactDOM.render(<App hidden={true} />, container);
     jest.runAllTimers();
diff --git a/src/renderers/shared/reconciler/__tests__/refs-test.js b/src/renderers/shared/stack/reconciler/__tests__/refs-test.js
similarity index 66%
rename from src/renderers/shared/reconciler/__tests__/refs-test.js
rename to src/renderers/shared/stack/reconciler/__tests__/refs-test.js
index 8e2733258..b7b835bfc 100644
--- a/src/renderers/shared/reconciler/__tests__/refs-test.js
+++ b/src/renderers/shared/stack/reconciler/__tests__/refs-test.js
@@ -18,3 +18,2 @@ var reactComponentExpect = require('reactComponentExpect');
 
-
 /**
@@ -23,13 +22,14 @@ var reactComponentExpect = require('reactComponentExpect');
  */
-var ClickCounter = React.createClass({
-  getInitialState: function() {
-    return {count: this.props.initialCount};
-  },
-  triggerReset: function() {
+class ClickCounter extends React.Component {
+  state = {count: this.props.initialCount};
+
+  triggerReset = () => {
     this.setState({count: this.props.initialCount});
-  },
-  handleClick: function() {
+  };
+
+  handleClick = () => {
     this.setState({count: this.state.count + 1});
-  },
-  render: function() {
+  };
+
+  render() {
     var children = [];
@@ -42,3 +42,3 @@ var ClickCounter = React.createClass({
           ref={'clickLog' + i}
-        />
+        />,
       );
@@ -50,4 +50,4 @@ var ClickCounter = React.createClass({
     );
-  },
-});
+  }
+}
 
@@ -58,7 +58,7 @@ var ClickCounter = React.createClass({
  */
-var GeneralContainerComponent = React.createClass({
-  render: function() {
+class GeneralContainerComponent extends React.Component {
+  render() {
     return <div>{this.props.children}</div>;
-  },
-});
+  }
+}
 
@@ -68,7 +68,8 @@ var GeneralContainerComponent = React.createClass({
  */
-var TestRefsComponent = React.createClass({
-  doReset: function() {
+class TestRefsComponent extends React.Component {
+  doReset = () => {
     this.refs.myCounter.triggerReset();
-  },
-  render: function() {
+  };
+
+  render() {
     return (
@@ -79,3 +80,3 @@ var TestRefsComponent = React.createClass({
         <GeneralContainerComponent ref="myContainer">
-          <ClickCounter ref="myCounter" initialCount={1}/>
+          <ClickCounter ref="myCounter" initialCount={1} />
         </GeneralContainerComponent>
@@ -83,4 +84,4 @@ var TestRefsComponent = React.createClass({
     );
-  },
-});
+  }
+}
 
@@ -90,7 +91,9 @@ var TestRefsComponent = React.createClass({
 var renderTestRefsComponent = function() {
-  var testRefsComponent =
-      ReactTestUtils.renderIntoDocument(<TestRefsComponent />);
+  var testRefsComponent = ReactTestUtils.renderIntoDocument(
+    <TestRefsComponent />,
+  );
 
-  reactComponentExpect(testRefsComponent)
-      .toBeCompositeComponentWithType(TestRefsComponent);
+  reactComponentExpect(testRefsComponent).toBeCompositeComponentWithType(
+    TestRefsComponent,
+  );
 
@@ -99,6 +102,6 @@ var renderTestRefsComponent = function() {
 
-  reactComponentExpect(generalContainer)
-      .toBeCompositeComponentWithType(GeneralContainerComponent);
-  reactComponentExpect(counter)
-      .toBeCompositeComponentWithType(ClickCounter);
+  reactComponentExpect(generalContainer).toBeCompositeComponentWithType(
+    GeneralContainerComponent,
+  );
+  reactComponentExpect(counter).toBeCompositeComponentWithType(ClickCounter);
 
@@ -107,6 +110,7 @@ var renderTestRefsComponent = function() {
 
-
 var expectClickLogsLengthToBe = function(instance, length) {
-  var clickLogs =
-    ReactTestUtils.scryRenderedDOMComponentsWithClass(instance, 'clickLogDiv');
+  var clickLogs = ReactTestUtils.scryRenderedDOMComponentsWithClass(
+    instance,
+    'clickLogDiv',
+  );
   expect(clickLogs.length).toBe(length);
@@ -115,4 +119,4 @@ var expectClickLogsLengthToBe = function(instance, length) {
 
-describe('reactiverefs', function() {
-  beforeEach(function() {
+describe('reactiverefs', () => {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -124,9 +128,8 @@ describe('reactiverefs', function() {
    */
-  it('Should increase refs with an increase in divs', function() {
+  it('Should increase refs with an increase in divs', () => {
     var testRefsComponent = renderTestRefsComponent();
-    var clickIncrementer =
-      ReactTestUtils.findRenderedDOMComponentWithClass(
-        testRefsComponent,
-        'clickIncrementer'
-      );
+    var clickIncrementer = ReactTestUtils.findRenderedDOMComponentWithClass(
+      testRefsComponent,
+      'clickIncrementer',
+    );
 
@@ -148,9 +151,5 @@ describe('reactiverefs', function() {
     expectClickLogsLengthToBe(testRefsComponent, 1);
-
   });
-
 });
 
-
-
 /**
@@ -158,4 +157,4 @@ describe('reactiverefs', function() {
  */
-describe('ref swapping', function() {
-  beforeEach(function() {
+describe('ref swapping', () => {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -163,10 +162,10 @@ describe('ref swapping', function() {
 
-  var RefHopsAround = React.createClass({
-    getInitialState: function() {
-      return {count: 0};
-    },
-    moveRef: function() {
+  class RefHopsAround extends React.Component {
+    state = {count: 0};
+
+    moveRef = () => {
       this.setState({count: this.state.count + 1});
-    },
-    render: function() {
+    };
+
+    render() {
       var count = this.state.count;
@@ -194,14 +193,20 @@ describe('ref swapping', function() {
       );
-    },
-  });
+    }
+  }
 
-  it('Allow refs to hop around children correctly', function() {
+  it('Allow refs to hop around children correctly', () => {
     var refHopsAround = ReactTestUtils.renderIntoDocument(<RefHopsAround />);
 
-    var firstDiv =
-      ReactTestUtils.findRenderedDOMComponentWithClass(refHopsAround, 'first');
-    var secondDiv =
-      ReactTestUtils.findRenderedDOMComponentWithClass(refHopsAround, 'second');
-    var thirdDiv =
-      ReactTestUtils.findRenderedDOMComponentWithClass(refHopsAround, 'third');
+    var firstDiv = ReactTestUtils.findRenderedDOMComponentWithClass(
+      refHopsAround,
+      'first',
+    );
+    var secondDiv = ReactTestUtils.findRenderedDOMComponentWithClass(
+      refHopsAround,
+      'second',
+    );
+    var thirdDiv = ReactTestUtils.findRenderedDOMComponentWithClass(
+      refHopsAround,
+      'third',
+    );
 
@@ -231,9 +236,8 @@ describe('ref swapping', function() {
 
-
-  it('always has a value for this.refs', function() {
-    var Component = React.createClass({
-      render: function() {
+  it('always has a value for this.refs', () => {
+    class Component extends React.Component {
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
@@ -242,3 +246,40 @@ describe('ref swapping', function() {
   });
-});
 
+  function testRefCall() {
+    var refCalled = 0;
+    function Inner(props) {
+      return <a ref={props.saveA} />;
+    }
+
+    class Outer extends React.Component {
+      saveA = () => {
+        refCalled++;
+      };
+
+      componentDidMount() {
+        this.setState({});
+      }
+
+      render() {
+        return <Inner saveA={this.saveA} />;
+      }
+    }
+
+    ReactTestUtils.renderIntoDocument(<Outer />);
+    expect(refCalled).toBe(1);
+  }
+
+  it('ref called correctly for stateless component when __DEV__ = false', () => {
+    var originalDev = __DEV__;
+    __DEV__ = false;
+    testRefCall();
+    __DEV__ = originalDev;
+  });
+
+  it('ref called correctly for stateless component when __DEV__ = true', () => {
+    var originalDev = __DEV__;
+    __DEV__ = true;
+    testRefCall();
+    __DEV__ = originalDev;
+  });
+});
diff --git a/src/shared/utils/getNativeComponentFromComposite.js b/src/renderers/shared/stack/reconciler/getHostComponentFromComposite.js
similarity index 76%
rename from src/shared/utils/getNativeComponentFromComposite.js
rename to src/renderers/shared/stack/reconciler/getHostComponentFromComposite.js
index ff808c338..597caa50b 100644
--- a/src/shared/utils/getNativeComponentFromComposite.js
+++ b/src/renderers/shared/stack/reconciler/getHostComponentFromComposite.js
@@ -8,3 +8,3 @@
  *
- * @providesModule getNativeComponentFromComposite
+ * @providesModule getHostComponentFromComposite
  */
@@ -15,3 +15,3 @@ var ReactNodeTypes = require('ReactNodeTypes');
 
-function getNativeComponentFromComposite(inst) {
+function getHostComponentFromComposite(inst) {
   var type;
@@ -22,3 +22,3 @@ function getNativeComponentFromComposite(inst) {
 
-  if (type === ReactNodeTypes.NATIVE) {
+  if (type === ReactNodeTypes.HOST) {
     return inst._renderedComponent;
@@ -29,2 +29,2 @@ function getNativeComponentFromComposite(inst) {
 
-module.exports = getNativeComponentFromComposite;
+module.exports = getHostComponentFromComposite;
diff --git a/src/renderers/shared/reconciler/instantiateReactComponent.js b/src/renderers/shared/stack/reconciler/instantiateReactComponent.js
similarity index 65%
rename from src/renderers/shared/reconciler/instantiateReactComponent.js
rename to src/renderers/shared/stack/reconciler/instantiateReactComponent.js
index 796e037b9..08484b27c 100644
--- a/src/renderers/shared/reconciler/instantiateReactComponent.js
+++ b/src/renderers/shared/stack/reconciler/instantiateReactComponent.js
@@ -15,4 +15,5 @@ var ReactCompositeComponent = require('ReactCompositeComponent');
 var ReactEmptyComponent = require('ReactEmptyComponent');
-var ReactNativeComponent = require('ReactNativeComponent');
+var ReactHostComponent = require('ReactHostComponent');
 
+var getNextDebugID = require('getNextDebugID');
 var invariant = require('invariant');
@@ -24,9 +25,2 @@ var ReactCompositeComponentWrapper = function(element) {
 };
-Object.assign(
-  ReactCompositeComponentWrapper.prototype,
-  ReactCompositeComponent.Mixin,
-  {
-    _instantiateReactComponent: instantiateReactComponent,
-  }
-);
 
@@ -62,2 +56,3 @@ function isInternalComponentType(type) {
  * @param {ReactNode} node
+ * @param {boolean} shouldHaveDebugID
  * @return {object} A new instance of the element's constructor.
@@ -65,3 +60,3 @@ function isInternalComponentType(type) {
  */
-function instantiateReactComponent(node) {
+function instantiateReactComponent(node, shouldHaveDebugID) {
   var instance;
@@ -72,10 +67,26 @@ function instantiateReactComponent(node) {
     var element = node;
-    invariant(
-      element && (typeof element.type === 'function' ||
-                  typeof element.type === 'string'),
-      'Element type is invalid: expected a string (for built-in components) ' +
-      'or a class/function (for composite components) but got: %s.%s',
-      element.type == null ? element.type : typeof element.type,
-      getDeclarationErrorAddendum(element._owner)
-    );
+    var type = element.type;
+    if (typeof type !== 'function' && typeof type !== 'string') {
+      var info = '';
+      if (__DEV__) {
+        if (
+          type === undefined ||
+          (typeof type === 'object' &&
+            type !== null &&
+            Object.keys(type).length === 0)
+        ) {
+          info +=
+            ' You likely forgot to export your component from the file ' +
+            "it's defined in.";
+        }
+      }
+      info += getDeclarationErrorAddendum(element._owner);
+      invariant(
+        false,
+        'Element type is invalid: expected a string (for built-in components) ' +
+          'or a class/function (for composite components) but got: %s.%s',
+        type == null ? type : typeof type,
+        info,
+      );
+    }
 
@@ -83,3 +94,3 @@ function instantiateReactComponent(node) {
     if (typeof element.type === 'string') {
-      instance = ReactNativeComponent.createInternalComponent(element);
+      instance = ReactHostComponent.createInternalComponent(element);
     } else if (isInternalComponentType(element.type)) {
@@ -89,2 +100,7 @@ function instantiateReactComponent(node) {
       instance = new element.type(element);
+
+      // We renamed this. Allow the old name for compat. :(
+      if (!instance.getHostNode) {
+        instance.getHostNode = instance.getNativeNode;
+      }
     } else {
@@ -93,9 +109,5 @@ function instantiateReactComponent(node) {
   } else if (typeof node === 'string' || typeof node === 'number') {
-    instance = ReactNativeComponent.createInstanceForText(node);
+    instance = ReactHostComponent.createInstanceForText(node);
   } else {
-    invariant(
-      false,
-      'Encountered invalid React node of type %s',
-      typeof node
-    );
+    invariant(false, 'Encountered invalid React node of type %s', typeof node);
   }
@@ -105,6 +117,6 @@ function instantiateReactComponent(node) {
       typeof instance.mountComponent === 'function' &&
-      typeof instance.receiveComponent === 'function' &&
-      typeof instance.getNativeNode === 'function' &&
-      typeof instance.unmountComponent === 'function',
-      'Only React Components can be mounted.'
+        typeof instance.receiveComponent === 'function' &&
+        typeof instance.getHostNode === 'function' &&
+        typeof instance.unmountComponent === 'function',
+      'Only React Components can be mounted.',
     );
@@ -119,4 +131,3 @@ function instantiateReactComponent(node) {
   if (__DEV__) {
-    instance._isOwnerNecessary = false;
-    instance._warnedAboutRefsInRender = false;
+    instance._debugID = shouldHaveDebugID ? getNextDebugID() : 0;
   }
@@ -134,2 +145,10 @@ function instantiateReactComponent(node) {
 
+Object.assign(
+  ReactCompositeComponentWrapper.prototype,
+  ReactCompositeComponent,
+  {
+    _instantiateReactComponent: instantiateReactComponent,
+  },
+);
+
 module.exports = instantiateReactComponent;
diff --git a/src/shared/utils/CallbackQueue.js b/src/renderers/shared/utils/CallbackQueue.js
similarity index 76%
rename from src/shared/utils/CallbackQueue.js
rename to src/renderers/shared/utils/CallbackQueue.js
index 647c38871..00284508b 100644
--- a/src/shared/utils/CallbackQueue.js
+++ b/src/renderers/shared/utils/CallbackQueue.js
@@ -9,2 +9,3 @@
  * @providesModule CallbackQueue
+ * @flow
  */
@@ -28,8 +29,12 @@ var invariant = require('invariant');
  */
-function CallbackQueue() {
-  this._callbacks = null;
-  this._contexts = null;
-}
+class CallbackQueue<T> {
+  _callbacks: ?Array<() => void>;
+  _contexts: ?Array<T>;
+  _arg: ?mixed;
 
-Object.assign(CallbackQueue.prototype, {
+  constructor(arg) {
+    this._callbacks = null;
+    this._contexts = null;
+    this._arg = arg;
+  }
 
@@ -42,8 +47,8 @@ Object.assign(CallbackQueue.prototype, {
    */
-  enqueue: function(callback, context) {
+  enqueue(callback: () => void, context: T) {
     this._callbacks = this._callbacks || [];
-    this._contexts = this._contexts || [];
     this._callbacks.push(callback);
+    this._contexts = this._contexts || [];
     this._contexts.push(context);
-  },
+  }
 
@@ -55,9 +60,10 @@ Object.assign(CallbackQueue.prototype, {
    */
-  notifyAll: function() {
+  notifyAll() {
     var callbacks = this._callbacks;
     var contexts = this._contexts;
-    if (callbacks) {
+    var arg = this._arg;
+    if (callbacks && contexts) {
       invariant(
         callbacks.length === contexts.length,
-        'Mismatched list of contexts in callback queue'
+        'Mismatched list of contexts in callback queue',
       );
@@ -66,3 +72,3 @@ Object.assign(CallbackQueue.prototype, {
       for (var i = 0; i < callbacks.length; i++) {
-        callbacks[i].call(contexts[i]);
+        callbacks[i].call(contexts[i], arg);
       }
@@ -71,10 +77,10 @@ Object.assign(CallbackQueue.prototype, {
     }
-  },
+  }
 
-  checkpoint: function() {
+  checkpoint() {
     return this._callbacks ? this._callbacks.length : 0;
-  },
+  }
 
-  rollback: function(len) {
-    if (this._callbacks) {
+  rollback(len: number) {
+    if (this._callbacks && this._contexts) {
       this._callbacks.length = len;
@@ -82,3 +88,3 @@ Object.assign(CallbackQueue.prototype, {
     }
-  },
+  }
 
@@ -89,6 +95,6 @@ Object.assign(CallbackQueue.prototype, {
    */
-  reset: function() {
+  reset() {
     this._callbacks = null;
     this._contexts = null;
-  },
+  }
 
@@ -97,10 +103,7 @@ Object.assign(CallbackQueue.prototype, {
    */
-  destructor: function() {
+  destructor() {
     this.reset();
-  },
-
-});
-
-PooledClass.addPoolingTo(CallbackQueue);
+  }
+}
 
-module.exports = CallbackQueue;
+module.exports = PooledClass.addPoolingTo(CallbackQueue);
diff --git a/src/shared/utils/ReactErrorUtils.js b/src/renderers/shared/utils/ReactErrorUtils.js
similarity index 76%
rename from src/shared/utils/ReactErrorUtils.js
rename to src/renderers/shared/utils/ReactErrorUtils.js
index cff46bc15..d9b1c067e 100644
--- a/src/shared/utils/ReactErrorUtils.js
+++ b/src/renderers/shared/utils/ReactErrorUtils.js
@@ -9,2 +9,3 @@
  * @providesModule ReactErrorUtils
+ * @flow
  */
@@ -18,3 +19,3 @@ var caughtError = null;
  *
- * @param {?String} name of the guard to use for logging or debugging
+ * @param {String} name of the guard to use for logging or debugging
  * @param {Function} func The function to invoke
@@ -23,5 +24,9 @@ var caughtError = null;
  */
-function invokeGuardedCallback(name, func, a, b) {
+function invokeGuardedCallback<A>(
+  name: string,
+  func: (a: A) => void,
+  a: A,
+): void {
   try {
-    return func(a, b);
+    func(a);
   } catch (x) {
@@ -30,3 +35,2 @@ function invokeGuardedCallback(name, func, a, b) {
     }
-    return undefined;
   }
@@ -61,9 +65,15 @@ if (__DEV__) {
    */
-  if (typeof window !== 'undefined' &&
-      typeof window.dispatchEvent === 'function' &&
-      typeof document !== 'undefined' &&
-      typeof document.createEvent === 'function') {
+  if (
+    typeof window !== 'undefined' &&
+    typeof window.dispatchEvent === 'function' &&
+    typeof document !== 'undefined' &&
+    typeof document.createEvent === 'function'
+  ) {
     var fakeNode = document.createElement('react');
-    ReactErrorUtils.invokeGuardedCallback = function(name, func, a, b) {
-      var boundFunc = func.bind(null, a, b);
+    ReactErrorUtils.invokeGuardedCallback = function<A>(
+      name: string,
+      func: (a: A) => void,
+      a: A,
+    ): void {
+      var boundFunc = func.bind(null, a);
       var evtType = `react-${name}`;
diff --git a/src/shared/utils/ReactFeatureFlags.js b/src/renderers/shared/utils/ReactFeatureFlags.js
similarity index 98%
rename from src/shared/utils/ReactFeatureFlags.js
rename to src/renderers/shared/utils/ReactFeatureFlags.js
index 30b5f4c7d..5b3bb1b45 100644
--- a/src/shared/utils/ReactFeatureFlags.js
+++ b/src/renderers/shared/utils/ReactFeatureFlags.js
@@ -9,2 +9,3 @@
  * @providesModule ReactFeatureFlags
+ * @flow
  */
diff --git a/src/shared/utils/Transaction.js b/src/renderers/shared/utils/Transaction.js
similarity index 89%
rename from src/shared/utils/Transaction.js
rename to src/renderers/shared/utils/Transaction.js
index 84b55a25c..4fbe9d88e 100644
--- a/src/shared/utils/Transaction.js
+++ b/src/renderers/shared/utils/Transaction.js
@@ -9,2 +9,3 @@
  * @providesModule Transaction
+ * @flow
  */
@@ -15,2 +16,4 @@ var invariant = require('invariant');
 
+var OBSERVED_ERROR = {};
+
 /**
@@ -76,3 +79,3 @@ var invariant = require('invariant');
  */
-var Mixin = {
+var TransactionImpl = {
   /**
@@ -84,3 +87,3 @@ var Mixin = {
    */
-  reinitializeTransaction: function() {
+  reinitializeTransaction: function(): void {
     this.transactionWrappers = this.getTransactionWrappers();
@@ -102,3 +105,3 @@ var Mixin = {
 
-  isInTransaction: function() {
+  isInTransaction: function(): boolean {
     return !!this._isInTransaction;
@@ -106,2 +109,4 @@ var Mixin = {
 
+  /* eslint-disable space-before-function-paren */
+
   /**
@@ -123,3 +128,13 @@ var Mixin = {
    */
-  perform: function(method, scope, a, b, c, d, e, f) {
+  perform: function<
+    A,
+    B,
+    C,
+    D,
+    E,
+    F,
+    G,
+    T: (a: A, b: B, c: C, d: D, e: E, f: F) => G,
+  >(method: T, scope: any, a: A, b: B, c: C, d: D, e: E, f: F): G {
+    /* eslint-enable space-before-function-paren */
     invariant(
@@ -127,3 +142,3 @@ var Mixin = {
       'Transaction.perform(...): Cannot initialize a transaction when there ' +
-      'is already an outstanding transaction.'
+        'is already an outstanding transaction.',
     );
@@ -148,4 +163,3 @@ var Mixin = {
             this.closeAll(0);
-          } catch (err) {
-          }
+          } catch (err) {}
         } else {
@@ -162,3 +176,3 @@ var Mixin = {
 
-  initializeAll: function(startIndex) {
+  initializeAll: function(startIndex: number): void {
     var transactionWrappers = this.transactionWrappers;
@@ -171,8 +185,8 @@ var Mixin = {
         // block, it means wrapper.initialize threw.
-        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
-        this.wrapperInitData[i] = wrapper.initialize ?
-          wrapper.initialize.call(this) :
-          null;
+        this.wrapperInitData[i] = OBSERVED_ERROR;
+        this.wrapperInitData[i] = wrapper.initialize
+          ? wrapper.initialize.call(this)
+          : null;
       } finally {
-        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
+        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
           // The initializer for wrapper i threw an error; initialize the
@@ -182,4 +196,3 @@ var Mixin = {
             this.initializeAll(i + 1);
-          } catch (err) {
-          }
+          } catch (err) {}
         }
@@ -195,6 +208,6 @@ var Mixin = {
    */
-  closeAll: function(startIndex) {
+  closeAll: function(startIndex: number): void {
     invariant(
       this.isInTransaction(),
-      'Transaction.closeAll(): Cannot close transaction when none are open.'
+      'Transaction.closeAll(): Cannot close transaction when none are open.',
     );
@@ -211,3 +224,3 @@ var Mixin = {
         errorThrown = true;
-        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
+        if (initData !== OBSERVED_ERROR && wrapper.close) {
           wrapper.close.call(this, initData);
@@ -222,4 +235,3 @@ var Mixin = {
             this.closeAll(i + 1);
-          } catch (e) {
-          }
+          } catch (e) {}
         }
@@ -231,13 +243,4 @@ var Mixin = {
 
-var Transaction = {
-
-  Mixin: Mixin,
-
-  /**
-   * Token to look for to determine if an error occurred.
-   */
-  OBSERVED_ERROR: {},
-
-};
+export type Transaction = typeof TransactionImpl;
 
-module.exports = Transaction;
+module.exports = TransactionImpl;
diff --git a/src/shared/utils/__tests__/Transaction-test.js b/src/renderers/shared/utils/__tests__/Transaction-test.js
similarity index 80%
rename from src/shared/utils/__tests__/Transaction-test.js
rename to src/renderers/shared/utils/__tests__/Transaction-test.js
index ee474a1cc..768815626 100644
--- a/src/shared/utils/__tests__/Transaction-test.js
+++ b/src/renderers/shared/utils/__tests__/Transaction-test.js
@@ -13,8 +13,7 @@
 
-
 var Transaction;
 
-var INIT_ERRORED = 'initErrored';     // Just a dummy value to check for.
-describe('Transaction', function() {
-  beforeEach(function() {
+var INIT_ERRORED = 'initErrored'; // Just a dummy value to check for.
+describe('Transaction', () => {
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -28,3 +27,3 @@ describe('Transaction', function() {
    */
-  it('should invoke closers with/only-with init returns', function() {
+  it('should invoke closers with/only-with init returns', () => {
     var throwInInit = function() {
@@ -43,7 +42,7 @@ describe('Transaction', function() {
       this.reinitializeTransaction();
-      this.firstCloseParam = INIT_ERRORED;   // WON'T be set to something else
-      this.secondCloseParam = INIT_ERRORED;  // WILL be set to something else
-      this.lastCloseParam = INIT_ERRORED;    // WON'T be set to something else
+      this.firstCloseParam = INIT_ERRORED; // WON'T be set to something else
+      this.secondCloseParam = INIT_ERRORED; // WILL be set to something else
+      this.lastCloseParam = INIT_ERRORED; // WON'T be set to something else
     };
-    Object.assign(TestTransaction.prototype, Transaction.Mixin);
+    Object.assign(TestTransaction.prototype, Transaction);
     TestTransaction.prototype.getTransactionWrappers = function() {
@@ -86,4 +85,3 @@ describe('Transaction', function() {
 
-  it('should invoke closers and wrapped method when inits success', function() {
-
+  it('should invoke closers and wrapped method when inits success', () => {
     var performSideEffect;
@@ -94,7 +92,7 @@ describe('Transaction', function() {
       this.reinitializeTransaction();
-      this.firstCloseParam = INIT_ERRORED;   // WILL be set to something else
-      this.secondCloseParam = INIT_ERRORED;  // WILL be set to something else
-      this.lastCloseParam = INIT_ERRORED;    // WILL be set to something else
+      this.firstCloseParam = INIT_ERRORED; // WILL be set to something else
+      this.secondCloseParam = INIT_ERRORED; // WILL be set to something else
+      this.lastCloseParam = INIT_ERRORED; // WILL be set to something else
     };
-    Object.assign(TestTransaction.prototype, Transaction.Mixin);
+    Object.assign(TestTransaction.prototype, Transaction);
     TestTransaction.prototype.getTransactionWrappers = function() {
@@ -147,4 +145,3 @@ describe('Transaction', function() {
    */
-  it('should throw when wrapped operation throws', function() {
-
+  it('should throw when wrapped operation throws', () => {
     var performSideEffect;
@@ -155,7 +152,7 @@ describe('Transaction', function() {
       this.reinitializeTransaction();
-      this.firstCloseParam = INIT_ERRORED;   // WILL be set to something else
-      this.secondCloseParam = INIT_ERRORED;  // WILL be set to something else
-      this.lastCloseParam = INIT_ERRORED;    // WILL be set to something else
+      this.firstCloseParam = INIT_ERRORED; // WILL be set to something else
+      this.secondCloseParam = INIT_ERRORED; // WILL be set to something else
+      this.lastCloseParam = INIT_ERRORED; // WILL be set to something else
     };
-    Object.assign(TestTransaction.prototype, Transaction.Mixin);
+    Object.assign(TestTransaction.prototype, Transaction);
     // Now, none of the close/inits throw, but the operation we wrap will throw.
@@ -200,13 +197,15 @@ describe('Transaction', function() {
 
-    expect(function() {
-      var isTypeError = false;
-      try {
-        transaction.perform(function() {
-          throw new TypeError('Thrown in main wrapped operation');
-        });
-      } catch (err) {
-        isTypeError = (err instanceof TypeError);
-      }
-      return isTypeError;
-    }()).toBe(true);
+    expect(
+      (function() {
+        var isTypeError = false;
+        try {
+          transaction.perform(function() {
+            throw new TypeError('Thrown in main wrapped operation');
+          });
+        } catch (err) {
+          isTypeError = err instanceof TypeError;
+        }
+        return isTypeError;
+      })(),
+    ).toBe(true);
 
@@ -219,3 +218,3 @@ describe('Transaction', function() {
 
-  it('should throw errors in transaction close', function() {
+  it('should throw errors in transaction close', () => {
     var TestTransaction = function() {
@@ -223,3 +222,3 @@ describe('Transaction', function() {
     };
-    Object.assign(TestTransaction.prototype, Transaction.Mixin);
+    Object.assign(TestTransaction.prototype, Transaction);
     var exceptionMsg = 'This exception should throw.';
@@ -238,3 +237,3 @@ describe('Transaction', function() {
       transaction.perform(function() {});
-    }).toThrow(exceptionMsg);
+    }).toThrowError(exceptionMsg);
     expect(transaction.isInTransaction()).toBe(false);
@@ -242,3 +241,3 @@ describe('Transaction', function() {
 
-  it('should allow nesting of transactions', function() {
+  it('should allow nesting of transactions', () => {
     var performSideEffect;
@@ -252,3 +251,3 @@ describe('Transaction', function() {
     };
-    Object.assign(TestTransaction.prototype, Transaction.Mixin);
+    Object.assign(TestTransaction.prototype, Transaction);
     TestTransaction.prototype.getTransactionWrappers = function() {
@@ -280,3 +279,3 @@ describe('Transaction', function() {
     };
-    Object.assign(NestedTransaction.prototype, Transaction.Mixin);
+    Object.assign(NestedTransaction.prototype, Transaction);
     NestedTransaction.prototype.getTransactionWrappers = function() {
diff --git a/src/shared/utils/__tests__/accumulateInto-test.js b/src/renderers/shared/utils/__tests__/accumulateInto-test.js
similarity index 75%
rename from src/shared/utils/__tests__/accumulateInto-test.js
rename to src/renderers/shared/utils/__tests__/accumulateInto-test.js
index 8dd9ee6f1..ab6ebbee5 100644
--- a/src/shared/utils/__tests__/accumulateInto-test.js
+++ b/src/renderers/shared/utils/__tests__/accumulateInto-test.js
@@ -13,10 +13,6 @@
 
-jest
-  .dontMock('accumulateInto');
-
 var accumulateInto;
 
-describe('accumulateInto', function() {
-
-  beforeEach(function() {
+describe('accumulateInto', () => {
+  beforeEach(() => {
     accumulateInto = require('accumulateInto');
@@ -24,7 +20,7 @@ describe('accumulateInto', function() {
 
-  it('throws if the second item is null', function() {
+  it('throws if the second item is null', () => {
     expect(function() {
       accumulateInto([], null);
-    }).toThrow(
-      'accumulateInto(...): Accumulated items must not be null or undefined.'
+    }).toThrowError(
+      'accumulateInto(...): Accumulated items must not be null or undefined.',
     );
@@ -32,3 +28,3 @@ describe('accumulateInto', function() {
 
-  it('returns the second item if first is null', function() {
+  it('returns the second item if first is null', () => {
     var a = [];
@@ -37,3 +33,3 @@ describe('accumulateInto', function() {
 
-  it('merges the second into the first if first item is an array', function() {
+  it('merges the second into the first if first item is an array', () => {
     var a = [1, 2];
@@ -48,3 +44,3 @@ describe('accumulateInto', function() {
 
-  it('returns a new array if first or both items are scalar', function() {
+  it('returns a new array if first or both items are scalar', () => {
     var a = [2];
diff --git a/src/shared/utils/__tests__/adler32-test.js b/src/renderers/shared/utils/__tests__/adler32-test.js
similarity index 74%
rename from src/shared/utils/__tests__/adler32-test.js
rename to src/renderers/shared/utils/__tests__/adler32-test.js
index b8ccc7a2e..ab6c7a028 100644
--- a/src/shared/utils/__tests__/adler32-test.js
+++ b/src/renderers/shared/utils/__tests__/adler32-test.js
@@ -15,4 +15,4 @@ var adler32 = require('adler32');
 
-describe('adler32', function() {
-  it('generates differing checksums', function() {
+describe('adler32', () => {
+  it('generates differing checksums', () => {
     expect(adler32('foo')).not.toBe(adler32('bar'));
@@ -20,3 +20,3 @@ describe('adler32', function() {
 
-  it('generates consistent checksums', function() {
+  it('generates consistent checksums', () => {
     expect(adler32('linux')).toBe(adler32('linux'));
@@ -24,3 +24,3 @@ describe('adler32', function() {
 
-  it('is case sensitive', function() {
+  it('is case sensitive', () => {
     expect(adler32('a')).not.toBe(adler32('A'));
@@ -28,3 +28,3 @@ describe('adler32', function() {
 
-  it('doesn\'t barf on large inputs', function() {
+  it("doesn't barf on large inputs", () => {
     var str = '';
@@ -36,3 +36,3 @@ describe('adler32', function() {
 
-  it('doesn\'t barf on international inputs', function() {
+  it("doesn't barf on international inputs", () => {
     var str = 'Linux 是一個真棒操作系統!';
diff --git a/src/shared/utils/accumulate.js b/src/renderers/shared/utils/accumulate.js
similarity index 60%
rename from src/shared/utils/accumulate.js
rename to src/renderers/shared/utils/accumulate.js
index 07fc3db2b..ee6261261 100644
--- a/src/shared/utils/accumulate.js
+++ b/src/renderers/shared/utils/accumulate.js
@@ -9,2 +9,3 @@
  * @providesModule accumulate
+ * @flow
  */
@@ -22,24 +23,26 @@ var invariant = require('invariant');
  */
-function accumulate(current, next) {
+function accumulate<T>(
+  current: ?(T | Array<T>),
+  next: T | Array<T>,
+): T | Array<T> {
   invariant(
     next != null,
-    'accumulate(...): Accumulated items must be not be null or undefined.'
+    'accumulate(...): Accumulated items must be not be null or undefined.',
   );
+
   if (current == null) {
     return next;
-  } else {
-    // Both are not empty. Warning: Never call x.concat(y) when you are not
-    // certain that x is an Array (x could be a string with concat method).
-    var currentIsArray = Array.isArray(current);
-    var nextIsArray = Array.isArray(next);
-    if (currentIsArray) {
-      return current.concat(next);
-    } else {
-      if (nextIsArray) {
-        return [current].concat(next);
-      } else {
-        return [current, next];
-      }
-    }
   }
+
+  // Both are not empty. Warning: Never call x.concat(y) when you are not
+  // certain that x is an Array (x could be a string with concat method).
+  if (Array.isArray(current)) {
+    return current.concat(next);
+  }
+
+  if (Array.isArray(next)) {
+    return [current].concat(next);
+  }
+
+  return [current, next];
 }
diff --git a/src/shared/utils/accumulateInto.js b/src/renderers/shared/utils/accumulateInto.js
similarity index 82%
rename from src/shared/utils/accumulateInto.js
rename to src/renderers/shared/utils/accumulateInto.js
index 291f8fd42..803dbd466 100644
--- a/src/shared/utils/accumulateInto.js
+++ b/src/renderers/shared/utils/accumulateInto.js
@@ -9,2 +9,3 @@
  * @providesModule accumulateInto
+ * @flow
  */
@@ -16,3 +17,2 @@ var invariant = require('invariant');
 /**
- *
  * Accumulates items that must not be null or undefined into the first one. This
@@ -29,7 +29,11 @@ var invariant = require('invariant');
 
-function accumulateInto(current, next) {
+function accumulateInto<T>(
+  current: ?(T | Array<T>),
+  next: T | Array<T>,
+): T | Array<T> {
   invariant(
     next != null,
-    'accumulateInto(...): Accumulated items must not be null or undefined.'
+    'accumulateInto(...): Accumulated items must not be null or undefined.',
   );
+
   if (current == null) {
@@ -40,11 +44,7 @@ function accumulateInto(current, next) {
   // certain that x is an Array (x could be a string with concat method).
-  var currentIsArray = Array.isArray(current);
-  var nextIsArray = Array.isArray(next);
-
-  if (currentIsArray && nextIsArray) {
-    current.push.apply(current, next);
-    return current;
-  }
-
-  if (currentIsArray) {
+  if (Array.isArray(current)) {
+    if (Array.isArray(next)) {
+      current.push.apply(current, next);
+      return current;
+    }
     current.push(next);
@@ -53,3 +53,3 @@ function accumulateInto(current, next) {
 
-  if (nextIsArray) {
+  if (Array.isArray(next)) {
     // A bit too dangerous to mutate `next`.
diff --git a/src/shared/utils/adler32.js b/src/renderers/shared/utils/adler32.js
similarity index 89%
rename from src/shared/utils/adler32.js
rename to src/renderers/shared/utils/adler32.js
index 1248531e2..4013f2b26 100644
--- a/src/shared/utils/adler32.js
+++ b/src/renderers/shared/utils/adler32.js
@@ -9,2 +9,3 @@
  * @providesModule adler32
+ * @flow
  */
@@ -20,3 +21,3 @@ var MOD = 65521;
 // for non-ascii inputs.
-function adler32(data) {
+function adler32(data: string): number {
   var a = 1;
@@ -29,3 +30,3 @@ function adler32(data) {
     for (; i < n; i += 4) {
-      b += (
+      b +=
         (a += data.charCodeAt(i)) +
@@ -33,4 +34,3 @@ function adler32(data) {
         (a += data.charCodeAt(i + 2)) +
-        (a += data.charCodeAt(i + 3))
-      );
+        (a += data.charCodeAt(i + 3));
     }
@@ -40,3 +40,3 @@ function adler32(data) {
   for (; i < l; i++) {
-    b += (a += data.charCodeAt(i));
+    b += a += data.charCodeAt(i);
   }
diff --git a/src/shared/utils/forEachAccumulated.js b/src/renderers/shared/utils/forEachAccumulated.js
similarity index 88%
rename from src/shared/utils/forEachAccumulated.js
rename to src/renderers/shared/utils/forEachAccumulated.js
index 176c02514..4ee784d5e 100644
--- a/src/shared/utils/forEachAccumulated.js
+++ b/src/renderers/shared/utils/forEachAccumulated.js
@@ -9,2 +9,3 @@
  * @providesModule forEachAccumulated
+ * @flow
  */
@@ -20,3 +21,7 @@
  */
-var forEachAccumulated = function(arr, cb, scope) {
+function forEachAccumulated<T>(
+  arr: ?(T | Array<T>),
+  cb: (elem: T) => void,
+  scope: ?any,
+) {
   if (Array.isArray(arr)) {
@@ -26,3 +31,3 @@ var forEachAccumulated = function(arr, cb, scope) {
   }
-};
+}
 
diff --git a/src/shared/utils/isTextInputElement.js b/src/renderers/shared/utils/isTextInputElement.js
similarity index 54%
rename from src/shared/utils/isTextInputElement.js
rename to src/renderers/shared/utils/isTextInputElement.js
index 0b0075dca..633c19ce3 100644
--- a/src/shared/utils/isTextInputElement.js
+++ b/src/renderers/shared/utils/isTextInputElement.js
@@ -9,2 +9,3 @@
  * @providesModule isTextInputElement
+ * @flow
  */
@@ -16,26 +17,32 @@
  */
-var supportedInputTypes = {
-  'color': true,
-  'date': true,
-  'datetime': true,
+var supportedInputTypes: {[key: string]: true | void} = {
+  color: true,
+  date: true,
+  datetime: true,
   'datetime-local': true,
-  'email': true,
-  'month': true,
-  'number': true,
-  'password': true,
-  'range': true,
-  'search': true,
-  'tel': true,
-  'text': true,
-  'time': true,
-  'url': true,
-  'week': true,
+  email: true,
+  month: true,
+  number: true,
+  password: true,
+  range: true,
+  search: true,
+  tel: true,
+  text: true,
+  time: true,
+  url: true,
+  week: true,
 };
 
-function isTextInputElement(elem) {
+function isTextInputElement(elem: ?HTMLElement): boolean {
   var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
-  return nodeName && (
-    (nodeName === 'input' && supportedInputTypes[elem.type]) ||
-    nodeName === 'textarea'
-  );
+
+  if (nodeName === 'input') {
+    return !!supportedInputTypes[((elem: any): HTMLInputElement).type];
+  }
+
+  if (nodeName === 'textarea') {
+    return true;
+  }
+
+  return false;
 }
diff --git a/src/renderers/testing/ReactShallowRenderer.js b/src/renderers/testing/ReactShallowRenderer.js
new file mode 100644
index 000000000..17fe612f7
--- /dev/null
+++ b/src/renderers/testing/ReactShallowRenderer.js
@@ -0,0 +1,156 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactShallowRenderer
+ */
+
+'use strict';
+
+var React = require('React');
+var ReactCompositeComponent = require('ReactCompositeComponent');
+var ReactDefaultBatchingStrategy = require('ReactDefaultBatchingStrategy');
+var ReactReconciler = require('ReactReconciler');
+var ReactReconcileTransaction = require('ReactReconcileTransaction');
+var ReactUpdates = require('ReactUpdates');
+
+var emptyObject = require('emptyObject');
+var getNextDebugID = require('getNextDebugID');
+var invariant = require('invariant');
+
+function injectDefaults() {
+  ReactUpdates.injection.injectReconcileTransaction(ReactReconcileTransaction);
+  ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
+}
+
+class NoopInternalComponent {
+  constructor(element) {
+    this._renderedOutput = element;
+    this._currentElement = element;
+
+    if (__DEV__) {
+      this._debugID = getNextDebugID();
+    }
+  }
+  mountComponent() {}
+  receiveComponent(element) {
+    this._renderedOutput = element;
+    this._currentElement = element;
+  }
+  unmountComponent() {}
+  getHostNode() {
+    return undefined;
+  }
+  getPublicInstance() {
+    return null;
+  }
+}
+
+var ShallowComponentWrapper = function(element) {
+  // TODO: Consolidate with instantiateReactComponent
+  if (__DEV__) {
+    this._debugID = getNextDebugID();
+  }
+
+  this.construct(element);
+};
+Object.assign(ShallowComponentWrapper.prototype, ReactCompositeComponent, {
+  _constructComponent: ReactCompositeComponent._constructComponentWithoutOwner,
+  _instantiateReactComponent: function(element) {
+    return new NoopInternalComponent(element);
+  },
+  _replaceNodeWithMarkup: function() {},
+  _renderValidatedComponent:
+    ReactCompositeComponent._renderValidatedComponentWithoutOwnerOrContext,
+});
+
+function _batchedRender(renderer, element, context) {
+  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(true);
+  renderer._render(element, transaction, context);
+  ReactUpdates.ReactReconcileTransaction.release(transaction);
+}
+
+class ReactShallowRenderer {
+  _instance = null;
+  getMountedInstance() {
+    return this._instance ? this._instance._instance : null;
+  }
+  render(element, context) {
+    // Ensure we've done the default injections. This might not be true in the
+    // case of a simple test that only requires React and the TestUtils in
+    // conjunction with an inline-requires transform.
+    injectDefaults();
+
+    invariant(
+      React.isValidElement(element),
+      'ReactShallowRenderer render(): Invalid component element.%s',
+      typeof element === 'function'
+        ? ' Instead of passing a component class, make sure to instantiate ' +
+            'it by passing it to React.createElement.'
+        : '',
+    );
+    invariant(
+      typeof element.type !== 'string',
+      'ReactShallowRenderer render(): Shallow rendering works only with custom ' +
+        'components, not primitives (%s). Instead of calling `.render(el)` and ' +
+        'inspecting the rendered output, look at `el.props` directly instead.',
+      element.type,
+    );
+
+    if (!context) {
+      context = emptyObject;
+    }
+    ReactUpdates.batchedUpdates(_batchedRender, this, element, context);
+
+    return this.getRenderOutput();
+  }
+  getRenderOutput() {
+    return (
+      (this._instance &&
+        this._instance._renderedComponent &&
+        this._instance._renderedComponent._renderedOutput) ||
+      null
+    );
+  }
+  unmount() {
+    if (this._instance) {
+      ReactReconciler.unmountComponent(this._instance, false);
+    }
+  }
+  unstable_batchedUpdates(callback, bookkeeping) {
+    // This is used by Enzyme for fake-simulating events in shallow mode.
+    injectDefaults();
+    return ReactUpdates.batchedUpdates(callback, bookkeeping);
+  }
+  _render(element, transaction, context) {
+    if (this._instance) {
+      ReactReconciler.receiveComponent(
+        this._instance,
+        element,
+        transaction,
+        context,
+      );
+    } else {
+      var instance = new ShallowComponentWrapper(element);
+      ReactReconciler.mountComponent(
+        instance,
+        transaction,
+        null,
+        null,
+        context,
+        0,
+      );
+      this._instance = instance;
+    }
+  }
+}
+
+ReactShallowRenderer.createRenderer = function() {
+  return new ReactShallowRenderer();
+};
+
+module.exports = ReactShallowRenderer;
diff --git a/src/renderers/testing/ReactTestEmptyComponent.js b/src/renderers/testing/ReactTestEmptyComponent.js
new file mode 100644
index 000000000..40b62e03f
--- /dev/null
+++ b/src/renderers/testing/ReactTestEmptyComponent.js
@@ -0,0 +1,28 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactTestEmptyComponent
+ * @flow
+ */
+
+'use strict';
+
+class ReactTestEmptyComponent {
+  _currentElement: null;
+
+  constructor() {
+    this._currentElement = null;
+  }
+  receiveComponent(): void {}
+  toJSON(): void {}
+  mountComponent(): void {}
+  getHostNode(): void {}
+  unmountComponent(): void {}
+}
+
+module.exports = ReactTestEmptyComponent;
diff --git a/src/renderers/testing/ReactTestMount.js b/src/renderers/testing/ReactTestMount.js
new file mode 100644
index 000000000..ce4f2162f
--- /dev/null
+++ b/src/renderers/testing/ReactTestMount.js
@@ -0,0 +1,168 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactTestMount
+ * @flow
+ */
+'use strict';
+
+var React = require('React');
+var ReactReconciler = require('ReactReconciler');
+var ReactUpdates = require('ReactUpdates');
+
+var emptyObject = require('emptyObject');
+var getHostComponentFromComposite = require('getHostComponentFromComposite');
+var instantiateReactComponent = require('instantiateReactComponent');
+var invariant = require('invariant');
+
+export type TestRendererOptions = {
+  createNodeMock: (element: ReactElement<any>) => any,
+};
+
+var defaultTestOptions = {
+  createNodeMock: function() {
+    return null;
+  },
+};
+
+/**
+ * Temporary (?) hack so that we can store all top-level pending updates on
+ * composites instead of having to worry about different types of components
+ * here.
+ */
+var TopLevelWrapper = function() {};
+TopLevelWrapper.prototype.isReactComponent = {};
+if (__DEV__) {
+  TopLevelWrapper.displayName = 'TopLevelWrapper';
+}
+TopLevelWrapper.prototype.render = function() {
+  return this.props.child;
+};
+TopLevelWrapper.isReactTopLevelWrapper = true;
+
+/**
+ * Mounts this component and inserts it into the DOM.
+ *
+ * @param {ReactComponent} componentInstance The instance to mount.
+ * @param {ReactReconcileTransaction} transaction
+ * @param {Object} hostParent
+ * @param {Object} hostContainerInfo
+ */
+function mountComponentIntoNode(
+  componentInstance,
+  transaction,
+  hostParent,
+  hostContainerInfo,
+) {
+  var image = ReactReconciler.mountComponent(
+    componentInstance,
+    transaction,
+    null,
+    hostContainerInfo,
+    emptyObject,
+  );
+  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
+  return image;
+}
+
+/**
+ * Batched mount.
+ *
+ * @param {ReactComponent} componentInstance The instance to mount.
+ * @param {number} rootID ID of the root node.
+ * @param {number} containerTag container element to mount into.
+ */
+function batchedMountComponentIntoNode(componentInstance, options) {
+  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(true);
+  var image = transaction.perform(
+    mountComponentIntoNode,
+    null,
+    componentInstance,
+    transaction,
+    null,
+    options,
+  );
+  ReactUpdates.ReactReconcileTransaction.release(transaction);
+  return image;
+}
+
+var ReactTestInstance = function(component) {
+  this._component = component;
+};
+ReactTestInstance.prototype.getInstance = function() {
+  return this._component._renderedComponent.getPublicInstance();
+};
+ReactTestInstance.prototype.update = function(nextElement) {
+  invariant(
+    this._component,
+    "ReactTestRenderer: .update() can't be called after unmount.",
+  );
+  var nextWrappedElement = React.createElement(TopLevelWrapper, {
+    child: nextElement,
+  });
+  var component = this._component;
+  ReactUpdates.batchedUpdates(function() {
+    var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(true);
+    transaction.perform(function() {
+      ReactReconciler.receiveComponent(
+        component,
+        nextWrappedElement,
+        transaction,
+        emptyObject,
+      );
+    });
+    ReactUpdates.ReactReconcileTransaction.release(transaction);
+  });
+};
+ReactTestInstance.prototype.unmount = function(nextElement) {
+  var component = this._component;
+  ReactUpdates.batchedUpdates(function() {
+    var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(true);
+    transaction.perform(function() {
+      ReactReconciler.unmountComponent(component, false);
+    });
+    ReactUpdates.ReactReconcileTransaction.release(transaction);
+  });
+  this._component = null;
+};
+ReactTestInstance.prototype.toJSON = function() {
+  var inst = getHostComponentFromComposite(this._component);
+  if (inst === null) {
+    return null;
+  }
+  return inst.toJSON();
+};
+
+/**
+ * As soon as `ReactMount` is refactored to not rely on the DOM, we can share
+ * code between the two. For now, we'll hard code the ID logic.
+ */
+var ReactTestMount = {
+  render: function(
+    nextElement: ReactElement<any>,
+    options?: TestRendererOptions,
+  ): ReactTestInstance {
+    var nextWrappedElement = React.createElement(TopLevelWrapper, {
+      child: nextElement,
+    });
+
+    var instance = instantiateReactComponent(nextWrappedElement, false);
+
+    // The initial render is synchronous but any updates that happen during
+    // rendering, in componentWillMount or componentDidMount, will be batched
+    // according to the current batching strategy.
+    ReactUpdates.batchedUpdates(
+      batchedMountComponentIntoNode,
+      instance,
+      Object.assign({}, defaultTestOptions, options),
+    );
+    return new ReactTestInstance(instance);
+  },
+};
+
+module.exports = ReactTestMount;
diff --git a/src/renderers/testing/ReactTestReconcileTransaction.js b/src/renderers/testing/ReactTestReconcileTransaction.js
new file mode 100644
index 000000000..379be398e
--- /dev/null
+++ b/src/renderers/testing/ReactTestReconcileTransaction.js
@@ -0,0 +1,134 @@
+/**
+ * Copyright (c) 2015-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactTestReconcileTransaction
+ * @flow
+ */
+'use strict';
+
+var CallbackQueue = require('CallbackQueue');
+var PooledClass = require('PooledClass');
+var Transaction = require('Transaction');
+var ReactUpdateQueue = require('ReactUpdateQueue');
+
+import type {TestRendererOptions} from 'ReactTestMount';
+
+/**
+ * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks during
+ * the performing of the transaction.
+ */
+var ON_DOM_READY_QUEUEING = {
+  /**
+   * Initializes the internal `onDOMReady` queue.
+   */
+  initialize: function() {
+    this.reactMountReady.reset();
+  },
+
+  /**
+   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
+   */
+  close: function() {
+    this.reactMountReady.notifyAll();
+  },
+};
+
+/**
+ * Executed within the scope of the `Transaction` instance. Consider these as
+ * being member methods, but with an implied ordering while being isolated from
+ * each other.
+ */
+var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];
+
+/**
+ * Currently:
+ * - The order that these are listed in the transaction is critical:
+ * - Suppresses events.
+ * - Restores selection range.
+ *
+ * Future:
+ * - Restore document/overflow scroll positions that were unintentionally
+ *   modified via DOM insertions above the top viewport boundary.
+ * - Implement/integrate with customized constraint based layout system and keep
+ *   track of which dimensions must be remeasured.
+ *
+ * @class ReactTestReconcileTransaction
+ */
+function ReactTestReconcileTransaction(testOptions: TestRendererOptions) {
+  this.reinitializeTransaction();
+  this.testOptions = testOptions;
+  this.reactMountReady = CallbackQueue.getPooled(this);
+}
+
+var Mixin = {
+  /**
+   * @see Transaction
+   * @abstract
+   * @final
+   * @return {array<object>} List of operation wrap procedures.
+   *   TODO: convert to array<TransactionWrapper>
+   */
+  getTransactionWrappers: function() {
+    return TRANSACTION_WRAPPERS;
+  },
+
+  /**
+   * @return {object} The queue to collect `onDOMReady` callbacks with.
+   *   TODO: convert to ReactMountReady
+   */
+  getReactMountReady: function() {
+    return this.reactMountReady;
+  },
+
+  /**
+   * @return {object} the options passed to ReactTestRenderer
+   */
+  getTestOptions: function() {
+    return this.testOptions;
+  },
+
+  /**
+   * @return {object} The queue to collect React async events.
+   */
+  getUpdateQueue: function() {
+    return ReactUpdateQueue;
+  },
+
+  /**
+   * Save current transaction state -- if the return value from this method is
+   * passed to `rollback`, the transaction will be reset to that state.
+   */
+  checkpoint: function() {
+    // reactMountReady is the our only stateful wrapper
+    return this.reactMountReady.checkpoint();
+  },
+
+  rollback: function(checkpoint) {
+    this.reactMountReady.rollback(checkpoint);
+  },
+
+  /**
+   * `PooledClass` looks for this, and will invoke this before allowing this
+   * instance to be reused.
+   */
+  destructor: function() {
+    CallbackQueue.release(this.reactMountReady);
+    this.reactMountReady = null;
+  },
+};
+
+Object.assign(
+  ReactTestReconcileTransaction.prototype,
+  Transaction,
+  ReactTestReconcileTransaction,
+  Mixin,
+);
+
+PooledClass.addPoolingTo(ReactTestReconcileTransaction);
+
+module.exports = ReactTestReconcileTransaction;
diff --git a/src/renderers/testing/ReactTestRenderer.js b/src/renderers/testing/ReactTestRenderer.js
new file mode 100644
index 000000000..ea63638ba
--- /dev/null
+++ b/src/renderers/testing/ReactTestRenderer.js
@@ -0,0 +1,156 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactTestRenderer
+ * @flow
+ */
+
+'use strict';
+
+var ReactComponentEnvironment = require('ReactComponentEnvironment');
+var ReactDefaultBatchingStrategy = require('ReactDefaultBatchingStrategy');
+var ReactEmptyComponent = require('ReactEmptyComponent');
+var ReactMultiChild = require('ReactMultiChild');
+var ReactHostComponent = require('ReactHostComponent');
+var ReactTestMount = require('ReactTestMount');
+var ReactTestReconcileTransaction = require('ReactTestReconcileTransaction');
+var ReactUpdates = require('ReactUpdates');
+var ReactTestTextComponent = require('ReactTestTextComponent');
+var ReactTestEmptyComponent = require('ReactTestEmptyComponent');
+var invariant = require('invariant');
+
+import type {ReactElement} from 'ReactElementType';
+import type {ReactInstance} from 'ReactInstanceType';
+
+type ReactTestRendererJSON = {
+  type: string,
+  props: {[propName: string]: string},
+  children: null | Array<string | ReactTestRendererJSON>,
+  $$typeof?: any,
+};
+
+/**
+ * Drill down (through composites and empty components) until we get a native or
+ * native text component.
+ *
+ * This is pretty polymorphic but unavoidable with the current structure we have
+ * for `_renderedChildren`.
+ */
+function getRenderedHostOrTextFromComponent(component) {
+  var rendered;
+  while ((rendered = component._renderedComponent)) {
+    component = rendered;
+  }
+  return component;
+}
+
+class ReactTestComponent {
+  _currentElement: ReactElement;
+  _renderedChildren: null | Object;
+  _topLevelWrapper: null | ReactInstance;
+  _hostContainerInfo: null | Object;
+
+  constructor(element: ReactElement) {
+    this._currentElement = element;
+    this._renderedChildren = null;
+    this._topLevelWrapper = null;
+    this._hostContainerInfo = null;
+  }
+
+  mountComponent(
+    transaction: ReactTestReconcileTransaction,
+    nativeParent: null | ReactTestComponent,
+    hostContainerInfo: Object,
+    context: Object,
+  ) {
+    var element = this._currentElement;
+    this._hostContainerInfo = hostContainerInfo;
+    // $FlowFixMe https://github.com/facebook/flow/issues/1805
+    this.mountChildren(element.props.children, transaction, context);
+  }
+
+  receiveComponent(
+    nextElement: ReactElement,
+    transaction: ReactTestReconcileTransaction,
+    context: Object,
+  ) {
+    this._currentElement = nextElement;
+    // $FlowFixMe https://github.com/facebook/flow/issues/1805
+    this.updateChildren(nextElement.props.children, transaction, context);
+  }
+
+  getPublicInstance(): Object {
+    var element = this._currentElement;
+    var hostContainerInfo = this._hostContainerInfo;
+    invariant(
+      hostContainerInfo,
+      'hostContainerInfo should be populated before ' +
+        'getPublicInstance is called.',
+    );
+    return hostContainerInfo.createNodeMock(element);
+  }
+
+  toJSON(): ReactTestRendererJSON {
+    // not using `children`, but I don't want to rewrite without destructuring
+    // eslint-disable-next-line no-unused-vars
+    var {children, ...props} = this._currentElement.props;
+    var childrenJSON = [];
+    for (var key in this._renderedChildren) {
+      var inst = this._renderedChildren[key];
+      inst = getRenderedHostOrTextFromComponent(inst);
+      var json = inst.toJSON();
+      if (json !== undefined) {
+        childrenJSON.push(json);
+      }
+    }
+    var object: ReactTestRendererJSON = {
+      type: this._currentElement.type,
+      props: props,
+      children: childrenJSON.length ? childrenJSON : null,
+    };
+    Object.defineProperty(object, '$$typeof', {
+      value: Symbol.for('react.test.json'),
+    });
+    return object;
+  }
+
+  getHostNode(): void {}
+  unmountComponent(safely, skipLifecycle): void {
+    // $FlowFixMe https://github.com/facebook/flow/issues/1805
+    this.unmountChildren(safely, skipLifecycle);
+  }
+}
+
+Object.assign(ReactTestComponent.prototype, ReactMultiChild.Mixin);
+
+// =============================================================================
+
+ReactUpdates.injection.injectReconcileTransaction(
+  ReactTestReconcileTransaction,
+);
+ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
+
+ReactHostComponent.injection.injectGenericComponentClass(ReactTestComponent);
+ReactHostComponent.injection.injectTextComponentClass(ReactTestTextComponent);
+ReactEmptyComponent.injection.injectEmptyComponentFactory(function() {
+  return new ReactTestEmptyComponent();
+});
+
+ReactComponentEnvironment.injection.injectEnvironment({
+  processChildrenUpdates: function() {},
+  replaceNodeWithMarkup: function() {},
+});
+
+var ReactTestRenderer = {
+  create: ReactTestMount.render,
+  /* eslint-disable camelcase */
+  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
+  /* eslint-enable camelcase */
+};
+
+module.exports = ReactTestRenderer;
diff --git a/src/renderers/testing/ReactTestTextComponent.js b/src/renderers/testing/ReactTestTextComponent.js
new file mode 100644
index 000000000..deb2c674e
--- /dev/null
+++ b/src/renderers/testing/ReactTestTextComponent.js
@@ -0,0 +1,37 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactTestTextComponent
+ * @flow
+ */
+
+'use strict';
+
+import type {ReactText} from 'ReactTypes';
+
+class ReactTestTextComponent {
+  _currentElement: ReactText;
+
+  constructor(element: ReactText) {
+    this._currentElement = element;
+  }
+
+  receiveComponent(nextElement: ReactText) {
+    this._currentElement = nextElement;
+  }
+
+  toJSON(): ReactText {
+    return this._currentElement;
+  }
+
+  mountComponent(): void {}
+  getHostNode(): void {}
+  unmountComponent(): void {}
+}
+
+module.exports = ReactTestTextComponent;
diff --git a/src/renderers/testing/__tests__/ReactTestRenderer-test.js b/src/renderers/testing/__tests__/ReactTestRenderer-test.js
new file mode 100644
index 000000000..bc793202a
--- /dev/null
+++ b/src/renderers/testing/__tests__/ReactTestRenderer-test.js
@@ -0,0 +1,403 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+var React = require('React');
+var ReactTestRenderer = require('ReactTestRenderer');
+
+describe('ReactTestRenderer', () => {
+  it('renders a simple component', () => {
+    function Link() {
+      return <a role="link" />;
+    }
+    var renderer = ReactTestRenderer.create(<Link />);
+    expect(renderer.toJSON()).toEqual({
+      type: 'a',
+      props: {role: 'link'},
+      children: null,
+    });
+  });
+
+  it('renders a top-level empty component', () => {
+    function Empty() {
+      return null;
+    }
+    var renderer = ReactTestRenderer.create(<Empty />);
+    expect(renderer.toJSON()).toEqual(null);
+  });
+
+  it('exposes a type flag', () => {
+    function Link() {
+      return <a role="link" />;
+    }
+    var renderer = ReactTestRenderer.create(<Link />);
+    var object = renderer.toJSON();
+    expect(object.$$typeof).toBe(Symbol.for('react.test.json'));
+
+    // $$typeof should not be enumerable.
+    for (var key in object) {
+      if (Object.prototype.hasOwnProperty.call(object, key)) {
+        expect(key).not.toBe('$$typeof');
+      }
+    }
+  });
+
+  it('renders some basics with an update', () => {
+    var renders = 0;
+
+    class Component extends React.Component {
+      state = {x: 3};
+
+      render() {
+        renders++;
+        return (
+          <div className="purple">
+            {this.state.x}
+            <Child />
+            <Null />
+          </div>
+        );
+      }
+
+      componentDidMount() {
+        this.setState({x: 7});
+      }
+    }
+
+    var Child = () => {
+      renders++;
+      return <moo />;
+    };
+
+    var Null = () => {
+      renders++;
+      return null;
+    };
+
+    var renderer = ReactTestRenderer.create(<Component />);
+    expect(renderer.toJSON()).toEqual({
+      type: 'div',
+      props: {className: 'purple'},
+      children: [7, {type: 'moo', props: {}, children: null}],
+    });
+    expect(renders).toBe(6);
+  });
+
+  it('exposes the instance', () => {
+    class Mouse extends React.Component {
+      constructor() {
+        super();
+        this.state = {mouse: 'mouse'};
+      }
+      handleMoose() {
+        this.setState({mouse: 'moose'});
+      }
+      render() {
+        return <div>{this.state.mouse}</div>;
+      }
+    }
+    var renderer = ReactTestRenderer.create(<Mouse />);
+
+    expect(renderer.toJSON()).toEqual({
+      type: 'div',
+      props: {},
+      children: ['mouse'],
+    });
+
+    var mouse = renderer.getInstance();
+    mouse.handleMoose();
+    expect(renderer.toJSON()).toEqual({
+      type: 'div',
+      props: {},
+      children: ['moose'],
+    });
+  });
+
+  it('updates types', () => {
+    var renderer = ReactTestRenderer.create(<div>mouse</div>);
+    expect(renderer.toJSON()).toEqual({
+      type: 'div',
+      props: {},
+      children: ['mouse'],
+    });
+
+    renderer.update(<span>mice</span>);
+    expect(renderer.toJSON()).toEqual({
+      type: 'span',
+      props: {},
+      children: ['mice'],
+    });
+  });
+
+  it('updates children', () => {
+    var renderer = ReactTestRenderer.create(
+      <div>
+        <span key="a">A</span>
+        <span key="b">B</span>
+        <span key="c">C</span>
+      </div>,
+    );
+    expect(renderer.toJSON()).toEqual({
+      type: 'div',
+      props: {},
+      children: [
+        {type: 'span', props: {}, children: ['A']},
+        {type: 'span', props: {}, children: ['B']},
+        {type: 'span', props: {}, children: ['C']},
+      ],
+    });
+
+    renderer.update(
+      <div>
+        <span key="d">D</span>
+        <span key="c">C</span>
+        <span key="b">B</span>
+      </div>,
+    );
+    expect(renderer.toJSON()).toEqual({
+      type: 'div',
+      props: {},
+      children: [
+        {type: 'span', props: {}, children: ['D']},
+        {type: 'span', props: {}, children: ['C']},
+        {type: 'span', props: {}, children: ['B']},
+      ],
+    });
+  });
+
+  it('does the full lifecycle', () => {
+    var log = [];
+    class Log extends React.Component {
+      render() {
+        log.push('render ' + this.props.name);
+        return <div />;
+      }
+      componentDidMount() {
+        log.push('mount ' + this.props.name);
+      }
+      componentWillUnmount() {
+        log.push('unmount ' + this.props.name);
+      }
+    }
+
+    var renderer = ReactTestRenderer.create(<Log key="foo" name="Foo" />);
+    renderer.update(<Log key="bar" name="Bar" />);
+    renderer.unmount();
+
+    expect(log).toEqual([
+      'render Foo',
+      'mount Foo',
+      'unmount Foo',
+      'render Bar',
+      'mount Bar',
+      'unmount Bar',
+    ]);
+  });
+
+  it('gives a ref to native components', () => {
+    var log = [];
+    ReactTestRenderer.create(<div ref={r => log.push(r)} />);
+    expect(log).toEqual([null]);
+  });
+
+  it('warns correctly for refs on SFCs', () => {
+    spyOn(console, 'error');
+    function Bar() {
+      return <div>Hello, world</div>;
+    }
+    class Foo extends React.Component {
+      render() {
+        return <Bar ref="foo" />;
+      }
+    }
+    class Baz extends React.Component {
+      render() {
+        return <div ref="baz" />;
+      }
+    }
+    ReactTestRenderer.create(<Baz />);
+    ReactTestRenderer.create(<Foo />);
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'Stateless function components cannot be given refs ' +
+        '(See ref "foo" in Bar created by Foo). ' +
+        'Attempts to access this ref will fail.',
+    );
+  });
+
+  it('allows an optional createNodeMock function', () => {
+    var mockDivInstance = {appendChild: () => {}};
+    var mockInputInstance = {focus: () => {}};
+    var mockListItemInstance = {click: () => {}};
+    var mockAnchorInstance = {hover: () => {}};
+    var log = [];
+    class Foo extends React.Component {
+      componentDidMount() {
+        log.push(this.refs.bar);
+      }
+      render() {
+        return <a ref="bar">Hello, world</a>;
+      }
+    }
+    function createNodeMock(element) {
+      switch (element.type) {
+        case 'div':
+          return mockDivInstance;
+        case 'input':
+          return mockInputInstance;
+        case 'li':
+          return mockListItemInstance;
+        case 'a':
+          return mockAnchorInstance;
+        default:
+          return {};
+      }
+    }
+    ReactTestRenderer.create(<div ref={r => log.push(r)} />, {createNodeMock});
+    ReactTestRenderer.create(<input ref={r => log.push(r)} />, {
+      createNodeMock,
+    });
+    ReactTestRenderer.create(
+      <div>
+        <span>
+          <ul>
+            <li ref={r => log.push(r)} />
+          </ul>
+          <ul>
+            <li ref={r => log.push(r)} />
+            <li ref={r => log.push(r)} />
+          </ul>
+        </span>
+      </div>,
+      {createNodeMock, foobar: true},
+    );
+    ReactTestRenderer.create(<Foo />, {createNodeMock});
+    ReactTestRenderer.create(<div ref={r => log.push(r)} />);
+    ReactTestRenderer.create(<div ref={r => log.push(r)} />, {});
+    expect(log).toEqual([
+      mockDivInstance,
+      mockInputInstance,
+      mockListItemInstance,
+      mockListItemInstance,
+      mockListItemInstance,
+      mockAnchorInstance,
+      null,
+      null,
+    ]);
+  });
+
+  it('supports unmounting when using refs', () => {
+    class Foo extends React.Component {
+      render() {
+        return <div ref="foo" />;
+      }
+    }
+    const inst = ReactTestRenderer.create(<Foo />, {
+      createNodeMock: () => 'foo',
+    });
+    expect(() => inst.unmount()).not.toThrow();
+  });
+
+  it('supports unmounting inner instances', () => {
+    let count = 0;
+    class Foo extends React.Component {
+      componentWillUnmount() {
+        count++;
+      }
+      render() {
+        return <div />;
+      }
+    }
+    const inst = ReactTestRenderer.create(<div><Foo /></div>, {
+      createNodeMock: () => 'foo',
+    });
+    expect(() => inst.unmount()).not.toThrow();
+    expect(count).toEqual(1);
+  });
+
+  it('supports updates when using refs', () => {
+    const log = [];
+    const createNodeMock = element => {
+      log.push(element.type);
+      return element.type;
+    };
+    class Foo extends React.Component {
+      render() {
+        return this.props.useDiv ? <div ref="foo" /> : <span ref="foo" />;
+      }
+    }
+    const inst = ReactTestRenderer.create(<Foo useDiv={true} />, {
+      createNodeMock,
+    });
+    inst.update(<Foo useDiv={false} />);
+    // It's called with 'div' twice (mounting and unmounting)
+    expect(log).toEqual(['div', 'div', 'span']);
+  });
+
+  it('supports error boundaries', () => {
+    var log = [];
+    class Angry extends React.Component {
+      render() {
+        log.push('Angry render');
+        throw new Error('Please, do not render me.');
+      }
+      componentDidMount() {
+        log.push('Angry componentDidMount');
+      }
+      componentWillUnmount() {
+        log.push('Angry componentWillUnmount');
+      }
+    }
+
+    class Boundary extends React.Component {
+      constructor(props) {
+        super(props);
+        this.state = {error: false};
+      }
+      render() {
+        log.push('Boundary render');
+        if (!this.state.error) {
+          return (
+            <div><button onClick={this.onClick}>ClickMe</button><Angry /></div>
+          );
+        } else {
+          return <div>Happy Birthday!</div>;
+        }
+      }
+      componentDidMount() {
+        log.push('Boundary componentDidMount');
+      }
+      componentWillUnmount() {
+        log.push('Boundary componentWillUnmount');
+      }
+      onClick() {
+        /* do nothing */
+      }
+      unstable_handleError() {
+        this.setState({error: true});
+      }
+    }
+
+    var renderer = ReactTestRenderer.create(<Boundary />);
+    expect(renderer.toJSON()).toEqual({
+      type: 'div',
+      props: {},
+      children: ['Happy Birthday!'],
+    });
+    expect(log).toEqual([
+      'Boundary render',
+      'Angry render',
+      'Boundary render',
+      'Boundary componentDidMount',
+    ]);
+  });
+});
diff --git a/src/isomorphic/classic/types/ReactPropTypeLocationNames.js b/src/shared/types/ReactPropTypeLocationNames.js
similarity index 74%
rename from src/isomorphic/classic/types/ReactPropTypeLocationNames.js
rename to src/shared/types/ReactPropTypeLocationNames.js
index 7ea35f009..f416a1344 100644
--- a/src/isomorphic/classic/types/ReactPropTypeLocationNames.js
+++ b/src/shared/types/ReactPropTypeLocationNames.js
@@ -8,2 +8,3 @@
  *
+ * @flow
  * @providesModule ReactPropTypeLocationNames
@@ -13,3 +14,7 @@
 
-var ReactPropTypeLocationNames = {};
+import type {ReactPropTypeLocations} from 'ReactPropTypeLocations';
+
+type NamesType = {[key: ReactPropTypeLocations]: string};
+
+var ReactPropTypeLocationNames: NamesType = {};
 
diff --git a/src/isomorphic/classic/types/ReactPropTypeLocations.js b/src/shared/types/ReactPropTypeLocations.js
similarity index 67%
rename from src/isomorphic/classic/types/ReactPropTypeLocations.js
rename to src/shared/types/ReactPropTypeLocations.js
index 3ed5a649f..9b0752a75 100644
--- a/src/isomorphic/classic/types/ReactPropTypeLocations.js
+++ b/src/shared/types/ReactPropTypeLocations.js
@@ -8,2 +8,3 @@
  *
+ * @flow
  * @providesModule ReactPropTypeLocations
@@ -13,10 +14,2 @@
 
-var keyMirror = require('keyMirror');
-
-var ReactPropTypeLocations = keyMirror({
-  prop: null,
-  context: null,
-  childContext: null,
-});
-
-module.exports = ReactPropTypeLocations;
+export type ReactPropTypeLocations = 'prop' | 'context' | 'childContext';
diff --git a/src/shared/types/ReactPropTypesSecret.js b/src/shared/types/ReactPropTypesSecret.js
new file mode 100644
index 000000000..0f47ff2af
--- /dev/null
+++ b/src/shared/types/ReactPropTypesSecret.js
@@ -0,0 +1,17 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @flow
+ * @providesModule ReactPropTypesSecret
+ */
+
+'use strict';
+
+const ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
+
+module.exports = ReactPropTypesSecret;
diff --git a/src/shared/types/checkReactTypeSpec.js b/src/shared/types/checkReactTypeSpec.js
new file mode 100644
index 000000000..44f45786b
--- /dev/null
+++ b/src/shared/types/checkReactTypeSpec.js
@@ -0,0 +1,133 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule checkReactTypeSpec
+ */
+
+'use strict';
+
+var ReactPropTypeLocationNames = require('ReactPropTypeLocationNames');
+var ReactPropTypesSecret = require('ReactPropTypesSecret');
+
+var invariant = require('invariant');
+var warning = require('warning');
+
+import type {ReactPropTypeLocations} from 'ReactPropTypeLocations';
+
+var ReactComponentTreeHook;
+
+if (
+  typeof process !== 'undefined' &&
+  process.env &&
+  process.env.NODE_ENV === 'test'
+) {
+  // Temporary hack.
+  // Inline requires don't work well with Jest:
+  // https://github.com/facebook/react/issues/7240
+  // Remove the inline requires when we don't need them anymore:
+  // https://github.com/facebook/react/pull/7178
+  ReactComponentTreeHook = require('ReactComponentTreeHook');
+}
+
+var loggedTypeFailures = {};
+
+/**
+ * Assert that the values match with the type specs.
+ * Error messages are memorized and will only be shown once.
+ *
+ * @param {object} typeSpecs Map of name to a ReactPropType
+ * @param {object} values Runtime values that need to be type-checked
+ * @param {string} location e.g. "prop", "context", "child context"
+ * @param {string} componentName Name of the component for error messages.
+ * @param {?object} element The React element that is being type-checked
+ * @param {?number} debugID The React component instance that is being type-checked
+ * @private
+ */
+function checkReactTypeSpec(
+  typeSpecs,
+  values,
+  location: ReactPropTypeLocations,
+  componentName,
+  element,
+  debugID,
+) {
+  for (var typeSpecName in typeSpecs) {
+    if (typeSpecs.hasOwnProperty(typeSpecName)) {
+      var error;
+      // Prop type validation may throw. In case they do, we don't want to
+      // fail the render phase where it didn't fail before. So we log it.
+      // After these have been cleaned up, we'll let them throw.
+      try {
+        // This is intentionally an invariant that gets caught. It's the same
+        // behavior as without this statement except with a better message.
+        invariant(
+          typeof typeSpecs[typeSpecName] === 'function',
+          '%s: %s type `%s` is invalid; it must be a function, usually from ' +
+            'React.PropTypes.',
+          componentName || 'React class',
+          ReactPropTypeLocationNames[location],
+          typeSpecName,
+        );
+        error = typeSpecs[typeSpecName](
+          values,
+          typeSpecName,
+          componentName,
+          location,
+          null,
+          ReactPropTypesSecret,
+        );
+      } catch (ex) {
+        error = ex;
+      }
+      warning(
+        !error || error instanceof Error,
+        '%s: type specification of %s `%s` is invalid; the type checker ' +
+          'function must return `null` or an `Error` but returned a %s. ' +
+          'You may have forgotten to pass an argument to the type checker ' +
+          'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
+          'shape all require an argument).',
+        componentName || 'React class',
+        ReactPropTypeLocationNames[location],
+        typeSpecName,
+        typeof error,
+      );
+      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
+        // Only monitor this failure once because there tends to be a lot of the
+        // same error.
+        loggedTypeFailures[error.message] = true;
+
+        var componentStackInfo = '';
+
+        if (__DEV__) {
+          if (!ReactComponentTreeHook) {
+            ReactComponentTreeHook = require('ReactComponentTreeHook');
+          }
+          if (debugID !== null) {
+            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(
+              debugID,
+            );
+          } else if (element !== null) {
+            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(
+              element,
+            );
+          }
+        }
+
+        warning(
+          false,
+          'Failed %s type: %s%s',
+          location,
+          error.message,
+          componentStackInfo,
+        );
+      }
+    }
+  }
+}
+
+module.exports = checkReactTypeSpec;
diff --git a/src/shared/utils/KeyEscapeUtils.js b/src/shared/utils/KeyEscapeUtils.js
new file mode 100644
index 000000000..b7ed7a00b
--- /dev/null
+++ b/src/shared/utils/KeyEscapeUtils.js
@@ -0,0 +1,60 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule KeyEscapeUtils
+ * @flow
+ */
+
+'use strict';
+
+/**
+ * Escape and wrap key so it is safe to use as a reactid
+ *
+ * @param {string} key to be escaped.
+ * @return {string} the escaped key.
+ */
+function escape(key: string): string {
+  var escapeRegex = /[=:]/g;
+  var escaperLookup = {
+    '=': '=0',
+    ':': '=2',
+  };
+  var escapedString = ('' + key).replace(escapeRegex, function(match) {
+    return escaperLookup[match];
+  });
+
+  return '$' + escapedString;
+}
+
+/**
+ * Unescape and unwrap key for human-readable display
+ *
+ * @param {string} key to unescape.
+ * @return {string} the unescaped key.
+ */
+function unescape(key: string): string {
+  var unescapeRegex = /(=0|=2)/g;
+  var unescaperLookup = {
+    '=0': '=',
+    '=2': ':',
+  };
+  var keySubstring = key[0] === '.' && key[1] === '$'
+    ? key.substring(2)
+    : key.substring(1);
+
+  return ('' + keySubstring).replace(unescapeRegex, function(match) {
+    return unescaperLookup[match];
+  });
+}
+
+var KeyEscapeUtils = {
+  escape: escape,
+  unescape: unescape,
+};
+
+module.exports = KeyEscapeUtils;
diff --git a/src/shared/utils/PooledClass.js b/src/shared/utils/PooledClass.js
index 5000ca726..10674b8d9 100644
--- a/src/shared/utils/PooledClass.js
+++ b/src/shared/utils/PooledClass.js
@@ -9,2 +9,3 @@
  * @providesModule PooledClass
+ * @flow
  */
@@ -66,13 +67,2 @@ var fourArgumentPooler = function(a1, a2, a3, a4) {
 
-var fiveArgumentPooler = function(a1, a2, a3, a4, a5) {
-  var Klass = this;
-  if (Klass.instancePool.length) {
-    var instance = Klass.instancePool.pop();
-    Klass.call(instance, a1, a2, a3, a4, a5);
-    return instance;
-  } else {
-    return new Klass(a1, a2, a3, a4, a5);
-  }
-};
-
 var standardReleaser = function(instance) {
@@ -81,3 +71,3 @@ var standardReleaser = function(instance) {
     instance instanceof Klass,
-    'Trying to release an instance into a pool of a different type.'
+    'Trying to release an instance into a pool of a different type.',
   );
@@ -92,2 +82,4 @@ var DEFAULT_POOLER = oneArgumentPooler;
 
+type Pooler = any;
+
 /**
@@ -96,3 +88,3 @@ var DEFAULT_POOLER = oneArgumentPooler;
  * you give this may have a `poolSize` property, and will look for a
- * prototypical `destructor` on instances (optional).
+ * prototypical `destructor` on instances.
  *
@@ -101,4 +93,12 @@ var DEFAULT_POOLER = oneArgumentPooler;
  */
-var addPoolingTo = function(CopyConstructor, pooler) {
-  var NewKlass = CopyConstructor;
+var addPoolingTo = function<T>(
+  CopyConstructor: Class<T>,
+  pooler: Pooler,
+): Class<T> & {
+  getPooled(): /* arguments of the constructor */ T,
+  release(): void,
+} {
+  // Casting as any so that flow ignores the actual implementation and trusts
+  // it to match the type we declared
+  var NewKlass = (CopyConstructor: any);
   NewKlass.instancePool = [];
@@ -114,7 +114,6 @@ var PooledClass = {
   addPoolingTo: addPoolingTo,
-  oneArgumentPooler: oneArgumentPooler,
-  twoArgumentPooler: twoArgumentPooler,
-  threeArgumentPooler: threeArgumentPooler,
-  fourArgumentPooler: fourArgumentPooler,
-  fiveArgumentPooler: fiveArgumentPooler,
+  oneArgumentPooler: (oneArgumentPooler: Pooler),
+  twoArgumentPooler: (twoArgumentPooler: Pooler),
+  threeArgumentPooler: (threeArgumentPooler: Pooler),
+  fourArgumentPooler: (fourArgumentPooler: Pooler),
 };
diff --git a/src/shared/utils/ReactElementSymbol.js b/src/shared/utils/ReactElementSymbol.js
new file mode 100644
index 000000000..9d59d505e
--- /dev/null
+++ b/src/shared/utils/ReactElementSymbol.js
@@ -0,0 +1,21 @@
+/**
+ * Copyright 2014-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactElementSymbol
+ * @flow
+ */
+
+'use strict';
+
+// The Symbol used to tag the ReactElement type. If there is no native Symbol
+// nor polyfill, then a plain number is used for performance.
+var REACT_ELEMENT_TYPE =
+  (typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element')) ||
+  0xeac7;
+
+module.exports = REACT_ELEMENT_TYPE;
diff --git a/src/shared/utils/__tests__/KeyEscapeUtils-test.js b/src/shared/utils/__tests__/KeyEscapeUtils-test.js
new file mode 100644
index 000000000..eed9f4678
--- /dev/null
+++ b/src/shared/utils/__tests__/KeyEscapeUtils-test.js
@@ -0,0 +1,38 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+
+'use strict';
+
+var KeyEscapeUtils;
+
+describe('KeyEscapeUtils', () => {
+  beforeEach(() => {
+    jest.resetModuleRegistry();
+
+    KeyEscapeUtils = require('KeyEscapeUtils');
+  });
+
+  describe('escape', () => {
+    it('should properly escape and wrap user defined keys', () => {
+      expect(KeyEscapeUtils.escape('1')).toBe('$1');
+      expect(KeyEscapeUtils.escape('1=::=2')).toBe('$1=0=2=2=02');
+    });
+  });
+
+  describe('unescape', () => {
+    it('should properly unescape and unwrap user defined keys', () => {
+      expect(KeyEscapeUtils.unescape('.1')).toBe('1');
+      expect(KeyEscapeUtils.unescape('$1')).toBe('1');
+      expect(KeyEscapeUtils.unescape('.$1')).toBe('1');
+      expect(KeyEscapeUtils.unescape('$1=0=2=2=02')).toBe('1=::=2');
+    });
+  });
+});
diff --git a/src/shared/utils/__tests__/OrderedMap-test.js b/src/shared/utils/__tests__/OrderedMap-test.js
deleted file mode 100644
index cdcff5aa4..000000000
--- a/src/shared/utils/__tests__/OrderedMap-test.js
+++ /dev/null
@@ -1,941 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
- */
-
-'use strict';
-
-var OrderedMap;
-
-/**
- * Shared, reusable objects.
- */
-var hasEmptyStringKey = {
-  'thisKeyIsFine': {data: []},
-  '': {thisShouldCauseAFailure: []},
-  'thisKeyIsAlsoFine': {data: []},
-};
-
-/**
- * Used as map/forEach callback.
- */
-var duplicate = function(itm, key, count) {
-  return {
-    uniqueID: itm.uniqueID,
-    val: itm.val + key + count + this.justToTestScope,
-  };
-};
-
-// Should not be allowed - because then null/'null' become impossible to
-// distinguish. Every key MUST be a string period!
-var hasNullAndUndefStringKey = [
-  {uniqueID: 'undefined', val: 'thisIsUndefined'},
-  {uniqueID: 'null', val: 'thisIsNull'},
-];
-var hasNullKey = [
-  {uniqueID: 'thisKeyIsFine', data: []},
-  {uniqueID: 'thisKeyIsAlsoFine', data: []},
-  {uniqueID: null, data: []},
-];
-
-var hasObjectKey = [
-  {uniqueID: 'thisKeyIsFine', data: []},
-  {uniqueID: 'thisKeyIsAlsoFine', data: []},
-  {uniqueID: {}, data: []},
-];
-
-var hasArrayKey = [
-  {uniqueID: 'thisKeyIsFine', data: []},
-  {uniqueID: 'thisKeyIsAlsoFine', data: []},
-  {uniqueID: [], data: []},
-];
-
-// This should be allowed
-var hasNullStringKey = [
-  {uniqueID: 'thisKeyIsFine', data: []},
-  {uniqueID: 'thisKeyIsAlsoFine', data: []},
-  {uniqueID: 'null', data: []},
-];
-
-var hasUndefinedKey = [
-  {uniqueID: 'thisKeyIsFine', data: []},
-  {uniqueID: 'thisKeyIsAlsoFine', data: []},
-  {uniqueID: undefined, data: []},
-];
-
-var hasUndefinedStringKey = [
-  {uniqueID: 'thisKeyIsFine', data: []},
-  {uniqueID: 'thisKeyIsAlsoFine', data: []},
-  {uniqueID: 'undefined', data: []},
-];
-
-var hasPositiveNumericKey = [
-  {uniqueID: 'notANumber', data: []},
-  {uniqueID: '5', data: []},
-  {uniqueID: 'notAnotherNumber', data: []},
-];
-
-var hasZeroStringKey = [
-  {uniqueID: 'greg', data: 'grego'},
-  {uniqueID: '0', data: '0o'},
-  {uniqueID: 'tom', data: 'tomo'},
-];
-
-var hasZeroNumberKey = [
-  {uniqueID: 'greg', data: 'grego'},
-  {uniqueID: 0, data: '0o'},
-  {uniqueID: 'tom', data: 'tomo'},
-];
-
-var hasAllNumericStringKeys = [
-  {uniqueID: '0', name: 'Gregory'},
-  {uniqueID: '2', name: 'James'},
-  {uniqueID: '1', name: 'Tom'},
-];
-
-var hasAllNumericKeys = [
-  {uniqueID: 0, name: 'Gregory'},
-  {uniqueID: 2, name: 'James'},
-  {uniqueID: 1, name: 'Tom'},
-];
-
-var hasAllValidKeys = [
-  {uniqueID: 'keyOne', value: 'valueOne'},
-  {uniqueID: 'keyTwo', value: 'valueTwo'},
-];
-
-var hasDuplicateKeys = [
-  {uniqueID: 'keyOne', value: 'valueOne'},
-  {uniqueID: 'keyTwo', value: 'valueTwo'},
-  {uniqueID: 'keyOne', value: 'valueThree'},
-];
-
-var idEntities = [
-  {uniqueID: 'greg', name: 'Gregory'},
-  {uniqueID: 'james', name: 'James'},
-  {uniqueID: 'tom', name: 'Tom'},
-];
-
-var hasEmptyKey = [
-  {uniqueID: 'greg', name: 'Gregory'},
-  {uniqueID: '', name: 'James'},
-  {uniqueID: 'tom', name: 'Tom'},
-];
-
-var extractUniqueID = function(entity) {
-  return entity.uniqueID;
-};
-
-describe('OrderedMap', function() {
-  beforeEach(function() {
-    jest.resetModuleRegistry();
-    OrderedMap = require('OrderedMap');
-  });
-
-  it('should create according to simple object with keys', function() {
-    OrderedMap.fromArray(hasAllValidKeys, extractUniqueID);
-    // Iterate over and ensure key order.
-  });
-
-  it('should create from array when providing an identity CB', function() {
-    expect(function() {
-      OrderedMap.fromArray(idEntities, extractUniqueID);
-    }).not.toThrow();
-  });
-
-  it('should throw if constructing from Array without identity CB', function() {
-    OrderedMap.fromArray(idEntities, extractUniqueID);
-    // Iterate and ensure key order
-  });
-
-  it('should not throw when fromArray extracts a numeric key', function() {
-    expect(function() {
-      OrderedMap.fromArray(hasPositiveNumericKey, extractUniqueID);
-    }).not.toThrow();
-
-  });
-
-  it('should throw when any key is the empty string', function() {
-    expect(function() {
-      OrderedMap.fromArray(hasEmptyKey, extractUniqueID);
-    }).toThrow();
-  });
-
-  it('should not throw when a key is the string "undefined" or "null"',
-    function() {
-      var om = OrderedMap.fromArray(hasNullAndUndefStringKey, extractUniqueID);
-      expect(om.length).toBe(2);
-      expect(om.indexOfKey('undefined')).toBe(0);
-      expect(om.indexOfKey('null')).toBe(1);
-      expect(om.keyAfter('undefined')).toBe('null');
-      expect(om.keyAfter('null')).toBe(undefined);
-      expect(om.keyBefore('undefined')).toBe(undefined);
-      expect(om.has('undefined')).toBe(true);
-      expect(om.has('null')).toBe(true);
-      expect(om.get('undefined').val).toBe('thisIsUndefined');
-      expect(om.get('null').val).toBe('thisIsNull');
-    });
-
-
-  /**
-   * Numeric keys are cast to strings.
-   */
-  it('should not throw when a key is the number zero', function() {
-    var om = OrderedMap.fromArray(hasZeroNumberKey, extractUniqueID);
-    expect(om.length).toBe(3);
-    expect(om.indexOfKey('0')).toBe(1);
-    expect(om.indexOfKey(0)).toBe(1);
-  });
-
-  it('should throw when any key is falsey', function() {
-    expect(function() {
-      OrderedMap.fromArray(hasEmptyStringKey, extractUniqueID);
-    }).toThrow();
-
-    expect(function() {
-      OrderedMap.fromArray(hasNullKey, extractUniqueID);
-    }).toThrow();
-
-    expect(function() {
-      OrderedMap.fromArray(hasUndefinedKey, extractUniqueID);
-    }).toThrow();
-  });
-
-  it('should not throw on string keys "undefined/null"', function() {
-    expect(function() {
-      OrderedMap.fromArray(hasNullStringKey, extractUniqueID);
-    }).not.toThrow();
-
-    expect(function() {
-      OrderedMap.fromArray(hasUndefinedStringKey, extractUniqueID);
-    }).not.toThrow();
-  });
-
-  it('should throw on extracting keys that are not strings/nums', function() {
-    expect(function() {
-      OrderedMap.fromArray(hasObjectKey, extractUniqueID);
-    }).toThrow();
-
-    expect(function() {
-      OrderedMap.fromArray(hasArrayKey, extractUniqueID);
-    }).toThrow();
-  });
-
-  it('should throw if instantiating with duplicate key', function() {
-    expect(function() {
-      OrderedMap.fromArray(hasDuplicateKeys, extractUniqueID);
-    }).toThrow();
-  });
-
-  it('should not throw when a key is the string "0"', function() {
-    var verifyOM = function(om) {
-      expect(om.length).toBe(3);
-      expect(om.indexOfKey('greg')).toBe(0);
-      expect(om.indexOfKey('0')).toBe(1);
-      expect(om.indexOfKey(0)).toBe(1); // Casts on writes and reads.
-      expect(om.indexOfKey('tom')).toBe(2);
-      expect(om.keyAfter('greg')).toBe('0');
-      expect(om.keyAfter('0')).toBe('tom');
-      expect(om.keyAfter(0)).toBe('tom');
-      expect(om.keyAfter('tom')).toBe(undefined);
-      expect(om.keyBefore('greg')).toBe(undefined);
-      expect(om.keyBefore(0)).toBe('greg');
-      expect(om.keyBefore('0')).toBe('greg');
-      expect(om.keyBefore('tom')).toBe('0');
-      expect(om.has('undefined')).toBe(false);
-      expect(om.has(0)).toBe(true);
-      expect(om.has('0')).toBe(true);
-    };
-    verifyOM(OrderedMap.fromArray(hasZeroStringKey, extractUniqueID));
-    verifyOM(OrderedMap.fromArray(hasZeroNumberKey, extractUniqueID));
-  });
-
-  it('should throw when getting invalid public key', function() {
-    var om = OrderedMap.fromArray(hasAllValidKeys, extractUniqueID);
-    expect(function() {
-      om.has(undefined);
-    }).toThrow();
-    expect(function() {
-      om.get(undefined);
-    }).toThrow();
-    expect(function() {
-      om.has(null);
-    }).toThrow();
-    expect(function() {
-      om.get(null);
-    }).toThrow();
-    expect(function() {
-      om.has('');
-    }).toThrow();
-    expect(function() {
-      om.get('');
-    }).toThrow();
-  });
-
-  it('should throw when any key is falsey', function() {
-    expect(function() {
-      OrderedMap.fromArray(hasEmptyStringKey, extractUniqueID);
-    }).toThrow();
-
-    expect(function() {
-      OrderedMap.fromArray(hasNullKey, extractUniqueID);
-    }).toThrow();
-
-    expect(function() {
-      OrderedMap.fromArray(hasUndefinedKey, extractUniqueID);
-    }).toThrow();
-  });
-
-
-  it('should throw when fromArray is passed crazy args', function() {
-    // Test passing another OrderedMap (when it expects a plain object.)
-    // This is probably not what you meant to do! We should error.
-    var validOM = OrderedMap.fromArray(hasAllValidKeys, extractUniqueID);
-    expect(function() {
-      OrderedMap.fromArray({uniqueID: 'asdf'}, extractUniqueID);
-    }).toThrow();
-    expect(function() {
-      OrderedMap.fromArray(validOM, extractUniqueID);
-    }).toThrow();
-  });
-
-  it('should throw when fromArray is passed crazy things', function() {
-    expect(function() {
-      OrderedMap.fromArray(null, extractUniqueID);
-    }).toThrow();
-    expect(function() {
-      OrderedMap.fromArray('stringgg', extractUniqueID);
-    }).toThrow();
-    expect(function() {
-      OrderedMap.fromArray(undefined, extractUniqueID);
-    }).toThrow();
-    expect(function() {
-      OrderedMap.fromArray(new Date(), extractUniqueID);
-    }).toThrow();
-    expect(function() {
-      OrderedMap.fromArray({}, extractUniqueID);
-    }).toThrow();
-
-    // Test failure without extractor
-    expect(function() {
-      OrderedMap.fromArray(idEntities);
-    }).toThrow();
-    expect(function() {
-      OrderedMap.fromArray(idEntities, extractUniqueID);
-    }).not.toThrow();
-  });
-
-  // Testing methods that accept other `OrderedMap`s.
-  it('should throw when from/merge is passed an non-OrderedMap.', function() {
-    // Test passing an array to construction.
-    expect(function() {
-      OrderedMap.from(idEntities, extractUniqueID);
-    }).toThrow();
-
-    // Test passing an array to merge.
-    expect(function() {
-      OrderedMap.fromArray(idEntities, extractUniqueID)
-        .merge(idEntities, extractUniqueID);
-    }).toThrow();
-
-
-    // Test passing a plain object to merge.
-    expect(function() {
-      OrderedMap.fromArray(
-        idEntities,
-        extractUniqueID
-      ).merge({blah: 'willFail'});
-    }).toThrow();
-  });
-
-  it('should throw when accessing key before/after of non-key', function() {
-    var om = OrderedMap.fromArray(
-      [
-        {uniqueID: 'first'},
-        {uniqueID: 'two'},
-      ], extractUniqueID
-    );
-    expect(function() {
-      om.keyBefore('dog');
-    }).toThrow();
-    expect(function() {
-      om.keyAfter('cat');
-    }).toThrow();
-    expect(function() {
-      om.keyAfter(null);
-    }).toThrow();
-    expect(function() {
-      om.keyAfter(undefined);
-    }).toThrow();
-  });
-
-  it('should throw passing invalid/not-present-keys to before/after',
-    function() {
-      var om = OrderedMap.fromArray([
-        {uniqueID: 'one', val: 'first'},
-        {uniqueID: 'two', val: 'second'},
-        {uniqueID: 'three', val: 'third'},
-        {uniqueID: 'four', val: 'fourth'},
-      ], extractUniqueID);
-
-      expect(function() {
-        om.keyBefore('');
-      }).toThrow();
-      expect(function() {
-        om.keyBefore(null);
-      }).toThrow();
-      expect(function() {
-        om.keyBefore(undefined);
-      }).toThrow();
-      expect(function() {
-        om.keyBefore('notInTheOrderedMap!');
-      }).toThrow();
-
-      expect(function() {
-        om.keyAfter('');
-      }).toThrow();
-      expect(function() {
-        om.keyAfter(null);
-      }).toThrow();
-      expect(function() {
-        om.keyAfter(undefined);
-      }).toThrow();
-      expect(function() {
-        om.keyAfter('notInTheOrderedMap!');
-      }).toThrow();
-
-      expect(function() {
-        om.nthKeyAfter('', 1);
-      }).toThrow();
-      expect(function() {
-        om.nthKeyAfter(null, 1);
-      }).toThrow();
-      expect(function() {
-        om.nthKeyAfter(undefined, 1);
-      }).toThrow();
-      expect(function() {
-        om.nthKeyAfter('notInTheOrderedMap!', 1);
-      }).toThrow();
-
-      expect(function() {
-        om.nthKeyBefore('', 1);
-      }).toThrow();
-      expect(function() {
-        om.nthKeyBefore(null, 1);
-      }).toThrow();
-      expect(function() {
-        om.nthKeyBefore(undefined, 1);
-      }).toThrow();
-      expect(function() {
-        om.nthKeyBefore('notInTheOrderedMap!', 1);
-      }).toThrow();
-    });
-
-  it('should correctly determine the nth key after before', function() {
-    var om = OrderedMap.fromArray([
-      {uniqueID: 'one', val: 'first'},
-      {uniqueID: 'two', val: 'second'},
-      {uniqueID: 'three', val: 'third'},
-      {uniqueID: 'four', val: 'fourth'},
-    ], extractUniqueID);
-    expect(om.keyBefore('one')).toBe(undefined); // first key
-    expect(om.keyBefore('two')).toBe('one');
-    expect(om.keyBefore('three')).toBe('two');
-    expect(om.keyBefore('four')).toBe('three');
-
-    expect(om.keyAfter('one')).toBe('two'); // first key
-    expect(om.keyAfter('two')).toBe('three');
-    expect(om.keyAfter('three')).toBe('four');
-    expect(om.keyAfter('four')).toBe(undefined);
-
-    expect(om.nthKeyBefore('one', 0)).toBe('one'); // first key
-    expect(om.nthKeyBefore('one', 1)).toBe(undefined);
-    expect(om.nthKeyBefore('one', 2)).toBe(undefined);
-    expect(om.nthKeyBefore('two', 0)).toBe('two');
-    expect(om.nthKeyBefore('two', 1)).toBe('one');
-    expect(om.nthKeyBefore('four', 0)).toBe('four');
-    expect(om.nthKeyBefore('four', 1)).toBe('three');
-
-    expect(om.nthKeyAfter('one', 0)).toBe('one');
-    expect(om.nthKeyAfter('one', 1)).toBe('two');
-    expect(om.nthKeyAfter('one', 2)).toBe('three');
-    expect(om.nthKeyAfter('two', 0)).toBe('two');
-    expect(om.nthKeyAfter('two', 1)).toBe('three');
-    expect(om.nthKeyAfter('four', 0)).toBe('four');
-    expect(om.nthKeyAfter('four', 1)).toBe(undefined);
-  });
-
-  it('should compute key indices correctly', function() {
-    var om = OrderedMap.fromArray([
-      {uniqueID: 'one', val: 'first'},
-      {uniqueID: 'two', val: 'second'},
-    ], extractUniqueID);
-    expect(om.keyAtIndex(0)).toBe('one');
-    expect(om.keyAtIndex(1)).toBe('two');
-    expect(om.keyAtIndex(2)).toBe(undefined);
-    expect(om.indexOfKey('one')).toBe(0);
-    expect(om.indexOfKey('two')).toBe(1);
-    expect(om.indexOfKey('nope')).toBe(undefined);
-    expect(function() {
-      om.indexOfKey(null);
-    }).toThrow();
-    expect(function() {
-      om.indexOfKey(undefined);
-    }).toThrow();
-    expect(function() {
-      om.indexOfKey(''); // Empty key is not allowed
-    }).toThrow();
-  });
-
-  it('should compute indices on array that extracted numeric ids', function() {
-    var som = OrderedMap.fromArray(hasZeroStringKey, extractUniqueID);
-    expect(som.keyAtIndex(0)).toBe('greg');
-    expect(som.keyAtIndex(1)).toBe('0');
-    expect(som.keyAtIndex(2)).toBe('tom');
-    expect(som.indexOfKey('greg')).toBe(0);
-    expect(som.indexOfKey('0')).toBe(1);
-    expect(som.indexOfKey('tom')).toBe(2);
-
-
-    var verifyNumericKeys = function(nom) {
-      expect(nom.keyAtIndex(0)).toBe('0');
-      expect(nom.keyAtIndex(1)).toBe('2');
-      expect(nom.keyAtIndex(2)).toBe('1');
-      expect(nom.indexOfKey('0')).toBe(0);
-      expect(nom.indexOfKey('2')).toBe(1); // Prove these are not ordered by
-      expect(nom.indexOfKey('1')).toBe(2); // their keys
-    };
-    var omStringNumberKeys =
-      OrderedMap.fromArray(hasAllNumericStringKeys, extractUniqueID);
-    verifyNumericKeys(omStringNumberKeys);
-    var omNumericKeys =
-      OrderedMap.fromArray(hasAllNumericKeys, extractUniqueID);
-    verifyNumericKeys(omNumericKeys);
-  });
-
-  it('should compute indices on mutually exclusive merge', function() {
-    var om = OrderedMap.fromArray([
-      {uniqueID: 'one', val: 'first'},
-      {uniqueID: 'two', val: 'second'},
-    ], extractUniqueID);
-    var om2 = OrderedMap.fromArray([
-      {uniqueID: 'three', val: 'third'},
-    ], extractUniqueID);
-    var res = om.merge(om2);
-
-    expect(res.length).toBe(3);
-
-    expect(res.keyAtIndex(0)).toBe('one');
-    expect(res.keyAtIndex(1)).toBe('two');
-    expect(res.keyAtIndex(2)).toBe('three');
-    expect(res.keyAtIndex(3)).toBe(undefined);
-
-    expect(res.indexOfKey('one')).toBe(0);
-    expect(res.indexOfKey('two')).toBe(1);
-    expect(res.indexOfKey('three')).toBe(2);
-    expect(res.indexOfKey('dog')).toBe(undefined);
-
-    expect(res.has('one')).toBe(true);
-    expect(res.has('two')).toBe(true);
-    expect(res.has('three')).toBe(true);
-    expect(res.has('dog')).toBe(false);
-
-    expect(res.get('one').val).toBe('first');
-    expect(res.get('two').val).toBe('second');
-    expect(res.get('three').val).toBe('third');
-    expect(res.get('dog')).toBe(undefined);
-  });
-
-  it('should compute indices on intersected merge', function() {
-    var oneTwo = OrderedMap.fromArray([
-      {uniqueID: 'one', val: 'first'},
-      {uniqueID: 'two', val: 'secondOM1'},
-    ], extractUniqueID);
-
-    var testOneTwoMergedWithTwoThree = function(res) {
-      expect(res.length).toBe(3);
-      expect(res.keyAtIndex(0)).toBe('one');
-      expect(res.keyAtIndex(1)).toBe('two');
-      expect(res.keyAtIndex(2)).toBe('three');
-      expect(res.keyAtIndex(3)).toBe(undefined);
-      expect(res.indexOfKey('one')).toBe(0);
-      expect(res.indexOfKey('two')).toBe(1);
-      expect(res.indexOfKey('three')).toBe(2);
-      expect(res.indexOfKey('dog')).toBe(undefined);
-      expect(res.has('one')).toBe(true);
-      expect(res.has('two')).toBe(true);
-      expect(res.has('three')).toBe(true);
-      expect(res.has('dog')).toBe(false);
-      expect(res.get('one').val).toBe('first');
-      expect(res.get('two').val).toBe('secondOM2');
-      expect(res.get('three').val).toBe('third');
-      expect(res.get('dog')).toBe(undefined);
-    };
-
-    var result =
-      oneTwo.merge(OrderedMap.fromArray([
-        {uniqueID: 'two', val: 'secondOM2'},
-        {uniqueID: 'three', val: 'third'},
-      ], extractUniqueID));
-    testOneTwoMergedWithTwoThree(result);
-
-    // Everything should be exactly as before, since the ordering of `two` was
-    // already determined by `om`.
-    result = oneTwo.merge(
-      OrderedMap.fromArray([
-        {uniqueID: 'three', val: 'third'},
-        {uniqueID: 'two', val:'secondOM2'},
-      ], extractUniqueID)
-    );
-    testOneTwoMergedWithTwoThree(result);
-
-
-    var testTwoThreeMergedWithOneTwo = function(res) {
-      expect(res.length).toBe(3);
-      expect(res.keyAtIndex(0)).toBe('two');
-      expect(res.keyAtIndex(1)).toBe('three');
-      expect(res.keyAtIndex(2)).toBe('one');
-      expect(res.keyAtIndex(3)).toBe(undefined);
-      expect(res.indexOfKey('two')).toBe(0);
-      expect(res.indexOfKey('three')).toBe(1);
-      expect(res.indexOfKey('one')).toBe(2);
-      expect(res.indexOfKey('cat')).toBe(undefined);
-      expect(res.has('two')).toBe(true);
-      expect(res.has('three')).toBe(true);
-      expect(res.has('one')).toBe(true);
-      expect(res.has('dog')).toBe(false);
-      expect(res.get('one').val).toBe('first');
-      expect(res.get('two').val).toBe('secondOM1');
-      expect(res.get('three').val).toBe('third');
-      expect(res.get('dog')).toBe(undefined);
-    };
-    result = OrderedMap.fromArray([
-      {uniqueID: 'two', val: 'secondOM2'},
-      {uniqueID: 'three', val: 'third'},
-    ], extractUniqueID).merge(oneTwo);
-    testTwoThreeMergedWithOneTwo(result);
-
-  });
-
-  it('should merge mutually exclusive keys to the end.', function() {
-    var om = OrderedMap.fromArray([
-      {uniqueID: 'one', val: 'first'},
-      {uniqueID: 'two', val: 'second'},
-    ], extractUniqueID);
-    var om2 = OrderedMap.fromArray([
-      {uniqueID: 'three', val: 'first'},
-      {uniqueID: 'four', val: 'second'},
-    ], extractUniqueID);
-    var res = om.merge(om2);
-    expect(res.length).toBe(4);
-
-  });
-
-  it('should map correctly', function() {
-    var om = OrderedMap.fromArray([
-      {uniqueID: 'x', val: 'xx'},
-      {uniqueID: 'y', val: 'yy'},
-      {uniqueID: 'z', val: 'zz'},
-    ], extractUniqueID);
-    var scope = {justToTestScope: 'justTestingScope'};
-    var verifyResult = function(omResult) {
-      expect(omResult.length).toBe(3);
-      expect(omResult.keyAtIndex(0)).toBe('x');
-      expect(omResult.keyAtIndex(1)).toBe('y');
-      expect(omResult.keyAtIndex(2)).toBe('z');
-      expect(omResult.get('x').val).toBe('xxx0justTestingScope');
-      expect(omResult.get('y').val).toBe('yyy1justTestingScope');
-      expect(omResult.get('z').val).toBe('zzz2justTestingScope');
-    };
-    var resultOM = om.map(function(itm, key, count) {
-      return {
-        uniqueID: itm.uniqueID,
-        val: itm.val + key + count + this.justToTestScope,
-      };
-    }, scope);
-    verifyResult(resultOM);
-
-    var resArray = [];
-    om.forEach(function(itm, key, count) {
-      resArray.push({
-        uniqueID: itm.uniqueID,
-        val: itm.val + key + count + this.justToTestScope,
-      });
-    }, scope);
-    resultOM = OrderedMap.fromArray(resArray, extractUniqueID);
-    verifyResult(resultOM);
-  });
-
-  it('should filter correctly', function() {
-    var om = OrderedMap.fromArray([
-      {uniqueID: 'x', val: 'xx'},
-      {uniqueID: 'y', val: 'yy'},
-      {uniqueID: 'z', val: 'zz'},
-    ], extractUniqueID);
-    var scope = {justToTestScope: 'justTestingScope'};
-
-    var filteringCallback = function(item, key, indexInOriginal) {
-      expect(this).toBe(scope);
-      expect(key === 'x' || key === 'y' || key === 'z').toBe(true);
-      if (key === 'x') {
-        expect(item.val).toBe('xx');
-        expect(indexInOriginal).toBe(0);
-        return false;
-      } else if (key === 'y') {
-        expect(item.val).toBe('yy');
-        expect(indexInOriginal).toBe(1);
-        return true;
-      } else {
-        expect(item.val).toBe('zz');
-        expect(indexInOriginal).toBe(2);
-        return true;
-      }
-    };
-
-    var verifyResult = function(omResult) {
-      expect(omResult.length).toBe(2);
-      expect(omResult.keyAtIndex(0)).toBe('y');
-      expect(omResult.keyAtIndex(1)).toBe('z');
-      expect(omResult.has('x')).toBe(false);
-      expect(omResult.has('z')).toBe(true);
-      expect(omResult.get('z').val).toBe('zz');
-      expect(omResult.has('y')).toBe(true);
-      expect(omResult.get('y').val).toBe('yy');
-    };
-
-    var resultOM = om.filter(filteringCallback, scope);
-    verifyResult(resultOM);
-  });
-
-  it('should throw when providing invalid ranges to ranging', function() {
-    var om = OrderedMap.fromArray([
-      {uniqueID: 'x', val: 'xx'},
-      {uniqueID: 'y', val: 'yy'},
-      {uniqueID: 'z', val: 'zz'},
-    ], extractUniqueID);
-    var scope = {justToTestScope: 'justTestingScope'};
-
-    expect(function() {
-      om.mapRange(duplicate, 0, 3, scope);
-    }).not.toThrow();
-    expect(function() {
-      om.filterRange(duplicate, 0, 3, scope);
-    }).not.toThrow();
-    expect(function() {
-      om.forEachRange(duplicate, 0, 3, scope);
-    }).not.toThrow();
-    expect(function() {
-      om.mapKeyRange(duplicate, 'x', 3, scope);
-    }).toThrow(
-      'mapKeyRange must be given keys that are present.'
-    );
-    expect(function() {
-      om.forEachKeyRange(duplicate, 'x', 3, scope);
-    }).toThrow(
-      'forEachKeyRange must be given keys that are present.'
-    );
-
-    expect(function() {
-      om.mapRange(duplicate, 0, 4, scope);
-    }).toThrow();
-    expect(function() {
-      om.filterRange(duplicate, 0, 4, scope);
-    }).toThrow();
-    expect(function() {
-      om.forEachRange(duplicate, 0, 4, scope);
-    }).toThrow();
-    expect(function() {
-      om.mapKeyRange(duplicate, 'x', null, scope);
-    }).toThrow();
-    expect(function() {
-      om.forEachKeyRange(duplicate, 'x', null, scope);
-    }).toThrow();
-
-    expect(function() {
-      om.mapRange(duplicate, -1, 1, scope);
-    }).toThrow();
-    expect(function() {
-      om.filterRange(duplicate, -1, 1, scope);
-    }).toThrow();
-    expect(function() {
-      om.forEachRange(duplicate, -1, 1, scope);
-    }).toThrow();
-    expect(function() {
-      om.mapKeyRange(duplicate, null, 'y', scope);
-    }).toThrow();
-    expect(function() {
-      om.forEachKeyRange(duplicate, null, 'y', scope);
-    }).toThrow();
-
-    expect(function() {
-      om.mapRange(duplicate, 0, 0, scope);
-    }).not.toThrow();
-    expect(function() {
-      om.filterRange(duplicate, 0, 0, scope);
-    }).not.toThrow();
-    expect(function() {
-      om.forEachRange(duplicate, 0, 0, scope);
-    }).not.toThrow();
-    expect(function() {
-      om.mapKeyRange(duplicate, 'x', 'x', scope);
-    }).not.toThrow();
-    expect(function() {
-      om.forEachKeyRange(duplicate, 'x', 'x', scope);
-    }).not.toThrow();
-
-    expect(function() {
-      om.mapRange(duplicate, 0, -1, scope);
-    }).toThrow();
-    expect(function() {
-      om.filterRange(duplicate, 0, -1, scope);
-    }).toThrow();
-    expect(function() {
-      om.forEachRange(duplicate, 0, -1, scope);
-    }).toThrow();
-    expect(function() {
-      om.mapKeyRange(duplicate, 'x', null, scope);
-    }).toThrow();
-    expect(function() {
-      om.forEachKeyRange(duplicate, 'x', null, scope);
-    }).toThrow();
-
-    expect(function() {
-      om.mapRange(duplicate, 2, 1, scope);
-    }).not.toThrow();
-    expect(function() {
-      om.filterRange(duplicate, 2, 1, scope);
-    }).not.toThrow();
-    expect(function() {
-      om.forEachRange(duplicate, 2, 1, scope);
-    }).not.toThrow();
-    expect(function() {
-      om.mapKeyRange(duplicate, 'z', 'z', scope);
-    }).not.toThrow();
-    expect(function() {
-      om.forEachKeyRange(duplicate, 'z', 'z', scope);
-    }).not.toThrow();
-
-    expect(function() {
-      om.mapRange(duplicate, 2, 2, scope);
-    }).toThrow();
-    expect(function() {
-      om.filterRange(duplicate, 2, 2, scope);
-    }).toThrow();
-    expect(function() {
-      om.forEachRange(duplicate, 2, 2, scope);
-    }).toThrow();
-    expect(function() {
-      om.mapKeyRange(duplicate, 'z', null, scope);
-    }).toThrow();
-    expect(function() {
-      om.forEachKeyRange(duplicate, 'z', null, scope);
-    }).toThrow();
-
-    // Provide keys in reverse order - should throw.
-    expect(function() {
-      om.mapKeyRange(duplicate, 'y', 'x', scope);
-    }).toThrow();
-    expect(function() {
-      om.forEachKeyRange(duplicate, 'y', 'x', scope);
-    }).toThrow();
-  });
-
-  // TEST length zero map, or keyrange start===end
-
-  it('should map range correctly', function() {
-    var om = OrderedMap.fromArray([
-      {uniqueID: 'x', val: 'xx'},
-      {uniqueID: 'y', val: 'yy'},
-      {uniqueID: 'z', val: 'zz'},
-    ], extractUniqueID);
-    var scope = {justToTestScope: 'justTestingScope'};
-    var verifyThreeItems = function(omResult) {
-      expect(omResult.length).toBe(3);
-      expect(omResult.keyAtIndex(0)).toBe('x');
-      expect(omResult.keyAtIndex(1)).toBe('y');
-      expect(omResult.keyAtIndex(2)).toBe('z');
-      expect(omResult.get('x').val).toBe('xxx0justTestingScope');
-      expect(omResult.get('y').val).toBe('yyy1justTestingScope');
-      expect(omResult.get('z').val).toBe('zzz2justTestingScope');
-    };
-    var verifyFirstTwoItems = function(omResult) {
-      expect(omResult.length).toBe(2);
-      expect(omResult.keyAtIndex(0)).toBe('x');
-      expect(omResult.keyAtIndex(1)).toBe('y');
-      expect(omResult.get('x').val).toBe('xxx0justTestingScope');
-      expect(omResult.get('y').val).toBe('yyy1justTestingScope');
-    };
-
-    var verifyLastTwoItems = function(omResult) {
-      expect(omResult.length).toBe(2);
-      expect(omResult.keyAtIndex(0)).toBe('y');
-      expect(omResult.keyAtIndex(1)).toBe('z');
-      expect(omResult.get('y').val).toBe('yyy1justTestingScope');
-      expect(omResult.get('z').val).toBe('zzz2justTestingScope');
-    };
-
-    var verifyMiddleItem = function(omResult) {
-      expect(omResult.length).toBe(1);
-      expect(omResult.keyAtIndex(0)).toBe('y');
-      expect(omResult.get('y').val).toBe('yyy1justTestingScope');
-    };
-
-    var verifyEmpty = function(omResult) {
-      expect(omResult.length).toBe(0);
-    };
-
-    var omResultThree = om.mapRange(duplicate, 0, 3, scope);
-    verifyThreeItems(omResultThree);
-    var resArray = [];
-    var pushToResArray = function(itm, key, count) {
-      resArray.push({
-        uniqueID: itm.uniqueID,
-        val: itm.val + key + count + this.justToTestScope,
-      });
-    };
-
-    om.forEachRange(pushToResArray, 0, 3, scope);
-    omResultThree = OrderedMap.fromArray(resArray, extractUniqueID);
-    verifyThreeItems(omResultThree);
-
-    var omResultFirstTwo = om.mapRange(duplicate, 0, 2, scope);
-    verifyFirstTwoItems(omResultFirstTwo);
-    resArray = [];
-    om.forEachRange(pushToResArray, 0, 2, scope);
-    omResultFirstTwo = OrderedMap.fromArray(resArray, extractUniqueID);
-    verifyFirstTwoItems(omResultFirstTwo);
-
-    var omResultLastTwo = om.mapRange(duplicate, 1, 2, scope);
-    verifyLastTwoItems(omResultLastTwo);
-    resArray = [];
-    om.forEachRange(pushToResArray, 1, 2, scope);
-    omResultLastTwo = OrderedMap.fromArray(resArray, extractUniqueID);
-    verifyLastTwoItems(omResultLastTwo);
-
-    var omResultMiddle = om.mapRange(duplicate, 1, 1, scope);
-    verifyMiddleItem(omResultMiddle);
-    resArray = [];
-    om.forEachRange(pushToResArray, 1, 1, scope);
-    omResultMiddle = OrderedMap.fromArray(resArray, extractUniqueID);
-    verifyMiddleItem(omResultMiddle);
-
-    var omResultNone = om.mapRange(duplicate, 1, 0, scope);
-    verifyEmpty(omResultNone);
-  });
-
-  it('should extract the original array correctly', function() {
-    var sourceArray = [
-      {uniqueID: 'x', val: 'xx'},
-      {uniqueID: 'y', val: 'yy'},
-      {uniqueID: 'z', val: 'zz'},
-    ];
-    var om = OrderedMap.fromArray(sourceArray, extractUniqueID);
-    expect(om.toArray()).toEqual(sourceArray);
-  });
-});
diff --git a/src/shared/utils/__tests__/PooledClass-test.js b/src/shared/utils/__tests__/PooledClass-test.js
index 51e6ae408..3c206b74a 100644
--- a/src/shared/utils/__tests__/PooledClass-test.js
+++ b/src/shared/utils/__tests__/PooledClass-test.js
@@ -16,4 +16,4 @@ var PoolableClass;
 
-describe('Pooled class', function() {
-  beforeEach(function() {
+describe('Pooled class', () => {
+  beforeEach(() => {
     PooledClass = require('PooledClass');
@@ -24,3 +24,3 @@ describe('Pooled class', function() {
 
-  it('should initialize a pool correctly', function() {
+  it('should initialize a pool correctly', () => {
     expect(PoolableClass.instancePool).toBeDefined();
@@ -28,3 +28,3 @@ describe('Pooled class', function() {
 
-  it('should return a new instance when the pool is empty', function() {
+  it('should return a new instance when the pool is empty', () => {
     var instance = PoolableClass.getPooled();
@@ -33,12 +33,10 @@ describe('Pooled class', function() {
 
-  it('should return the instance back into the pool when it gets released',
-    function() {
-      var instance = PoolableClass.getPooled();
-      PoolableClass.release(instance);
-      expect(PoolableClass.instancePool.length).toBe(1);
-      expect(PoolableClass.instancePool[0]).toBe(instance);
-    }
-  );
+  it('should return the instance back into the pool when it gets released', () => {
+    var instance = PoolableClass.getPooled();
+    PoolableClass.release(instance);
+    expect(PoolableClass.instancePool.length).toBe(1);
+    expect(PoolableClass.instancePool[0]).toBe(instance);
+  });
 
-  it('should return an old instance if available in the pool', function() {
+  it('should return an old instance if available in the pool', () => {
     var instance = PoolableClass.getPooled();
@@ -49,3 +47,3 @@ describe('Pooled class', function() {
 
-  it('should call the destructor when instance gets released', function() {
+  it('should call the destructor when instance gets released', () => {
     var log = [];
@@ -61,3 +59,3 @@ describe('Pooled class', function() {
 
-  it('should accept poolers with different arguments', function() {
+  it('should accept poolers with different arguments', () => {
     var log = [];
@@ -69,3 +67,3 @@ describe('Pooled class', function() {
       PoolableClassWithMultiArguments,
-      PooledClass.twoArgumentPooler
+      PooledClass.twoArgumentPooler,
     );
@@ -75,3 +73,3 @@ describe('Pooled class', function() {
 
-  it('should call a new constructor with arguments', function() {
+  it('should call a new constructor with arguments', () => {
     var log = [];
@@ -81,5 +79,3 @@ describe('Pooled class', function() {
     PoolableClassWithOneArgument.prototype.destructor = function() {};
-    PooledClass.addPoolingTo(
-      PoolableClassWithOneArgument
-    );
+    PooledClass.addPoolingTo(PoolableClassWithOneArgument);
     PoolableClassWithOneArgument.getPooled('new');
@@ -88,3 +84,3 @@ describe('Pooled class', function() {
 
-  it('should call an old constructor with arguments', function() {
+  it('should call an old constructor with arguments', () => {
     var log = [];
@@ -94,5 +90,3 @@ describe('Pooled class', function() {
     PoolableClassWithOneArgument.prototype.destructor = function() {};
-    PooledClass.addPoolingTo(
-      PoolableClassWithOneArgument
-    );
+    PooledClass.addPoolingTo(PoolableClassWithOneArgument);
     var instance = PoolableClassWithOneArgument.getPooled('new');
@@ -103,18 +97,16 @@ describe('Pooled class', function() {
 
-  it('should throw when the class releases an instance of a different type',
-    function() {
-      var RandomClass = function() {};
-      RandomClass.prototype.destructor = function() {};
-      PooledClass.addPoolingTo(RandomClass);
-      var randomInstance = RandomClass.getPooled();
-      PoolableClass.getPooled();
-      expect(function() {
-        PoolableClass.release(randomInstance);
-      }).toThrow(
-        'Trying to release an instance into a pool of a different type.'
-      );
-    }
-  );
+  it('should throw when the class releases an instance of a different type', () => {
+    var RandomClass = function() {};
+    RandomClass.prototype.destructor = function() {};
+    PooledClass.addPoolingTo(RandomClass);
+    var randomInstance = RandomClass.getPooled();
+    PoolableClass.getPooled();
+    expect(function() {
+      PoolableClass.release(randomInstance);
+    }).toThrowError(
+      'Trying to release an instance into a pool of a different type.',
+    );
+  });
 
-  it('should throw if no destructor is defined', function() {
+  it('should throw if no destructor is defined', () => {
     var ImmortalClass = function() {};
diff --git a/src/shared/utils/__tests__/reactProdInvariant-test.js b/src/shared/utils/__tests__/reactProdInvariant-test.js
new file mode 100644
index 000000000..d4348818d
--- /dev/null
+++ b/src/shared/utils/__tests__/reactProdInvariant-test.js
@@ -0,0 +1,49 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @emails react-core
+ */
+'use strict';
+
+var reactProdInvariant;
+
+describe('reactProdInvariant', () => {
+  beforeEach(() => {
+    jest.resetModuleRegistry();
+    reactProdInvariant = require('reactProdInvariant');
+  });
+
+  it('should throw with the correct number of `%s`s in the URL', () => {
+    expect(function() {
+      reactProdInvariant(124, 'foo', 'bar');
+    }).toThrowError(
+      'Minified React error #124; visit ' +
+        'http://facebook.github.io/react/docs/error-decoder.html?invariant=124&args[]=foo&args[]=bar' +
+        ' for the full message or use the non-minified dev environment' +
+        ' for full errors and additional helpful warnings.',
+    );
+
+    expect(function() {
+      reactProdInvariant(20);
+    }).toThrowError(
+      'Minified React error #20; visit ' +
+        'http://facebook.github.io/react/docs/error-decoder.html?invariant=20' +
+        ' for the full message or use the non-minified dev environment' +
+        ' for full errors and additional helpful warnings.',
+    );
+
+    expect(function() {
+      reactProdInvariant(77, '<div>', '&?bar');
+    }).toThrowError(
+      'Minified React error #77; visit ' +
+        'http://facebook.github.io/react/docs/error-decoder.html?invariant=77&args[]=%3Cdiv%3E&args[]=%26%3Fbar' +
+        ' for the full message or use the non-minified dev environment' +
+        ' for full errors and additional helpful warnings.',
+    );
+  });
+});
diff --git a/src/shared/utils/__tests__/traverseAllChildren-test.js b/src/shared/utils/__tests__/traverseAllChildren-test.js
index 206222dc0..b339f6419 100644
--- a/src/shared/utils/__tests__/traverseAllChildren-test.js
+++ b/src/shared/utils/__tests__/traverseAllChildren-test.js
@@ -13,3 +13,3 @@
 
-describe('traverseAllChildren', function() {
+describe('traverseAllChildren', () => {
   var traverseAllChildren;
@@ -17,3 +17,5 @@ describe('traverseAllChildren', function() {
   var ReactFragment;
-  beforeEach(function() {
+  var ReactTestUtils;
+
+  beforeEach(() => {
     jest.resetModuleRegistry();
@@ -22,2 +24,3 @@ describe('traverseAllChildren', function() {
     ReactFragment = require('ReactFragment');
+    ReactTestUtils = require('ReactTestUtils');
   });
@@ -28,6 +31,7 @@ describe('traverseAllChildren', function() {
 
-  it('should support identity for simple', function() {
+  it('should support identity for simple', () => {
     var traverseContext = [];
-    var traverseFn =
-      jasmine.createSpy().andCallFake(function(context, kid, key, index) {
+    var traverseFn = jasmine
+      .createSpy()
+      .and.callFake(function(context, kid, key, index) {
         context.push(true);
@@ -43,3 +47,3 @@ describe('traverseAllChildren', function() {
       simpleKid,
-      '.$simple'
+      '.$simple',
     );
@@ -48,6 +52,7 @@ describe('traverseAllChildren', function() {
 
-  it('should treat single arrayless child as being in array', function() {
+  it('should treat single arrayless child as being in array', () => {
     var traverseContext = [];
-    var traverseFn =
-      jasmine.createSpy().andCallFake(function(context, kid, key, index) {
+    var traverseFn = jasmine
+      .createSpy()
+      .and.callFake(function(context, kid, key, index) {
         context.push(true);
@@ -58,7 +63,3 @@ describe('traverseAllChildren', function() {
     traverseAllChildren(instance.props.children, traverseFn, traverseContext);
-    expect(traverseFn).toHaveBeenCalledWith(
-      traverseContext,
-      simpleKid,
-      '.0'
-    );
+    expect(traverseFn).toHaveBeenCalledWith(traverseContext, simpleKid, '.0');
     expect(traverseContext.length).toEqual(1);
@@ -66,7 +67,8 @@ describe('traverseAllChildren', function() {
 
-  it('should treat single child in array as expected', function() {
+  it('should treat single child in array as expected', () => {
     spyOn(console, 'error');
     var traverseContext = [];
-    var traverseFn =
-      jasmine.createSpy().andCallFake(function(context, kid, key, index) {
+    var traverseFn = jasmine
+      .createSpy()
+      .and.callFake(function(context, kid, key, index) {
         context.push(true);
@@ -77,11 +79,7 @@ describe('traverseAllChildren', function() {
     traverseAllChildren(instance.props.children, traverseFn, traverseContext);
-    expect(traverseFn).toHaveBeenCalledWith(
-      traverseContext,
-      simpleKid,
-      '.0'
-    );
+    expect(traverseFn).toHaveBeenCalledWith(traverseContext, simpleKid, '.0');
     expect(traverseContext.length).toEqual(1);
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'Warning: Each child in an array or iterator should have a unique "key" prop.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'Warning: Each child in an array or iterator should have a unique "key" prop.',
     );
@@ -89,3 +87,3 @@ describe('traverseAllChildren', function() {
 
-  it('should be called for each child', function() {
+  it('should be called for each child', () => {
     var zero = <div key="keyZero" />;
@@ -97,4 +95,5 @@ describe('traverseAllChildren', function() {
     var traverseContext = [];
-    var traverseFn =
-      jasmine.createSpy().andCallFake(function(context, kid, key, index) {
+    var traverseFn = jasmine
+      .createSpy()
+      .and.callFake(function(context, kid, key, index) {
         context.push(true);
@@ -113,22 +112,10 @@ describe('traverseAllChildren', function() {
     traverseAllChildren(instance.props.children, traverseFn, traverseContext);
-    expect(traverseFn).toHaveBeenCalledWith(
-      traverseContext,
-      zero,
-      '.$keyZero'
-    );
+    expect(traverseFn).toHaveBeenCalledWith(traverseContext, zero, '.$keyZero');
     expect(traverseFn).toHaveBeenCalledWith(traverseContext, one, '.1');
-    expect(traverseFn).toHaveBeenCalledWith(
-      traverseContext,
-      two,
-      '.$keyTwo'
-    );
+    expect(traverseFn).toHaveBeenCalledWith(traverseContext, two, '.$keyTwo');
     expect(traverseFn).toHaveBeenCalledWith(traverseContext, three, '.3');
-    expect(traverseFn).toHaveBeenCalledWith(
-      traverseContext,
-      four,
-      '.$keyFour'
-    );
+    expect(traverseFn).toHaveBeenCalledWith(traverseContext, four, '.$keyFour');
   });
 
-  it('should traverse children of different kinds', function() {
+  it('should traverse children of different kinds', () => {
     var div = <div key="divNode" />;
@@ -138,4 +125,5 @@ describe('traverseAllChildren', function() {
     var traverseContext = [];
-    var traverseFn =
-      jasmine.createSpy().andCallFake(function(context, kid, key, index) {
+    var traverseFn = jasmine
+      .createSpy()
+      .and.callFake(function(context, kid, key, index) {
         context.push(true);
@@ -159,35 +147,25 @@ describe('traverseAllChildren', function() {
 
-    expect(traverseFn.calls.length).toBe(9);
+    expect(traverseFn.calls.count()).toBe(9);
     expect(traverseContext.length).toEqual(9);
 
+    expect(traverseFn).toHaveBeenCalledWith(traverseContext, div, '.$divNode');
     expect(traverseFn).toHaveBeenCalledWith(
-      traverseContext, div, '.$divNode'
-    );
-    expect(traverseFn).toHaveBeenCalledWith(
-      traverseContext, <span key="span/.$spanNode" />, '.1:0:$span/.$spanNode'
-    );
-    expect(traverseFn).toHaveBeenCalledWith(
-      traverseContext, <a key="a/.$aNode" />, '.2:$a/.$aNode'
-    );
-    expect(traverseFn).toHaveBeenCalledWith(
-      traverseContext, 'string', '.3'
-    );
-    expect(traverseFn).toHaveBeenCalledWith(
-      traverseContext, 1234, '.4'
-    );
-    expect(traverseFn).toHaveBeenCalledWith(
-      traverseContext, null, '.5'
-    );
-    expect(traverseFn).toHaveBeenCalledWith(
-      traverseContext, null, '.6'
-    );
-    expect(traverseFn).toHaveBeenCalledWith(
-      traverseContext, null, '.7'
+      traverseContext,
+      <span key="span/.$spanNode" />,
+      '.1:0:$span/.$spanNode',
     );
     expect(traverseFn).toHaveBeenCalledWith(
-      traverseContext, null, '.8'
-    );
+      traverseContext,
+      <a key="a/.$aNode" />,
+      '.2:$a/.$aNode',
+    );
+    expect(traverseFn).toHaveBeenCalledWith(traverseContext, 'string', '.3');
+    expect(traverseFn).toHaveBeenCalledWith(traverseContext, 1234, '.4');
+    expect(traverseFn).toHaveBeenCalledWith(traverseContext, null, '.5');
+    expect(traverseFn).toHaveBeenCalledWith(traverseContext, null, '.6');
+    expect(traverseFn).toHaveBeenCalledWith(traverseContext, null, '.7');
+    expect(traverseFn).toHaveBeenCalledWith(traverseContext, null, '.8');
   });
 
-  it('should be called for each child in nested structure', function() {
+  it('should be called for each child in nested structure', () => {
     var zero = <div key="keyZero" />;
@@ -204,6 +182,6 @@ describe('traverseAllChildren', function() {
 
-
     var traverseContext = [];
-    var traverseFn =
-      jasmine.createSpy().andCallFake(function(context, kid, key, index) {
+    var traverseFn = jasmine
+      .createSpy()
+      .and.callFake(function(context, kid, key, index) {
         context.push(true);
@@ -212,4 +190,4 @@ describe('traverseAllChildren', function() {
     var instance = (
-      <div>{
-        [
+      <div>
+        {[
           frag({
@@ -219,4 +197,4 @@ describe('traverseAllChildren', function() {
           }),
-        ]
-      }</div>
+        ]}
+      </div>
     );
@@ -224,3 +202,3 @@ describe('traverseAllChildren', function() {
     traverseAllChildren(instance.props.children, traverseFn, traverseContext);
-    expect(traverseFn.calls.length).toBe(4);
+    expect(traverseFn.calls.count()).toBe(4);
     expect(traverseContext.length).toEqual(4);
@@ -229,3 +207,3 @@ describe('traverseAllChildren', function() {
       <div key="firstHalfKey/.$keyZero" />,
-      '.0:$firstHalfKey/.$keyZero'
+      '.0:$firstHalfKey/.$keyZero',
     );
@@ -235,3 +213,3 @@ describe('traverseAllChildren', function() {
       <div key="firstHalfKey/.$keyTwo" />,
-      '.0:$firstHalfKey/.$keyTwo'
+      '.0:$firstHalfKey/.$keyTwo',
     );
@@ -241,3 +219,3 @@ describe('traverseAllChildren', function() {
       <div key="secondHalfKey/.$keyFour" />,
-      '.0:$secondHalfKey/.$keyFour'
+      '.0:$secondHalfKey/.$keyFour',
     );
@@ -247,3 +225,3 @@ describe('traverseAllChildren', function() {
       <div key="keyFive/.$keyFiveInner" />,
-      '.0:$keyFive/.$keyFiveInner'
+      '.0:$keyFive/.$keyFiveInner',
     );
@@ -251,3 +229,3 @@ describe('traverseAllChildren', function() {
 
-  it('should retain key across two mappings', function() {
+  it('should retain key across two mappings', () => {
     var zeroForceKey = <div key="keyZero" />;
@@ -255,4 +233,5 @@ describe('traverseAllChildren', function() {
     var traverseContext = [];
-    var traverseFn =
-      jasmine.createSpy().andCallFake(function(context, kid, key, index) {
+    var traverseFn = jasmine
+      .createSpy()
+      .and.callFake(function(context, kid, key, index) {
         context.push(true);
@@ -272,3 +251,3 @@ describe('traverseAllChildren', function() {
       zeroForceKey,
-      '.$keyZero'
+      '.$keyZero',
     );
@@ -277,3 +256,3 @@ describe('traverseAllChildren', function() {
       oneForceKey,
-      '.$keyOne'
+      '.$keyOne',
     );
@@ -281,3 +260,3 @@ describe('traverseAllChildren', function() {
 
-  it('should be called for each child in an iterable without keys', function() {
+  it('should be called for each child in an iterable without keys', () => {
     spyOn(console, 'error');
@@ -299,4 +278,5 @@ describe('traverseAllChildren', function() {
     var traverseContext = [];
-    var traverseFn =
-      jasmine.createSpy().andCallFake(function(context, kid, key, index) {
+    var traverseFn = jasmine
+      .createSpy()
+      .and.callFake(function(context, kid, key, index) {
         context.push(kid);
@@ -311,3 +291,3 @@ describe('traverseAllChildren', function() {
     traverseAllChildren(instance.props.children, traverseFn, traverseContext);
-    expect(traverseFn.calls.length).toBe(3);
+    expect(traverseFn.calls.count()).toBe(3);
 
@@ -316,3 +296,3 @@ describe('traverseAllChildren', function() {
       traverseContext[0],
-      '.0'
+      '.0',
     );
@@ -321,3 +301,3 @@ describe('traverseAllChildren', function() {
       traverseContext[1],
-      '.1'
+      '.1',
     );
@@ -326,8 +306,8 @@ describe('traverseAllChildren', function() {
       traverseContext[2],
-      '.2'
+      '.2',
     );
 
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      'Warning: Each child in an array or iterator should have a unique "key" prop.'
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
+      'Warning: Each child in an array or iterator should have a unique "key" prop.',
     );
@@ -335,3 +315,3 @@ describe('traverseAllChildren', function() {
 
-  it('should be called for each child in an iterable with keys', function() {
+  it('should be called for each child in an iterable with keys', () => {
     var threeDivIterable = {
@@ -352,4 +332,5 @@ describe('traverseAllChildren', function() {
     var traverseContext = [];
-    var traverseFn =
-      jasmine.createSpy().andCallFake(function(context, kid, key, index) {
+    var traverseFn = jasmine
+      .createSpy()
+      .and.callFake(function(context, kid, key, index) {
         context.push(kid);
@@ -364,3 +345,3 @@ describe('traverseAllChildren', function() {
     traverseAllChildren(instance.props.children, traverseFn, traverseContext);
-    expect(traverseFn.calls.length).toBe(3);
+    expect(traverseFn.calls.count()).toBe(3);
 
@@ -369,3 +350,3 @@ describe('traverseAllChildren', function() {
       traverseContext[0],
-      '.$#1'
+      '.$#1',
     );
@@ -374,3 +355,3 @@ describe('traverseAllChildren', function() {
       traverseContext[1],
-      '.$#2'
+      '.$#2',
     );
@@ -379,3 +360,3 @@ describe('traverseAllChildren', function() {
       traverseContext[2],
-      '.$#3'
+      '.$#3',
     );
@@ -383,3 +364,3 @@ describe('traverseAllChildren', function() {
 
-  it('should use keys from entry iterables', function() {
+  it('should use keys from entry iterables', () => {
     spyOn(console, 'error');
@@ -403,4 +384,5 @@ describe('traverseAllChildren', function() {
     var traverseContext = [];
-    var traverseFn =
-      jasmine.createSpy().andCallFake(function(context, kid, key, index) {
+    var traverseFn = jasmine
+      .createSpy()
+      .and.callFake(function(context, kid, key, index) {
         context.push(kid);
@@ -415,3 +397,3 @@ describe('traverseAllChildren', function() {
     traverseAllChildren(instance.props.children, traverseFn, traverseContext);
-    expect(traverseFn.calls.length).toBe(3);
+    expect(traverseFn.calls.count()).toBe(3);
 
@@ -420,3 +402,3 @@ describe('traverseAllChildren', function() {
       traverseContext[0],
-      '.$#1:0'
+      '.$#1:0',
     );
@@ -425,3 +407,3 @@ describe('traverseAllChildren', function() {
       traverseContext[1],
-      '.$#2:0'
+      '.$#2:0',
     );
@@ -430,10 +412,10 @@ describe('traverseAllChildren', function() {
       traverseContext[2],
-      '.$#3:0'
+      '.$#3:0',
     );
 
-    expect(console.error.argsForCall.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toContain(
       'Warning: Using Maps as children is not yet fully supported. It is an ' +
-      'experimental feature that might be removed. Convert it to a sequence ' +
-      '/ iterable of keyed ReactElements instead.'
+        'experimental feature that might be removed. Convert it to a sequence ' +
+        '/ iterable of keyed ReactElements instead.',
     );
@@ -441,3 +423,3 @@ describe('traverseAllChildren', function() {
 
-  it('should not enumerate enumerable numbers (#4776)', function() {
+  it('should not enumerate enumerable numbers (#4776)', () => {
     /*eslint-disable no-extend-native */
@@ -460,19 +442,7 @@ describe('traverseAllChildren', function() {
       traverseAllChildren(instance.props.children, traverseFn, null);
-      expect(traverseFn.calls.length).toBe(3);
+      expect(traverseFn.calls.count()).toBe(3);
 
-      expect(traverseFn).toHaveBeenCalledWith(
-        null,
-        5,
-        '.0'
-      );
-      expect(traverseFn).toHaveBeenCalledWith(
-        null,
-        12,
-        '.1'
-      );
-      expect(traverseFn).toHaveBeenCalledWith(
-        null,
-        13,
-        '.2'
-      );
+      expect(traverseFn).toHaveBeenCalledWith(null, 5, '.0');
+      expect(traverseFn).toHaveBeenCalledWith(null, 12, '.1');
+      expect(traverseFn).toHaveBeenCalledWith(null, 13, '.2');
     } finally {
@@ -482,3 +452,3 @@ describe('traverseAllChildren', function() {
 
-  it('should allow extension of native prototypes', function() {
+  it('should allow extension of native prototypes', () => {
     /*eslint-disable no-extend-native */
@@ -498,14 +468,6 @@ describe('traverseAllChildren', function() {
     traverseAllChildren(instance.props.children, traverseFn, null);
-    expect(traverseFn.calls.length).toBe(2);
+    expect(traverseFn.calls.count()).toBe(2);
 
-    expect(traverseFn).toHaveBeenCalledWith(
-      null,
-      'a',
-      '.0'
-    );
-    expect(traverseFn).toHaveBeenCalledWith(
-      null,
-      13,
-      '.1'
-    );
+    expect(traverseFn).toHaveBeenCalledWith(null, 'a', '.0');
+    expect(traverseFn).toHaveBeenCalledWith(null, 13, '.1');
 
@@ -515,10 +477,10 @@ describe('traverseAllChildren', function() {
 
-  it('should throw on object', function() {
+  it('should throw on object', () => {
     expect(function() {
       traverseAllChildren({a: 1, b: 2}, function() {}, null);
-    }).toThrow(
+    }).toThrowError(
       'Objects are not valid as a React child (found: object with keys ' +
-      '{a, b}). If you meant to render a collection of children, use an ' +
-      'array instead or wrap the object using createFragment(object) from ' +
-      'the React add-ons.'
+        '{a, b}). If you meant to render a collection of children, use an ' +
+        'array instead or wrap the object using createFragment(object) from ' +
+        'the React add-ons.',
     );
@@ -526,3 +488,3 @@ describe('traverseAllChildren', function() {
 
-  it('should throw on regex', function() {
+  it('should throw on regex', () => {
     // Really, we care about dates (#4840) but those have nondeterministic
@@ -531,6 +493,6 @@ describe('traverseAllChildren', function() {
       traverseAllChildren(/abc/, function() {}, null);
-    }).toThrow(
+    }).toThrowError(
       'Objects are not valid as a React child (found: /abc/). If you meant ' +
-      'to render a collection of children, use an array instead or wrap the ' +
-      'object using createFragment(object) from the React add-ons.'
+        'to render a collection of children, use an array instead or wrap the ' +
+        'object using createFragment(object) from the React add-ons.',
     );
@@ -538,2 +500,20 @@ describe('traverseAllChildren', function() {
 
+  it('should warn for using maps as children with owner info', () => {
+    spyOn(console, 'error');
+
+    class Parent extends React.Component {
+      render() {
+        return <div>{new Map([['foo', 0], ['bar', 1]])}</div>;
+      }
+    }
+
+    ReactTestUtils.renderIntoDocument(<Parent />);
+
+    expect(console.error.calls.count()).toBe(1);
+    expect(console.error.calls.argsFor(0)[0]).toBe(
+      'Warning: Using Maps as children is not yet fully supported. It is an ' +
+        'experimental feature that might be removed. Convert it to a sequence ' +
+        '/ iterable of keyed ReactElements instead. Check the render method of `Parent`.',
+    );
+  });
 });
diff --git a/src/shared/utils/canDefineProperty.js b/src/shared/utils/canDefineProperty.js
index 864a47324..402eb6e53 100644
--- a/src/shared/utils/canDefineProperty.js
+++ b/src/shared/utils/canDefineProperty.js
@@ -8,2 +8,3 @@
  *
+ * @flow
  * @providesModule canDefineProperty
@@ -16,2 +17,3 @@ if (__DEV__) {
   try {
+    // $FlowFixMe https://github.com/facebook/flow/issues/285
     Object.defineProperty({}, 'x', {get: function() {}});
diff --git a/src/shared/utils/deprecated.js b/src/shared/utils/deprecated.js
index fd8edec6e..81e24cfd9 100644
--- a/src/shared/utils/deprecated.js
+++ b/src/shared/utils/deprecated.js
@@ -9,2 +9,3 @@
  * @providesModule deprecated
+ * @flow
  */
@@ -13,3 +14,3 @@
 
-var warning = require('warning');
+var lowPriorityWarning = require('lowPriorityWarning');
 
@@ -26,3 +27,9 @@ var warning = require('warning');
  */
-function deprecated(fnName, newModule, newPackage, ctx, fn) {
+function deprecated<T: Function>(
+  fnName: string,
+  newModule: string,
+  newPackage: string,
+  ctx: mixed,
+  fn: T,
+): T {
   var warned = false;
@@ -30,3 +37,3 @@ function deprecated(fnName, newModule, newPackage, ctx, fn) {
     var newFn = function() {
-      warning(
+      lowPriorityWarning(
         warned,
@@ -36,4 +43,5 @@ function deprecated(fnName, newModule, newPackage, ctx, fn) {
         // Otherwise the build tools will attempt to build a '%s' module.
-        'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' +
-        'instead.',
+        'React.%s is deprecated. Please use %s.%s from require' +
+          "('%s') " +
+          'instead.',
         fnName,
@@ -41,3 +49,3 @@ function deprecated(fnName, newModule, newPackage, ctx, fn) {
         fnName,
-        newPackage
+        newPackage,
       );
@@ -49,3 +57,8 @@ function deprecated(fnName, newModule, newPackage, ctx, fn) {
     // In particular, this is needed to support PropTypes
-    return Object.assign(newFn, fn);
+    Object.assign(newFn, (fn: Object));
+
+    // Flow is not smart enough to figure out that newFn is of the same type as
+    // fn. Since we don't want to lose out the type of the function, casting
+    // to any and force flow to use T.
+    return ((newFn: any): T);
   }
diff --git a/src/shared/utils/flattenChildren.js b/src/shared/utils/flattenChildren.js
index b25d399fa..7274bb6dd 100644
--- a/src/shared/utils/flattenChildren.js
+++ b/src/shared/utils/flattenChildren.js
@@ -9,2 +9,3 @@
  * @providesModule flattenChildren
+ * @flow
  */
@@ -13,2 +14,3 @@
 
+var KeyEscapeUtils = require('KeyEscapeUtils');
 var traverseAllChildren = require('traverseAllChildren');
@@ -16,2 +18,17 @@ var warning = require('warning');
 
+var ReactComponentTreeHook;
+
+if (
+  typeof process !== 'undefined' &&
+  process.env &&
+  process.env.NODE_ENV === 'test'
+) {
+  // Temporary hack.
+  // Inline requires don't work well with Jest:
+  // https://github.com/facebook/react/issues/7240
+  // Remove the inline requires when we don't need them anymore:
+  // https://github.com/facebook/react/pull/7178
+  ReactComponentTreeHook = require('ReactComponentTreeHook');
+}
+
 /**
@@ -20,18 +37,32 @@ var warning = require('warning');
  * @param {!string} name String name of key path to child.
+ * @param {number=} selfDebugID Optional debugID of the current internal instance.
  */
-function flattenSingleChildIntoContext(traverseContext, child, name) {
+function flattenSingleChildIntoContext(
+  traverseContext: mixed,
+  child: ReactElement<any>,
+  name: string,
+  selfDebugID?: number,
+): void {
   // We found a component instance.
-  var result = traverseContext;
-  var keyUnique = (result[name] === undefined);
-  if (__DEV__) {
-    warning(
-      keyUnique,
-      'flattenChildren(...): Encountered two children with the same key, ' +
-      '`%s`. Child keys must be unique; when two children share a key, only ' +
-      'the first child will be used.',
-      name
-    );
-  }
-  if (keyUnique && child != null) {
-    result[name] = child;
+  if (traverseContext && typeof traverseContext === 'object') {
+    const result = traverseContext;
+    const keyUnique = result[name] === undefined;
+    if (__DEV__) {
+      if (!ReactComponentTreeHook) {
+        ReactComponentTreeHook = require('ReactComponentTreeHook');
+      }
+      if (!keyUnique) {
+        warning(
+          false,
+          'flattenChildren(...): Encountered two children with the same key, ' +
+            '`%s`. Child keys must be unique; when two children share a key, only ' +
+            'the first child will be used.%s',
+          KeyEscapeUtils.unescape(name),
+          ReactComponentTreeHook.getStackAddendumByID(selfDebugID),
+        );
+      }
+    }
+    if (keyUnique && child != null) {
+      result[name] = child;
+    }
   }
@@ -44,3 +75,6 @@ function flattenSingleChildIntoContext(traverseContext, child, name) {
  */
-function flattenChildren(children) {
+function flattenChildren(
+  children: ReactElement<any>,
+  selfDebugID?: number,
+): ?{[name: string]: ReactElement<any>} {
   if (children == null) {
@@ -49,3 +83,18 @@ function flattenChildren(children) {
   var result = {};
-  traverseAllChildren(children, flattenSingleChildIntoContext, result);
+
+  if (__DEV__) {
+    traverseAllChildren(
+      children,
+      (traverseContext, child, name) =>
+        flattenSingleChildIntoContext(
+          traverseContext,
+          child,
+          name,
+          selfDebugID,
+        ),
+      result,
+    );
+  } else {
+    traverseAllChildren(children, flattenSingleChildIntoContext, result);
+  }
   return result;
diff --git a/src/shared/utils/getIteratorFn.js b/src/shared/utils/getIteratorFn.js
index 5da5c4846..017e5537b 100644
--- a/src/shared/utils/getIteratorFn.js
+++ b/src/shared/utils/getIteratorFn.js
@@ -9,2 +9,3 @@
  * @providesModule getIteratorFn
+ * @flow
  */
@@ -31,7 +32,7 @@ var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
  */
-function getIteratorFn(maybeIterable) {
-  var iteratorFn = maybeIterable && (
-    (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL]) ||
-    maybeIterable[FAUX_ITERATOR_SYMBOL]
-  );
+function getIteratorFn(maybeIterable: ?any): ?(p: ReactElement<any>) => void {
+  var iteratorFn =
+    maybeIterable &&
+    ((ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL]) ||
+      maybeIterable[FAUX_ITERATOR_SYMBOL]);
   if (typeof iteratorFn === 'function') {
diff --git a/src/shared/utils/lowPriorityWarning.js b/src/shared/utils/lowPriorityWarning.js
new file mode 100644
index 000000000..6de5fee71
--- /dev/null
+++ b/src/shared/utils/lowPriorityWarning.js
@@ -0,0 +1,58 @@
+/**
+ * Copyright 2014-2015, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule lowPriorityWarning
+ */
+
+'use strict';
+
+/**
+ * Forked from fbjs/warning:
+ * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
+ *
+ * Only change is we use console.warn instead of console.error,
+ * and do nothing when 'console' is not supported.
+ * This really simplifies the code.
+ * ---
+ * Similar to invariant but only logs a warning if the condition is not met.
+ * This can be used to log issues in development environments in critical
+ * paths. Removing the logging code for production environments will keep the
+ * same logic and follow the same code paths.
+ */
+
+var lowPriorityWarning = function() {};
+
+if (__DEV__) {
+  const printWarning = function(format, ...args) {
+    var argIndex = 0;
+    var message = 'Warning: ' + format.replace(/%s/g, () => args[argIndex++]);
+    if (typeof console !== 'undefined') {
+      console.warn(message);
+    }
+    try {
+      // --- Welcome to debugging React ---
+      // This error was thrown as a convenience so that you can use this stack
+      // to find the callsite that caused this warning to fire.
+      throw new Error(message);
+    } catch (x) {}
+  };
+
+  lowPriorityWarning = function(condition, format, ...args) {
+    if (format === undefined) {
+      throw new Error(
+        '`warning(condition, format, ...args)` requires a warning ' +
+          'message argument',
+      );
+    }
+    if (!condition) {
+      printWarning(format, ...args);
+    }
+  };
+}
+
+module.exports = lowPriorityWarning;
diff --git a/src/shared/utils/reactProdInvariant.js b/src/shared/utils/reactProdInvariant.js
new file mode 100644
index 000000000..9390b9eaa
--- /dev/null
+++ b/src/shared/utils/reactProdInvariant.js
@@ -0,0 +1,45 @@
+/**
+ * Copyright (c) 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule reactProdInvariant
+ * @flow
+ */
+'use strict';
+
+/**
+ * WARNING: DO NOT manually require this module.
+ * This is a replacement for `invariant(...)` used by the error code system
+ * and will _only_ be required by the corresponding babel pass.
+ * It always throws.
+ */
+function reactProdInvariant(code: string): void {
+  var argCount = arguments.length - 1;
+
+  var message =
+    'Minified React error #' +
+    code +
+    '; visit ' +
+    'http://facebook.github.io/react/docs/error-decoder.html?invariant=' +
+    code;
+
+  for (var argIdx = 0; argIdx < argCount; argIdx++) {
+    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
+  }
+
+  message +=
+    ' for the full message or use the non-minified dev environment' +
+    ' for full errors and additional helpful warnings.';
+
+  var error: Error & {framesToPop?: number} = new Error(message);
+  error.name = 'Invariant Violation';
+  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame
+
+  throw error;
+}
+
+module.exports = reactProdInvariant;
diff --git a/src/shared/utils/traverseAllChildren.js b/src/shared/utils/traverseAllChildren.js
index be0dcc0fd..8bad6e6a9 100644
--- a/src/shared/utils/traverseAllChildren.js
+++ b/src/shared/utils/traverseAllChildren.js
@@ -14,3 +14,3 @@
 var ReactCurrentOwner = require('ReactCurrentOwner');
-var ReactElement = require('ReactElement');
+var REACT_ELEMENT_TYPE = require('ReactElementSymbol');
 
@@ -18,2 +18,3 @@ var getIteratorFn = require('getIteratorFn');
 var invariant = require('invariant');
+var KeyEscapeUtils = require('KeyEscapeUtils');
 var warning = require('warning');
@@ -23,2 +24,8 @@ var SUBSEPARATOR = ':';
 
+/**
+ * This is inlined from ReactElement since this file is shared between
+ * isomorphic and renderers. We could extract this to a
+ *
+ */
+
 /**
@@ -28,15 +35,4 @@ var SUBSEPARATOR = ':';
 
-var userProvidedKeyEscaperLookup = {
-  '=': '=0',
-  ':': '=2',
-};
-
-var userProvidedKeyEscapeRegex = /[=:]/g;
-
 var didWarnAboutMaps = false;
 
-function userProvidedKeyEscaper(match) {
-  return userProvidedKeyEscaperLookup[match];
-}
-
 /**
@@ -53,3 +49,3 @@ function getComponentKey(component, index) {
     // Explicit key
-    return wrapUserProvidedKey(component.key);
+    return KeyEscapeUtils.escape(component.key);
   }
@@ -59,26 +55,2 @@ function getComponentKey(component, index) {
 
-/**
- * Escape a component key so that it is safe to use in a reactid.
- *
- * @param {*} text Component key to be escaped.
- * @return {string} An escaped string.
- */
-function escapeUserProvidedKey(text) {
-  return ('' + text).replace(
-    userProvidedKeyEscapeRegex,
-    userProvidedKeyEscaper
-  );
-}
-
-/**
- * Wrap a `key` value explicitly provided by the user to distinguish it from
- * implicitly-generated keys generated by a component's index in its parent.
- *
- * @param {string} key Value of a user-provided `key` attribute
- * @return {string}
- */
-function wrapUserProvidedKey(key) {
-  return '$' + escapeUserProvidedKey(key);
-}
-
 /**
@@ -95,3 +67,3 @@ function traverseAllChildrenImpl(
   callback,
-  traverseContext
+  traverseContext,
 ) {
@@ -104,6 +76,10 @@ function traverseAllChildrenImpl(
 
-  if (children === null ||
-      type === 'string' ||
-      type === 'number' ||
-      ReactElement.isValidElement(children)) {
+  if (
+    children === null ||
+    type === 'string' ||
+    type === 'number' ||
+    // The following is inlined from ReactElement. This means we can optimize
+    // some checks. React Fiber also inlines this logic for similar purposes.
+    (type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE)
+  ) {
     callback(
@@ -113,3 +89,3 @@ function traverseAllChildrenImpl(
       // so that it's consistent if the number of children grows.
-      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar
+      nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar,
     );
@@ -131,3 +107,3 @@ function traverseAllChildrenImpl(
         callback,
-        traverseContext
+        traverseContext,
       );
@@ -148,3 +124,3 @@ function traverseAllChildrenImpl(
             callback,
-            traverseContext
+            traverseContext,
           );
@@ -153,2 +129,12 @@ function traverseAllChildrenImpl(
         if (__DEV__) {
+          var mapsAsChildrenAddendum = '';
+          if (ReactCurrentOwner.current) {
+            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
+            if (mapsAsChildrenOwnerName) {
+              mapsAsChildrenAddendum =
+                ' Check the render method of `' +
+                mapsAsChildrenOwnerName +
+                '`.';
+            }
+          }
           warning(
@@ -156,4 +142,5 @@ function traverseAllChildrenImpl(
             'Using Maps as children is not yet fully supported. It is an ' +
-            'experimental feature that might be removed. Convert it to a ' +
-            'sequence / iterable of keyed ReactElements instead.'
+              'experimental feature that might be removed. Convert it to a ' +
+              'sequence / iterable of keyed ReactElements instead.%s',
+            mapsAsChildrenAddendum,
           );
@@ -166,7 +153,7 @@ function traverseAllChildrenImpl(
             child = entry[1];
-            nextName = (
+            nextName =
               nextNamePrefix +
-              wrapUserProvidedKey(entry[0]) + SUBSEPARATOR +
-              getComponentKey(child, 0)
-            );
+              KeyEscapeUtils.escape(entry[0]) +
+              SUBSEPARATOR +
+              getComponentKey(child, 0);
             subtreeCount += traverseAllChildrenImpl(
@@ -175,3 +162,3 @@ function traverseAllChildrenImpl(
               callback,
-              traverseContext
+              traverseContext,
             );
@@ -189,3 +176,3 @@ function traverseAllChildrenImpl(
           addendum =
-            ' It looks like you\'re using an element created by a different ' +
+            " It looks like you're using an element created by a different " +
             'version of React. Make sure to use only one copy of React.';
@@ -203,6 +190,6 @@ function traverseAllChildrenImpl(
         'Objects are not valid as a React child (found: %s).%s',
-        childrenString === '[object Object]' ?
-          'object with keys {' + Object.keys(children).join(', ') + '}' :
-          childrenString,
-        addendum
+        childrenString === '[object Object]'
+          ? 'object with keys {' + Object.keys(children).join(', ') + '}'
+          : childrenString,
+        addendum,
       );
diff --git a/src/test/MetaMatchers.js b/src/test/MetaMatchers.js
deleted file mode 100644
index 3605de66d..000000000
--- a/src/test/MetaMatchers.js
+++ /dev/null
@@ -1,128 +0,0 @@
-/**
- * Copyright 2015-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @providesModule MetaMatchers
- */
-
-'use strict';
-
-/**
- * This modules adds a jasmine matcher toEqualSpecsIn that can be used to
- * compare the specs in two different "describe" functions and their result.
- * It can be used to test a test.
- */
-
-function getRunnerWithResults(describeFunction) {
-  if (describeFunction._cachedRunner) {
-    // Cached result of execution. This is a convenience way to test against
-    // the same authoritative function multiple times.
-    return describeFunction._cachedRunner;
-  }
-  // Patch the current global environment.
-  var env = new jasmine.Env();
-  // Execute the tests synchronously.
-  env.updateInterval = 0;
-  var outerGetEnv = jasmine.getEnv;
-  jasmine.getEnv = function() {
-    return env;
-  };
-  // TODO: Bring over matchers from the existing environment.
-  var runner = env.currentRunner();
-  try {
-    env.describe('', describeFunction);
-    env.execute();
-  } finally {
-    // Restore the environment.
-    jasmine.getEnv = outerGetEnv;
-  }
-  describeFunction._cachedRunner = runner;
-  return runner;
-}
-
-function compareSpec(actual, expected) {
-  if (actual.results().totalCount !== expected.results().totalCount) {
-    return (
-      'Expected ' + expected.results().totalCount + ' expects, ' +
-      'but got ' + actual.results().totalCount + ':' +
-      actual.getFullName()
-    );
-  }
-  return null;
-}
-
-function includesDescription(specs, description, startIndex) {
-  for (var i = startIndex; i < specs.length; i++) {
-    if (specs[i].description === description) {
-      return true;
-    }
-  }
-  return false;
-}
-
-function compareSpecs(actualSpecs, expectedSpecs) {
-  for (var i = 0; i < actualSpecs.length && i < expectedSpecs.length; i++) {
-    var actual = actualSpecs[i];
-    var expected = expectedSpecs[i];
-    if (actual.description === expected.description) {
-      var errorMessage = compareSpec(actual, expected);
-      if (errorMessage) {
-        return errorMessage;
-      }
-      continue;
-    } else if (includesDescription(actualSpecs, expected.description, i)) {
-      return 'Did not expect the spec:' + actualSpecs[i].getFullName();
-    } else {
-      return 'Expected an equivalent to:' + expectedSpecs[i].getFullName();
-    }
-  }
-  if (i < actualSpecs.length) {
-    return 'Did not expect the spec:' + actualSpecs[i].getFullName();
-  }
-  if (i < expectedSpecs.length) {
-    return 'Expected an equivalent to:' + expectedSpecs[i].getFullName();
-  }
-  return null;
-}
-
-function compareDescription(a, b) {
-  if (a.description === b.description) {
-    return 0;
-  }
-  return a.description < b.description ? -1 : 1;
-}
-
-function compareRunners(actual, expected) {
-  return compareSpecs(
-    actual.specs().sort(compareDescription),
-    expected.specs().sort(compareDescription)
-  );
-}
-
-var MetaMatchers = {
-  toEqualSpecsIn: function(expectedDescribeFunction) {
-    var actualDescribeFunction = this.actual;
-    if (typeof actualDescribeFunction !== 'function') {
-      throw Error('toEqualSpecsIn() should be used on a describe function');
-    }
-    if (typeof expectedDescribeFunction !== 'function') {
-      throw Error('toEqualSpecsIn() should be passed a describe function');
-    }
-    var actual = getRunnerWithResults(actualDescribeFunction);
-    var expected = getRunnerWithResults(expectedDescribeFunction);
-    var errorMessage = compareRunners(actual, expected);
-    this.message = function() {
-      return [
-        errorMessage,
-        'The specs are equal. Expected them to be different.',
-      ];
-    };
-    return !errorMessage;
-  },
-};
-
-module.exports = MetaMatchers;
diff --git a/src/test/ReactComponentTreeTestUtils.js b/src/test/ReactComponentTreeTestUtils.js
new file mode 100644
index 000000000..889e72b11
--- /dev/null
+++ b/src/test/ReactComponentTreeTestUtils.js
@@ -0,0 +1,107 @@
+/**
+ * Copyright 2016-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactComponentTreeTestUtils
+ */
+
+'use strict';
+
+var ReactComponentTreeHook = require('ReactComponentTreeHook');
+
+function getRootDisplayNames() {
+  return ReactComponentTreeHook.getRootIDs().map(
+    ReactComponentTreeHook.getDisplayName,
+  );
+}
+
+function getRegisteredDisplayNames() {
+  return ReactComponentTreeHook.getRegisteredIDs().map(
+    ReactComponentTreeHook.getDisplayName,
+  );
+}
+
+function expectTree(rootID, expectedTree, parentPath) {
+  var displayName = ReactComponentTreeHook.getDisplayName(rootID);
+  var ownerID = ReactComponentTreeHook.getOwnerID(rootID);
+  var parentID = ReactComponentTreeHook.getParentID(rootID);
+  var childIDs = ReactComponentTreeHook.getChildIDs(rootID);
+  var text = ReactComponentTreeHook.getText(rootID);
+  var element = ReactComponentTreeHook.getElement(rootID);
+  var path = parentPath ? `${parentPath} > ${displayName}` : displayName;
+
+  function expectEqual(actual, expected, name) {
+    // Get Jasmine to print descriptive error messages.
+    // We pass path so that we know where the mismatch occurred.
+    expect({
+      path,
+      [name]: actual,
+    }).toEqual({
+      path,
+      [name]: expected,
+    });
+  }
+
+  if (expectedTree.parentDisplayName !== undefined) {
+    expectEqual(
+      ReactComponentTreeHook.getDisplayName(parentID),
+      expectedTree.parentDisplayName,
+      'parentDisplayName',
+    );
+  }
+  if (expectedTree.ownerDisplayName !== undefined) {
+    expectEqual(
+      ReactComponentTreeHook.getDisplayName(ownerID),
+      expectedTree.ownerDisplayName,
+      'ownerDisplayName',
+    );
+  }
+  if (expectedTree.parentID !== undefined) {
+    expectEqual(parentID, expectedTree.parentID, 'parentID');
+  }
+  if (expectedTree.text !== undefined) {
+    expectEqual(text, expectedTree.text, 'text');
+    expectEqual('' + element, expectedTree.text, 'element.toString()');
+  } else {
+    expectEqual(text, null, 'text');
+  }
+  if (expectedTree.element !== undefined) {
+    // TODO: Comparing elements makes tests run out of memory on errors.
+    // For now, compare just types.
+    expectEqual(
+      element && element.type,
+      expectedTree.element && expectedTree.element.type,
+      'element.type',
+    );
+  } else if (text == null) {
+    expectEqual(typeof element, 'object', 'typeof element');
+  }
+  if (expectedTree.children !== undefined) {
+    expectEqual(
+      childIDs.length,
+      expectedTree.children.length,
+      'children.length',
+    );
+    for (var i = 0; i < childIDs.length; i++) {
+      expectTree(
+        childIDs[i],
+        {parentID: rootID, ...expectedTree.children[i]},
+        path,
+      );
+    }
+  } else {
+    expectEqual(childIDs, [], 'childIDs');
+  }
+}
+
+var ReactComponentTreeTestUtils = {
+  expectTree,
+  getRootDisplayNames,
+  getRegisteredDisplayNames,
+};
+
+module.exports = ReactComponentTreeTestUtils;
diff --git a/src/test/ReactDefaultPerf.js b/src/test/ReactDefaultPerf.js
deleted file mode 100644
index 5cb43e904..000000000
--- a/src/test/ReactDefaultPerf.js
+++ /dev/null
@@ -1,361 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @providesModule ReactDefaultPerf
- */
-
-'use strict';
-
-var DOMProperty = require('DOMProperty');
-var ReactDOMComponentTree = require('ReactDOMComponentTree');
-var ReactDefaultPerfAnalysis = require('ReactDefaultPerfAnalysis');
-var ReactMount = require('ReactMount');
-var ReactPerf = require('ReactPerf');
-
-var performanceNow = require('performanceNow');
-var warning = require('warning');
-
-function roundFloat(val) {
-  return Math.floor(val * 100) / 100;
-}
-
-function addValue(obj, key, val) {
-  obj[key] = (obj[key] || 0) + val;
-}
-
-// Composite/text components don't have any built-in ID: we have to make our own
-var compositeIDMap;
-var compositeIDCounter = 17000;
-function getIDOfComposite(inst) {
-  if (!compositeIDMap) {
-    compositeIDMap = new WeakMap();
-  }
-  if (compositeIDMap.has(inst)) {
-    return compositeIDMap.get(inst);
-  } else {
-    var id = compositeIDCounter++;
-    compositeIDMap.set(inst, id);
-    return id;
-  }
-}
-
-function getID(inst) {
-  if (inst.hasOwnProperty('_rootNodeID')) {
-    return inst._rootNodeID;
-  } else {
-    return getIDOfComposite(inst);
-  }
-}
-
-function stripComplexValues(key, value) {
-  if (typeof value !== 'object' || Array.isArray(value) || value == null) {
-    return value;
-  }
-  var prototype = Object.getPrototypeOf(value);
-  if (!prototype || prototype === Object.prototype) {
-    return value;
-  }
-  return '<not serializable>';
-}
-
-// This implementation of ReactPerf is going away some time mid 15.x.
-// While we plan to keep most of the API, the actual format of measurements
-// will change dramatically. To signal this, we wrap them into an opaque-ish
-// object to discourage reaching into it until the API stabilizes.
-function wrapLegacyMeasurements(measurements) {
-  return { __unstable_this_format_will_change: measurements };
-}
-function unwrapLegacyMeasurements(measurements) {
-  return measurements && measurements.__unstable_this_format_will_change || measurements;
-}
-
-var warnedAboutPrintDOM = false;
-var warnedAboutGetMeasurementsSummaryMap = false;
-
-var ReactDefaultPerf = {
-  _allMeasurements: [], // last item in the list is the current one
-  _mountStack: [0],
-  _compositeStack: [],
-  _injected: false,
-
-  start: function() {
-    if (!ReactDefaultPerf._injected) {
-      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
-    }
-
-    ReactDefaultPerf._allMeasurements.length = 0;
-    ReactPerf.enableMeasure = true;
-  },
-
-  stop: function() {
-    ReactPerf.enableMeasure = false;
-  },
-
-  getLastMeasurements: function() {
-    return wrapLegacyMeasurements(ReactDefaultPerf._allMeasurements);
-  },
-
-  printExclusive: function(measurements) {
-    measurements = unwrapLegacyMeasurements(measurements || ReactDefaultPerf._allMeasurements);
-    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
-    console.table(summary.map(function(item) {
-      return {
-        'Component class name': item.componentName,
-        'Total inclusive time (ms)': roundFloat(item.inclusive),
-        'Exclusive mount time (ms)': roundFloat(item.exclusive),
-        'Exclusive render time (ms)': roundFloat(item.render),
-        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
-        'Render time per instance (ms)': roundFloat(item.render / item.count),
-        'Instances': item.count,
-      };
-    }));
-    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
-    // number.
-  },
-
-  printInclusive: function(measurements) {
-    measurements = unwrapLegacyMeasurements(measurements || ReactDefaultPerf._allMeasurements);
-    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
-    console.table(summary.map(function(item) {
-      return {
-        'Owner > component': item.componentName,
-        'Inclusive time (ms)': roundFloat(item.time),
-        'Instances': item.count,
-      };
-    }));
-    console.log(
-      'Total time:',
-      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
-    );
-  },
-
-  getMeasurementsSummaryMap: function(measurements) {
-    warning(
-      warnedAboutGetMeasurementsSummaryMap,
-      '`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use ' +
-      '`ReactPerf.getWasted(...)` instead.'
-    );
-    warnedAboutGetMeasurementsSummaryMap = true;
-    return ReactDefaultPerf.getWasted(measurements);
-  },
-
-  getWasted: function(measurements) {
-    measurements = unwrapLegacyMeasurements(measurements);
-    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(
-      measurements,
-      true
-    );
-    return summary.map(function(item) {
-      return {
-        'Owner > component': item.componentName,
-        'Wasted time (ms)': item.time,
-        'Instances': item.count,
-      };
-    });
-  },
-
-  printWasted: function(measurements) {
-    measurements = unwrapLegacyMeasurements(measurements || ReactDefaultPerf._allMeasurements);
-    console.table(ReactDefaultPerf.getWasted(measurements));
-    console.log(
-      'Total time:',
-      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
-    );
-  },
-
-  printDOM: function(measurements) {
-    warning(
-      warnedAboutPrintDOM,
-      '`ReactPerf.printDOM(...)` is deprecated. Use ' +
-      '`ReactPerf.printOperations(...)` instead.'
-    );
-    warnedAboutPrintDOM = true;
-    return ReactDefaultPerf.printOperations(measurements);
-  },
-
-  printOperations: function(measurements) {
-    measurements = unwrapLegacyMeasurements(measurements || ReactDefaultPerf._allMeasurements);
-    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
-    console.table(summary.map(function(item) {
-      var result = {};
-      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
-      result.type = item.type;
-      result.args = JSON.stringify(item.args, stripComplexValues);
-      return result;
-    }));
-    console.log(
-      'Total time:',
-      ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms'
-    );
-  },
-
-  _recordWrite: function(id, fnName, totalTime, args) {
-    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
-    var entry =
-      ReactDefaultPerf
-        ._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];
-    var writes = entry.writes;
-    writes[id] = writes[id] || [];
-    writes[id].push({
-      type: fnName,
-      time: totalTime,
-      args: args,
-    });
-  },
-
-  measure: function(moduleName, fnName, func) {
-    return function(...args) {
-      var totalTime;
-      var rv;
-      var start;
-
-      var entry = ReactDefaultPerf._allMeasurements[
-        ReactDefaultPerf._allMeasurements.length - 1
-      ];
-
-      if (fnName === '_renderNewRootComponent' ||
-          fnName === 'flushBatchedUpdates') {
-        // A "measurement" is a set of metrics recorded for each flush. We want
-        // to group the metrics for a given flush together so we can look at the
-        // components that rendered and the DOM operations that actually
-        // happened to determine the amount of "wasted work" performed.
-        ReactDefaultPerf._allMeasurements.push(entry = {
-          exclusive: {},
-          inclusive: {},
-          render: {},
-          counts: {},
-          writes: {},
-          displayNames: {},
-          hierarchy: {},
-          totalTime: 0,
-          created: {},
-        });
-        start = performanceNow();
-        rv = func.apply(this, args);
-        entry.totalTime = performanceNow() - start;
-        return rv;
-      } else if (fnName === '_mountImageIntoNode' ||
-          moduleName === 'ReactDOMIDOperations' ||
-          moduleName === 'CSSPropertyOperations' ||
-          moduleName === 'DOMChildrenOperations' ||
-          moduleName === 'DOMPropertyOperations' ||
-          moduleName === 'ReactComponentBrowserEnvironment') {
-        start = performanceNow();
-        rv = func.apply(this, args);
-        totalTime = performanceNow() - start;
-
-        if (fnName === '_mountImageIntoNode') {
-          ReactDefaultPerf._recordWrite('', fnName, totalTime, args[0]);
-        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
-          // special format
-          args[1].forEach(function(update) {
-            var writeArgs = {};
-            if (update.fromIndex !== null) {
-              writeArgs.fromIndex = update.fromIndex;
-            }
-            if (update.toIndex !== null) {
-              writeArgs.toIndex = update.toIndex;
-            }
-            if (update.content !== null) {
-              writeArgs.content = update.content;
-            }
-            ReactDefaultPerf._recordWrite(
-              args[0]._rootNodeID,
-              update.type,
-              totalTime,
-              writeArgs
-            );
-          });
-        } else {
-          // basic format
-          var id = args[0];
-          if (moduleName === 'EventPluginHub') {
-            id = id._rootNodeID;
-          } else if (fnName === 'replaceNodeWithMarkup') {
-            // Old node is already unmounted; can't get its instance
-            id = ReactDOMComponentTree.getInstanceFromNode(args[1].node)._rootNodeID;
-          } else if (fnName === 'replaceDelimitedText') {
-            id = getID(ReactDOMComponentTree.getInstanceFromNode(args[0]));
-          } else if (typeof id === 'object') {
-            id = getID(ReactDOMComponentTree.getInstanceFromNode(args[0]));
-          }
-          ReactDefaultPerf._recordWrite(
-            id,
-            fnName,
-            totalTime,
-            Array.prototype.slice.call(args, 1)
-          );
-        }
-        return rv;
-      } else if (moduleName === 'ReactCompositeComponent' && (
-        fnName === 'mountComponent' ||
-        fnName === 'updateComponent' || // TODO: receiveComponent()?
-        fnName === '_renderValidatedComponent')) {
-
-        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
-          return func.apply(this, args);
-        }
-
-        var rootNodeID = getIDOfComposite(this);
-        var isRender = fnName === '_renderValidatedComponent';
-        var isMount = fnName === 'mountComponent';
-
-        var mountStack = ReactDefaultPerf._mountStack;
-
-        if (isRender) {
-          addValue(entry.counts, rootNodeID, 1);
-        } else if (isMount) {
-          entry.created[rootNodeID] = true;
-          mountStack.push(0);
-        }
-
-        ReactDefaultPerf._compositeStack.push(rootNodeID);
-
-        start = performanceNow();
-        rv = func.apply(this, args);
-        totalTime = performanceNow() - start;
-
-        ReactDefaultPerf._compositeStack.pop();
-
-        if (isRender) {
-          addValue(entry.render, rootNodeID, totalTime);
-        } else if (isMount) {
-          var subMountTime = mountStack.pop();
-          mountStack[mountStack.length - 1] += totalTime;
-          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
-          addValue(entry.inclusive, rootNodeID, totalTime);
-        } else {
-          addValue(entry.inclusive, rootNodeID, totalTime);
-        }
-
-        entry.displayNames[rootNodeID] = {
-          current: this.getName(),
-          owner: this._currentElement._owner ?
-            this._currentElement._owner.getName() :
-            '<root>',
-        };
-
-        return rv;
-      } else if (
-        (moduleName === 'ReactDOMComponent' ||
-         moduleName === 'ReactDOMTextComponent') &&
-        (fnName === 'mountComponent' ||
-         fnName === 'receiveComponent')) {
-
-        rv = func.apply(this, args);
-        entry.hierarchy[getID(this)] =
-          ReactDefaultPerf._compositeStack.slice();
-        return rv;
-      } else {
-        return func.apply(this, args);
-      }
-    };
-  },
-};
-
-module.exports = ReactDefaultPerf;
diff --git a/src/test/ReactDefaultPerfAnalysis.js b/src/test/ReactDefaultPerfAnalysis.js
deleted file mode 100644
index bf7cb30fe..000000000
--- a/src/test/ReactDefaultPerfAnalysis.js
+++ /dev/null
@@ -1,213 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @providesModule ReactDefaultPerfAnalysis
- */
-
-'use strict';
-
-
-// Don't try to save users less than 1.2ms (a number I made up)
-var DONT_CARE_THRESHOLD = 1.2;
-var DOM_OPERATION_TYPES = {
-  '_mountImageIntoNode': 'set innerHTML',
-  INSERT_MARKUP: 'set innerHTML',
-  MOVE_EXISTING: 'move',
-  REMOVE_NODE: 'remove',
-  SET_MARKUP: 'set innerHTML',
-  TEXT_CONTENT: 'set textContent',
-  'setValueForProperty': 'update attribute',
-  'setValueForAttribute': 'update attribute',
-  'deleteValueForProperty': 'remove attribute',
-  'setValueForStyles': 'update styles',
-  'replaceNodeWithMarkup': 'replace',
-  'replaceDelimitedText': 'replace',
-};
-
-function getTotalTime(measurements) {
-  // TODO: return number of DOM ops? could be misleading.
-  // TODO: measure dropped frames after reconcile?
-  // TODO: log total time of each reconcile and the top-level component
-  // class that triggered it.
-  var totalTime = 0;
-  for (var i = 0; i < measurements.length; i++) {
-    var measurement = measurements[i];
-    totalTime += measurement.totalTime;
-  }
-  return totalTime;
-}
-
-function getDOMSummary(measurements) {
-  var items = [];
-  measurements.forEach(function(measurement) {
-    Object.keys(measurement.writes).forEach(function(id) {
-      measurement.writes[id].forEach(function(write) {
-        items.push({
-          id: id,
-          type: DOM_OPERATION_TYPES[write.type] || write.type,
-          args: write.args,
-        });
-      });
-    });
-  });
-  return items;
-}
-
-function getExclusiveSummary(measurements) {
-  var candidates = {};
-  var displayName;
-
-  for (var i = 0; i < measurements.length; i++) {
-    var measurement = measurements[i];
-    var allIDs = Object.assign(
-      {},
-      measurement.exclusive,
-      measurement.inclusive
-    );
-
-    for (var id in allIDs) {
-      displayName = measurement.displayNames[id].current;
-
-      candidates[displayName] = candidates[displayName] || {
-        componentName: displayName,
-        inclusive: 0,
-        exclusive: 0,
-        render: 0,
-        count: 0,
-      };
-      if (measurement.render[id]) {
-        candidates[displayName].render += measurement.render[id];
-      }
-      if (measurement.exclusive[id]) {
-        candidates[displayName].exclusive += measurement.exclusive[id];
-      }
-      if (measurement.inclusive[id]) {
-        candidates[displayName].inclusive += measurement.inclusive[id];
-      }
-      if (measurement.counts[id]) {
-        candidates[displayName].count += measurement.counts[id];
-      }
-    }
-  }
-
-  // Now make a sorted array with the results.
-  var arr = [];
-  for (displayName in candidates) {
-    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
-      arr.push(candidates[displayName]);
-    }
-  }
-
-  arr.sort(function(a, b) {
-    return b.exclusive - a.exclusive;
-  });
-
-  return arr;
-}
-
-function getInclusiveSummary(measurements, onlyClean) {
-  var candidates = {};
-  var inclusiveKey;
-
-  for (var i = 0; i < measurements.length; i++) {
-    var measurement = measurements[i];
-    var allIDs = Object.assign(
-      {},
-      measurement.exclusive,
-      measurement.inclusive
-    );
-    var cleanComponents;
-
-    if (onlyClean) {
-      cleanComponents = getUnchangedComponents(measurement);
-    }
-
-    for (var id in allIDs) {
-      if (onlyClean && !cleanComponents[id]) {
-        continue;
-      }
-
-      var displayName = measurement.displayNames[id];
-
-      // Inclusive time is not useful for many components without knowing where
-      // they are instantiated. So we aggregate inclusive time with both the
-      // owner and current displayName as the key.
-      inclusiveKey = displayName.owner + ' > ' + displayName.current;
-
-      candidates[inclusiveKey] = candidates[inclusiveKey] || {
-        componentName: inclusiveKey,
-        time: 0,
-        count: 0,
-      };
-
-      if (measurement.inclusive[id]) {
-        candidates[inclusiveKey].time += measurement.inclusive[id];
-      }
-      if (measurement.counts[id]) {
-        candidates[inclusiveKey].count += measurement.counts[id];
-      }
-    }
-  }
-
-  // Now make a sorted array with the results.
-  var arr = [];
-  for (inclusiveKey in candidates) {
-    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
-      arr.push(candidates[inclusiveKey]);
-    }
-  }
-
-  arr.sort(function(a, b) {
-    return b.time - a.time;
-  });
-
-  return arr;
-}
-
-function getUnchangedComponents(measurement) {
-  // For a given reconcile, look at which components did not actually
-  // render anything to the DOM and return a mapping of their ID to
-  // the amount of time it took to render the entire subtree.
-  var cleanComponents = {};
-  var writes = measurement.writes;
-  var dirtyComposites = {};
-  Object.keys(writes).forEach(function(id) {
-    writes[id].forEach(function(write) {
-      // Root mounting (innerHTML set) is recorded with an ID of ''
-      if (id !== '') {
-        measurement.hierarchy[id].forEach((c) => dirtyComposites[c] = true);
-      }
-    });
-  });
-  var allIDs = Object.assign({}, measurement.exclusive, measurement.inclusive);
-
-  for (var id in allIDs) {
-    var isDirty = false;
-    // See if any of the DOM operations applied to this component's subtree.
-    if (dirtyComposites[id]) {
-      isDirty = true;
-    }
-    // check if component newly created
-    if (measurement.created[id]) {
-      isDirty = true;
-    }
-    if (!isDirty && measurement.counts[id] > 0) {
-      cleanComponents[id] = true;
-    }
-  }
-  return cleanComponents;
-}
-
-var ReactDefaultPerfAnalysis = {
-  getExclusiveSummary: getExclusiveSummary,
-  getInclusiveSummary: getInclusiveSummary,
-  getDOMSummary: getDOMSummary,
-  getTotalTime: getTotalTime,
-};
-
-module.exports = ReactDefaultPerfAnalysis;
diff --git a/src/test/ReactPerf.js b/src/test/ReactPerf.js
deleted file mode 100644
index 1eb803a4e..000000000
--- a/src/test/ReactPerf.js
+++ /dev/null
@@ -1,99 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @providesModule ReactPerf
- */
-
-'use strict';
-
-/**
- * ReactPerf is a general AOP system designed to measure performance. This
- * module only has the hooks: see ReactDefaultPerf for the analysis tool.
- */
-var ReactPerf = {
-  /**
-   * Boolean to enable/disable measurement. Set to false by default to prevent
-   * accidental logging and perf loss.
-   */
-  enableMeasure: false,
-
-  /**
-   * Holds onto the measure function in use. By default, don't measure
-   * anything, but we'll override this if we inject a measure function.
-   */
-  storedMeasure: _noMeasure,
-
-  /**
-   * @param {object} object
-   * @param {string} objectName
-   * @param {object<string>} methodNames
-   */
-  measureMethods: function(object, objectName, methodNames) {
-    if (__DEV__) {
-      for (var key in methodNames) {
-        if (!methodNames.hasOwnProperty(key)) {
-          continue;
-        }
-        object[key] = ReactPerf.measure(
-          objectName,
-          methodNames[key],
-          object[key]
-        );
-      }
-    }
-  },
-
-  /**
-   * Use this to wrap methods you want to measure. Zero overhead in production.
-   *
-   * @param {string} objName
-   * @param {string} fnName
-   * @param {function} func
-   * @return {function}
-   */
-  measure: function(objName, fnName, func) {
-    if (__DEV__) {
-      var measuredFunc = null;
-      var wrapper = function() {
-        if (ReactPerf.enableMeasure) {
-          if (!measuredFunc) {
-            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
-          }
-          return measuredFunc.apply(this, arguments);
-        }
-        return func.apply(this, arguments);
-      };
-      wrapper.displayName = objName + '_' + fnName;
-      return wrapper;
-    }
-    return func;
-  },
-
-  injection: {
-    /**
-     * @param {function} measure
-     */
-    injectMeasure: function(measure) {
-      ReactPerf.storedMeasure = measure;
-    },
-  },
-};
-
-/**
- * Simply passes through the measured function, without measuring it.
- *
- * @param {string} objName
- * @param {string} fnName
- * @param {function} func
- * @return {function}
- */
-function _noMeasure(objName, fnName, func) {
-  return func;
-}
-
-module.exports = ReactPerf;
diff --git a/src/test/ReactTestUtils.js b/src/test/ReactTestUtils.js
index d1365b50c..13e1b2770 100644
--- a/src/test/ReactTestUtils.js
+++ b/src/test/ReactTestUtils.js
@@ -18,8 +18,5 @@ var EventPropagators = require('EventPropagators');
 var React = require('React');
-var ReactDefaultInjection = require('ReactDefaultInjection');
 var ReactDOM = require('ReactDOM');
 var ReactDOMComponentTree = require('ReactDOMComponentTree');
-var ReactElement = require('ReactElement');
 var ReactBrowserEventEmitter = require('ReactBrowserEventEmitter');
-var ReactCompositeComponent = require('ReactCompositeComponent');
 var ReactInstanceMap = require('ReactInstanceMap');
@@ -27,6 +24,7 @@ var ReactUpdates = require('ReactUpdates');
 var SyntheticEvent = require('SyntheticEvent');
+var ReactShallowRenderer = require('ReactShallowRenderer');
 
-var emptyObject = require('emptyObject');
 var findDOMNode = require('findDOMNode');
 var invariant = require('invariant');
+var warning = require('warning');
 
@@ -36,2 +34,17 @@ function Event(suffix) {}
 
+// In react 16+ shallowRenderer will not be accessible via ReactTestUtils.createRenderer()
+// Instead it will be available via react-test-renderer/shallow
+// Maintain backwards compat for 15.5.0 release, but warn about using the deprecated method
+let hasWarnedAboutCreateRenderer = false;
+function createRendererWithWarning() {
+  warning(
+    hasWarnedAboutCreateRenderer,
+    'Shallow renderer has been moved to react-test-renderer/shallow. ' +
+      'Update references to remove this warning.',
+  );
+  hasWarnedAboutCreateRenderer = true;
+
+  return new ReactShallowRenderer();
+}
+
 /**
@@ -55,6 +68,3 @@ function findAllInRenderedTreeInternal(inst, test) {
       ret = ret.concat(
-        findAllInRenderedTreeInternal(
-          renderedChildren[key],
-          test
-        )
+        findAllInRenderedTreeInternal(renderedChildren[key], test),
       );
@@ -62,3 +72,3 @@ function findAllInRenderedTreeInternal(inst, test) {
   } else if (
-    ReactElement.isValidElement(currentElement) &&
+    React.isValidElement(currentElement) &&
     typeof currentElement.type === 'function'
@@ -66,3 +76,3 @@ function findAllInRenderedTreeInternal(inst, test) {
     ret = ret.concat(
-      findAllInRenderedTreeInternal(inst._renderedComponent, test)
+      findAllInRenderedTreeInternal(inst._renderedComponent, test),
     );
@@ -73,2 +83,6 @@ function findAllInRenderedTreeInternal(inst, test) {
 /**
+ * Utilities for making it easy to test React components.
+ *
+ * See https://facebook.github.io/react/docs/test-utils.html
+ *
  * Todo: Support the entire DOM.scry query syntax. For now, these simple
@@ -78,3 +92,3 @@ function findAllInRenderedTreeInternal(inst, test) {
 var ReactTestUtils = {
-  renderIntoDocument: function(instance) {
+  renderIntoDocument: function(element) {
     var div = document.createElement('div');
@@ -85,3 +99,3 @@ var ReactTestUtils = {
     // document.documentElement.appendChild(div);
-    return ReactDOM.render(instance, div);
+    return ReactDOM.render(element, div);
   },
@@ -89,3 +103,3 @@ var ReactTestUtils = {
   isElement: function(element) {
-    return ReactElement.isValidElement(element);
+    return React.isValidElement(element);
   },
@@ -93,6 +107,3 @@ var ReactTestUtils = {
   isElementOfType: function(inst, convenienceConstructor) {
-    return (
-      ReactElement.isValidElement(inst) &&
-      inst.type === convenienceConstructor
-    );
+    return React.isValidElement(inst) && inst.type === convenienceConstructor;
   },
@@ -104,5 +115,3 @@ var ReactTestUtils = {
   isDOMComponentElement: function(inst) {
-    return !!(inst &&
-              ReactElement.isValidElement(inst) &&
-              !!inst.tagName);
+    return !!(inst && React.isValidElement(inst) && !!inst.tagName);
   },
@@ -115,5 +124,7 @@ var ReactTestUtils = {
     }
-    return inst != null &&
-           typeof inst.render === 'function' &&
-           typeof inst.setState === 'function';
+    return (
+      inst != null &&
+      typeof inst.render === 'function' &&
+      typeof inst.setState === 'function'
+    );
   },
@@ -125,7 +136,5 @@ var ReactTestUtils = {
     var internalInstance = ReactInstanceMap.get(inst);
-    var constructor = internalInstance
-      ._currentElement
-      .type;
+    var constructor = internalInstance._currentElement.type;
 
-    return (constructor === type);
+    return constructor === type;
   },
@@ -133,3 +142,3 @@ var ReactTestUtils = {
   isCompositeComponentElement: function(inst) {
-    if (!ReactElement.isValidElement(inst)) {
+    if (!React.isValidElement(inst)) {
       return false;
@@ -147,8 +156,7 @@ var ReactTestUtils = {
     var internalInstance = ReactInstanceMap.get(inst);
-    var constructor = internalInstance
-      ._currentElement
-      .type;
+    var constructor = internalInstance._currentElement.type;
 
-    return !!(ReactTestUtils.isCompositeComponentElement(inst) &&
-             (constructor === type));
+    return !!(
+      ReactTestUtils.isCompositeComponentElement(inst) && constructor === type
+    );
   },
@@ -169,3 +177,3 @@ var ReactTestUtils = {
       ReactTestUtils.isCompositeComponent(inst),
-      'findAllInRenderedTree(...): instance must be a composite component'
+      'findAllInRenderedTree(...): instance must be a composite component',
     );
@@ -180,5 +188,2 @@ var ReactTestUtils = {
   scryRenderedDOMComponentsWithClass: function(root, classNames) {
-    if (!Array.isArray(classNames)) {
-      classNames = classNames.split(/\s+/);
-    }
     return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
@@ -191,2 +196,11 @@ var ReactTestUtils = {
         var classList = className.split(/\s+/);
+
+        if (!Array.isArray(classNames)) {
+          invariant(
+            classNames !== undefined,
+            'TestUtils.scryRenderedDOMComponentsWithClass expects a ' +
+              'className as a second argument.',
+          );
+          classNames = classNames.split(/\s+/);
+        }
         return classNames.every(function(name) {
@@ -206,8 +220,13 @@ var ReactTestUtils = {
   findRenderedDOMComponentWithClass: function(root, className) {
-    var all =
-      ReactTestUtils.scryRenderedDOMComponentsWithClass(root, className);
+    var all = ReactTestUtils.scryRenderedDOMComponentsWithClass(
+      root,
+      className,
+    );
     if (all.length !== 1) {
       throw new Error(
-        'Did not find exactly one match (found: ' + all.length + ') ' +
-        'for class:' + className
+        'Did not find exactly one match (found: ' +
+          all.length +
+          ') ' +
+          'for class:' +
+          className,
       );
@@ -217,3 +236,2 @@ var ReactTestUtils = {
 
-
   /**
@@ -225,4 +243,6 @@ var ReactTestUtils = {
     return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
-      return ReactTestUtils.isDOMComponent(inst) &&
-            inst.tagName.toUpperCase() === tagName.toUpperCase();
+      return (
+        ReactTestUtils.isDOMComponent(inst) &&
+        inst.tagName.toUpperCase() === tagName.toUpperCase()
+      );
     });
@@ -240,4 +260,7 @@ var ReactTestUtils = {
       throw new Error(
-        'Did not find exactly one match (found: ' + all.length + ') ' +
-        'for tag:' + tagName
+        'Did not find exactly one match (found: ' +
+          all.length +
+          ') ' +
+          'for tag:' +
+          tagName,
       );
@@ -247,3 +270,2 @@ var ReactTestUtils = {
 
-
   /**
@@ -254,6 +276,3 @@ var ReactTestUtils = {
     return ReactTestUtils.findAllInRenderedTree(root, function(inst) {
-      return ReactTestUtils.isCompositeComponentWithType(
-        inst,
-        componentType
-      );
+      return ReactTestUtils.isCompositeComponentWithType(inst, componentType);
     });
@@ -270,3 +289,3 @@ var ReactTestUtils = {
       root,
-      componentType
+      componentType,
     );
@@ -274,4 +293,7 @@ var ReactTestUtils = {
       throw new Error(
-        'Did not find exactly one match (found: ' + all.length + ') ' +
-        'for componentType:' + componentType
+        'Did not find exactly one match (found: ' +
+          all.length +
+          ') ' +
+          'for componentType:' +
+          componentType,
       );
@@ -298,7 +320,3 @@ var ReactTestUtils = {
     module.prototype.render.mockImplementation(function() {
-      return React.createElement(
-        mockTagName,
-        null,
-        this.props.children
-      );
+      return React.createElement(mockTagName, null, this.props.children);
     });
@@ -317,5 +335,6 @@ var ReactTestUtils = {
     fakeNativeEvent.target = node;
+    fakeNativeEvent.simulated = true;
     ReactBrowserEventEmitter.ReactEventListener.dispatchEvent(
       topLevelType,
-      fakeNativeEvent
+      fakeNativeEvent,
     );
@@ -331,5 +350,6 @@ var ReactTestUtils = {
   simulateNativeEventOnDOMComponent: function(
-      topLevelType,
-      comp,
-      fakeNativeEvent) {
+    topLevelType,
+    comp,
+    fakeNativeEvent,
+  ) {
     ReactTestUtils.simulateNativeEventOnNode(
@@ -337,3 +357,3 @@ var ReactTestUtils = {
       findDOMNode(comp),
-      fakeNativeEvent
+      fakeNativeEvent,
     );
@@ -343,5 +363,3 @@ var ReactTestUtils = {
     return {
-      touches: [
-        {pageX: x, pageY: y},
-      ],
+      touches: [{pageX: x, pageY: y}],
     };
@@ -349,5 +367,3 @@ var ReactTestUtils = {
 
-  createRenderer: function() {
-    return new ReactShallowRenderer();
-  },
+  createRenderer: createRendererWithWarning,
 
@@ -357,116 +373,2 @@ var ReactTestUtils = {
 
-/**
- * @class ReactShallowRenderer
- */
-var ReactShallowRenderer = function() {
-  this._instance = null;
-};
-
-ReactShallowRenderer.prototype.getMountedInstance = function() {
-  return this._instance ? this._instance._instance : null;
-};
-
-var NoopInternalComponent = function(element) {
-  this._renderedOutput = element;
-  this._currentElement = element;
-};
-
-NoopInternalComponent.prototype = {
-
-  mountComponent: function() {
-  },
-
-  receiveComponent: function(element) {
-    this._renderedOutput = element;
-    this._currentElement = element;
-  },
-
-  getNativeNode: function() {
-    return undefined;
-  },
-
-  unmountComponent: function() {
-  },
-
-  getPublicInstance: function() {
-    return null;
-  },
-};
-
-var ShallowComponentWrapper = function(element) {
-  this.construct(element);
-};
-Object.assign(
-  ShallowComponentWrapper.prototype,
-  ReactCompositeComponent.Mixin, {
-    _instantiateReactComponent: function(element) {
-      return new NoopInternalComponent(element);
-    },
-    _replaceNodeWithMarkup: function() {},
-    _renderValidatedComponent:
-      ReactCompositeComponent.Mixin
-        ._renderValidatedComponentWithoutOwnerOrContext,
-  }
-);
-
-ReactShallowRenderer.prototype.render = function(element, context) {
-  // Ensure we've done the default injections. This might not be true in the
-  // case of a simple test that only requires React and the TestUtils in
-  // conjunction with an inline-requires transform.
-  ReactDefaultInjection.inject();
-
-  invariant(
-    ReactElement.isValidElement(element),
-    'ReactShallowRenderer render(): Invalid component element.%s',
-    typeof element === 'function' ?
-      ' Instead of passing a component class, make sure to instantiate ' +
-      'it by passing it to React.createElement.' :
-      ''
-  );
-  invariant(
-    typeof element.type !== 'string',
-    'ReactShallowRenderer render(): Shallow rendering works only with custom ' +
-    'components, not primitives (%s). Instead of calling `.render(el)` and ' +
-    'inspecting the rendered output, look at `el.props` directly instead.',
-    element.type
-  );
-
-  if (!context) {
-    context = emptyObject;
-  }
-  ReactUpdates.batchedUpdates(_batchedRender, this, element, context);
-
-  return this.getRenderOutput();
-};
-
-function _batchedRender(renderer, element, context) {
-  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(true);
-  renderer._render(element, transaction, context);
-  ReactUpdates.ReactReconcileTransaction.release(transaction);
-}
-
-ReactShallowRenderer.prototype.getRenderOutput = function() {
-  return (
-    (this._instance && this._instance._renderedComponent &&
-     this._instance._renderedComponent._renderedOutput)
-    || null
-  );
-};
-
-ReactShallowRenderer.prototype.unmount = function() {
-  if (this._instance) {
-    this._instance.unmountComponent(false);
-  }
-};
-
-ReactShallowRenderer.prototype._render = function(element, transaction, context) {
-  if (this._instance) {
-    this._instance.receiveComponent(element, transaction, context);
-  } else {
-    var instance = new ShallowComponentWrapper(element);
-    instance.mountComponent(transaction, null, null, context);
-    this._instance = instance;
-  }
-};
-
 /**
@@ -485,3 +387,3 @@ function makeSimulator(eventType) {
       'TestUtils.Simulate expects a component instance and not a ReactElement.' +
-      'TestUtils.Simulate will not work if you are using shallow rendering.'
+        'TestUtils.Simulate will not work if you are using shallow rendering.',
     );
@@ -498,2 +400,4 @@ function makeSimulator(eventType) {
     fakeNativeEvent.target = node;
+    fakeNativeEvent.type = eventType.toLowerCase();
+
     // We don't use SyntheticEvent.getPooled in order to not have to worry about
@@ -504,3 +408,3 @@ function makeSimulator(eventType) {
       fakeNativeEvent,
-      node
+      node,
     );
@@ -575,3 +479,3 @@ function makeNativeSimulator(eventType) {
         domComponentOrNode,
-        fakeNativeEvent
+        fakeNativeEvent,
       );
@@ -582,3 +486,3 @@ function makeNativeSimulator(eventType) {
         domComponentOrNode,
-        fakeNativeEvent
+        fakeNativeEvent,
       );
@@ -590,4 +494,5 @@ Object.keys(topLevelTypes).forEach(function(eventType) {
   // Event type is stored as 'topClick' - we transform that to 'click'
-  var convenienceName = eventType.indexOf('top') === 0 ?
-    eventType.charAt(3).toLowerCase() + eventType.substr(4) : eventType;
+  var convenienceName = eventType.indexOf('top') === 0
+    ? eventType.charAt(3).toLowerCase() + eventType.substr(4)
+    : eventType;
   /**
@@ -596,4 +501,5 @@ Object.keys(topLevelTypes).forEach(function(eventType) {
    */
-  ReactTestUtils.SimulateNative[convenienceName] =
-    makeNativeSimulator(eventType);
+  ReactTestUtils.SimulateNative[convenienceName] = makeNativeSimulator(
+    eventType,
+  );
 });
diff --git a/src/test/__tests__/MetaMatchers-test.js b/src/test/__tests__/MetaMatchers-test.js
deleted file mode 100644
index be03c9604..000000000
--- a/src/test/__tests__/MetaMatchers-test.js
+++ /dev/null
@@ -1,62 +0,0 @@
-/**
- * Copyright 2015-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
- */
-
-'use strict';
-
-var MetaMatchers = require('MetaMatchers');
-
-describe('meta-matchers', function() {
-
-  beforeEach(function() {
-    this.addMatchers(MetaMatchers);
-  });
-
-  function a() {
-    it('should add 1 and 2', function() {
-      expect(1 + 2).toBe(3);
-    });
-  }
-
-  function b() {
-    it('should add 1 and 2', function() {
-      expect(1 + 2).toBe(3);
-    });
-  }
-
-  function c() {
-    it('should add 1 and 2', function() {
-      expect(1 + 2).toBe(3);
-    });
-    it('should mutiply 1 and 2', function() {
-      expect(1 * 2).toBe(2);
-    });
-  }
-
-  function d() {
-    it('should add 1 and 2', function() {
-      expect(1 + 2).toBe(3);
-    });
-    it('should mutiply 1 and 2', function() {
-      expect(1 * 2).toBe(2);
-      expect(2 * 1).toBe(2);
-    });
-  }
-
-  it('tests equality of specs', function() {
-    expect(a).toEqualSpecsIn(b);
-  });
-
-  it('tests inequality of specs and expects', function() {
-    expect(b).not.toEqualSpecsIn(c);
-    expect(c).not.toEqualSpecsIn(d);
-  });
-
-});
diff --git a/src/test/__tests__/ReactDefaultPerf-test.js b/src/test/__tests__/ReactDefaultPerf-test.js
deleted file mode 100644
index cc16c8846..000000000
--- a/src/test/__tests__/ReactDefaultPerf-test.js
+++ /dev/null
@@ -1,287 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @emails react-core
- */
-
-'use strict';
-
-describe('ReactDefaultPerf', function() {
-  var React;
-  var ReactDOM;
-  var ReactDOMFeatureFlags;
-  var ReactDefaultPerf;
-  var ReactTestUtils;
-  var ReactDefaultPerfAnalysis;
-
-  var App;
-  var Box;
-  var Div;
-
-  beforeEach(function() {
-    var now = 0;
-    jest.setMock('fbjs/lib/performanceNow', function() {
-      return now++;
-    });
-
-    if (typeof console.table !== 'function') {
-      console.table = () => {};
-      console.table.isFake = true;
-    }
-
-    React = require('React');
-    ReactDOM = require('ReactDOM');
-    ReactDOMFeatureFlags = require('ReactDOMFeatureFlags');
-    ReactDefaultPerf = require('ReactDefaultPerf');
-    ReactTestUtils = require('ReactTestUtils');
-    ReactDefaultPerfAnalysis = require('ReactDefaultPerfAnalysis');
-
-    App = React.createClass({
-      render: function() {
-        return <div><Box /><Box flip={this.props.flipSecond} /></div>;
-      },
-    });
-
-    Box = React.createClass({
-      render: function() {
-        return <div key={!!this.props.flip}><input /></div>;
-      },
-    });
-
-    // ReactPerf only measures composites, so we put everything in one.
-    Div = React.createClass({
-      render: function() {
-        return <div {...this.props} />;
-      },
-    });
-  });
-
-  afterEach(function() {
-    if (console.table.isFake) {
-      delete console.table;
-    }
-  });
-
-  function measure(fn) {
-    ReactDefaultPerf.start();
-    fn();
-    ReactDefaultPerf.stop();
-    return ReactDefaultPerf.getLastMeasurements().__unstable_this_format_will_change;
-  }
-
-  it('should count no-op update as waste', function() {
-    var container = document.createElement('div');
-    ReactDOM.render(<App />, container);
-    var measurements = measure(() => {
-      ReactDOM.render(<App />, container);
-    });
-
-    var summary = ReactDefaultPerf.getWasted(measurements);
-    expect(summary.length).toBe(2);
-
-    /*eslint-disable dot-notation */
-
-    expect(summary[0]['Owner > component']).toBe('<root> > App');
-    expect(summary[0]['Wasted time (ms)']).not.toBe(0);
-    expect(summary[0]['Instances']).toBe(1);
-
-    expect(summary[1]['Owner > component']).toBe('App > Box');
-    expect(summary[1]['Wasted time (ms)']).not.toBe(0);
-    expect(summary[1]['Instances']).toBe(2);
-
-    /*eslint-enable dot-notation */
-  });
-
-  it('should count no-op update in child as waste', function() {
-    var container = document.createElement('div');
-    ReactDOM.render(<App />, container);
-
-    // Here, we add a Box -- two of the <Box /> updates are wasted time (but the
-    // addition of the third is not)
-    var measurements = measure(() => {
-      ReactDOM.render(<App flipSecond={true} />, container);
-    });
-
-    var summary = ReactDefaultPerf.getWasted(measurements);
-    expect(summary.length).toBe(1);
-
-    /*eslint-disable dot-notation */
-
-    expect(summary[0]['Owner > component']).toBe('App > Box');
-    expect(summary[0]['Wasted time (ms)']).not.toBe(0);
-    expect(summary[0]['Instances']).toBe(1);
-
-    /*eslint-enable dot-notation */
-  });
-
-  function expectNoWaste(fn) {
-    var measurements = measure(fn);
-    var summary = ReactDefaultPerf.getWasted(measurements);
-    expect(summary).toEqual([]);
-  }
-
-  it('should not count initial render as waste', function() {
-    expectNoWaste(() => {
-      ReactTestUtils.renderIntoDocument(<App />);
-    });
-  });
-
-  it('should not count unmount as waste', function() {
-    var container = document.createElement('div');
-    ReactDOM.render(<Div>hello</Div>, container);
-    expectNoWaste(() => {
-      ReactDOM.unmountComponentAtNode(container);
-    });
-  });
-
-  it('should not count content update as waste', function() {
-    var container = document.createElement('div');
-    ReactDOM.render(<Div>hello</Div>, container);
-    expectNoWaste(() => {
-      ReactDOM.render(<Div>hello world</Div>, container);
-    });
-  });
-
-  it('should not count child addition as waste', function() {
-    var container = document.createElement('div');
-    ReactDOM.render(<Div><span /></Div>, container);
-    expectNoWaste(() => {
-      ReactDOM.render(<Div><span /><span /></Div>, container);
-    });
-  });
-
-  it('should not count child removal as waste', function() {
-    var container = document.createElement('div');
-    ReactDOM.render(<Div><span /><span /></Div>, container);
-    expectNoWaste(() => {
-      ReactDOM.render(<Div><span /></Div>, container);
-    });
-  });
-
-  it('should not count property update as waste', function() {
-    var container = document.createElement('div');
-    ReactDOM.render(<Div className="yellow">hey</Div>, container);
-    expectNoWaste(() => {
-      ReactDOM.render(<Div className="blue">hey</Div>, container);
-    });
-  });
-
-  it('should not count style update as waste', function() {
-    var container = document.createElement('div');
-    ReactDOM.render(<Div style={{color: 'yellow'}}>hey</Div>, container);
-    expectNoWaste(() => {
-      ReactDOM.render(<Div style={{color: 'blue'}}>hey</Div>, container);
-    });
-  });
-
-  it('should not count property removal as waste', function() {
-    var container = document.createElement('div');
-    ReactDOM.render(<Div className="yellow">hey</Div>, container);
-    expectNoWaste(() => {
-      ReactDOM.render(<Div>hey</Div>, container);
-    });
-  });
-
-  it('should not count raw HTML update as waste', function() {
-    var container = document.createElement('div');
-    ReactDOM.render(
-      <Div dangerouslySetInnerHTML={{__html: 'me'}} />,
-      container
-    );
-    expectNoWaste(() => {
-      ReactDOM.render(
-        <Div dangerouslySetInnerHTML={{__html: 'you'}} />,
-        container
-      );
-    });
-  });
-
-  it('should not count child reordering as waste', function() {
-    var container = document.createElement('div');
-    ReactDOM.render(<Div><div key="A" /><div key="B" /></Div>, container);
-    expectNoWaste(() => {
-      ReactDOM.render(<Div><div key="B" /><div key="A" /></Div>, container);
-    });
-  });
-
-  it('should not count text update as waste', function() {
-    var container = document.createElement('div');
-    ReactDOM.render(<Div>{'hello'}{'world'}</Div>, container);
-    expectNoWaste(() => {
-      ReactDOM.render(<Div>{'hello'}{'friend'}</Div>, container);
-    });
-  });
-
-  it('putListener should not be instrumented', function() {
-    var container = document.createElement('div');
-    ReactDOM.render(<Div onClick={function() {}}>hey</Div>, container);
-    var measurements = measure(() => {
-      ReactDOM.render(<Div onClick={function() {}}>hey</Div>, container);
-    });
-
-    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
-    expect(summary).toEqual([]);
-  });
-
-  it('deleteListener should not be instrumented', function() {
-    var container = document.createElement('div');
-    ReactDOM.render(<Div onClick={function() {}}>hey</Div>, container);
-    var measurements = measure(() => {
-      ReactDOM.render(<Div>hey</Div>, container);
-    });
-
-    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
-    expect(summary).toEqual([]);
-  });
-
-  it('should print a table after calling printOperations', function() {
-    var container = document.createElement('div');
-    var measurements = measure(() => {
-      ReactDOM.render(<Div>hey</Div>, container);
-    });
-    spyOn(console, 'table');
-    ReactDefaultPerf.printOperations(measurements);
-    expect(console.table.calls.length).toBe(1);
-    expect(console.table.argsForCall[0][0]).toEqual([{
-      'data-reactid': '',
-      type: 'set innerHTML',
-      args: ReactDOMFeatureFlags.useCreateElement ?
-        '{"node":"<not serializable>","children":[],"html":null,"text":null}' :
-        '"<div data-reactroot=\\"\\" data-reactid=\\"1\\">hey</div>"',
-    }]);
-  });
-
-  it('warns once when using getMeasurementsSummaryMap', function() {
-    var measurements = measure(() => {});
-    spyOn(console, 'error');
-    ReactDefaultPerf.getMeasurementsSummaryMap(measurements);
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      '`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use ' +
-      '`ReactPerf.getWasted(...)` instead.'
-    );
-
-    ReactDefaultPerf.getMeasurementsSummaryMap(measurements);
-    expect(console.error.calls.length).toBe(1);
-  });
-
-  it('warns once when using printDOM', function() {
-    var measurements = measure(() => {});
-    spyOn(console, 'error');
-    ReactDefaultPerf.printDOM(measurements);
-    expect(console.error.calls.length).toBe(1);
-    expect(console.error.argsForCall[0][0]).toContain(
-      '`ReactPerf.printDOM(...)` is deprecated. Use ' +
-      '`ReactPerf.printOperations(...)` instead.'
-    );
-
-    ReactDefaultPerf.printDOM(measurements);
-    expect(console.error.calls.length).toBe(1);
-  });
-
-});
diff --git a/src/test/__tests__/ReactTestUtils-test.js b/src/test/__tests__/ReactTestUtils-test.js
index 81fda9ceb..d53db7121 100644
--- a/src/test/__tests__/ReactTestUtils-test.js
+++ b/src/test/__tests__/ReactTestUtils-test.js
@@ -17,6 +17,7 @@ var ReactDOMServer;
 var ReactTestUtils;
+var ReactShallowRenderer;
+var PropTypes;
 
-describe('ReactTestUtils', function() {
-
-  beforeEach(function() {
+describe('ReactTestUtils', () => {
+  beforeEach(() => {
     React = require('React');
@@ -25,7 +26,9 @@ describe('ReactTestUtils', function() {
     ReactTestUtils = require('ReactTestUtils');
+    ReactShallowRenderer = require('ReactShallowRenderer');
+    PropTypes = require('prop-types');
   });
 
-  it('should have shallow rendering', function() {
-    var SomeComponent = React.createClass({
-      render: function() {
+  it('should have shallow rendering', () => {
+    class SomeComponent extends React.Component {
+      render() {
         return (
@@ -36,6 +39,26 @@ describe('ReactTestUtils', function() {
         );
-      },
-    });
+      }
+    }
+
+    var shallowRenderer = new ReactShallowRenderer();
+    var result = shallowRenderer.render(<SomeComponent />);
+
+    expect(result.type).toBe('div');
+    expect(result.props.children).toEqual([
+      <span className="child1" />,
+      <span className="child2" />,
+    ]);
+  });
 
-    var shallowRenderer = ReactTestUtils.createRenderer();
+  it('should shallow render a functional component', () => {
+    function SomeComponent() {
+      return (
+        <div>
+          <span className="child1" />
+          <span className="child2" />
+        </div>
+      );
+    }
+
+    var shallowRenderer = new ReactShallowRenderer();
     var result = shallowRenderer.render(<SomeComponent />);
@@ -49,20 +72,20 @@ describe('ReactTestUtils', function() {
 
-  it('should throw for invalid elements', function() {
-    var SomeComponent = React.createClass({
-      render: function() {
+  it('should throw for invalid elements', () => {
+    class SomeComponent extends React.Component {
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
-    var shallowRenderer = ReactTestUtils.createRenderer();
-    expect(() => shallowRenderer.render(SomeComponent)).toThrow(
+    var shallowRenderer = new ReactShallowRenderer();
+    expect(() => shallowRenderer.render(SomeComponent)).toThrowError(
       'ReactShallowRenderer render(): Invalid component element. Instead of ' +
-      'passing a component class, make sure to instantiate it by passing it ' +
-      'to React.createElement.'
+        'passing a component class, make sure to instantiate it by passing it ' +
+        'to React.createElement.',
     );
-    expect(() => shallowRenderer.render(<div />)).toThrow(
+    expect(() => shallowRenderer.render(<div />)).toThrowError(
       'ReactShallowRenderer render(): Shallow rendering works only with ' +
-      'custom components, not primitives (div). Instead of calling ' +
-      '`.render(el)` and inspecting the rendered output, look at `el.props` ' +
-      'directly instead.'
+        'custom components, not primitives (div). Instead of calling ' +
+        '`.render(el)` and inspecting the rendered output, look at `el.props` ' +
+        'directly instead.',
     );
@@ -70,13 +93,13 @@ describe('ReactTestUtils', function() {
 
-  it('should have shallow unmounting', function() {
-    var componentWillUnmount = jest.genMockFn();
+  it('should have shallow unmounting', () => {
+    var componentWillUnmount = jest.fn();
 
-    var SomeComponent = React.createClass({
-      render: function() {
+    class SomeComponent extends React.Component {
+      componentWillUnmount = componentWillUnmount;
+      render() {
         return <div />;
-      },
-      componentWillUnmount,
-    });
+      }
+    }
 
-    var shallowRenderer = ReactTestUtils.createRenderer();
+    var shallowRenderer = new ReactShallowRenderer();
     shallowRenderer.render(<SomeComponent />);
@@ -87,10 +110,10 @@ describe('ReactTestUtils', function() {
 
-  it('can shallow render to null', function() {
-    var SomeComponent = React.createClass({
-      render: function() {
+  it('can shallow render to null', () => {
+    class SomeComponent extends React.Component {
+      render() {
         return null;
-      },
-    });
+      }
+    }
 
-    var shallowRenderer = ReactTestUtils.createRenderer();
+    var shallowRenderer = new ReactShallowRenderer();
     var result = shallowRenderer.render(<SomeComponent />);
@@ -100,10 +123,10 @@ describe('ReactTestUtils', function() {
 
-  it('can shallow render with a ref', function() {
-    var SomeComponent = React.createClass({
-      render: function() {
+  it('can shallow render with a ref', () => {
+    class SomeComponent extends React.Component {
+      render() {
         return <div ref="hello" />;
-      },
-    });
+      }
+    }
 
-    var shallowRenderer = ReactTestUtils.createRenderer();
+    var shallowRenderer = new ReactShallowRenderer();
     // Shouldn't crash.
@@ -112,13 +135,11 @@ describe('ReactTestUtils', function() {
 
-  it('lets you update shallowly rendered components', function() {
-    var SomeComponent = React.createClass({
-      getInitialState: function() {
-        return {clicked: false};
-      },
+  it('lets you update shallowly rendered components', () => {
+    class SomeComponent extends React.Component {
+      state = {clicked: false};
 
-      onClick: function() {
+      onClick = () => {
         this.setState({clicked: true});
-      },
+      };
 
-      render: function() {
+      render() {
         var className = this.state.clicked ? 'was-clicked' : '';
@@ -127,6 +148,3 @@ describe('ReactTestUtils', function() {
           return (
-            <a
-              href="#"
-              onClick={this.onClick}
-              className={className}>
+            <a href="#" onClick={this.onClick} className={className}>
               Test link
@@ -142,6 +160,6 @@ describe('ReactTestUtils', function() {
         }
-      },
-    });
+      }
+    }
 
-    var shallowRenderer = ReactTestUtils.createRenderer();
+    var shallowRenderer = new ReactShallowRenderer();
     var result = shallowRenderer.render(<SomeComponent />);
@@ -164,13 +182,14 @@ describe('ReactTestUtils', function() {
 
-  it('can access the mounted component instance', function() {
-    var SimpleComponent = React.createClass({
-      someMethod: function() {
+  it('can access the mounted component instance', () => {
+    class SimpleComponent extends React.Component {
+      someMethod = () => {
         return this.props.n;
-      },
-      render: function() {
+      };
+
+      render() {
         return <div>{this.props.n}</div>;
-      },
-    });
+      }
+    }
 
-    var shallowRenderer = ReactTestUtils.createRenderer();
+    var shallowRenderer = new ReactShallowRenderer();
     shallowRenderer.render(<SimpleComponent n={5} />);
@@ -179,13 +198,14 @@ describe('ReactTestUtils', function() {
 
-  it('can shallowly render components with contextTypes', function() {
-    var SimpleComponent = React.createClass({
-      contextTypes: {
-        name: React.PropTypes.string,
-      },
-      render: function() {
+  it('can shallowly render components with contextTypes', () => {
+    class SimpleComponent extends React.Component {
+      static contextTypes = {
+        name: PropTypes.string,
+      };
+
+      render() {
         return <div />;
-      },
-    });
+      }
+    }
 
-    var shallowRenderer = ReactTestUtils.createRenderer();
+    var shallowRenderer = new ReactShallowRenderer();
     var result = shallowRenderer.render(<SimpleComponent />);
@@ -194,11 +214,11 @@ describe('ReactTestUtils', function() {
 
-  it('can shallowly render components with ref as function', function() {
-    var SimpleComponent = React.createClass({
-      getInitialState: function() {
-        return {clicked: false};
-      },
-      handleUserClick: function() {
-        this.setState({ clicked: true });
-      },
-      render: function() {
+  it('can shallowly render components with ref as function', () => {
+    class SimpleComponent extends React.Component {
+      state = {clicked: false};
+
+      handleUserClick = () => {
+        this.setState({clicked: true});
+      };
+
+      render() {
         return (
@@ -210,6 +230,6 @@ describe('ReactTestUtils', function() {
         );
-      },
-    });
+      }
+    }
 
-    var shallowRenderer = ReactTestUtils.createRenderer();
+    var shallowRenderer = new ReactShallowRenderer();
     shallowRenderer.render(<SimpleComponent />);
@@ -225,13 +245,14 @@ describe('ReactTestUtils', function() {
 
-  it('can setState in componentWillMount when shallow rendering', function() {
-    var SimpleComponent = React.createClass({
+  it('can setState in componentWillMount when shallow rendering', () => {
+    class SimpleComponent extends React.Component {
       componentWillMount() {
         this.setState({groovy: 'doovy'});
-      },
+      }
+
       render() {
         return <div>{this.state.groovy}</div>;
-      },
-    });
+      }
+    }
 
-    var shallowRenderer = ReactTestUtils.createRenderer();
+    var shallowRenderer = new ReactShallowRenderer();
     var result = shallowRenderer.render(<SimpleComponent />);
@@ -240,13 +261,14 @@ describe('ReactTestUtils', function() {
 
-  it('can pass context when shallowly rendering', function() {
-    var SimpleComponent = React.createClass({
-      contextTypes: {
-        name: React.PropTypes.string,
-      },
-      render: function() {
+  it('can pass context when shallowly rendering', () => {
+    class SimpleComponent extends React.Component {
+      static contextTypes = {
+        name: PropTypes.string,
+      };
+
+      render() {
         return <div>{this.context.name}</div>;
-      },
-    });
+      }
+    }
 
-    var shallowRenderer = ReactTestUtils.createRenderer();
+    var shallowRenderer = new ReactShallowRenderer();
     var result = shallowRenderer.render(<SimpleComponent />, {
@@ -257,8 +279,34 @@ describe('ReactTestUtils', function() {
 
-  it('can scryRenderedDOMComponentsWithClass with TextComponent', function() {
-    var Wrapper = React.createClass({
-      render: function() {
+  it('can fail context when shallowly rendering', () => {
+    spyOn(console, 'error');
+
+    class SimpleComponent extends React.Component {
+      static contextTypes = {
+        name: PropTypes.string.isRequired,
+      };
+
+      render() {
+        return <div>{this.context.name}</div>;
+      }
+    }
+
+    var shallowRenderer = new ReactShallowRenderer();
+    shallowRenderer.render(<SimpleComponent />);
+    expect(console.error.calls.count()).toBe(1);
+    expect(
+      console.error.calls.argsFor(0)[0].replace(/\(at .+?:\d+\)/g, '(at **)'),
+    ).toBe(
+      'Warning: Failed context type: The context `name` is marked as ' +
+        'required in `SimpleComponent`, but its value is `undefined`.\n' +
+        '    in SimpleComponent (at **)',
+    );
+  });
+
+  it('can scryRenderedDOMComponentsWithClass with TextComponent', () => {
+    class Wrapper extends React.Component {
+      render() {
         return <div>Hello <span>Jim</span></div>;
-      },
-    });
+      }
+    }
+
     var renderedComponent = ReactTestUtils.renderIntoDocument(<Wrapper />);
@@ -266,3 +314,3 @@ describe('ReactTestUtils', function() {
       renderedComponent,
-      'NonExistentClass'
+      'NonExistentClass',
     );
@@ -271,8 +319,9 @@ describe('ReactTestUtils', function() {
 
-  it('can scryRenderedDOMComponentsWithClass with className contains \\n', function() {
-    var Wrapper = React.createClass({
-      render: function() {
+  it('can scryRenderedDOMComponentsWithClass with className contains \\n', () => {
+    class Wrapper extends React.Component {
+      render() {
         return <div>Hello <span className={'x\ny'}>Jim</span></div>;
-      },
-    });
+      }
+    }
+
     var renderedComponent = ReactTestUtils.renderIntoDocument(<Wrapper />);
@@ -280,3 +329,3 @@ describe('ReactTestUtils', function() {
       renderedComponent,
-      'x'
+      'x',
     );
@@ -285,8 +334,9 @@ describe('ReactTestUtils', function() {
 
-  it('can scryRenderedDOMComponentsWithClass with multiple classes', function() {
-    var Wrapper = React.createClass({
-      render: function() {
+  it('can scryRenderedDOMComponentsWithClass with multiple classes', () => {
+    class Wrapper extends React.Component {
+      render() {
         return <div>Hello <span className={'x y z'}>Jim</span></div>;
-      },
-    });
+      }
+    }
+
     var renderedComponent = ReactTestUtils.renderIntoDocument(<Wrapper />);
@@ -294,3 +344,3 @@ describe('ReactTestUtils', function() {
       renderedComponent,
-      'x y'
+      'x y',
     );
@@ -300,3 +350,3 @@ describe('ReactTestUtils', function() {
       renderedComponent,
-      'x z'
+      'x z',
     );
@@ -306,3 +356,3 @@ describe('ReactTestUtils', function() {
       renderedComponent,
-      ['x', 'y']
+      ['x', 'y'],
     );
@@ -315,3 +365,3 @@ describe('ReactTestUtils', function() {
       renderedComponent,
-      ['x', 'a']
+      ['x', 'a'],
     );
@@ -321,3 +371,3 @@ describe('ReactTestUtils', function() {
       renderedComponent,
-      ['x a']
+      ['x a'],
     );
@@ -326,8 +376,8 @@ describe('ReactTestUtils', function() {
 
-  it('traverses children in the correct order', function() {
-    var Wrapper = React.createClass({
-      render: function() {
+  it('traverses children in the correct order', () => {
+    class Wrapper extends React.Component {
+      render() {
         return <div>{this.props.children}</div>;
-      },
-    });
+      }
+    }
 
@@ -339,3 +389,3 @@ describe('ReactTestUtils', function() {
       </Wrapper>,
-      container
+      container,
     );
@@ -346,3 +396,3 @@ describe('ReactTestUtils', function() {
       </Wrapper>,
-      container
+      container,
     );
@@ -360,3 +410,3 @@ describe('ReactTestUtils', function() {
 
-  it('should support injected wrapper components as DOM components', function() {
+  it('should support injected wrapper components as DOM components', () => {
     var getTestDocument = require('getTestDocument');
@@ -376,3 +426,3 @@ describe('ReactTestUtils', function() {
       var testComponent = ReactTestUtils.renderIntoDocument(
-        React.createElement(type)
+        React.createElement(type),
       );
@@ -384,4 +434,4 @@ describe('ReactTestUtils', function() {
     // directly...
-    var Root = React.createClass({
-      render: function() {
+    class Root extends React.Component {
+      render() {
         return (
@@ -396,4 +446,4 @@ describe('ReactTestUtils', function() {
         );
-      },
-    });
+      }
+    }
 
@@ -411,3 +461,3 @@ describe('ReactTestUtils', function() {
 
-  it('should change the value of an input field', function() {
+  it('should change the value of an input field', () => {
     var obj = {
@@ -417,5 +467,8 @@ describe('ReactTestUtils', function() {
     };
-    spyOn(obj, 'handler').andCallThrough();
+    spyOn(obj, 'handler').and.callThrough();
     var container = document.createElement('div');
-    var instance = ReactDOM.render(<input type="text" onChange={obj.handler} />, container);
+    var instance = ReactDOM.render(
+      <input type="text" onChange={obj.handler} />,
+      container,
+    );
 
@@ -425,8 +478,10 @@ describe('ReactTestUtils', function() {
 
-    expect(obj.handler).toHaveBeenCalledWith(jasmine.objectContaining({target: node}));
+    expect(obj.handler).toHaveBeenCalledWith(
+      jasmine.objectContaining({target: node}),
+    );
   });
 
-  it('should change the value of an input field in a component', function() {
-    var SomeComponent = React.createClass({
-      render: function() {
+  it('should change the value of an input field in a component', () => {
+    class SomeComponent extends React.Component {
+      render() {
         return (
@@ -436,4 +491,4 @@ describe('ReactTestUtils', function() {
         );
-      },
-    });
+      }
+    }
 
@@ -444,5 +499,8 @@ describe('ReactTestUtils', function() {
     };
-    spyOn(obj, 'handler').andCallThrough();
+    spyOn(obj, 'handler').and.callThrough();
     var container = document.createElement('div');
-    var instance = ReactDOM.render(<SomeComponent handleChange={obj.handler} />, container);
+    var instance = ReactDOM.render(
+      <SomeComponent handleChange={obj.handler} />,
+      container,
+    );
 
@@ -452,8 +510,10 @@ describe('ReactTestUtils', function() {
 
-    expect(obj.handler).toHaveBeenCalledWith(jasmine.objectContaining({target: node}));
+    expect(obj.handler).toHaveBeenCalledWith(
+      jasmine.objectContaining({target: node}),
+    );
   });
 
-  it('should throw when attempting to use ReactTestUtils.Simulate with shallow rendering', function() {
-    var SomeComponent = React.createClass({
-      render: function() {
+  it('should throw when attempting to use ReactTestUtils.Simulate with shallow rendering', () => {
+    class SomeComponent extends React.Component {
+      render() {
         return (
@@ -463,11 +523,14 @@ describe('ReactTestUtils', function() {
         );
-      },
-    });
+      }
+    }
+
     var handler = jasmine.createSpy('spy');
-    var shallowRenderer = ReactTestUtils.createRenderer();
-    var result = shallowRenderer.render(<SomeComponent handleClick={handler} />);
+    var shallowRenderer = new ReactShallowRenderer();
+    var result = shallowRenderer.render(
+      <SomeComponent handleClick={handler} />,
+    );
 
-    expect(() => ReactTestUtils.Simulate.click(result)).toThrow(
+    expect(() => ReactTestUtils.Simulate.click(result)).toThrowError(
       'TestUtils.Simulate expects a component instance and not a ReactElement.' +
-      'TestUtils.Simulate will not work if you are using shallow rendering.'
+        'TestUtils.Simulate will not work if you are using shallow rendering.',
     );
@@ -476,3 +539,3 @@ describe('ReactTestUtils', function() {
 
-  it('should not warn when simulating events with extra properties', function() {
+  it('should not warn when simulating events with extra properties', () => {
     spyOn(console, 'error');
@@ -481,10 +544,11 @@ describe('ReactTestUtils', function() {
 
-    var Component = React.createClass({
-      handleClick: function(e) {
+    class Component extends React.Component {
+      handleClick = e => {
         expect(e.clientX).toBe(CLIENT_X);
-      },
-      render: function() {
+      };
+
+      render() {
         return <div onClick={this.handleClick} />;
-      },
-    });
+      }
+    }
 
@@ -492,13 +556,13 @@ describe('ReactTestUtils', function() {
     var instance = ReactDOM.render(<Component />, element);
-    ReactTestUtils.Simulate.click(
-      ReactDOM.findDOMNode(instance),
-      {clientX: CLIENT_X}
-    );
-    expect(console.error.calls.length).toBe(0);
+    ReactTestUtils.Simulate.click(ReactDOM.findDOMNode(instance), {
+      clientX: CLIENT_X,
+    });
+    expect(console.error.calls.count()).toBe(0);
   });
 
-  it('can scry with stateless components involved', function() {
+  it('can scry with stateless components involved', () => {
     var Stateless = () => <div><hr /></div>;
-    var SomeComponent = React.createClass({
-      render: function() {
+
+    class SomeComponent extends React.Component {
+      render() {
         return (
@@ -509,4 +573,4 @@ describe('ReactTestUtils', function() {
         );
-      },
-    });
+      }
+    }
 
@@ -517,2 +581,20 @@ describe('ReactTestUtils', function() {
 
+  describe('Simulate', () => {
+    it('should set the type of the event', () => {
+      let event;
+      const stub = jest.genMockFn().mockImplementation(e => {
+        e.persist();
+        event = e;
+      });
+
+      const container = document.createElement('div');
+      const instance = ReactDOM.render(<div onKeyDown={stub} />, container);
+      const node = ReactDOM.findDOMNode(instance);
+
+      ReactTestUtils.Simulate.keyDown(node);
+
+      expect(event.type).toBe('keydown');
+      expect(event.nativeEvent.type).toBe('keydown');
+    });
+  });
 });
diff --git a/src/test/__tests__/reactComponentExpect-test.js b/src/test/__tests__/reactComponentExpect-test.js
index 494095a82..a522d43aa 100644
--- a/src/test/__tests__/reactComponentExpect-test.js
+++ b/src/test/__tests__/reactComponentExpect-test.js
@@ -17,5 +17,4 @@ var reactComponentExpect;
 
-describe('reactComponentExpect', function() {
-
-  beforeEach(function() {
+describe('reactComponentExpect', () => {
+  beforeEach(() => {
     React = require('React');
@@ -25,5 +24,5 @@ describe('reactComponentExpect', function() {
 
-  it('should detect text components', function() {
-    var SomeComponent = React.createClass({
-      render: function() {
+  it('should detect text components', () => {
+    class SomeComponent extends React.Component {
+      render() {
         return (
@@ -34,4 +33,4 @@ describe('reactComponentExpect', function() {
         );
-      },
-    });
+      }
+    }
 
diff --git a/src/test/createHierarchyRenderer.js b/src/test/createHierarchyRenderer.js
deleted file mode 100644
index 45aac35e2..000000000
--- a/src/test/createHierarchyRenderer.js
+++ /dev/null
@@ -1,82 +0,0 @@
-/**
- * Copyright 2013-present, Facebook, Inc.
- * All rights reserved.
- *
- * This source code is licensed under the BSD-style license found in the
- * LICENSE file in the root directory of this source tree. An additional grant
- * of patent rights can be found in the PATENTS file in the same directory.
- *
- * @providesModule createHierarchyRenderer
- */
-
-'use strict';
-
-var React = require('React');
-
-/**
- * Creates a render method that makes it easier to create, render, and inspect a
- * hierarchy of mock React component classes.
- *
- * A component class is created for each of the supplied render methods. Each
- * render method is invoked with the classes created using the render methods
- * that come after it in the supplied list of render methods.
- *
- *   var renderHierarchy = createHierarchyRenderer(
- *     function ComponentA(ComponentB, ComponentC) {...},
- *     function ComponentB(ComponentC) {...},
- *     function ComponentC() {...}
- *   );
- *
- * When the hierarchy is invoked, a two-dimensional array is returned. Each
- * array corresponds to a supplied render method and contains the instances
- * returned by that render method in the order it was invoked.
- *
- *   var instances = renderHierarchy(
- *     function(ComponentA[, ComponentB, ComponentC]) {
- *       ReactDOM.render(<ComponentA />, ...);
- *     })
- *   );
- *   instances[0][0]; // First return value of first render method.
- *   instances[1][0]; // First return value of second render method.
- *   instances[1][1]; // Second return value of second render method.
- *
- * Refs should be used to reference components that are not the return value of
- * render methods.
- *
- *   expect(instances[0][0].refs.X).toBe(...);
- *
- * NOTE: The component classes created for each render method are re-used for
- * each invocation of the hierarchy renderer. If new classes are needed, you
- * should re-execute `createHierarchyRenderer` with the same arguments.
- *
- * @param {array<function>} ...renderMethods
- * @return {function}
- */
-function createHierarchyRenderer(...renderMethods) {
-  var instances;
-  var Components = renderMethods.reduceRight(
-    function(ComponentsAccumulator, renderMethod, depth) {
-      var Component = React.createClass({
-        displayName: renderMethod.name,
-        render: function() {
-          instances[depth].push(this);
-          return renderMethod.apply(this, ComponentsAccumulator);
-        },
-      });
-      return [Component].concat(ComponentsAccumulator);
-    },
-    []
-  );
-  /**
-   * @param {function} renderComponent
-   * @return {array<array<*>>}
-   */
-  function renderHierarchy(renderComponent) {
-    instances = renderMethods.map(() => []);
-    renderComponent.apply(null, Components);
-    return instances;
-  }
-  return renderHierarchy;
-}
-
-module.exports = createHierarchyRenderer;
diff --git a/src/test/getTestDocument.js b/src/test/getTestDocument.js
index 8f681cd42..bd0c0e9cb 100644
--- a/src/test/getTestDocument.js
+++ b/src/test/getTestDocument.js
@@ -16,3 +16,4 @@ function getTestDocument(markup) {
   document.write(
-    markup || '<!doctype html><html><meta charset=utf-8><title>test doc</title>'
+    markup ||
+      '<!doctype html><html><meta charset=utf-8><title>test doc</title>',
   );
diff --git a/src/test/reactComponentExpect.js b/src/test/reactComponentExpect.js
index 090538702..7ba2ab1d8 100644
--- a/src/test/reactComponentExpect.js
+++ b/src/test/reactComponentExpect.js
@@ -9,3 +9,2 @@
  * @providesModule reactComponentExpect
- * @nolint
  */
@@ -33,3 +32,3 @@ function reactComponentExpect(instance) {
     ReactTestUtils.isCompositeComponent(instance),
-    'reactComponentExpect(...): instance must be a composite component'
+    'reactComponentExpect(...): instance must be a composite component',
   );
@@ -86,4 +85,3 @@ Object.assign(reactComponentExpectInternal.prototype, {
     this.toBeDOMComponent();
-    var renderedChildren =
-      this._instance._renderedChildren || {};
+    var renderedChildren = this._instance._renderedChildren || {};
     for (var name in renderedChildren) {
@@ -118,5 +116,3 @@ Object.assign(reactComponentExpectInternal.prototype, {
   toBeComponentOfType: function(constructor) {
-    expect(
-      this._instance._currentElement.type === constructor
-    ).toBe(true);
+    expect(this._instance._currentElement.type === constructor).toBe(true);
     return this;
@@ -131,3 +127,3 @@ Object.assign(reactComponentExpectInternal.prototype, {
       typeof this.instance() === 'object' &&
-      typeof this.instance().render === 'function'
+        typeof this.instance().render === 'function',
     ).toBe(true);
@@ -138,5 +134,3 @@ Object.assign(reactComponentExpectInternal.prototype, {
     this.toBeCompositeComponent();
-    expect(
-      this._instance._currentElement.type === constructor
-    ).toBe(true);
+    expect(this._instance._currentElement.type === constructor).toBe(true);
     return this;
@@ -189,4 +183,5 @@ Object.assign(reactComponentExpectInternal.prototype, {
       }
-      expect(this.instance().state[stateName])
-        .toEqual(stateNameToExpectedValue[stateName]);
+      expect(this.instance().state[stateName]).toEqual(
+        stateNameToExpectedValue[stateName],
+      );
     }
@@ -205,4 +200,5 @@ Object.assign(reactComponentExpectInternal.prototype, {
       }
-      expect(this.instance().props[propName])
-        .toEqual(propNameToExpectedValue[propName]);
+      expect(this.instance().props[propName]).toEqual(
+        propNameToExpectedValue[propName],
+      );
     }
@@ -221,4 +217,5 @@ Object.assign(reactComponentExpectInternal.prototype, {
       }
-      expect(this.instance().context[contextName])
-        .toEqual(contextNameToExpectedValue[contextName]);
+      expect(this.instance().context[contextName]).toEqual(
+        contextNameToExpectedValue[contextName],
+      );
     }
diff --git a/src/isomorphic/modern/types/__tests__/ReactFlowPropTypes-test.js b/src/umd/ReactDOMServerUMDEntry.js
similarity index 61%
rename from src/isomorphic/modern/types/__tests__/ReactFlowPropTypes-test.js
rename to src/umd/ReactDOMServerUMDEntry.js
index 986b91878..7a55540e2 100644
--- a/src/isomorphic/modern/types/__tests__/ReactFlowPropTypes-test.js
+++ b/src/umd/ReactDOMServerUMDEntry.js
@@ -1,3 +1,3 @@
 /**
- * Copyright 2014-present, Facebook, Inc.
+ * Copyright 2013-present, Facebook, Inc.
  * All rights reserved.
@@ -8,3 +8,3 @@
  *
- * @emails react-core
+ * @providesModule ReactDOMServerUMDEntry
  */
@@ -13,6 +13,4 @@
 
-describe('ReactFlowPropTypes', function() {
+var ReactDOMServer = require('ReactDOMServer');
 
-  // TODO: Test Flow integration and ensure that prop types works.
-
-});
+module.exports = ReactDOMServer;
diff --git a/src/umd/ReactDOMUMDEntry.js b/src/umd/ReactDOMUMDEntry.js
new file mode 100644
index 000000000..03a0318a1
--- /dev/null
+++ b/src/umd/ReactDOMUMDEntry.js
@@ -0,0 +1,34 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactDOMUMDEntry
+ */
+
+'use strict';
+
+var React = require('React');
+var ReactDOM = require('ReactDOM');
+
+var ReactDOMUMDEntry = ReactDOM;
+
+if (__DEV__) {
+  ReactDOMUMDEntry.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = {
+    // ReactPerf and ReactTestUtils currently only work with the DOM renderer
+    // so we expose them from here, but only in DEV mode.
+    ReactPerf: require('ReactPerf'),
+    ReactTestUtils: require('ReactTestUtils'),
+  };
+}
+
+// Inject ReactDOM into React for the addons UMD build that depends on ReactDOM (TransitionGroup).
+// We can remove this after we deprecate and remove the addons UMD build.
+if (React.addons) {
+  React.__SECRET_INJECTED_REACT_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMUMDEntry;
+}
+
+module.exports = ReactDOMUMDEntry;
diff --git a/src/umd/ReactUMDEntry.js b/src/umd/ReactUMDEntry.js
index dda648759..0a31c66f3 100644
--- a/src/umd/ReactUMDEntry.js
+++ b/src/umd/ReactUMDEntry.js
@@ -13,12 +13,21 @@
 
-var ReactDOM = require('ReactDOM');
-var ReactDOMServer = require('ReactDOMServer');
 var React = require('React');
 
+// `version` will be added here by the React module.
+var ReactUMDEntry = Object.assign(React, {
+  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
+    ReactCurrentOwner: require('ReactCurrentOwner'),
+  },
+});
 
-// `version` will be added here by ReactIsomorphic.
-var ReactUMDEntry = Object.assign({
-  __SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactDOM,
-  __SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactDOMServer,
-}, React);
+if (__DEV__) {
+  Object.assign(
+    ReactUMDEntry.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
+    {
+      // ReactComponentTreeHook should not be included in production.
+      ReactComponentTreeHook: require('ReactComponentTreeHook'),
+      getNextDebugID: require('getNextDebugID'),
+    },
+  );
+}
 
diff --git a/src/umd/ReactWithAddonsUMDEntry.js b/src/umd/ReactWithAddonsUMDEntry.js
index cf59eb9c8..102b3e68e 100644
--- a/src/umd/ReactWithAddonsUMDEntry.js
+++ b/src/umd/ReactWithAddonsUMDEntry.js
@@ -13,12 +13,22 @@
 
-var ReactDOM = require('ReactDOM');
-var ReactDOMServer = require('ReactDOMServer');
 var ReactWithAddons = require('ReactWithAddons');
 
+// `version` will be added here by the React module.
+var ReactWithAddonsUMDEntry = Object.assign(ReactWithAddons, {
+  __SECRET_INJECTED_REACT_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: null, // Will be injected by ReactDOM UMD build.
+  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
+    ReactCurrentOwner: require('ReactCurrentOwner'),
+  },
+});
 
-// `version` will be added here by ReactIsomorphic.
-var ReactWithAddonsUMDEntry = Object.assign({
-  __SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactDOM,
-  __SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactDOMServer,
-}, ReactWithAddons);
+if (__DEV__) {
+  Object.assign(
+    ReactWithAddonsUMDEntry.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,
+    {
+      // ReactComponentTreeHook should not be included in production.
+      ReactComponentTreeHook: require('ReactComponentTreeHook'),
+      getNextDebugID: require('getNextDebugID'),
+    },
+  );
+}
 
diff --git a/src/umd/shims/ReactAddonsDOMDependenciesUMDShim.js b/src/umd/shims/ReactAddonsDOMDependenciesUMDShim.js
new file mode 100644
index 000000000..a72615f75
--- /dev/null
+++ b/src/umd/shims/ReactAddonsDOMDependenciesUMDShim.js
@@ -0,0 +1,39 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactAddonsDOMDependenciesUMDShim
+ */
+
+'use strict';
+
+var ReactDOM;
+
+function getReactDOM() {
+  if (!ReactDOM) {
+    // This is safe to use because current module only exists in the addons build:
+    var ReactWithAddonsUMDEntry = require('ReactWithAddonsUMDEntry');
+    // This is injected by the ReactDOM UMD build:
+    ReactDOM =
+      ReactWithAddonsUMDEntry.__SECRET_INJECTED_REACT_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
+  }
+  return ReactDOM;
+}
+
+exports.getReactDOM = getReactDOM;
+
+if (__DEV__) {
+  exports.getReactPerf = function() {
+    return getReactDOM().__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
+      .ReactPerf;
+  };
+
+  exports.getReactTestUtils = function() {
+    return getReactDOM().__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
+      .ReactTestUtils;
+  };
+}
diff --git a/src/umd/shims/ReactComponentTreeHookUMDShim.js b/src/umd/shims/ReactComponentTreeHookUMDShim.js
new file mode 100644
index 000000000..82a5cf6e1
--- /dev/null
+++ b/src/umd/shims/ReactComponentTreeHookUMDShim.js
@@ -0,0 +1,18 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactComponentTreeHookUMDShim
+ */
+
+/* globals React */
+
+'use strict';
+
+var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
+
+module.exports = ReactInternals.ReactComponentTreeHook;
diff --git a/src/umd/shims/ReactCurrentOwnerUMDShim.js b/src/umd/shims/ReactCurrentOwnerUMDShim.js
new file mode 100644
index 000000000..79ef232b5
--- /dev/null
+++ b/src/umd/shims/ReactCurrentOwnerUMDShim.js
@@ -0,0 +1,18 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule ReactCurrentOwnerUMDShim
+ */
+
+/* globals React */
+
+'use strict';
+
+var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
+
+module.exports = ReactInternals.ReactCurrentOwner;
diff --git a/src/renderers/dom/shared/ReactDOMInstrumentation.js b/src/umd/shims/ReactUMDShim.js
similarity index 69%
rename from src/renderers/dom/shared/ReactDOMInstrumentation.js
rename to src/umd/shims/ReactUMDShim.js
index b290c6c55..84ae35c47 100644
--- a/src/renderers/dom/shared/ReactDOMInstrumentation.js
+++ b/src/umd/shims/ReactUMDShim.js
@@ -8,9 +8,9 @@
  *
- * @providesModule ReactDOMInstrumentation
+ * @providesModule ReactUMDShim
  */
 
-'use strict';
+/* globals React */
 
-var ReactDOMDebugTool = require('ReactDOMDebugTool');
+'use strict';
 
-module.exports = {debugTool: ReactDOMDebugTool};
+module.exports = React;
diff --git a/src/umd/shims/getNextDebugIDUMDShim.js b/src/umd/shims/getNextDebugIDUMDShim.js
new file mode 100644
index 000000000..2fb7ac255
--- /dev/null
+++ b/src/umd/shims/getNextDebugIDUMDShim.js
@@ -0,0 +1,18 @@
+/**
+ * Copyright 2013-present, Facebook, Inc.
+ * All rights reserved.
+ *
+ * This source code is licensed under the BSD-style license found in the
+ * LICENSE file in the root directory of this source tree. An additional grant
+ * of patent rights can be found in the PATENTS file in the same directory.
+ *
+ * @providesModule getNextDebugId
+ */
+
+/* globals React */
+
+'use strict';
+
+var ReactInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
+
+module.exports = ReactInternals.getNextDebugID;
